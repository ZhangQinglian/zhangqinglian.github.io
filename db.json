{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/sidebar.js","path":"js/sidebar.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/addtoany.js","path":"js/third-party/addtoany.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","path":"js/third-party/analytics/matomo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","path":"js/third-party/tags/wavedrom.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":0,"renderable":1},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":0},{"_id":"source/img/about.jpg","path":"img/about.jpg","modified":0,"renderable":0},{"_id":"source/img/algolia.svg","path":"img/algolia.svg","modified":0,"renderable":0},{"_id":"source/img/archive_banner.jpg","path":"img/archive_banner.jpg","modified":0,"renderable":0},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":0},{"_id":"source/img/comment_bg.png","path":"img/comment_bg.png","modified":0,"renderable":0},{"_id":"source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":0},{"_id":"source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":0},{"_id":"source/img/icp.png","path":"img/icp.png","modified":0,"renderable":0},{"_id":"source/img/index.jpg","path":"img/index.jpg","modified":0,"renderable":0},{"_id":"source/img/link_banner.jpg","path":"img/link_banner.jpg","modified":0,"renderable":0},{"_id":"source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":0},{"_id":"source/img/post.jpg","path":"img/post.jpg","modified":0,"renderable":0},{"_id":"source/img/post_loadding.svg","path":"img/post_loadding.svg","modified":0,"renderable":0},{"_id":"source/music/file/lrc/bushuo.lrc","path":"music/file/lrc/bushuo.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/goodbye.lrc","path":"music/file/lrc/goodbye.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/jiandan.lrc","path":"music/file/lrc/jiandan.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/kanjian.lrc","path":"music/file/lrc/kanjian.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/lastdance.lrc","path":"music/file/lrc/lastdance.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/mengnalisha.lrc","path":"music/file/lrc/mengnalisha.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/mingbai.lrc","path":"music/file/lrc/mingbai.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/niujiaojian.lrc","path":"music/file/lrc/niujiaojian.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/sanbuqu.lrc","path":"music/file/lrc/sanbuqu.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/sheng_ru_xia_hua.lrc","path":"music/file/lrc/sheng_ru_xia_hua.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/xinqiang.lrc","path":"music/file/lrc/xinqiang.lrc","modified":0,"renderable":0},{"_id":"source/music/file/lrc/zaishushangchangge.lrc","path":"music/file/lrc/zaishushangchangge.lrc","modified":0,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"4822c6d40c444124c5a1166a3efcb540bd8b2aac","modified":1724210179778},{"_id":"source/.DS_Store","hash":"cc75fbdb977a72e3c33a32b977ec965c1597d5c5","modified":1724210179777},{"_id":"source/404/index.md","hash":"649f2386b36cefbba0409c928072de011ff0b49b","modified":1724210179778},{"_id":"source/bookmark/index.md","hash":"3ae139899eba5f34dcfcbd2a68a7527dd4404645","modified":1724210179787},{"_id":"source/_data/link.yml","hash":"11faecce47bdeccb67f24b6f7b5f8349beee5012","modified":1724210179778},{"_id":"source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1724210179788},{"_id":"source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1724210179796},{"_id":"source/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1724210179797},{"_id":"source/img/avatar.jpg","hash":"e8528ffc7bf4c5e89e9e26efc3205e0280575c09","modified":1724210179797},{"_id":"source/img/favicon.ico","hash":"546668313d006a1bca09c7411c30f9a8a19abb03","modified":1724210179797},{"_id":"source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1724210179800},{"_id":"source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1724210179799},{"_id":"source/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1724210179807},{"_id":"source/link/index.md","hash":"c11439c2093ebe9e2d12ebac8bfb2c1f3f6ee8af","modified":1724210179807},{"_id":"source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1724210179806},{"_id":"source/_posts/Educational-experience-2.md","hash":"e54db969982e4daa8ec795d95ad0b79a6a81e395","modified":1724210179779},{"_id":"source/_posts/Educational-experience-1.md","hash":"0e12a6cf36717543726f8428c8953c2c4a54ed59","modified":1724210179778},{"_id":"source/music/index.md","hash":"f5e0f6a91756c1f8051778395f84a82b675cd83c","modified":1724210179809},{"_id":"source/_posts/andrdoi-arch-livedata.md","hash":"38fd889fb37895fc4664cc7c814786f0b5a51b06","modified":1724210179779},{"_id":"source/_posts/android-arch-lifecycle.md","hash":"b3235492f4169ecd7267b04c2ac001bce6b72e64","modified":1724210179780},{"_id":"source/_posts/android-glsurfaceview-overview.md","hash":"b42572b020658cd56153c37ea8158880a18f42eb","modified":1724210179781},{"_id":"source/_posts/GIF-and-LWZ.md","hash":"780ca56f8af480ff416eae8cff7b6a2855b0ebf2","modified":1724210179779},{"_id":"source/_posts/android-opengl-01.md","hash":"552fd348caee33e9a3ddc5731c5d6495254e8a02","modified":1724210179781},{"_id":"source/_posts/android-arch-room.md","hash":"00f6af9d3f94a8362f8c7ec4f201d58d6ae2952d","modified":1724210179780},{"_id":"source/_posts/android-arch-viewmodel.md","hash":"84ac16657ec39c84f11cba04daf7b6ba67440fab","modified":1724210179781},{"_id":"source/_posts/android-opengl-02.md","hash":"a938051dff0020e4032561e4e772081a56baafad","modified":1724210179781},{"_id":"source/_posts/android-player.md","hash":"210d3eb820873282443e5d05b4917c112e6e6234","modified":1724210179782},{"_id":"source/_posts/array-list-in-c.md","hash":"c9e052ebcd17732a0c3e7cf0f520ed7d85d11b5e","modified":1724210179782},{"_id":"source/_posts/android-opengl-es-triangle.md","hash":"e49b933d1156d5873cbb4ffbf6fc82cf4782271a","modified":1724210179782},{"_id":"source/_posts/android-opengl-es-and-EGL.md","hash":"904ac57a83722c8a138ad731c78f9cd2d2fd56fd","modified":1724210179782},{"_id":"source/_posts/android-arch-intro.md","hash":"64d0db72b5ddf82845bbe0d5cb4350ff97751fa6","modified":1724210179780},{"_id":"source/_posts/dart-event-loop.md","hash":"d58093ea2617b22d76f265fc4754bcb85e401033","modified":1724210179783},{"_id":"source/_posts/egl-1-4-quick-reference-card.md","hash":"c37e8640c54c9f2d762f9e47fab37c18b0c13480","modified":1724210179784},{"_id":"source/_posts/flutter-livedata.md","hash":"7f3f518f38c50ff808fa6d644c69ab20b18d6531","modified":1724210179784},{"_id":"source/_posts/dart-thread-model.md","hash":"a7a6176ac77678e5a672999148aa0a288db9c874","modified":1724210179783},{"_id":"source/_posts/diy-code.md","hash":"9102829873e172411c32f118230445ed1582ce58","modified":1724210179783},{"_id":"source/_posts/go-home.md","hash":"6b4b6a4fcaea50be4baabb949653a3b283a31a5a","modified":1724210179785},{"_id":"source/_posts/last-dance.md","hash":"a7b2068cbbbcece68f1f0b010c7c3a88803191b7","modified":1724210179785},{"_id":"source/_posts/flutter-localizations.md","hash":"2fadba3981cb85c4e993e45c289f557fae004e01","modified":1724210179784},{"_id":"source/_posts/mac-practices.md","hash":"bf04017a227fcfccc2bd1aa00601bab988beb1b9","modified":1724210179786},{"_id":"source/_posts/gif-bytes-format.md","hash":"9bebb75518782395572d11fe5511e4befdfb406b","modified":1724210179784},{"_id":"source/_posts/tcpip-overview.md","hash":"f4056edd4b1d00533dc6cc712c1c4ead64ea9e05","modified":1724210179786},{"_id":"source/_posts/git-intro.md","hash":"d93b08a57cfc35487b63b4263e053e51295a34d8","modified":1724210179785},{"_id":"source/_posts/tiktok-app.md","hash":"89d6b13b5698dc9c2281b43cf4e4f13c367539e3","modified":1724210179786},{"_id":"source/_posts/living-optimize.md","hash":"bcb3b6a32c879889a0e714aa9a157b5cc71189f0","modified":1724210179786},{"_id":"source/_posts/upload-jcenter.md","hash":"325f00d0be684b61aa7207cbe5ca48cb0e3008aa","modified":1724210179787},{"_id":"source/_posts/welcome.md","hash":"dad895468de83a05e6cbc0434adfcd27c49a0d2a","modified":1724210179787},{"_id":"source/_posts/xiangsuhua20160806.md","hash":"62c00f2efb593f795703e2033acfbc00d3c4d32d","modified":1724210179787},{"_id":"source/music/file/lrc/bushuo.lrc","hash":"ba7b9a89898a0e52c8537a0d0800016c375a61ce","modified":1724210179807},{"_id":"source/_posts/last-dance/lastdance.lrc","hash":"ad992a5264b4351678f45308f87ad26f7351755e","modified":1724210179786},{"_id":"source/music/file/lrc/goodbye.lrc","hash":"84000fe7591e49bd2290f5ddc93bd9cbb80625b1","modified":1724210179807},{"_id":"source/tags/index.md","hash":"9fa172a570d213cc680dd777344a9abe742257ef","modified":1724210179810},{"_id":"source/music/file/lrc/jiandan.lrc","hash":"10252f2f6ae51c45b666d0df3ced905a2f47a345","modified":1724210179807},{"_id":"source/music/file/lrc/mengnalisha.lrc","hash":"35a877bb0f3b926d3c45bde9d79296a4a54936c6","modified":1724210179808},{"_id":"source/music/file/lrc/kanjian.lrc","hash":"df1e654842c3b16eee1de299df503aa7a3969792","modified":1724210179808},{"_id":"source/music/file/lrc/mingbai.lrc","hash":"5d7285e462b4cfd356322801c2e98d3e92596011","modified":1724210179808},{"_id":"source/music/file/lrc/lastdance.lrc","hash":"ad992a5264b4351678f45308f87ad26f7351755e","modified":1724210179808},{"_id":"source/music/file/lrc/sanbuqu.lrc","hash":"4fefff0b83fae016b9f04dc2abdb42c28e0586b6","modified":1724210179809},{"_id":"source/music/file/lrc/niujiaojian.lrc","hash":"1849878ed067894c730cb1f547c8fc7436cab900","modified":1724210179808},{"_id":"source/music/file/lrc/sheng_ru_xia_hua.lrc","hash":"2cd7eac794584f9f17d71d244217f106103f11f7","modified":1724210179809},{"_id":"source/music/file/lrc/zaishushangchangge.lrc","hash":"f2d4de02d8be368cd0503b0ce89ddbd2659a38b9","modified":1724210179809},{"_id":"source/_posts/jvm-preview.md","hash":"5b6b84f1f6bb554a83a4750d36a46dcb8d1db94e","modified":1724210179785},{"_id":"source/music/file/lrc/xinqiang.lrc","hash":"dda601b580c816012005f1c525b67049c41439d4","modified":1724210179809},{"_id":"source/img/archive_banner.jpg","hash":"8aba5eac9728e07052257b5638c4e98c75bd7b3d","modified":1724210179797},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1724210423738},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1724210423738},{"_id":"themes/next/_vendors.yml","hash":"3907151d0f181d5be0b4778b4f930015296c475a","modified":1724210423753},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1724210423751},{"_id":"themes/next/.stylelintrc","hash":"9346cca6a24256a79f433670da634e8329f9a2a9","modified":1724210423752},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1724210423752},{"_id":"themes/next/package.json","hash":"655accf88e80dfdd525042da1d65114b47dcb52a","modified":1724210423777},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1724210423753},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1724210423777},{"_id":"themes/next/README.md","hash":"20d3aab17b7d9b7ab537800a5ee932af8438664a","modified":1724210423752},{"_id":"themes/next/eslint.config.js","hash":"14b5636ce297048ea6835f7db4b1e4cf625a2c79","modified":1724210423756},{"_id":"themes/next/.githooks/install.js","hash":"0977cb57c8b91ea166b5bbc481e4ddeaf77e9b18","modified":1724210423738},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1724209301136},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"e78ec4eb6ce49a44ec321c49424ee0a0c1846537","modified":1724210423738},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1724210423746},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1724210423739},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"2296426023773991b0c48c7fffeb790baca59b19","modified":1724210423745},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1724210423746},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"22d7dd8661cb2f22ff271ee96e444457814c66fd","modified":1724210423747},{"_id":"themes/next/.github/release.yml","hash":"112310b81f959747f8eaafc2ca2150e1dcf916d8","modified":1724210423747},{"_id":"themes/next/.github/labeler.yml","hash":"b7f67daa031c535940be82ea96f0fb9db59e1022","modified":1724210423747},{"_id":"themes/next/_config.yml","hash":"df15ee5204757684b0c22877d3cf4e8ba7d3686d","modified":1724210423753},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1724210423754},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1724210423754},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1724210423756},{"_id":"themes/next/languages/ar.yml","hash":"7d0f39e8684284a04bb9808521c87fecda8bd131","modified":1724210423756},{"_id":"themes/next/languages/de.yml","hash":"79b37df731c29665dee6cd7c90d278e1edfb6e24","modified":1724210423757},{"_id":"themes/next/languages/eo.yml","hash":"e34bb33ae827bf2f0727088599a73bc64bdad1b0","modified":1724210423757},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1724210423754},{"_id":"themes/next/languages/en.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1724210423757},{"_id":"themes/next/languages/default.yml","hash":"ba0fd79a2b1d8db01a034180556061745965ff05","modified":1724210423757},{"_id":"themes/next/languages/fa.yml","hash":"f3ffc444599f4ac92d62e9ed00a1490ebc277d70","modified":1724210423758},{"_id":"themes/next/languages/es.yml","hash":"dffc63ef42e1266b88e0acf08994fd17a9908d53","modified":1724210423758},{"_id":"themes/next/languages/bn.yml","hash":"564bed75da6e05b11dce6164508f97a15e2fb6c2","modified":1724210423757},{"_id":"themes/next/languages/ja.yml","hash":"543222bfc516aab6c33e8534f807972ecb8943a9","modified":1724210423759},{"_id":"themes/next/languages/ko.yml","hash":"d345a303310c8a5f4836c3683f3580f861ebd1b4","modified":1724210423759},{"_id":"themes/next/languages/nl.yml","hash":"3cb3687696635ec71b4ca40c5fc43b56acc8843e","modified":1724210423759},{"_id":"themes/next/languages/fr.yml","hash":"8ac44e58f71a38b7697a2f7f98a6971ed818cb5b","modified":1724210423758},{"_id":"themes/next/languages/id.yml","hash":"929df147f4f17d638b07de5fe52ca13e2549ab1c","modified":1724210423758},{"_id":"themes/next/languages/it.yml","hash":"16d716ecfd748def2f6486ef5a82d0ab7ceb4890","modified":1724210423758},{"_id":"themes/next/languages/tr.yml","hash":"a57e4ed089b893a95f5e1ecff17ce625165f4d46","modified":1724210423760},{"_id":"themes/next/languages/pt-BR.yml","hash":"76b8576ce228d540a16b1f0af5af2cce20923194","modified":1724210423759},{"_id":"themes/next/languages/vi.yml","hash":"7ebcba5e1128784195e4681dffc9d34c4e873fec","modified":1724210423761},{"_id":"themes/next/languages/ru.yml","hash":"c6d8de0ff7d8148d09993257cfd3b7aca755696c","modified":1724210423760},{"_id":"themes/next/languages/zh-CN.yml","hash":"741d7efe0262c9cdc2c648014b55599665d90f6b","modified":1724210423761},{"_id":"themes/next/languages/th.yml","hash":"6829e998b39f8f143e20b276bb1f62d95a29de58","modified":1724210423760},{"_id":"themes/next/languages/zh-TW.yml","hash":"4695c87d6b81b3a23d16ad6513d9eaa925f8d8ad","modified":1724210423761},{"_id":"themes/next/languages/pt.yml","hash":"70de366e10ea584ba039d40d6b35ac97f93454ad","modified":1724210423759},{"_id":"themes/next/languages/uk.yml","hash":"ff537047b4b4c3ca9a7b64fa7f428a9942751eeb","modified":1724210423761},{"_id":"themes/next/languages/zh-HK.yml","hash":"88ea50eeb9097ab4a87a44981a102d8594feb064","modified":1724210423761},{"_id":"themes/next/layout/_layout.njk","hash":"fc0a45112f2dcfc2642404e8934ea32a793c3bd7","modified":1724210423762},{"_id":"themes/next/languages/si.yml","hash":"2d712eedf3f60d04d36c3108cf5a12e2a52e875c","modified":1724210423760},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1724210423775},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1724210423776},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1724210423776},{"_id":"themes/next/languages/tk.yml","hash":"511726054873f6f8d7ce0d2e803f6731de0ddbe7","modified":1724210423760},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1724210423776},{"_id":"themes/next/layout/post.njk","hash":"0bfce9f133f501a9a4837257e3b862b3bbca15be","modified":1724210423776},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.yml","hash":"3f19cbf0c2b2fee6bf3788870b842c9ccc1425ca","modified":1724210423743},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.yml","hash":"fbc3062cd4591c8329fab9db72803746f0d11920","modified":1724210423744},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1724210423812},{"_id":"themes/next/.github/workflows/codeql.yml","hash":"70a8975c47f4334ebcdd4e543b940346940054d6","modified":1724210423748},{"_id":"themes/next/layout/page.njk","hash":"af6d7570621be760536c216a56d74e40a1cceae2","modified":1724210423776},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1724210423744},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44eb8b9706b31a4917cacddde2b3aca4ff82955b","modified":1724210423750},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"48e6e1e1406705379112766f4fd8388e1c53b281","modified":1724210423751},{"_id":"themes/next/.github/workflows/tester.yml","hash":"9a8c366c8a0bf0e0b92035fedd93e8979adaa560","modified":1724210423751},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.yml","hash":"10eca518b91a19984f6a5a912d41222042f61d63","modified":1724210423745},{"_id":"themes/next/.github/workflows/linter.yml","hash":"1d3d8fe53e9350e35d8349a19f65664789665e54","modified":1724210423751},{"_id":"themes/next/.github/workflows/lock.yml","hash":"275650a678684523f37187d0532f96aa0f49ce00","modified":1724210423751},{"_id":"themes/next/docs/zh-CN/README.md","hash":"287f57dbdfd23341800a0ff310f3474272b9dcc8","modified":1724210423755},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1724210423755},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"12a6631617695504d5cf2a94b57d87bd331bef6f","modified":1724210423755},{"_id":"themes/next/layout/_macro/post.njk","hash":"952449064fcb6a5cefc281b585f9149809f857f1","modified":1724210423762},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"547c62ab14d9e05d2d9116db9048a677fbe1fb6d","modified":1724210423762},{"_id":"themes/next/layout/_partials/comments.njk","hash":"d0c470b0f6690aa217e9ada848c5e2e73fb27c6f","modified":1724210423763},{"_id":"themes/next/docs/ru/README.md","hash":"0be2d7a75ffc3d9a963cf89a13bd1b50579f8304","modified":1724210423755},{"_id":"themes/next/layout/_partials/footer.njk","hash":"fbf8232cacf0df87e88e74860be66c9f86018302","modified":1724210423763},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1724210423765},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"bc719473ed5948ab6859449d60b8d36cfc1542b4","modified":1724210423766},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"d83fb59f02c5e6630a7770401a05c02f6f07358b","modified":1724210423768},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"313637fe3569f98fd926e8cd0fcc75d098eb6e6e","modified":1724210423762},{"_id":"themes/next/layout/_scripts/index.njk","hash":"51704a2eadb0d363762ebf2e44994696e0843e40","modified":1724210423768},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1724210423768},{"_id":"themes/next/layout/_third-party/addtoany.njk","hash":"ef64c6bfb8540cd874701236b9be47db2496e98e","modified":1724210423769},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1724210423772},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1724210423780},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1724210423780},{"_id":"themes/next/scripts/filters/minify.js","hash":"2063aaa1db448ebcf7b0fdbbc54d3991a368bbd3","modified":1724210423780},{"_id":"themes/next/scripts/events/index.js","hash":"bd9ea82376cd87df611ea3ae077875c7c595a3df","modified":1724210423777},{"_id":"themes/next/scripts/helpers/engine.js","hash":"049b1a0b66563e39f68710bb576a8c7342ae749c","modified":1724210423781},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1724210423781},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1724210423773},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"25bb3ec3c7c456aa1d1650eb139605b7df7394eb","modified":1724210423781},{"_id":"themes/next/layout/_third-party/index.njk","hash":"dfd7cdd6ba89f8c3deabc27726c7a350cadafd11","modified":1724210423772},{"_id":"themes/next/scripts/filters/post.js","hash":"fdc8a0af90035e89c3fcb754a0eb189b8951a2bc","modified":1724210423781},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"af3946a595f997eb43d9af87428e4898c9acbc82","modified":1724210423782},{"_id":"themes/next/scripts/helpers/next-paginator.js","hash":"e86c764b546e4fbb87970cabc4135a56f9ef9fe1","modified":1724210423782},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1724210423773},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1724210423782},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1724210423782},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"f57f7e09eb6220f681fa8385082b0960502ce5c4","modified":1724210423783},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1724210423782},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1724210423783},{"_id":"themes/next/scripts/tags/index.js","hash":"1f6aba7820f1fb58b61969485148db21846e1aa9","modified":1724210423783},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1724210423784},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1724210423783},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"7d7bbc4a9970bd4c5449bc71b94364a8ec61e5d2","modified":1724210423783},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1724210423784},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"6281d47c1de98eb38f3aa0f6df29bbb19d412173","modified":1724210423782},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1724210423784},{"_id":"themes/next/scripts/helpers/navigation.js","hash":"78107021101553c3d23e89290f7530b60cf4aa86","modified":1724210423781},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1724210423783},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1724210423803},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1724210423803},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1724210423803},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1724210423803},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1724210423804},{"_id":"themes/next/scripts/tags/wavedrom.js","hash":"b44dfeeb58b41945d469141787f3dbce4b117d08","modified":1724210423784},{"_id":"themes/next/source/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1724210423804},{"_id":"themes/next/source/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1724210423804},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1724210423804},{"_id":"themes/next/source/js/motion.js","hash":"3864e56a829b698b98ec8d93b8916271ba6fd015","modified":1724210423805},{"_id":"themes/next/source/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1724210423805},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1724210423804},{"_id":"themes/next/source/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1724210423805},{"_id":"themes/next/source/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1724210423806},{"_id":"themes/next/source/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1724210423806},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1724210423811},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1724210423811},{"_id":"themes/next/source/js/utils.js","hash":"b2c0fd95770e58c25c9f99e1d66fe0e625e3cdab","modified":1724210423811},{"_id":"themes/next/test/helpers/next-url.js","hash":"90092dc7e78100bc1ebd1f8ffe4d1543f48e76a8","modified":1724210423812},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1724210423805},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1724210423812},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1724210423812},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1724210423784},{"_id":"themes/next/source/css/_mixins.styl","hash":"bbeae369eaba9a2565fc359a5b79184d21bdd167","modified":1724210423798},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1724210423812},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1724210423813},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1724210423813},{"_id":"themes/next/source/css/noscript.styl","hash":"dadc81256afb127b77eac6763d5ee0ec9c77f0a3","modified":1724210423803},{"_id":"themes/next/test/tags/mermaid.js","hash":"ea8e28bb5219417bddb97c5685a7f705ee2c8a80","modified":1724210423813},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1724210423813},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1724210423813},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1724210423814},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1724210423814},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1724210423814},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1724210423813},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1724210423814},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"dd9c4c03e99dfde0dfb8edefcb2c933f2f560efc","modified":1724210423764},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1724210423764},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"5388b157bba4a40b9312f4a45c6678974ccf0837","modified":1724210423763},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"41a8b0cc16f60fa085cb719d07216d86b6bc4bf8","modified":1724210423764},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"8da52a144060db1a0a088ccb2e6cc8376d1fce70","modified":1724210423763},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"ee6fc2f111572d3eeab0a2fecbb2d6b3e37ab26b","modified":1724210423764},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"bfff923526d6800218f08dba6ce0bbf5c17755fd","modified":1724210423766},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"c1e33b4889f75acc490af3c8bde0ec56c518ff41","modified":1724210423766},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1724210423767},{"_id":"themes/next/source/css/main.styl","hash":"921a58577f411cf4eb5cfd66db0a241f8f88578c","modified":1724210423803},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"06480d8ec5f0b87eafd47f082f07968d7282dd5c","modified":1724210423764},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"e0986db00a0201dd3c60570f964829c84ba5bc68","modified":1724210423767},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1724210423765},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1724210423765},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"89825e75cc45e9709fa6ba89883669eedaff6f46","modified":1724210423765},{"_id":"themes/next/layout/_partials/post/post-share.njk","hash":"16696990e4ce65fc8db18c4635082a5d5d06ff07","modified":1724210423767},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"bc5708e38b6070dff0cab6bf9480971017ce4dda","modified":1724210423768},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1724210423766},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"0f4bc8e257da60f77c0c1738607b2bde55810684","modified":1724210423766},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"6ad43135bd3aecf933ffdd750763e27ade36f97c","modified":1724210423768},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"a5b8297c2c383124dd6a56e256ecc0c0dcf489be","modified":1724210423769},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1724210423769},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1724210423769},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"e8b8a7c41e9ec612d0c0c73419529d55d1c16256","modified":1724210423767},{"_id":"themes/next/layout/_third-party/analytics/matomo.njk","hash":"4e89648a8ec8194c5823064cbca39c938a799006","modified":1724210423770},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1724210423769},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"f900306497b133e8b098bd9f4b96b93d1d96c185","modified":1724210423770},{"_id":"themes/next/layout/_third-party/analytics/plausible.njk","hash":"ef9f2bb7110507f1c4336800af9157d5fa9765bd","modified":1724210423770},{"_id":"themes/next/layout/_third-party/analytics/umami.njk","hash":"3343750682fbd8535e50f8129be3003ad26015b4","modified":1724210423770},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1724210423771},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1724210423771},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1724210423771},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1724210423771},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"9dc00fcb0a05899f048eace9f9160b78956655d5","modified":1724210423770},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1724210423772},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1724210423772},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1724210423772},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1724210423773},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"1ebf658690468ea197bdd0416eb7cfa4bd0b083a","modified":1724210423773},{"_id":"themes/next/scripts/events/lib/config.js","hash":"9ec51eb61f7fee612ffc5252f489003a0fa301fc","modified":1724210423777},{"_id":"themes/next/scripts/events/lib/navigation.js","hash":"dd3562686d95a50375e6fd32e717ccb0d99c1e3d","modified":1724210423778},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1724210423773},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"8a8f752260be5b8098393f9879b61ffe904465e8","modified":1724210423777},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"5942feb3f31ed3480bf50b0f5a4a305b5bdca3d6","modified":1724210423778},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"e2b4a9d6b08155735ec336eedc506763d5671821","modified":1724210423778},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1724210423771},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1724210423774},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1724210423775},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"41b28f05e6233fb37700f7151f55868be10a0965","modified":1724210423774},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1724210423774},{"_id":"themes/next/layout/_third-party/tags/wavedrom.njk","hash":"02202bf563fb5eedde2ccad4d6c5b9109d30a703","modified":1724210423775},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1724210423775},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1724210423772},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"5798cfc8f63665031dd3e01debed051628cec319","modified":1724210423778},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"19a402a225c31edffc50f202a14e0d582d3db23e","modified":1724210423778},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1724210423777},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1724210423779},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"a600a98e7436edeb31e291abca359885567df3c9","modified":1724210423779},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1724210423774},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1724210423779},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1724210423779},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1724210423780},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1724210423780},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1724210423779},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1724210423775},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1724210423808},{"_id":"themes/next/source/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1724210423806},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1724210423774},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1724210423802},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"2c800eaab6c613e5d091be2111aaa786641aa0c2","modified":1724210423802},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"20d5c6aa136bbb55e03906d98ee90ad3fbaa80a7","modified":1724210423802},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1724210423809},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1724210423809},{"_id":"themes/next/source/css/_variables/base.styl","hash":"8b4100f316e9924f2410802615107130588d721e","modified":1724210423802},{"_id":"themes/next/source/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1724210423807},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"879b49f693af0c04c285b2dd0c9cccaf77347b7c","modified":1724210423802},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1724210423806},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1724210423809},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1724210423809},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1724210423807},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1724210423807},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1724210423807},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1724210423807},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1724210423808},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1724210423808},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1724210423807},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1724210423808},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1724210423808},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"81a24bd19554b5bd148975026db64338d8710774","modified":1724210423810},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1724210423811},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1724210423810},{"_id":"themes/next/source/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1724210423811},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1724210423810},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1724210423810},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"35401af771f43dc633dd99a92ebf5295cd0b158a","modified":1724210423810},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1724210423806},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"b8445c828d78a38e2de50bdc86b3bff66285ea0f","modified":1724210423785},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"2298e521253b3bf376a2412271bc2a7d305051f3","modified":1724210423785},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1724210423792},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1724210423794},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1724210423788},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1724210423806},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1724210423794},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"1dbf2c339adcd27026c3a2ded32ee91ce08cea26","modified":1724210423792},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1724210423796},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1724210423795},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"69c66aab4651e2e7ae9e65f08600144970648c60","modified":1724210423798},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9dfe853c901bdc52fc950bacdf15484dbb9bf140","modified":1724210423798},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"dafc6d23c80d6fe3e55a7711e94210d2479b629a","modified":1724210423798},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1724210423794},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f23c53e32d140091b819be2603d1afbbb5d66933","modified":1724210423799},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1724210423795},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"fa4fd8f76464e214fb7318f325b13c2b62f4b478","modified":1724210423799},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1724210423799},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"485d23ccb42c0d0c8ead7ea8930dd3e06d79a285","modified":1724210423799},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"e31f6adbb22a451f07e4661cff9a2f12e4e99a36","modified":1724210423800},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"c29a827e82d2820ed8977c92994da73721200fac","modified":1724210423800},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6569a6640f79d247a8235b3914772c0e2f99ead2","modified":1724210423800},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1724210423800},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"dc03835e42d82eaf2633cf3b627990ad3e1f5967","modified":1724210423801},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1724210423800},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"f4228c759db4a650c8d38745c2edd1dc83c45687","modified":1724210423795},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"a92c4eb16bdb7806079467eb022ccf193bb0f794","modified":1724210423801},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1724210423801},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"3fbfab591f280e2e7f3b0265901c93bc4bd137ed","modified":1724210423799},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bc0b1b8312ec2e076c802419d603e382a1c32232","modified":1724210423801},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1724210423801},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1724210423785},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"51a97a33879289904cb523ddc2d88b5b0c60fa72","modified":1724210423785},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"098d4bd034e986fcf7e443eac4fc2193935461b7","modified":1724210423786},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1724210423786},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1724210423786},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1724210423786},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"809bab3414b1eb1ae44444eb821126868f764414","modified":1724210423787},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1724210423787},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"1191f1bfa5c43e54be8e5b3cc0d802984e161747","modified":1724210423787},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"1ecfd64507954810b07a9d21fb5305b5378feda0","modified":1724210423787},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"56d5b7ff73f466c9ae54f7204ae899281295d749","modified":1724210423786},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"ebfba158a0a4af3d1dabcacbc58986664de52140","modified":1724210423788},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8f094c4ac17e2ab45569b12d157747f9c7333c12","modified":1724210423789},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"54d12e2c5d9982f7b9e5b23be5133954a8514e9d","modified":1724210423789},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1724210423788},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1724210423789},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"11497388f124bfbb4001495a67d3629a9f618405","modified":1724210423787},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1724210423790},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"877a537d5b95beb048142e4fdee6f17e6ef9c7bb","modified":1724210423788},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1724210423790},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"549541d3a62d296427426fde8976289cb7ee2cc4","modified":1724210423801},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"6e0d0796ef7fbbb62ffdfb448753a850de82c74f","modified":1724210423791},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1724210423791},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"4e967702cf4c637132346bc74ec8854426f1a68c","modified":1724210423790},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"be60b8dacd4dc9d2b1b68982dc4f0c5325b9a315","modified":1724210423789},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"a3dd3edea9c01b66b28a8367185269b9dcc3bdee","modified":1724210423791},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a851e9d5aefcd027c95eeb323860b6da70f202d1","modified":1724210423791},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"0944dc38b11e89b472a17607ef049393f2a0439f","modified":1724210423792},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1724210423791},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"46eece42510c2c89bb9209afb0262ad76a4b0b36","modified":1724210423793},{"_id":"themes/next/source/css/_common/outline/sidebar/related-posts.styl","hash":"b05908f04ef95f2d91e6eba89b12411c378d050f","modified":1724210423792},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"b47fb36915962309553ff7fb1782341585ed2b76","modified":1724210423788},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1724210423793},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"c6a27beb3f741211a14576026f3b4cfc44cc6407","modified":1724210423793},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1724210423794},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"24752d145c6fb8f5344dca9c7b9640839c02e009","modified":1724210423793},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"c2e354a565c8c1b32bd0ceacc972b17982758b67","modified":1724210423793},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"f634f94828620e88c3f5a8db56f7944f6ba232b0","modified":1724210423794},{"_id":"themes/next/source/css/_common/scaffolding/highlight/fold.styl","hash":"42a0b65491ad85438596b3fe0b7f23973e4cef34","modified":1724210423795},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"0847400d8579b0a2dd1bf662c78954c10adf2680","modified":1724210423792},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1724210423796},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1724210423796},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"22cd37bd5df9972d5074710896aba4424ad5161c","modified":1724210423796},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"138f78147bc6bd6005f329ada34dc79b7625542d","modified":1724210423795},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1724210423796},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1724210423796},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"98d4c20aff0f0fcfe1824017fb06ab21ef0d218e","modified":1724210423797},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1724210423797},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"33dd6ad015dde65fd46f34961655442e8e82b52e","modified":1724210423797},{"_id":"themes/next/source/css/_common/scaffolding/tags/wavedrom.styl","hash":"af113411ad9cca7674177be36af8dd399680834d","modified":1724210423797},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1724210423797},{"_id":"source/img/post.jpg","hash":"8869367a07479aff08fdc629124ab376a7e8ca62","modified":1724210179806},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"741566d6ac5f852b5c8dee6a8996b65e48e7c97f","modified":1724210423793},{"_id":"source/img/index.jpg","hash":"d1e4ed73d52410957799b7b1603345d6ce499588","modified":1724210179803},{"_id":"source/img/link_banner.jpg","hash":"b0230744c9962fea562a614925d89693deba6280","modified":1724210179805},{"_id":"source/img/about.jpg","hash":"b5350edcc0cb23276de6a863c9f98915d8f98f3d","modified":1724210179796},{"_id":"public/404/index.html","hash":"dfc48467c09711a0eb8dc0a65e64e47262b4b837","modified":1724214242865},{"_id":"public/bookmark/index.html","hash":"ffb9b14b548c1935f2383cf921932f620e4c5bc5","modified":1724214242865},{"_id":"public/link/index.html","hash":"734a73ce763626be295d2397404aa32a89b18f66","modified":1724214242865},{"_id":"public/music/index.html","hash":"b93f171913c30095e9d64e7f29a4dbdaff6e88c0","modified":1724214242865},{"_id":"public/tags/index.html","hash":"b92029fe799bc6d65110ae2ab93dc0babf4ac650","modified":1724214242865},{"_id":"public/2022/04/16/android-player/index.html","hash":"a260757bacbface2130919de9f83497bf65035d2","modified":1724214242865},{"_id":"public/2022/01/10/Educational-experience-1/index.html","hash":"24e750ccefe49e78c36cd2e41245605e7d47b28f","modified":1724214242865},{"_id":"public/2022/01/10/Educational-experience-2/index.html","hash":"fb3ee5842ac407275f78b21cd908583113d11c9a","modified":1724214242865},{"_id":"public/2022/01/20/array-list-in-c/index.html","hash":"f8f24a2a809c83a03d07a67117febb2c59fed960","modified":1724214242865},{"_id":"public/2021/01/21/egl-1-4-quick-reference-card/index.html","hash":"cc43db4828b3f57095ead37ca73c687b376db12b","modified":1724214242865},{"_id":"public/2021/01/21/android-opengl-es-and-EGL/index.html","hash":"5788192a9ffd1884b0f4e93537547d475b3aea65","modified":1724214242865},{"_id":"public/2021/01/27/android-opengl-es-triangle/index.html","hash":"1c157ae743abe362e3e24ce976d6fea80c991e5a","modified":1724214242865},{"_id":"public/2021/01/20/android-glsurfaceview-overview/index.html","hash":"2f98f70878dad594672a9cf2ae0f94c251fab760","modified":1724214242865},{"_id":"public/2020/07/13/living-optimize/index.html","hash":"2f53c9437f24afc642654ecbf6845a80483b9731","modified":1724214242865},{"_id":"public/2020/09/12/tiktok-app/index.html","hash":"dcffa64b4cf341d386899fa947dc6829bc714a08","modified":1724214242865},{"_id":"public/2020/03/30/android-opengl-02/index.html","hash":"affdbcdb37c938b4241457586a8145f4a607ef56","modified":1724214242865},{"_id":"public/2020/03/27/android-opengl-01/index.html","hash":"79cf8484c654c947490abfe9ac9ac77cd187923a","modified":1724214242865},{"_id":"public/2020/03/23/last-dance/index.html","hash":"ba45992e4dfc8eb61161a1711970329ca961abbe","modified":1724214242865},{"_id":"public/2020/01/31/go-home/index.html","hash":"edc70c5a29c2c1e8c1c5fc301b9ac47ced27e6dc","modified":1724214242865},{"_id":"public/2020/09/23/tcpip-overview/index.html","hash":"e0d8e4392f812a179dbc7cc3b5bbcc05d667fe28","modified":1724214242865},{"_id":"public/2018/03/06/flutter-localizations/index.html","hash":"d6d01a9dcf53dfc36c17714f5ecfbd6dcdf9ab48","modified":1724214242865},{"_id":"public/2019/09/11/flutter-livedata/index.html","hash":"9677a66257c8c1a56f6d15001e46439275e95908","modified":1724214242865},{"_id":"public/2017/12/07/jvm-preview/index.html","hash":"76ca01a0cabb62c516361af924873ff707cf6da8","modified":1724214242865},{"_id":"public/2017/11/17/GIF-and-LWZ/index.html","hash":"81c6c51930b7cbd7bec63578e941595827c5ed54","modified":1724214242865},{"_id":"public/2017/11/15/gif-bytes-format/index.html","hash":"659d15e4842bd80b745d74b232ff8fcbe7c1a514","modified":1724214242865},{"_id":"public/2017/11/03/git-intro/index.html","hash":"da703fbcac8e8c6a70d66532e58a2af5b0c7fe6c","modified":1724214242865},{"_id":"public/2017/06/12/diy-code/index.html","hash":"fb035f8d6198bc223bb84bbeee63032c14a5af65","modified":1724214242865},{"_id":"public/2017/05/23/android-arch-intro/index.html","hash":"10d49c1a0bf2ae01ce9b22adbc0093613c40fb16","modified":1724214242865},{"_id":"public/2017/05/22/android-arch-room/index.html","hash":"df06e7db47a730ab0c061e6d264bd8328d7977b2","modified":1724214242865},{"_id":"public/2017/05/22/android-arch-viewmodel/index.html","hash":"9e958545587b081691f82216abf89b51163e554a","modified":1724214242865},{"_id":"public/2017/05/21/andrdoi-arch-livedata/index.html","hash":"8abf3937d018df33943d354f1106a5a76a61940c","modified":1724214242865},{"_id":"public/2017/05/19/android-arch-lifecycle/index.html","hash":"be01120d905b47706f496ebadde15d0c070bf98b","modified":1724214242865},{"_id":"public/2016/08/17/dart-thread-model/index.html","hash":"8246f22e7fdb135fadafa9b297c992d6498865eb","modified":1724214242865},{"_id":"public/2016/08/12/upload-jcenter/index.html","hash":"3fd436bb88fd060ebbeb477001215e3bc6812739","modified":1724214242865},{"_id":"public/2016/08/06/xiangsuhua20160806/index.html","hash":"946b6ca498e1cf16a209f6d564d6e2e22c47aefa","modified":1724214242865},{"_id":"public/2016/04/26/dart-event-loop/index.html","hash":"ae684e2a53c18c4ebeffbaf1ad28081fc6fa7349","modified":1724214242865},{"_id":"public/2016/02/25/mac-practices/index.html","hash":"cdff3d46c575bb1a6d8253ed1b319eeab60b5159","modified":1724214242865},{"_id":"public/2016/01/03/welcome/index.html","hash":"5a52cc343a5871278e616095ccf81d43cd8f7c62","modified":1724214242865},{"_id":"public/archives/index.html","hash":"3c7bda64d5ddb8d27edf15d7c7ab2c5a94cc776a","modified":1724214242865},{"_id":"public/archives/page/2/index.html","hash":"744ea248028c073d559ca6aefe5cbf10e667b07f","modified":1724214242865},{"_id":"public/archives/page/3/index.html","hash":"12bd89c5e89a09d0b4f03bab43e91807a4fda051","modified":1724214242865},{"_id":"public/archives/page/4/index.html","hash":"8342ab1d53b92a5013ff3d4aa3558315c67fd023","modified":1724214242865},{"_id":"public/archives/2016/index.html","hash":"8fc15634d41b36dedd1ce044fb0b68c7b60960b8","modified":1724214242865},{"_id":"public/archives/2016/01/index.html","hash":"2b643067b60f93f2b9b14602ee2edd5cecc5b528","modified":1724214242865},{"_id":"public/archives/2016/02/index.html","hash":"c43f22ff5f87235dfb6654a5b5767ac82f72b25d","modified":1724214242865},{"_id":"public/archives/2016/04/index.html","hash":"64c99ec0e047945fea939ec8e615cab6cbbd9738","modified":1724214242865},{"_id":"public/archives/2016/08/index.html","hash":"fc880af71a80b56f75f89f970049af2bfe638d3c","modified":1724214242865},{"_id":"public/archives/2017/index.html","hash":"f77299f1034507ab0284b15bf1572c71107da8d2","modified":1724214242865},{"_id":"public/archives/2017/05/index.html","hash":"16c2a90551283eab2e05dca273f639c5af2df9d5","modified":1724214242865},{"_id":"public/archives/2017/06/index.html","hash":"0c69752521f2004e51cb8125efe19cd28da350c6","modified":1724214242865},{"_id":"public/archives/2017/11/index.html","hash":"ec97de9eec138c39d20c668fe16599f5a669781a","modified":1724214242865},{"_id":"public/archives/2017/12/index.html","hash":"0dc537e9431f025e836d9a36f3099498407779bb","modified":1724214242865},{"_id":"public/archives/2018/index.html","hash":"5bbc937b7cb43fd8533601081f133a2f748daa90","modified":1724214242865},{"_id":"public/archives/2018/03/index.html","hash":"401e9855bac1348ac2a554831d74d1734a680019","modified":1724214242865},{"_id":"public/archives/2019/index.html","hash":"f248f4ec96ecf1deb93485c9b407840d5dcf5171","modified":1724214242865},{"_id":"public/archives/2019/09/index.html","hash":"79261979f27a07e76de82c47c6810d29f73cefd7","modified":1724214242865},{"_id":"public/archives/2020/index.html","hash":"0571f8d147f2a6d1910bee8ff62438a684edd3bf","modified":1724214242865},{"_id":"public/archives/2020/01/index.html","hash":"669a786eec4963b378319e8cb252c51b90f77dfb","modified":1724214242865},{"_id":"public/archives/2020/03/index.html","hash":"a4367f7bbf6efac84d546cf756de32384a4785cf","modified":1724214242865},{"_id":"public/archives/2020/07/index.html","hash":"6d8dccac23d749f1ec621f0a85eb9a1b71fbeb21","modified":1724214242865},{"_id":"public/archives/2020/09/index.html","hash":"ced973568b08584016114a6b94432302f139d021","modified":1724214242865},{"_id":"public/archives/2021/index.html","hash":"f4fd15b0a4a3b4afd7f5af566edc86639ffa9594","modified":1724214242865},{"_id":"public/archives/2021/01/index.html","hash":"5450c8f483dbb47480c547bf968781667d074033","modified":1724214242865},{"_id":"public/archives/2022/index.html","hash":"4bf606cd826de5b11a76b726f28aa5fe6a5e0bee","modified":1724214242865},{"_id":"public/archives/2022/01/index.html","hash":"8aab8e309c931e8b52ac274bec736768e67ef008","modified":1724214242865},{"_id":"public/archives/2022/04/index.html","hash":"c477e35a85149754f715c868807aa8012d0bc36f","modified":1724214242865},{"_id":"public/index.html","hash":"64e8f0243cd41a3980ad884db7026e5a9db49366","modified":1724214242865},{"_id":"public/page/2/index.html","hash":"936b1b73815a9c0b323e7c0b5daf03aa00cb3e1b","modified":1724214242865},{"_id":"public/page/3/index.html","hash":"8f4f6142d3768f30e968bf795b3c28562b11527e","modified":1724214242865},{"_id":"public/page/4/index.html","hash":"c3010bc250c0bf7d506c2797173842afa76fb917","modified":1724214242865},{"_id":"public/tags/教育/index.html","hash":"012551054a0044d16931ae2ce23e2f8999299be9","modified":1724214242865},{"_id":"public/tags/‘教育’/index.html","hash":"90a73d52af8f45dbe1c553e1a05bb1b16ae2b144","modified":1724214242865},{"_id":"public/tags/多媒体/index.html","hash":"999cbfa4f3f4fa4bf97543e9473a4b43e59332e1","modified":1724214242865},{"_id":"public/tags/android/index.html","hash":"99d0966dc7397841fcea0a1c5fdee32b8825c75b","modified":1724214242865},{"_id":"public/tags/android/page/2/index.html","hash":"fc3cc5404bbc436043e9af37b6152c3060bebe24","modified":1724214242865},{"_id":"public/tags/opengl/index.html","hash":"f1a1f133c6f5a94fe3cb6aced00885f5177a4cd7","modified":1724214242865},{"_id":"public/tags/OpenGL-ES/index.html","hash":"c49fa3ec92cb3df4d515886d842bc575c3d3c988","modified":1724214242865},{"_id":"public/tags/EGL/index.html","hash":"57c6321308b6cae1aed9bfdcc6526d5a16c64555","modified":1724214242865},{"_id":"public/tags/player/index.html","hash":"5650b07d616a74f7de21d51877a35052da7e288f","modified":1724214242865},{"_id":"public/tags/C/index.html","hash":"b8146c78201c29ef1bba59cbf77deee89eff7f45","modified":1724214242865},{"_id":"public/tags/Dart/index.html","hash":"4b65fb304f63e155cffc68edbf69294facd645d4","modified":1724214242865},{"_id":"public/tags/dart/index.html","hash":"577b9267205d5d2bf568de6a393ac4ec325d222a","modified":1724214242865},{"_id":"public/tags/flutter/index.html","hash":"061dfee663849fdcaf5779e9099aae6be4c69984","modified":1724214242865},{"_id":"public/tags/java/index.html","hash":"c9ec23bf7ef1b8061a4c80875feaee9b470cac09","modified":1724214242865},{"_id":"public/tags/日常/index.html","hash":"5914ebff3839b20dfe69f9ef3e303eb3f6c27496","modified":1724214242865},{"_id":"public/tags/音乐分享/index.html","hash":"4e9c6532f58cb591838cc23e8834f1e0e2ac1785","modified":1724214242865},{"_id":"public/tags/直播技术/index.html","hash":"cfd9aeb074748fa09750ebc477ee41f7b40468af","modified":1724214242865},{"_id":"public/tags/网络编程/index.html","hash":"e95c808985820e4c808aac1484b1dbfc10003ad6","modified":1724214242865},{"_id":"public/tags/插画/index.html","hash":"fa3b68166d0e7b8b675dc91798e5ace955195616","modified":1724214242865},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1724214242865},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1724214242865},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1724214242865},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"a38c6d92b368bfc42c72ad799ad03f3274957065","modified":1724214242865},{"_id":"public/images/logo.svg","hash":"099e11ab995a2c8981427a85476d082609848c77","modified":1724214242865},{"_id":"public/CNAME","hash":"4822c6d40c444124c5a1166a3efcb540bd8b2aac","modified":1724214242865},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1724214242865},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1724214242865},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1724214242865},{"_id":"public/img/avatar.jpg","hash":"e8528ffc7bf4c5e89e9e26efc3205e0280575c09","modified":1724214242865},{"_id":"public/img/favicon.ico","hash":"546668313d006a1bca09c7411c30f9a8a19abb03","modified":1724214242865},{"_id":"public/img/comment_bg.png","hash":"1adfc4ee925fb4f922c24d7774e7c46d940fe31b","modified":1724214242865},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1724214242865},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1724214242865},{"_id":"public/img/post_loadding.svg","hash":"549c58cd09dbeefd573ce10646c49ded8bcc48ec","modified":1724214242865},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1724214242865},{"_id":"public/music/file/lrc/bushuo.lrc","hash":"ba7b9a89898a0e52c8537a0d0800016c375a61ce","modified":1724214242865},{"_id":"public/music/file/lrc/goodbye.lrc","hash":"84000fe7591e49bd2290f5ddc93bd9cbb80625b1","modified":1724214242865},{"_id":"public/music/file/lrc/jiandan.lrc","hash":"10252f2f6ae51c45b666d0df3ced905a2f47a345","modified":1724214242865},{"_id":"public/music/file/lrc/kanjian.lrc","hash":"df1e654842c3b16eee1de299df503aa7a3969792","modified":1724214242865},{"_id":"public/music/file/lrc/mingbai.lrc","hash":"5d7285e462b4cfd356322801c2e98d3e92596011","modified":1724214242865},{"_id":"public/music/file/lrc/mengnalisha.lrc","hash":"35a877bb0f3b926d3c45bde9d79296a4a54936c6","modified":1724214242865},{"_id":"public/music/file/lrc/lastdance.lrc","hash":"ad992a5264b4351678f45308f87ad26f7351755e","modified":1724214242865},{"_id":"public/music/file/lrc/sheng_ru_xia_hua.lrc","hash":"2cd7eac794584f9f17d71d244217f106103f11f7","modified":1724214242865},{"_id":"public/music/file/lrc/sanbuqu.lrc","hash":"4fefff0b83fae016b9f04dc2abdb42c28e0586b6","modified":1724214242865},{"_id":"public/2020/03/23/last-dance/lastdance.lrc","hash":"ad992a5264b4351678f45308f87ad26f7351755e","modified":1724214242865},{"_id":"public/music/file/lrc/niujiaojian.lrc","hash":"1849878ed067894c730cb1f547c8fc7436cab900","modified":1724214242865},{"_id":"public/music/file/lrc/zaishushangchangge.lrc","hash":"f2d4de02d8be368cd0503b0ce89ddbd2659a38b9","modified":1724214242865},{"_id":"public/music/file/lrc/xinqiang.lrc","hash":"dda601b580c816012005f1c525b67049c41439d4","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1724214242865},{"_id":"public/live2dw/assets/assets/tororo.model.json","hash":"3b96ea33460642d288c98327444966d93a0c11ba","modified":1724214242865},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1724214242865},{"_id":"public/live2dw/assets/assets/tororo.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1724214242865},{"_id":"public/live2dw/assets/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1724214242865},{"_id":"public/live2dw/assets/package.json","hash":"d6e947dfce594bf81d97bf387a9d2c2d41d17f38","modified":1724214242865},{"_id":"public/assets/css/APlayer.min.css","hash":"07372a2ba507388d0fed166d761b1c2c2a659dce","modified":1724214242865},{"_id":"public/assets/js/Meting.min.js","hash":"a0585220b918d78649a7893279e1ec4fb5abe835","modified":1724214242865},{"_id":"public/assets/js/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1724214242865},{"_id":"public/img/archive_banner.jpg","hash":"8aba5eac9728e07052257b5638c4e98c75bd7b3d","modified":1724214242865},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1724214242865},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1724214242865},{"_id":"public/js/next-boot.js","hash":"8e2d589585f5270ee90285d3e65b69923c7629d8","modified":1724214242865},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1724214242865},{"_id":"public/js/pjax.js","hash":"0996078604f356a4f6692b9b0838038b3b10aa8a","modified":1724214242865},{"_id":"public/js/motion.js","hash":"3864e56a829b698b98ec8d93b8916271ba6fd015","modified":1724214242865},{"_id":"public/js/sidebar.js","hash":"2ee359ae48273b01ba1e0768704524e08702c7eb","modified":1724214242865},{"_id":"public/js/schedule.js","hash":"a1333258726caf84f368a8f8454639c7dc1626bb","modified":1724214242865},{"_id":"public/js/utils.js","hash":"b2c0fd95770e58c25c9f99e1d66fe0e625e3cdab","modified":1724214242865},{"_id":"public/js/bookmark.js","hash":"9ba4cceafd12c6d5ba8a6b986a046ef8319a7811","modified":1724214242865},{"_id":"public/css/main.css","hash":"ccb97cce9ed1014f3afd48731667445a8c65028a","modified":1724214242865},{"_id":"public/css/noscript.css","hash":"4cd5301e478e0e0d4b176740ec314087ec5cb707","modified":1724214242865},{"_id":"public/js/third-party/fancybox.js","hash":"819f382c561fe5ec23c67cc5fabd63dd1cc22dc1","modified":1724214242865},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1724214242865},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1724214242865},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1724214242865},{"_id":"public/js/third-party/analytics/matomo.js","hash":"c6a25b26a1443caa70b47fd3dfa282271574deb5","modified":1724214242865},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1724214242865},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1724214242865},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1724214242865},{"_id":"public/js/third-party/addtoany.js","hash":"5276c8f78ee562a8965216dc67d762e59cb4a9f2","modified":1724214242865},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1724214242865},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1724214242865},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1724214242865},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1724214242865},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1724214242865},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1724214242865},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"1e826dea3f684c0515f362dc1352447a1f0eae71","modified":1724214242865},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1724214242865},{"_id":"public/js/third-party/search/local-search.js","hash":"81a24bd19554b5bd148975026db64338d8710774","modified":1724214242865},{"_id":"public/js/third-party/search/algolia-search.js","hash":"35401af771f43dc633dd99a92ebf5295cd0b158a","modified":1724214242865},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1724214242865},{"_id":"public/js/third-party/comments/disqus.js","hash":"da361917d65e5dca8362f8cdeb6c8cc0e8316cec","modified":1724214242865},{"_id":"public/js/third-party/tags/mermaid.js","hash":"1d1b6d847215b16f26b230859d7e16501190ecc0","modified":1724214242865},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"835cbf54c49ef1327f47df70ff2636ad36b6f57d","modified":1724214242865},{"_id":"public/js/third-party/statistics/firestore.js","hash":"6e0682bb42170d61b13b786295f45f9c785f8b73","modified":1724214242865},{"_id":"public/js/third-party/tags/wavedrom.js","hash":"40dcd10df6edf124088c329346e0cc0bdac74ef1","modified":1724214242865},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"def07bcc7c17d8a0caad177fb1dd2f3a5e5b3536","modified":1724214242865},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1724214242865},{"_id":"public/img/post.jpg","hash":"8869367a07479aff08fdc629124ab376a7e8ca62","modified":1724214242865},{"_id":"public/live2dw/assets/assets/moc/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1724214242865},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1724214242865},{"_id":"public/live2dw/assets/assets/moc/tororo.2048/texture_00.png","hash":"98af764b541083e87fc2f8e85f02d2db38c898cc","modified":1724214242865},{"_id":"public/img/index.jpg","hash":"d1e4ed73d52410957799b7b1603345d6ce499588","modified":1724214242865},{"_id":"public/img/link_banner.jpg","hash":"b0230744c9962fea562a614925d89693deba6280","modified":1724214242865},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1724214242865},{"_id":"public/img/about.jpg","hash":"b5350edcc0cb23276de6a863c9f98915d8f98f3d","modified":1724214242865}],"Category":[],"Data":[{"_id":"link","data":{"class":{"class_name":"友情鏈接","link_list":{"1":{"name":"xxx","link":"https://blog.xxx.com","avatar":"https://cdn.xxxxx.top/avatar.png","descr":"xxxxxxx"},"2":{"name":"xxxxxx","link":"https://www.xxxxxxcn/","avatar":"https://xxxxx/avatar.png","descr":"xxxxxxx"}}}}}],"Page":[{"title":"404","date":"2020-03-19T15:47:32.000Z","_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>404</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" \t\t\t  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n\t</body>\n</html>","source":"404/index.md","raw":"---\ntitle: 404\ndate: 2020-03-19 23:47:32\n---\n<!DOCTYPE html>\n<html lang=\"en\">\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>404</title>\n\t</head>\n\t<body>\n\t\t<script type=\"text/javascript\" \t\t\t  src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n\t</body>\n</html>","updated":"2024-08-21T03:16:19.778Z","path":"404/index.html","comments":1,"layout":"page","_id":"cm03be2vj00005p6t25khes7w","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\"               src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <title>404</title>\n    </head>\n    <body>\n        <script type=\"text/javascript\"               src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\"></script>\n    </body>\n</html>"},{"title":"书签","date":"2020-03-22T15:38:14.000Z","_content":"\n# 软件开发\n\n[github](https://github.com/)\n[清华大学 TUNA 镜像源](http://mirrors.tuna.tsinghua.edu.cn/)\n[在线进制转换](http://tool.oschina.net/hexconvert/)\n[Vuash 安全发送信息](http://www.vua.sh/)\n[jCenter](https://bintray.com/bintray/jcenter)\n[七牛](https://portal.qiniu.com/)\n\n## Android\n[AndroidXRef](http://androidxref.com/)\n[Android Open Source Project](https://source.android.com/index.html)\n[Android Developers](http://developer.android.com/intl/zh-cn/index.html)\n\n## OpenGL\n[OpenGL Document](https://www.khronos.org/registry/OpenGL-Refpages/)\n[LearnOpenGL CN](https://learnopengl-cn.github.io/)\n[OpenGL-The Cherno](https://www.youtube.com/playlist?list=PLlrATfBNZ98foTJPJ_Ev03o2oq3-GGOS2)\n\n## EGL\n[EGL Document](https://www.khronos.org/registry/EGL/)\n[EGL 1.4 API Quick Reference Card](https://www.khronos.org/files/egl-1-4-quick-reference-card.pdf)\n\n## Flutter\n[flutter.dev](https://flutter.dev/)\n[Dart](https://www.dartlang.org/)\n[Pub](https://pub.dartlang.org/)\n\n## Git\n[Git Doc](https://git-scm.com/doc)\n\n\n# 设计\n[UpLabs](http://www.uplabs.com/)","source":"bookmark/index.md","raw":"---\ntitle: 书签\ndate: 2020-03-22 23:38:14\n---\n\n# 软件开发\n\n[github](https://github.com/)\n[清华大学 TUNA 镜像源](http://mirrors.tuna.tsinghua.edu.cn/)\n[在线进制转换](http://tool.oschina.net/hexconvert/)\n[Vuash 安全发送信息](http://www.vua.sh/)\n[jCenter](https://bintray.com/bintray/jcenter)\n[七牛](https://portal.qiniu.com/)\n\n## Android\n[AndroidXRef](http://androidxref.com/)\n[Android Open Source Project](https://source.android.com/index.html)\n[Android Developers](http://developer.android.com/intl/zh-cn/index.html)\n\n## OpenGL\n[OpenGL Document](https://www.khronos.org/registry/OpenGL-Refpages/)\n[LearnOpenGL CN](https://learnopengl-cn.github.io/)\n[OpenGL-The Cherno](https://www.youtube.com/playlist?list=PLlrATfBNZ98foTJPJ_Ev03o2oq3-GGOS2)\n\n## EGL\n[EGL Document](https://www.khronos.org/registry/EGL/)\n[EGL 1.4 API Quick Reference Card](https://www.khronos.org/files/egl-1-4-quick-reference-card.pdf)\n\n## Flutter\n[flutter.dev](https://flutter.dev/)\n[Dart](https://www.dartlang.org/)\n[Pub](https://pub.dartlang.org/)\n\n## Git\n[Git Doc](https://git-scm.com/doc)\n\n\n# 设计\n[UpLabs](http://www.uplabs.com/)","updated":"2024-08-21T03:16:19.787Z","path":"bookmark/index.html","comments":1,"layout":"page","_id":"cm03be2vm00025p6t11wc7x18","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"软件开发\"><a href=\"#软件开发\" class=\"headerlink\" title=\"软件开发\"></a>软件开发</h1><p><a href=\"https://github.com/\">github</a><br><a href=\"http://mirrors.tuna.tsinghua.edu.cn/\">清华大学 TUNA 镜像源</a><br><a href=\"http://tool.oschina.net/hexconvert/\">在线进制转换</a><br><a href=\"http://www.vua.sh/\">Vuash 安全发送信息</a><br><a href=\"https://bintray.com/bintray/jcenter\">jCenter</a><br><a href=\"https://portal.qiniu.com/\">七牛</a></p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><p><a href=\"http://androidxref.com/\">AndroidXRef</a><br><a href=\"https://source.android.com/index.html\">Android Open Source Project</a><br><a href=\"http://developer.android.com/intl/zh-cn/index.html\">Android Developers</a></p>\n<h2 id=\"OpenGL\"><a href=\"#OpenGL\" class=\"headerlink\" title=\"OpenGL\"></a>OpenGL</h2><p><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/\">OpenGL Document</a><br><a href=\"https://learnopengl-cn.github.io/\">LearnOpenGL CN</a><br><a href=\"https://www.youtube.com/playlist?list=PLlrATfBNZ98foTJPJ_Ev03o2oq3-GGOS2\">OpenGL-The Cherno</a></p>\n<h2 id=\"EGL\"><a href=\"#EGL\" class=\"headerlink\" title=\"EGL\"></a>EGL</h2><p><a href=\"https://www.khronos.org/registry/EGL/\">EGL Document</a><br><a href=\"https://www.khronos.org/files/egl-1-4-quick-reference-card.pdf\">EGL 1.4 API Quick Reference Card</a></p>\n<h2 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h2><p><a href=\"https://flutter.dev/\">flutter.dev</a><br><a href=\"https://www.dartlang.org/\">Dart</a><br><a href=\"https://pub.dartlang.org/\">Pub</a></p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p><a href=\"https://git-scm.com/doc\">Git Doc</a></p>\n<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><p><a href=\"http://www.uplabs.com/\">UpLabs</a></p>\n","excerpt":"","more":"<h1 id=\"软件开发\"><a href=\"#软件开发\" class=\"headerlink\" title=\"软件开发\"></a>软件开发</h1><p><a href=\"https://github.com/\">github</a><br><a href=\"http://mirrors.tuna.tsinghua.edu.cn/\">清华大学 TUNA 镜像源</a><br><a href=\"http://tool.oschina.net/hexconvert/\">在线进制转换</a><br><a href=\"http://www.vua.sh/\">Vuash 安全发送信息</a><br><a href=\"https://bintray.com/bintray/jcenter\">jCenter</a><br><a href=\"https://portal.qiniu.com/\">七牛</a></p>\n<h2 id=\"Android\"><a href=\"#Android\" class=\"headerlink\" title=\"Android\"></a>Android</h2><p><a href=\"http://androidxref.com/\">AndroidXRef</a><br><a href=\"https://source.android.com/index.html\">Android Open Source Project</a><br><a href=\"http://developer.android.com/intl/zh-cn/index.html\">Android Developers</a></p>\n<h2 id=\"OpenGL\"><a href=\"#OpenGL\" class=\"headerlink\" title=\"OpenGL\"></a>OpenGL</h2><p><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/\">OpenGL Document</a><br><a href=\"https://learnopengl-cn.github.io/\">LearnOpenGL CN</a><br><a href=\"https://www.youtube.com/playlist?list=PLlrATfBNZ98foTJPJ_Ev03o2oq3-GGOS2\">OpenGL-The Cherno</a></p>\n<h2 id=\"EGL\"><a href=\"#EGL\" class=\"headerlink\" title=\"EGL\"></a>EGL</h2><p><a href=\"https://www.khronos.org/registry/EGL/\">EGL Document</a><br><a href=\"https://www.khronos.org/files/egl-1-4-quick-reference-card.pdf\">EGL 1.4 API Quick Reference Card</a></p>\n<h2 id=\"Flutter\"><a href=\"#Flutter\" class=\"headerlink\" title=\"Flutter\"></a>Flutter</h2><p><a href=\"https://flutter.dev/\">flutter.dev</a><br><a href=\"https://www.dartlang.org/\">Dart</a><br><a href=\"https://pub.dartlang.org/\">Pub</a></p>\n<h2 id=\"Git\"><a href=\"#Git\" class=\"headerlink\" title=\"Git\"></a>Git</h2><p><a href=\"https://git-scm.com/doc\">Git Doc</a></p>\n<h1 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h1><p><a href=\"http://www.uplabs.com/\">UpLabs</a></p>\n"},{"title":"友链","date":"2020-03-19T14:42:55.000Z","type":"link","top_img":"/img/link_banner.jpg","_content":"","source":"link/index.md","raw":"---\ntitle: 友链\ndate: 2020-03-19 22:42:55\ntype: \"link\"\ntop_img: /img/link_banner.jpg\n---\n","updated":"2024-08-21T03:16:19.807Z","path":"link/index.html","comments":1,"layout":"page","_id":"cm03be2vo00055p6t06b511pg","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""},{"title":"那些年听过的音乐","date":"2020-03-18T19:11:44.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/music.jpg","_content":"# 在树上唱歌\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"在树上唱歌\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/zaishushangchangge.lrc\"\n        },\n        {\n            \"title\": \"明白\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E6%98%8E%E7%99%BD.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/mingbai.lrc\"\n        },\n        {\n            \"title\": \"心墙\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%BF%83%E5%A2%99.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/xinqiang.lrc\"\n        },\n        {\n            \"title\": \"牛角尖\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%89%9B%E8%A7%92%E5%B0%96.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/niujiaojian.lrc\"\n        }\n        ,\n        {\n            \"title\": \"简单\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%AE%80%E5%8D%95.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/jiandan.lrc\"\n        }\n        ,\n        {\n            \"title\": \"Goodbye\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20Goodbye.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/goodbye.lrc\"\n        }\n        ,\n        {\n            \"title\": \"蒙娜丽莎\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E8%92%99%E5%A8%9C%E4%B8%BD%E8%8E%8E.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/mengnalisha.lrc\"\n        }\n        ,\n        {\n            \"title\": \"三部曲\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%89%E9%83%A8%E6%9B%B2.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/sanbuqu.lrc\"\n        }\n        ,\n        {\n            \"title\": \"不说\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%8D%E8%AF%B4.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/bushuo.lrc\"\n        }\n        ,\n        {\n            \"title\": \"看见\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%9C%8B%E8%A7%81.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/kanjian.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}\n\n# 秒速五厘米\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"山崎まさよし - 桜花抄\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/01%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E6%A1%9C%E8%8A%B1%E6%8A%84.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 想い出は遠くの日々\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/02%20%E5%A4%A9%E9%96%80%20-%20%E6%83%B3%E3%81%84%E5%87%BA%E3%81%AF%E9%81%A0%E3%81%8F%E3%81%AE%E6%97%A5%E3%80%85.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 焦燥\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/03%20%E5%A4%A9%E9%96%80%20-%20%E7%84%A6%E7%87%A5.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"山崎まさよし - 雪の駅\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/04%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E9%9B%AA%E3%81%AE%E9%A7%85.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"山崎まさよし - Kiss\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/05%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20Kiss.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - カナエの気持ち\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/06%20%E5%A4%A9%E9%96%80%20-%20%E3%82%AB%E3%83%8A%E3%82%A8%E3%81%AE%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 夢\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/07%20%E5%A4%A9%E9%96%80%20-%20%E5%A4%A2.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 空と海の詩\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/08%20%E5%A4%A9%E9%96%80%20-%20%E7%A9%BA%E3%81%A8%E6%B5%B7%E3%81%AE%E8%A9%A9.mp3c\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 届かない気持ち\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/09%20%E5%A4%A9%E9%96%80%20-%20%E5%B1%8A%E3%81%8B%E3%81%AA%E3%81%84%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - End Theme\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/10%20%E5%A4%A9%E9%96%80%20-%20End%20Theme.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"One more time, One more chance\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/11%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20One%20more%20time%2C%20One%20more%20chance%20(piano%20version).mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        }\n    ]\n}\n{% endaplayerlist %}\n\n# 那些年听过的歌\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"生如夏花\",\n            \"author\": \"朴树\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E6%9C%B4%E6%A0%91%20-%20%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1.flac\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1%E6%AD%8C%E6%9B%B2%E5%B0%81%E9%9D%A2.jpg\",\n            \"lrc\": \"file/lrc/sheng_ru_xia_hua.lrc\"\n        },\n                {\n            \"title\": \"Last Dance\",\n            \"author\": \"伍佰\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\n            \"lrc\": \"file/lrc/lastdance.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}","source":"music/index.md","raw":"---\ntitle: 那些年听过的音乐\ndate: 2020-03-19 03:11:44\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/music.jpg\n---\n# 在树上唱歌\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"在树上唱歌\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/zaishushangchangge.lrc\"\n        },\n        {\n            \"title\": \"明白\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E6%98%8E%E7%99%BD.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/mingbai.lrc\"\n        },\n        {\n            \"title\": \"心墙\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%BF%83%E5%A2%99.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/xinqiang.lrc\"\n        },\n        {\n            \"title\": \"牛角尖\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%89%9B%E8%A7%92%E5%B0%96.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/niujiaojian.lrc\"\n        }\n        ,\n        {\n            \"title\": \"简单\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%AE%80%E5%8D%95.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/jiandan.lrc\"\n        }\n        ,\n        {\n            \"title\": \"Goodbye\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20Goodbye.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/goodbye.lrc\"\n        }\n        ,\n        {\n            \"title\": \"蒙娜丽莎\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E8%92%99%E5%A8%9C%E4%B8%BD%E8%8E%8E.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/mengnalisha.lrc\"\n        }\n        ,\n        {\n            \"title\": \"三部曲\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%89%E9%83%A8%E6%9B%B2.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/sanbuqu.lrc\"\n        }\n        ,\n        {\n            \"title\": \"不说\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%8D%E8%AF%B4.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/bushuo.lrc\"\n        }\n        ,\n        {\n            \"title\": \"看见\",\n            \"author\": \"郭静\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%9C%8B%E8%A7%81.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\n            \"lrc\": \"file/lrc/kanjian.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}\n\n# 秒速五厘米\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"山崎まさよし - 桜花抄\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/01%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E6%A1%9C%E8%8A%B1%E6%8A%84.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 想い出は遠くの日々\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/02%20%E5%A4%A9%E9%96%80%20-%20%E6%83%B3%E3%81%84%E5%87%BA%E3%81%AF%E9%81%A0%E3%81%8F%E3%81%AE%E6%97%A5%E3%80%85.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 焦燥\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/03%20%E5%A4%A9%E9%96%80%20-%20%E7%84%A6%E7%87%A5.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"山崎まさよし - 雪の駅\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/04%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E9%9B%AA%E3%81%AE%E9%A7%85.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"山崎まさよし - Kiss\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/05%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20Kiss.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - カナエの気持ち\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/06%20%E5%A4%A9%E9%96%80%20-%20%E3%82%AB%E3%83%8A%E3%82%A8%E3%81%AE%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 夢\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/07%20%E5%A4%A9%E9%96%80%20-%20%E5%A4%A2.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 空と海の詩\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/08%20%E5%A4%A9%E9%96%80%20-%20%E7%A9%BA%E3%81%A8%E6%B5%B7%E3%81%AE%E8%A9%A9.mp3c\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - 届かない気持ち\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/09%20%E5%A4%A9%E9%96%80%20-%20%E5%B1%8A%E3%81%8B%E3%81%AA%E3%81%84%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"天門 - End Theme\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/10%20%E5%A4%A9%E9%96%80%20-%20End%20Theme.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        },\n        {\n            \"title\": \"One more time, One more chance\",\n            \"author\": \"秒速五厘米\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/11%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20One%20more%20time%2C%20One%20more%20chance%20(piano%20version).mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\" \n        }\n    ]\n}\n{% endaplayerlist %}\n\n# 那些年听过的歌\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"生如夏花\",\n            \"author\": \"朴树\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E6%9C%B4%E6%A0%91%20-%20%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1.flac\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1%E6%AD%8C%E6%9B%B2%E5%B0%81%E9%9D%A2.jpg\",\n            \"lrc\": \"file/lrc/sheng_ru_xia_hua.lrc\"\n        },\n                {\n            \"title\": \"Last Dance\",\n            \"author\": \"伍佰\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\n            \"lrc\": \"file/lrc/lastdance.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}","updated":"2024-08-21T03:16:19.809Z","path":"music/index.html","comments":1,"layout":"page","_id":"cm03be2vo00075p6t4udo0yoi","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"在树上唱歌\"><a href=\"#在树上唱歌\" class=\"headerlink\" title=\"在树上唱歌\"></a>在树上唱歌</h1>\n        <div id=\"aplayer-HgdWgcKI\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"在树上唱歌\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/zaishushangchangge.lrc\"},{\"title\":\"明白\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E6%98%8E%E7%99%BD.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/mingbai.lrc\"},{\"title\":\"心墙\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%BF%83%E5%A2%99.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/xinqiang.lrc\"},{\"title\":\"牛角尖\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%89%9B%E8%A7%92%E5%B0%96.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/niujiaojian.lrc\"},{\"title\":\"简单\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%AE%80%E5%8D%95.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/jiandan.lrc\"},{\"title\":\"Goodbye\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20Goodbye.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/goodbye.lrc\"},{\"title\":\"蒙娜丽莎\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E8%92%99%E5%A8%9C%E4%B8%BD%E8%8E%8E.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/mengnalisha.lrc\"},{\"title\":\"三部曲\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%89%E9%83%A8%E6%9B%B2.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/sanbuqu.lrc\"},{\"title\":\"不说\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%8D%E8%AF%B4.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/bushuo.lrc\"},{\"title\":\"看见\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%9C%8B%E8%A7%81.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/kanjian.lrc\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-HgdWgcKI\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<h1 id=\"秒速五厘米\"><a href=\"#秒速五厘米\" class=\"headerlink\" title=\"秒速五厘米\"></a>秒速五厘米</h1>\n        <div id=\"aplayer-QmRFYvBQ\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"山崎まさよし - 桜花抄\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/01%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E6%A1%9C%E8%8A%B1%E6%8A%84.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 想い出は遠くの日々\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/02%20%E5%A4%A9%E9%96%80%20-%20%E6%83%B3%E3%81%84%E5%87%BA%E3%81%AF%E9%81%A0%E3%81%8F%E3%81%AE%E6%97%A5%E3%80%85.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 焦燥\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/03%20%E5%A4%A9%E9%96%80%20-%20%E7%84%A6%E7%87%A5.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"山崎まさよし - 雪の駅\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/04%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E9%9B%AA%E3%81%AE%E9%A7%85.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"山崎まさよし - Kiss\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/05%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20Kiss.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - カナエの気持ち\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/06%20%E5%A4%A9%E9%96%80%20-%20%E3%82%AB%E3%83%8A%E3%82%A8%E3%81%AE%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 夢\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/07%20%E5%A4%A9%E9%96%80%20-%20%E5%A4%A2.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 空と海の詩\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/08%20%E5%A4%A9%E9%96%80%20-%20%E7%A9%BA%E3%81%A8%E6%B5%B7%E3%81%AE%E8%A9%A9.mp3c\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 届かない気持ち\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/09%20%E5%A4%A9%E9%96%80%20-%20%E5%B1%8A%E3%81%8B%E3%81%AA%E3%81%84%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - End Theme\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/10%20%E5%A4%A9%E9%96%80%20-%20End%20Theme.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"One more time, One more chance\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/11%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20One%20more%20time%2C%20One%20more%20chance%20(piano%20version).mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-QmRFYvBQ\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<h1 id=\"那些年听过的歌\"><a href=\"#那些年听过的歌\" class=\"headerlink\" title=\"那些年听过的歌\"></a>那些年听过的歌</h1>\n        <div id=\"aplayer-IjXfKYFx\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"生如夏花\",\"author\":\"朴树\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E6%9C%B4%E6%A0%91%20-%20%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1.flac\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1%E6%AD%8C%E6%9B%B2%E5%B0%81%E9%9D%A2.jpg\",\"lrc\":\"file/lrc/sheng_ru_xia_hua.lrc\"},{\"title\":\"Last Dance\",\"author\":\"伍佰\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\"lrc\":\"file/lrc/lastdance.lrc\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-IjXfKYFx\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>","excerpt":"","more":"<h1 id=\"在树上唱歌\"><a href=\"#在树上唱歌\" class=\"headerlink\" title=\"在树上唱歌\"></a>在树上唱歌</h1>\n        <div id=\"aplayer-HgdWgcKI\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"在树上唱歌\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/zaishushangchangge.lrc\"},{\"title\":\"明白\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E6%98%8E%E7%99%BD.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/mingbai.lrc\"},{\"title\":\"心墙\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E5%BF%83%E5%A2%99.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/xinqiang.lrc\"},{\"title\":\"牛角尖\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%89%9B%E8%A7%92%E5%B0%96.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/niujiaojian.lrc\"},{\"title\":\"简单\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%AE%80%E5%8D%95.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/jiandan.lrc\"},{\"title\":\"Goodbye\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20Goodbye.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/goodbye.lrc\"},{\"title\":\"蒙娜丽莎\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E8%92%99%E5%A8%9C%E4%B8%BD%E8%8E%8E.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/mengnalisha.lrc\"},{\"title\":\"三部曲\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%89%E9%83%A8%E6%9B%B2.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/sanbuqu.lrc\"},{\"title\":\"不说\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E4%B8%8D%E8%AF%B4.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/bushuo.lrc\"},{\"title\":\"看见\",\"author\":\"郭静\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C/%5B%E9%83%AD%E9%9D%99%5D%20%E7%9C%8B%E8%A7%81.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E5%9C%A8%E6%A0%91%E4%B8%8A%E5%94%B1%E6%AD%8C%E5%B0%81%E9%9D%A2.png\",\"lrc\":\"file/lrc/kanjian.lrc\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-HgdWgcKI\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<h1 id=\"秒速五厘米\"><a href=\"#秒速五厘米\" class=\"headerlink\" title=\"秒速五厘米\"></a>秒速五厘米</h1>\n        <div id=\"aplayer-QmRFYvBQ\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"山崎まさよし - 桜花抄\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/01%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E6%A1%9C%E8%8A%B1%E6%8A%84.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 想い出は遠くの日々\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/02%20%E5%A4%A9%E9%96%80%20-%20%E6%83%B3%E3%81%84%E5%87%BA%E3%81%AF%E9%81%A0%E3%81%8F%E3%81%AE%E6%97%A5%E3%80%85.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 焦燥\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/03%20%E5%A4%A9%E9%96%80%20-%20%E7%84%A6%E7%87%A5.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"山崎まさよし - 雪の駅\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/04%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20%E9%9B%AA%E3%81%AE%E9%A7%85.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"山崎まさよし - Kiss\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/05%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20Kiss.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - カナエの気持ち\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/06%20%E5%A4%A9%E9%96%80%20-%20%E3%82%AB%E3%83%8A%E3%82%A8%E3%81%AE%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 夢\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/07%20%E5%A4%A9%E9%96%80%20-%20%E5%A4%A2.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 空と海の詩\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/08%20%E5%A4%A9%E9%96%80%20-%20%E7%A9%BA%E3%81%A8%E6%B5%B7%E3%81%AE%E8%A9%A9.mp3c\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - 届かない気持ち\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/09%20%E5%A4%A9%E9%96%80%20-%20%E5%B1%8A%E3%81%8B%E3%81%AA%E3%81%84%E6%B0%97%E6%8C%81%E3%81%A1.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"天門 - End Theme\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/10%20%E5%A4%A9%E9%96%80%20-%20End%20Theme.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"},{\"title\":\"One more time, One more chance\",\"author\":\"秒速五厘米\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/11%20%E5%B1%B1%E5%B4%8E%E3%81%BE%E3%81%95%E3%82%88%E3%81%97%20-%20One%20more%20time%2C%20One%20more%20chance%20(piano%20version).mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3/%E7%A7%92%E9%80%9F%E4%BA%94%E5%8E%98%E7%B1%B3%E5%B0%81%E9%9D%A2.jpg\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-QmRFYvBQ\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<h1 id=\"那些年听过的歌\"><a href=\"#那些年听过的歌\" class=\"headerlink\" title=\"那些年听过的歌\"></a>那些年听过的歌</h1>\n        <div id=\"aplayer-IjXfKYFx\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"生如夏花\",\"author\":\"朴树\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E6%9C%B4%E6%A0%91%20-%20%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1.flac\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/%E9%82%A3%E4%BA%9B%E5%B9%B4%E5%90%AC%E8%BF%87%E7%9A%84%E6%AD%8C/%E7%94%9F%E5%A6%82%E5%A4%8F%E8%8A%B1%E6%AD%8C%E6%9B%B2%E5%B0%81%E9%9D%A2.jpg\",\"lrc\":\"file/lrc/sheng_ru_xia_hua.lrc\"},{\"title\":\"Last Dance\",\"author\":\"伍佰\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\"lrc\":\"file/lrc/lastdance.lrc\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-IjXfKYFx\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>"},{"title":"标签","date":"2020-03-19T14:41:09.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-03-19 22:41:09\ntype: \"tags\"\n---\n","updated":"2024-08-21T03:16:19.810Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm03be2vp00095p6tfbylcong","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script>","excerpt":"","more":""}],"Post":[{"title":"教育的实践—选择与决定（转载）","date":"2022-01-10T14:33:59.000Z","_content":"转载至：[Michelle Wan：教育的实践—选择与决定（20181030）](https://www.wenzhao.ca/2018/10/30/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e7%9a%84%e5%ae%9e%e8%b7%b5-%e9%80%89%e6%8b%a9%e4%b8%8e%e5%86%b3%e5%ae%9a%ef%bc%8820181030%ef%bc%89/)\n\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"教育的实践—选择与决定（转载）\",\n            \"url\": \"http://cdn.zqlxtt.cn/Educational-experience-2.mp3\"\n        }\n    ]\n}\n{% endaplayerlist %}\n\n大家好， 我是Michelle. 首先非常感谢大家对我上一期节目的支持。由于时间关系，上一期节目里未能展开讨论的一个话题，我想在这一期节目中补足。期待跟大家继续在教育话题上展开交流。\n\n上一期节目谈到如何智慧的给孩子留白。那么问题来了。很多家长认为这方法可能有益处，但是比较难以实施。很多家长发现，一旦给孩子时间，他们似乎都将时间浪费掉了。于是，多数家长采用的办法就是，上课，或者按大人的方式给孩子做规划，安排日程。因为作为负责任的家长们，我们实在“不忍”看孩子发呆,无针对性的乱玩，荒废宝贵的成长和学习时间。\n\n我也面对过同样的问题。非常理解这部分家长的担忧和考虑。但是，我认为不给孩子留白的后患可能远比此刻孩子发呆浪费的时间要值得我们重视。为什么这么说呢？要解决这个问题，又有哪些可行性方案呢？我将在这期节目中抛砖引玉与大家讨论。希望各位也不吝赐教。\n\n<!-- more -->\n\n谈到发呆浪费时间，不知大家是否尝试过真正去发呆。苦练瑜伽的朋友跟我讲，最难的不是动作，而是让思绪停下来。对于未经过自我修炼的人来说，发呆其实是个很难达到的“高境界”状态。孩子们有可能天生达到这样的状态吗？根据我的观察，孩子看上去发呆的时候，其实是在思考。有些孩子善于表达，可以告诉你他在想什么。而一些孩子畏难，不知如何表达。被家长问起时，会说“我不知道”或者“没什么”这类让你无法继续追问的回答。\n\n其次，当孩子得到空闲时，他自己会想要去玩什么。此时，他的决定，玩什么并不那么重要。而他自己做选择这个过程却极其重要。生活在自由社会的人习惯去做选择。这是自由的一种表达方式。如果一个人长期没有自由，他也会习惯下意识地放弃做选择。长此以往，比失去做选择的机会更严重的，是这种能力的丧失。一旦失去这样的能力，那么自由二字对他来说意义不大。在我看来，那才是真正的禁锢。我们有多少决定要做？是否做选择的能力真的那么重要呢？\n\n一份哥伦比亚大学的调查报告显示，一个人平均每天要做的决定有70个。另有报告显示，平均来看一个公司总裁每周要完成139项任务。在每个决定上花的时间不到9分钟。\n\n由此可见，做决定的能力要尽早培养。对待孩子，我们是否给他们在一些事务上做选择和决定的机会就尤为重要。很多家长认为，孩子什么都不懂，越小的孩子越是什么都不懂。让他们做选择一定会把事情搞乱，搞砸。那么，我们试问，一个从小没有锻炼过某一方面技能的孩子，长大后通过观察，不通过实践和试错而掌握这项技能的概率有多大呢？让孩子做决定不是要走到另外一个极端，放任他们想怎样就怎样。这个过程是个家长与孩子互动的过程。下面，我想谈四点我认为这个过程中必不可少的几个方面。\n\n首先，责任要明确。既然涉及到做决定，那就一定会有consequences, 就是后果。自由的另一面就是责任。二者是手心与手背的关系。那么参与到做决定中的人都要为结果负责。举个例子，家有琴娃的家长普遍为如何让孩子能主动练琴而伤脑筋。当然，有人说，学那么多有什么用。干脆不要学就是了。有用论不在我们今天讨论的范畴之内。我想跟大家探讨的是如何通过这些难题而历练和培养孩子的其他能力。在这个问题上，我们首先要跟孩子达成共识。练琴是她的责任，不是家长的。孩子有自由选择不练，但是在做出这样的选择之前，她也同时要清楚地了解做出这样的选择会承担怎样的后果。例如，如果因为自己选择不去练琴而曲子没有达到老师的要求，那么这一周的钢琴课费用就要由她自己来承担。那么这就涉及到自由选择所需要的第二个必要条件：有支配资源的权力。\n\n上面的例子提及要孩子自己承担费用。那么前提是，她必须有这样的资源供她分配。同时，即便是不用这笔钱来教课业费，她也要有自由支配这些钱的权力。这种权力和资源是必要的条件。当然，在此我们只是拿零用钱来做例子。即便是对于没有零用钱的孩子来说，他/她们其实也有其他资源，例如他们的玩具，喜欢的书籍，打游戏的时间，与朋友玩耍的时间，等等资源。这个资源是广义的，不仅限于物质方面。对于那些家长管控比较严格的亲子关系中，也许孩子并没有这样的资源，更没有可以自由分配和使用这样资源的权力，那么我所推荐的整套方案对您是完全不可行的。不过这种可能是很极端的情况了。对于那些完全没有权力和资源的孩子来说，可能根本谈不上为自己的决定付出代价。他们也无法体会那种为自己的错误选择而付出代价的体验是怎样的心理过程。作为家长，可能所剩不多的解决方案就是在孩子做错事后来惩罚他/她。当然，也不排除有我不熟悉的其他方案解决。回到刚才的话题，对于有权力和资源的孩子来说，是否家长就任由他们随意、随性做选择呢？在我看来，引导孩子做正确选择和决定，还有第三个必要因素，就是尽早给出guideline (标准)。\n\n在孩子做选择前，除了要跟孩子讲清楚责任和后果，我们还应该一起商定做选择的标准。很多家长不是经常说嘛，这么小的孩子懂什么。要他们做决定，还不是乱做。我们的确会遇到这样的问题。这也是第三步要解决的问题。在明确责任与后果后，我们要一起商讨什么是好的选择，什么是坏的选择。通常，孩子并不像我们想象的那么一无所知。即便是刚上学的小孩子，通过多年观察父母，观察周边人的行为，他们对好和坏已经有了基本的观念。通过跟孩子沟通，我们可以更加确信的了解他们对好和坏是有清楚认知的。还是拿练琴来举例，既然选择了学习钢琴，那么练习就是好的选择，因为怕困难或者贪玩而不练琴就不是个好的决定。这里，还有个问题要说一下。有的家长可能觉得问题来了，我的小孩学钢琴不是他/她选择的，是家长要求的。那么，我们就回到了原点。对于一件事，如果在自由选择这一处就出现了分歧，那么我的方法就失灵了。因为责任，后果等等我们所讨论的这些内容是针对那个做出自由选择的人而讨论的。当然，在自由选择的过程中，家长仍然可以引导孩子做出决定。但是如果孩子实在不愿意，家长又因为其他原因要求孩子必须做，那么这个责任和后果可能都落到了家长的头上。如果再强行将家长自己设定的标准施压到孩子身上，那后果可想而知了。 恐怕除了家长操心督促，还少不了某种物质赏罚方式才能强迫孩子练琴了。\n\n另外，我想补充一点，让孩子为错误决定承担责任和接受惩罚，在我看来不是一个概念。有人可能觉得，不都是让他/她感到心痛了吗，有什么不同呢？有本质上的差异。前者，是在责任和标准都明确的前提下进行的。而且，因为孩子参与整个过程，对于结果的走向，他/她是有一定控制能力的。而后者，单纯的惩罚则不同。孩子没有参与前期的安排，甚至对于家长要的那个结果，他们都没有被赋予思考自己是否能行，能做到什么程度这样一个参与的机会。也就是说，在孩子内心深处，对于这个结果他/她是处于失控状态。那么，再为此付出代价，就是被惩罚了。\n\n前面我们讨论过了明确责任，后果和标准的重要性。在确定孩子清楚认知了这些之后，我们还应该有一套改错机制。因为是人就一定会犯错，何况孩子。孩子明知故犯的情况还是时有发生的。我相信，即便是再民主的家长也不会任由孩子使性子在错误的路上“自由”下去。如果孩子执意做错误的决定怎么办呢？我的孩子曾经有一次明确地告诉我，她决定那个星期自己付钢琴课的学费。原因是她那周不打算练琴，而且她有足够多的压岁钱。因为前面有过约定，我也要按规定做事。结果，仅过了一周，觉得自己超级“富有”的她给自己算了一笔账。她惊讶的跟我说，钢琴课怎么这么贵。她发现，即便拿出全部零用钱，恐怕也交不了几堂课的学费。我给她另一个选择，如果实在不想练习，完全可以把课停了。结果，她与我见过的很多孩子一样。他们都喜欢上课，但是有时不愿练习。可想而知，她自己也明白了，既然选择了学琴，那后面无论要付出怎样的努力都是她自己的责任。从那以后，我再也没用苦口婆心的提醒孩子需要练琴了。\n\n也许大家都感受到了，通过讨论责任，承担后果，标准以及修正错误这个过程的学习和成长是比较正面和积极的。与单纯的赏罚方式比较，给我感触较深的就是这个过程屏蔽掉了恐惧和对外界物质刺激的依赖心理这些因素对孩子的影响。\n\n好了，今天的节目就到这里。希望本期的节目对大家有所帮助。非常感谢有机会能与文昭网站的朋友们一起交流教育话题。我们下期再会。","source":"_posts/Educational-experience-2.md","raw":"---\ntitle: 教育的实践—选择与决定（转载）\ndate: 2022-01-10 22:33:59\ntags: '教育'\n---\n转载至：[Michelle Wan：教育的实践—选择与决定（20181030）](https://www.wenzhao.ca/2018/10/30/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e7%9a%84%e5%ae%9e%e8%b7%b5-%e9%80%89%e6%8b%a9%e4%b8%8e%e5%86%b3%e5%ae%9a%ef%bc%8820181030%ef%bc%89/)\n\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"教育的实践—选择与决定（转载）\",\n            \"url\": \"http://cdn.zqlxtt.cn/Educational-experience-2.mp3\"\n        }\n    ]\n}\n{% endaplayerlist %}\n\n大家好， 我是Michelle. 首先非常感谢大家对我上一期节目的支持。由于时间关系，上一期节目里未能展开讨论的一个话题，我想在这一期节目中补足。期待跟大家继续在教育话题上展开交流。\n\n上一期节目谈到如何智慧的给孩子留白。那么问题来了。很多家长认为这方法可能有益处，但是比较难以实施。很多家长发现，一旦给孩子时间，他们似乎都将时间浪费掉了。于是，多数家长采用的办法就是，上课，或者按大人的方式给孩子做规划，安排日程。因为作为负责任的家长们，我们实在“不忍”看孩子发呆,无针对性的乱玩，荒废宝贵的成长和学习时间。\n\n我也面对过同样的问题。非常理解这部分家长的担忧和考虑。但是，我认为不给孩子留白的后患可能远比此刻孩子发呆浪费的时间要值得我们重视。为什么这么说呢？要解决这个问题，又有哪些可行性方案呢？我将在这期节目中抛砖引玉与大家讨论。希望各位也不吝赐教。\n\n<!-- more -->\n\n谈到发呆浪费时间，不知大家是否尝试过真正去发呆。苦练瑜伽的朋友跟我讲，最难的不是动作，而是让思绪停下来。对于未经过自我修炼的人来说，发呆其实是个很难达到的“高境界”状态。孩子们有可能天生达到这样的状态吗？根据我的观察，孩子看上去发呆的时候，其实是在思考。有些孩子善于表达，可以告诉你他在想什么。而一些孩子畏难，不知如何表达。被家长问起时，会说“我不知道”或者“没什么”这类让你无法继续追问的回答。\n\n其次，当孩子得到空闲时，他自己会想要去玩什么。此时，他的决定，玩什么并不那么重要。而他自己做选择这个过程却极其重要。生活在自由社会的人习惯去做选择。这是自由的一种表达方式。如果一个人长期没有自由，他也会习惯下意识地放弃做选择。长此以往，比失去做选择的机会更严重的，是这种能力的丧失。一旦失去这样的能力，那么自由二字对他来说意义不大。在我看来，那才是真正的禁锢。我们有多少决定要做？是否做选择的能力真的那么重要呢？\n\n一份哥伦比亚大学的调查报告显示，一个人平均每天要做的决定有70个。另有报告显示，平均来看一个公司总裁每周要完成139项任务。在每个决定上花的时间不到9分钟。\n\n由此可见，做决定的能力要尽早培养。对待孩子，我们是否给他们在一些事务上做选择和决定的机会就尤为重要。很多家长认为，孩子什么都不懂，越小的孩子越是什么都不懂。让他们做选择一定会把事情搞乱，搞砸。那么，我们试问，一个从小没有锻炼过某一方面技能的孩子，长大后通过观察，不通过实践和试错而掌握这项技能的概率有多大呢？让孩子做决定不是要走到另外一个极端，放任他们想怎样就怎样。这个过程是个家长与孩子互动的过程。下面，我想谈四点我认为这个过程中必不可少的几个方面。\n\n首先，责任要明确。既然涉及到做决定，那就一定会有consequences, 就是后果。自由的另一面就是责任。二者是手心与手背的关系。那么参与到做决定中的人都要为结果负责。举个例子，家有琴娃的家长普遍为如何让孩子能主动练琴而伤脑筋。当然，有人说，学那么多有什么用。干脆不要学就是了。有用论不在我们今天讨论的范畴之内。我想跟大家探讨的是如何通过这些难题而历练和培养孩子的其他能力。在这个问题上，我们首先要跟孩子达成共识。练琴是她的责任，不是家长的。孩子有自由选择不练，但是在做出这样的选择之前，她也同时要清楚地了解做出这样的选择会承担怎样的后果。例如，如果因为自己选择不去练琴而曲子没有达到老师的要求，那么这一周的钢琴课费用就要由她自己来承担。那么这就涉及到自由选择所需要的第二个必要条件：有支配资源的权力。\n\n上面的例子提及要孩子自己承担费用。那么前提是，她必须有这样的资源供她分配。同时，即便是不用这笔钱来教课业费，她也要有自由支配这些钱的权力。这种权力和资源是必要的条件。当然，在此我们只是拿零用钱来做例子。即便是对于没有零用钱的孩子来说，他/她们其实也有其他资源，例如他们的玩具，喜欢的书籍，打游戏的时间，与朋友玩耍的时间，等等资源。这个资源是广义的，不仅限于物质方面。对于那些家长管控比较严格的亲子关系中，也许孩子并没有这样的资源，更没有可以自由分配和使用这样资源的权力，那么我所推荐的整套方案对您是完全不可行的。不过这种可能是很极端的情况了。对于那些完全没有权力和资源的孩子来说，可能根本谈不上为自己的决定付出代价。他们也无法体会那种为自己的错误选择而付出代价的体验是怎样的心理过程。作为家长，可能所剩不多的解决方案就是在孩子做错事后来惩罚他/她。当然，也不排除有我不熟悉的其他方案解决。回到刚才的话题，对于有权力和资源的孩子来说，是否家长就任由他们随意、随性做选择呢？在我看来，引导孩子做正确选择和决定，还有第三个必要因素，就是尽早给出guideline (标准)。\n\n在孩子做选择前，除了要跟孩子讲清楚责任和后果，我们还应该一起商定做选择的标准。很多家长不是经常说嘛，这么小的孩子懂什么。要他们做决定，还不是乱做。我们的确会遇到这样的问题。这也是第三步要解决的问题。在明确责任与后果后，我们要一起商讨什么是好的选择，什么是坏的选择。通常，孩子并不像我们想象的那么一无所知。即便是刚上学的小孩子，通过多年观察父母，观察周边人的行为，他们对好和坏已经有了基本的观念。通过跟孩子沟通，我们可以更加确信的了解他们对好和坏是有清楚认知的。还是拿练琴来举例，既然选择了学习钢琴，那么练习就是好的选择，因为怕困难或者贪玩而不练琴就不是个好的决定。这里，还有个问题要说一下。有的家长可能觉得问题来了，我的小孩学钢琴不是他/她选择的，是家长要求的。那么，我们就回到了原点。对于一件事，如果在自由选择这一处就出现了分歧，那么我的方法就失灵了。因为责任，后果等等我们所讨论的这些内容是针对那个做出自由选择的人而讨论的。当然，在自由选择的过程中，家长仍然可以引导孩子做出决定。但是如果孩子实在不愿意，家长又因为其他原因要求孩子必须做，那么这个责任和后果可能都落到了家长的头上。如果再强行将家长自己设定的标准施压到孩子身上，那后果可想而知了。 恐怕除了家长操心督促，还少不了某种物质赏罚方式才能强迫孩子练琴了。\n\n另外，我想补充一点，让孩子为错误决定承担责任和接受惩罚，在我看来不是一个概念。有人可能觉得，不都是让他/她感到心痛了吗，有什么不同呢？有本质上的差异。前者，是在责任和标准都明确的前提下进行的。而且，因为孩子参与整个过程，对于结果的走向，他/她是有一定控制能力的。而后者，单纯的惩罚则不同。孩子没有参与前期的安排，甚至对于家长要的那个结果，他们都没有被赋予思考自己是否能行，能做到什么程度这样一个参与的机会。也就是说，在孩子内心深处，对于这个结果他/她是处于失控状态。那么，再为此付出代价，就是被惩罚了。\n\n前面我们讨论过了明确责任，后果和标准的重要性。在确定孩子清楚认知了这些之后，我们还应该有一套改错机制。因为是人就一定会犯错，何况孩子。孩子明知故犯的情况还是时有发生的。我相信，即便是再民主的家长也不会任由孩子使性子在错误的路上“自由”下去。如果孩子执意做错误的决定怎么办呢？我的孩子曾经有一次明确地告诉我，她决定那个星期自己付钢琴课的学费。原因是她那周不打算练琴，而且她有足够多的压岁钱。因为前面有过约定，我也要按规定做事。结果，仅过了一周，觉得自己超级“富有”的她给自己算了一笔账。她惊讶的跟我说，钢琴课怎么这么贵。她发现，即便拿出全部零用钱，恐怕也交不了几堂课的学费。我给她另一个选择，如果实在不想练习，完全可以把课停了。结果，她与我见过的很多孩子一样。他们都喜欢上课，但是有时不愿练习。可想而知，她自己也明白了，既然选择了学琴，那后面无论要付出怎样的努力都是她自己的责任。从那以后，我再也没用苦口婆心的提醒孩子需要练琴了。\n\n也许大家都感受到了，通过讨论责任，承担后果，标准以及修正错误这个过程的学习和成长是比较正面和积极的。与单纯的赏罚方式比较，给我感触较深的就是这个过程屏蔽掉了恐惧和对外界物质刺激的依赖心理这些因素对孩子的影响。\n\n好了，今天的节目就到这里。希望本期的节目对大家有所帮助。非常感谢有机会能与文昭网站的朋友们一起交流教育话题。我们下期再会。","slug":"Educational-experience-2","published":1,"updated":"2024-08-21T03:16:19.779Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vk00015p6t1gax1sfi","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>转载至：<a href=\"https://www.wenzhao.ca/2018/10/30/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e7%9a%84%e5%ae%9e%e8%b7%b5-%e9%80%89%e6%8b%a9%e4%b8%8e%e5%86%b3%e5%ae%9a%ef%bc%8820181030%ef%bc%89/\">Michelle Wan：教育的实践—选择与决定（20181030）</a></p>\n\n        <div id=\"aplayer-XEFPleno\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"教育的实践—选择与决定（转载）\",\"url\":\"http://cdn.zqlxtt.cn/Educational-experience-2.mp3\",\"pic\":\"\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-XEFPleno\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<p>大家好， 我是Michelle. 首先非常感谢大家对我上一期节目的支持。由于时间关系，上一期节目里未能展开讨论的一个话题，我想在这一期节目中补足。期待跟大家继续在教育话题上展开交流。</p>\n<p>上一期节目谈到如何智慧的给孩子留白。那么问题来了。很多家长认为这方法可能有益处，但是比较难以实施。很多家长发现，一旦给孩子时间，他们似乎都将时间浪费掉了。于是，多数家长采用的办法就是，上课，或者按大人的方式给孩子做规划，安排日程。因为作为负责任的家长们，我们实在“不忍”看孩子发呆,无针对性的乱玩，荒废宝贵的成长和学习时间。</p>\n<p>我也面对过同样的问题。非常理解这部分家长的担忧和考虑。但是，我认为不给孩子留白的后患可能远比此刻孩子发呆浪费的时间要值得我们重视。为什么这么说呢？要解决这个问题，又有哪些可行性方案呢？我将在这期节目中抛砖引玉与大家讨论。希望各位也不吝赐教。</p>\n<span id=\"more\"></span>\n\n<p>谈到发呆浪费时间，不知大家是否尝试过真正去发呆。苦练瑜伽的朋友跟我讲，最难的不是动作，而是让思绪停下来。对于未经过自我修炼的人来说，发呆其实是个很难达到的“高境界”状态。孩子们有可能天生达到这样的状态吗？根据我的观察，孩子看上去发呆的时候，其实是在思考。有些孩子善于表达，可以告诉你他在想什么。而一些孩子畏难，不知如何表达。被家长问起时，会说“我不知道”或者“没什么”这类让你无法继续追问的回答。</p>\n<p>其次，当孩子得到空闲时，他自己会想要去玩什么。此时，他的决定，玩什么并不那么重要。而他自己做选择这个过程却极其重要。生活在自由社会的人习惯去做选择。这是自由的一种表达方式。如果一个人长期没有自由，他也会习惯下意识地放弃做选择。长此以往，比失去做选择的机会更严重的，是这种能力的丧失。一旦失去这样的能力，那么自由二字对他来说意义不大。在我看来，那才是真正的禁锢。我们有多少决定要做？是否做选择的能力真的那么重要呢？</p>\n<p>一份哥伦比亚大学的调查报告显示，一个人平均每天要做的决定有70个。另有报告显示，平均来看一个公司总裁每周要完成139项任务。在每个决定上花的时间不到9分钟。</p>\n<p>由此可见，做决定的能力要尽早培养。对待孩子，我们是否给他们在一些事务上做选择和决定的机会就尤为重要。很多家长认为，孩子什么都不懂，越小的孩子越是什么都不懂。让他们做选择一定会把事情搞乱，搞砸。那么，我们试问，一个从小没有锻炼过某一方面技能的孩子，长大后通过观察，不通过实践和试错而掌握这项技能的概率有多大呢？让孩子做决定不是要走到另外一个极端，放任他们想怎样就怎样。这个过程是个家长与孩子互动的过程。下面，我想谈四点我认为这个过程中必不可少的几个方面。</p>\n<p>首先，责任要明确。既然涉及到做决定，那就一定会有consequences, 就是后果。自由的另一面就是责任。二者是手心与手背的关系。那么参与到做决定中的人都要为结果负责。举个例子，家有琴娃的家长普遍为如何让孩子能主动练琴而伤脑筋。当然，有人说，学那么多有什么用。干脆不要学就是了。有用论不在我们今天讨论的范畴之内。我想跟大家探讨的是如何通过这些难题而历练和培养孩子的其他能力。在这个问题上，我们首先要跟孩子达成共识。练琴是她的责任，不是家长的。孩子有自由选择不练，但是在做出这样的选择之前，她也同时要清楚地了解做出这样的选择会承担怎样的后果。例如，如果因为自己选择不去练琴而曲子没有达到老师的要求，那么这一周的钢琴课费用就要由她自己来承担。那么这就涉及到自由选择所需要的第二个必要条件：有支配资源的权力。</p>\n<p>上面的例子提及要孩子自己承担费用。那么前提是，她必须有这样的资源供她分配。同时，即便是不用这笔钱来教课业费，她也要有自由支配这些钱的权力。这种权力和资源是必要的条件。当然，在此我们只是拿零用钱来做例子。即便是对于没有零用钱的孩子来说，他/她们其实也有其他资源，例如他们的玩具，喜欢的书籍，打游戏的时间，与朋友玩耍的时间，等等资源。这个资源是广义的，不仅限于物质方面。对于那些家长管控比较严格的亲子关系中，也许孩子并没有这样的资源，更没有可以自由分配和使用这样资源的权力，那么我所推荐的整套方案对您是完全不可行的。不过这种可能是很极端的情况了。对于那些完全没有权力和资源的孩子来说，可能根本谈不上为自己的决定付出代价。他们也无法体会那种为自己的错误选择而付出代价的体验是怎样的心理过程。作为家长，可能所剩不多的解决方案就是在孩子做错事后来惩罚他/她。当然，也不排除有我不熟悉的其他方案解决。回到刚才的话题，对于有权力和资源的孩子来说，是否家长就任由他们随意、随性做选择呢？在我看来，引导孩子做正确选择和决定，还有第三个必要因素，就是尽早给出guideline (标准)。</p>\n<p>在孩子做选择前，除了要跟孩子讲清楚责任和后果，我们还应该一起商定做选择的标准。很多家长不是经常说嘛，这么小的孩子懂什么。要他们做决定，还不是乱做。我们的确会遇到这样的问题。这也是第三步要解决的问题。在明确责任与后果后，我们要一起商讨什么是好的选择，什么是坏的选择。通常，孩子并不像我们想象的那么一无所知。即便是刚上学的小孩子，通过多年观察父母，观察周边人的行为，他们对好和坏已经有了基本的观念。通过跟孩子沟通，我们可以更加确信的了解他们对好和坏是有清楚认知的。还是拿练琴来举例，既然选择了学习钢琴，那么练习就是好的选择，因为怕困难或者贪玩而不练琴就不是个好的决定。这里，还有个问题要说一下。有的家长可能觉得问题来了，我的小孩学钢琴不是他/她选择的，是家长要求的。那么，我们就回到了原点。对于一件事，如果在自由选择这一处就出现了分歧，那么我的方法就失灵了。因为责任，后果等等我们所讨论的这些内容是针对那个做出自由选择的人而讨论的。当然，在自由选择的过程中，家长仍然可以引导孩子做出决定。但是如果孩子实在不愿意，家长又因为其他原因要求孩子必须做，那么这个责任和后果可能都落到了家长的头上。如果再强行将家长自己设定的标准施压到孩子身上，那后果可想而知了。 恐怕除了家长操心督促，还少不了某种物质赏罚方式才能强迫孩子练琴了。</p>\n<p>另外，我想补充一点，让孩子为错误决定承担责任和接受惩罚，在我看来不是一个概念。有人可能觉得，不都是让他/她感到心痛了吗，有什么不同呢？有本质上的差异。前者，是在责任和标准都明确的前提下进行的。而且，因为孩子参与整个过程，对于结果的走向，他/她是有一定控制能力的。而后者，单纯的惩罚则不同。孩子没有参与前期的安排，甚至对于家长要的那个结果，他们都没有被赋予思考自己是否能行，能做到什么程度这样一个参与的机会。也就是说，在孩子内心深处，对于这个结果他/她是处于失控状态。那么，再为此付出代价，就是被惩罚了。</p>\n<p>前面我们讨论过了明确责任，后果和标准的重要性。在确定孩子清楚认知了这些之后，我们还应该有一套改错机制。因为是人就一定会犯错，何况孩子。孩子明知故犯的情况还是时有发生的。我相信，即便是再民主的家长也不会任由孩子使性子在错误的路上“自由”下去。如果孩子执意做错误的决定怎么办呢？我的孩子曾经有一次明确地告诉我，她决定那个星期自己付钢琴课的学费。原因是她那周不打算练琴，而且她有足够多的压岁钱。因为前面有过约定，我也要按规定做事。结果，仅过了一周，觉得自己超级“富有”的她给自己算了一笔账。她惊讶的跟我说，钢琴课怎么这么贵。她发现，即便拿出全部零用钱，恐怕也交不了几堂课的学费。我给她另一个选择，如果实在不想练习，完全可以把课停了。结果，她与我见过的很多孩子一样。他们都喜欢上课，但是有时不愿练习。可想而知，她自己也明白了，既然选择了学琴，那后面无论要付出怎样的努力都是她自己的责任。从那以后，我再也没用苦口婆心的提醒孩子需要练琴了。</p>\n<p>也许大家都感受到了，通过讨论责任，承担后果，标准以及修正错误这个过程的学习和成长是比较正面和积极的。与单纯的赏罚方式比较，给我感触较深的就是这个过程屏蔽掉了恐惧和对外界物质刺激的依赖心理这些因素对孩子的影响。</p>\n<p>好了，今天的节目就到这里。希望本期的节目对大家有所帮助。非常感谢有机会能与文昭网站的朋友们一起交流教育话题。我们下期再会。</p>\n","excerpt":"<p>转载至：<a href=\"https://www.wenzhao.ca/2018/10/30/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e7%9a%84%e5%ae%9e%e8%b7%b5-%e9%80%89%e6%8b%a9%e4%b8%8e%e5%86%b3%e5%ae%9a%ef%bc%8820181030%ef%bc%89/\">Michelle Wan：教育的实践—选择与决定（20181030）</a></p>\n\n        <div id=\"aplayer-XEFPleno\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"教育的实践—选择与决定（转载）\",\"url\":\"http://cdn.zqlxtt.cn/Educational-experience-2.mp3\",\"pic\":\"\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-XEFPleno\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<p>大家好， 我是Michelle. 首先非常感谢大家对我上一期节目的支持。由于时间关系，上一期节目里未能展开讨论的一个话题，我想在这一期节目中补足。期待跟大家继续在教育话题上展开交流。</p>\n<p>上一期节目谈到如何智慧的给孩子留白。那么问题来了。很多家长认为这方法可能有益处，但是比较难以实施。很多家长发现，一旦给孩子时间，他们似乎都将时间浪费掉了。于是，多数家长采用的办法就是，上课，或者按大人的方式给孩子做规划，安排日程。因为作为负责任的家长们，我们实在“不忍”看孩子发呆,无针对性的乱玩，荒废宝贵的成长和学习时间。</p>\n<p>我也面对过同样的问题。非常理解这部分家长的担忧和考虑。但是，我认为不给孩子留白的后患可能远比此刻孩子发呆浪费的时间要值得我们重视。为什么这么说呢？要解决这个问题，又有哪些可行性方案呢？我将在这期节目中抛砖引玉与大家讨论。希望各位也不吝赐教。</p>","more":"<p>谈到发呆浪费时间，不知大家是否尝试过真正去发呆。苦练瑜伽的朋友跟我讲，最难的不是动作，而是让思绪停下来。对于未经过自我修炼的人来说，发呆其实是个很难达到的“高境界”状态。孩子们有可能天生达到这样的状态吗？根据我的观察，孩子看上去发呆的时候，其实是在思考。有些孩子善于表达，可以告诉你他在想什么。而一些孩子畏难，不知如何表达。被家长问起时，会说“我不知道”或者“没什么”这类让你无法继续追问的回答。</p>\n<p>其次，当孩子得到空闲时，他自己会想要去玩什么。此时，他的决定，玩什么并不那么重要。而他自己做选择这个过程却极其重要。生活在自由社会的人习惯去做选择。这是自由的一种表达方式。如果一个人长期没有自由，他也会习惯下意识地放弃做选择。长此以往，比失去做选择的机会更严重的，是这种能力的丧失。一旦失去这样的能力，那么自由二字对他来说意义不大。在我看来，那才是真正的禁锢。我们有多少决定要做？是否做选择的能力真的那么重要呢？</p>\n<p>一份哥伦比亚大学的调查报告显示，一个人平均每天要做的决定有70个。另有报告显示，平均来看一个公司总裁每周要完成139项任务。在每个决定上花的时间不到9分钟。</p>\n<p>由此可见，做决定的能力要尽早培养。对待孩子，我们是否给他们在一些事务上做选择和决定的机会就尤为重要。很多家长认为，孩子什么都不懂，越小的孩子越是什么都不懂。让他们做选择一定会把事情搞乱，搞砸。那么，我们试问，一个从小没有锻炼过某一方面技能的孩子，长大后通过观察，不通过实践和试错而掌握这项技能的概率有多大呢？让孩子做决定不是要走到另外一个极端，放任他们想怎样就怎样。这个过程是个家长与孩子互动的过程。下面，我想谈四点我认为这个过程中必不可少的几个方面。</p>\n<p>首先，责任要明确。既然涉及到做决定，那就一定会有consequences, 就是后果。自由的另一面就是责任。二者是手心与手背的关系。那么参与到做决定中的人都要为结果负责。举个例子，家有琴娃的家长普遍为如何让孩子能主动练琴而伤脑筋。当然，有人说，学那么多有什么用。干脆不要学就是了。有用论不在我们今天讨论的范畴之内。我想跟大家探讨的是如何通过这些难题而历练和培养孩子的其他能力。在这个问题上，我们首先要跟孩子达成共识。练琴是她的责任，不是家长的。孩子有自由选择不练，但是在做出这样的选择之前，她也同时要清楚地了解做出这样的选择会承担怎样的后果。例如，如果因为自己选择不去练琴而曲子没有达到老师的要求，那么这一周的钢琴课费用就要由她自己来承担。那么这就涉及到自由选择所需要的第二个必要条件：有支配资源的权力。</p>\n<p>上面的例子提及要孩子自己承担费用。那么前提是，她必须有这样的资源供她分配。同时，即便是不用这笔钱来教课业费，她也要有自由支配这些钱的权力。这种权力和资源是必要的条件。当然，在此我们只是拿零用钱来做例子。即便是对于没有零用钱的孩子来说，他/她们其实也有其他资源，例如他们的玩具，喜欢的书籍，打游戏的时间，与朋友玩耍的时间，等等资源。这个资源是广义的，不仅限于物质方面。对于那些家长管控比较严格的亲子关系中，也许孩子并没有这样的资源，更没有可以自由分配和使用这样资源的权力，那么我所推荐的整套方案对您是完全不可行的。不过这种可能是很极端的情况了。对于那些完全没有权力和资源的孩子来说，可能根本谈不上为自己的决定付出代价。他们也无法体会那种为自己的错误选择而付出代价的体验是怎样的心理过程。作为家长，可能所剩不多的解决方案就是在孩子做错事后来惩罚他/她。当然，也不排除有我不熟悉的其他方案解决。回到刚才的话题，对于有权力和资源的孩子来说，是否家长就任由他们随意、随性做选择呢？在我看来，引导孩子做正确选择和决定，还有第三个必要因素，就是尽早给出guideline (标准)。</p>\n<p>在孩子做选择前，除了要跟孩子讲清楚责任和后果，我们还应该一起商定做选择的标准。很多家长不是经常说嘛，这么小的孩子懂什么。要他们做决定，还不是乱做。我们的确会遇到这样的问题。这也是第三步要解决的问题。在明确责任与后果后，我们要一起商讨什么是好的选择，什么是坏的选择。通常，孩子并不像我们想象的那么一无所知。即便是刚上学的小孩子，通过多年观察父母，观察周边人的行为，他们对好和坏已经有了基本的观念。通过跟孩子沟通，我们可以更加确信的了解他们对好和坏是有清楚认知的。还是拿练琴来举例，既然选择了学习钢琴，那么练习就是好的选择，因为怕困难或者贪玩而不练琴就不是个好的决定。这里，还有个问题要说一下。有的家长可能觉得问题来了，我的小孩学钢琴不是他/她选择的，是家长要求的。那么，我们就回到了原点。对于一件事，如果在自由选择这一处就出现了分歧，那么我的方法就失灵了。因为责任，后果等等我们所讨论的这些内容是针对那个做出自由选择的人而讨论的。当然，在自由选择的过程中，家长仍然可以引导孩子做出决定。但是如果孩子实在不愿意，家长又因为其他原因要求孩子必须做，那么这个责任和后果可能都落到了家长的头上。如果再强行将家长自己设定的标准施压到孩子身上，那后果可想而知了。 恐怕除了家长操心督促，还少不了某种物质赏罚方式才能强迫孩子练琴了。</p>\n<p>另外，我想补充一点，让孩子为错误决定承担责任和接受惩罚，在我看来不是一个概念。有人可能觉得，不都是让他/她感到心痛了吗，有什么不同呢？有本质上的差异。前者，是在责任和标准都明确的前提下进行的。而且，因为孩子参与整个过程，对于结果的走向，他/她是有一定控制能力的。而后者，单纯的惩罚则不同。孩子没有参与前期的安排，甚至对于家长要的那个结果，他们都没有被赋予思考自己是否能行，能做到什么程度这样一个参与的机会。也就是说，在孩子内心深处，对于这个结果他/她是处于失控状态。那么，再为此付出代价，就是被惩罚了。</p>\n<p>前面我们讨论过了明确责任，后果和标准的重要性。在确定孩子清楚认知了这些之后，我们还应该有一套改错机制。因为是人就一定会犯错，何况孩子。孩子明知故犯的情况还是时有发生的。我相信，即便是再民主的家长也不会任由孩子使性子在错误的路上“自由”下去。如果孩子执意做错误的决定怎么办呢？我的孩子曾经有一次明确地告诉我，她决定那个星期自己付钢琴课的学费。原因是她那周不打算练琴，而且她有足够多的压岁钱。因为前面有过约定，我也要按规定做事。结果，仅过了一周，觉得自己超级“富有”的她给自己算了一笔账。她惊讶的跟我说，钢琴课怎么这么贵。她发现，即便拿出全部零用钱，恐怕也交不了几堂课的学费。我给她另一个选择，如果实在不想练习，完全可以把课停了。结果，她与我见过的很多孩子一样。他们都喜欢上课，但是有时不愿练习。可想而知，她自己也明白了，既然选择了学琴，那后面无论要付出怎样的努力都是她自己的责任。从那以后，我再也没用苦口婆心的提醒孩子需要练琴了。</p>\n<p>也许大家都感受到了，通过讨论责任，承担后果，标准以及修正错误这个过程的学习和成长是比较正面和积极的。与单纯的赏罚方式比较，给我感触较深的就是这个过程屏蔽掉了恐惧和对外界物质刺激的依赖心理这些因素对孩子的影响。</p>\n<p>好了，今天的节目就到这里。希望本期的节目对大家有所帮助。非常感谢有机会能与文昭网站的朋友们一起交流教育话题。我们下期再会。</p>"},{"title":"教育心得—智慧地给孩子留白（转载）","date":"2022-01-10T14:17:30.000Z","_content":"转载至：[Michelle Wan：教育心得——智慧地给孩子留白（20181006）](https://www.wenzhao.ca/2018/10/06/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e5%bf%83%e5%be%97-%e6%99%ba%e6%85%a7%e5%9c%b0%e7%bb%99%e5%ad%a9%e5%ad%90%e7%95%99%e7%99%bd%ef%bc%8820181006/)\n\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"教育心得—智慧地给孩子留白（转载）\",\n            \"url\": \"http://cdn.zqlxtt.cn/Educational-experience-1.mp3\"\n        }\n    ]\n}\n{% endaplayerlist %}\n\n大家好，我是文昭，今天这集节目是来自于Michelle Wan女士的教育心得：智慧地给孩子留白。这期节目篇幅不长，但是“留白”这个概念与教育相结合，这样一个视角一下就引起我的兴趣。今天开头这一段算是我不揣冒昧，越俎代庖，在进入教育这个话题之前，对“留白”这个概念为什么能和教育实践贯通起来，做个解释。\n\n留白是中国画的一个传统技法，它的关键是在于：画面的美感，不是画家创作好了，端给观众们来品位的，而就要求观赏者的参与，最后那个美感是画家和赏画者共同完成的！\n\n“留白”相当于发出了一个邀请，它其实就是一种审美教育的手段，因为赏画的人参与了对美感的构建，他的审美能力、鉴赏品位在这个过程中得到了锻炼和充实，这其实就是教育要达到的目的\n\n<!-- more -->\n\n比如中国画里画月亮，一般不会以颜色、线条、光影这些西方油画或水彩画的要素来表示月亮，而是画云彩，在云彩当中留一块白，这块白就是月亮。这叫“烘云托月”（“烘托”这个成语就是这么来），画面的主题月亮，是一种不存在的方式来显示“存在”。那这个月亮应该是什么样呢、还给人的观感是什么呢？观赏这幅画的人实际上得把自己的理解力、和想像力加进去，才能达成对画面的完整诠释。所以如果你最终觉得这个画面很美、很动人，请不必谦虚，这个美感有一部分是你和画家共同完成的，你不再是这幅画被动的欣赏者，你可以是说这幅画的作者之一、这幅画有多少人欣赏，就有多少个作者。而最后那个印象一定会是很生动地、很深刻地留在你的心里，因为you are a part of it. 而这恰恰就是教育要达到的理想目标——把一个观念内化为自己的感受，你是在用你的全部生命、情感在体会它。你的情感因此变得更加丰富、理解力也得到了提升，你不是仅仅记忆一堆符号和定义，那教育的目标就达成了。\n\n“留白”这个思想进一步说，是“虚实相生”这个道家思想在艺术上的体现，画云彩，不实打实地把月亮画出来，这叫“虚”；可给人的印象又是如此的深刻，这叫“实”，虚和实这两概念的切换通过艺术完美地展现。留白的技法在中国的园林设计、文学创作上都有广泛的运用，唯有不着笔墨，得“无为”，留下这个“虚”、这个“白”，才能展示出意境。\n\n典型的像《诗经 国风》的《关雎》篇：“关关雎鸠，在河之洲，窈窕淑女，君子好逑。参差荇菜，左右流之，窈窕淑女，寤寐求之”。你看，诗里说的是雎鸠这种水鸟，说的是荇菜这种水草，然后就是诗人感受。窈窕淑女在哪儿，长什么样、什么打扮、高矮胖瘦如何，是什么来历、又姓甚名谁啊，诗中都没有出现，这叫结构性的留白。可是作为读者你是不是浮想联翩啊，头脑中不断构想这位让诗人魂牵梦绕的女子的芳容啊？这就是留白的魅力。要没有这些浮想联翩你又怎么会觉得这首诗很美呢？\n\n说了这么多是我喧宾夺主，是我对万女士教育心得的心得，想从审美教育，培养美感这个角度深谈一下“留白”和教育的贯通之处。在这期节目中，万女士还谈到了投资中的风险区间理论和教育心得的联结，这样的话题是一个开始，也许有待于更深入的发掘和锤炼，但是一个很有意义的开始。好，下面就是这一集的：教育心得——智慧地给孩子留白。\n\n在谷歌输入教育二字，瞬间可以搜索到16亿条讯息。教育话题从东方的应试教育延展到西方的素质教育。教育理论从苏格拉底时代盛行的古典教育穿梭到18世纪卢梭的自然主义教育，再发展到近代由杜威发起的进步教育。可以说，自从历史上有了对人类智慧的记载，教育便成为了一个重要的讨论课题。这些是众所周知的。近代，人们逐渐忘记了的，或者说忽略了的是大众教育是如何发展起来的。阅读过柏拉图著作的人也许都注意到了，苏格拉底时代与他展开讨论的和那些接受教育的似乎都是精英阶层。那么，在西方大众普遍接受教育是从何开始的呢？\n\n西方历史文明的早期，大众普遍是不识字的。大众接受宗教信息需要听少数识字，熟知拉丁文和希腊文的宗教工作者将上帝的话通过他们的描述讲给大众听。基督教的兴起带来了民众对读书识字的需求，而教会担任起了这一重要职责。逐渐地，民众能够自己读圣经，对神留给他们话有了自己的解读。可以说，接受教育在那时是个自由的选择，也是一个非常个人的决定。伴随15世纪宗教的腐败，自己能读圣经的民众逐渐不再信任那些传递上帝声音给他们的人了。由此，马丁路德才得以在16世纪发起一场浩荡的宗教改革。发展到近代，工业革命的发展带来了更多的教育需求。在现代的美国，孩子接受教育是法律规定的。如果谁家的孩子不上学，父母会被关押起来。关于现代西方教育，西方学者推出了各种理论与学说。对公共教育不满的学者将近代教育的失败归结于西方教育系统依然停留在为工业革命时代而设计的公校体系。简言之，现代公立教育的目标是培养听话的，服从规则的，有知识的工作人员，而非培养有独立思想的哲学家，思想家，乃至政治家。\n\n前面的阐述并非为指责公立教育，又或者为其开脱。但是，我们应该了解，面对教育时，父母们的焦虑起源点。教育，是个庞大的话题。其发展史几乎包含在整个人类文明历史的进程中。而教育又是各位父母唯一一项没有经历任何培训，就要开展的漫长的事业。我并非教育专家，在此，仅希望能将自己的经验总结与各位分享，与对此话题感兴趣的朋友交流、共同成长。\n\n那么在讨论什么是好的教育方式前，一个首要条件就是我们必须对教育加以定义。对于每个个人、家长与孩子来说，教育是什么? 怎样的教育才算成功呢？\n\n简单点看，很多人也许认为考高分，考好的大学，找高薪的工作就是一场成功教育的标志。更具体些，一些人会把上常青藤当作是教育的成功标志。古希腊赫赫有名的哲学家亚里士多德也在《政治学》和《伦理学》两本著作中对教育话题进行的充分的讨论。在他的《政治学》中，给我印象极为深刻的两点。首先，是他对教育对维持政体的重要性的讨论。他说：“The character of democracy creates democracy, and the character of oligarchy creates oligarchy; and always the better the character, the better the government.” 大意是，民主的品质创立了民主政体。寡头主义的品质创立了寡头政体。高尚的性格（品质）才能缔造高尚的政府。其次，在卷八中，他大篇幅的讨论了闲暇的重要性，并将闲暇的理性活动与游嬉加以区分。游嬉在紧张工作后让人得以松弛。而游嬉却不可能成为人生的唯一目的。而闲暇则不同；闲暇才能思考，才能带来人生终极的快乐。他也说，只有善德最大的人，才可能拥有这种由内而外的高尚的快乐。\n\n那么，在我看来，教育的根本目的是以立仁为本的教育。心正了，孩子才可能与周边的人，社会形成一种健康的，正向的关系。在他/她长大后，他可能会在心灵层面了解自己与神的关系。而后，他/她的各项技能才可能在属于他/她的领域得以发展。\n\n在价值层面，我认为品德方面的教育的重要性远远超越于各项能力的培养。而在实践中，品德是不可能仅通过说教甚至打骂来达到目的的。在时间层面，通过培养孩子各方面的能力，以及在此过程中遇到的问题，与孩子展开讨论，才可能让他们明白价值观，道德，以及优秀的品德是怎样的。所以，我认为应试教育和素质教育并不矛盾。如果一个孩子花大量时间刷题，把考取高分，高名次作为人生第一目标，在价值层面将此摆放在就对他人的需求，包括家人的需求和感受的对立面或者更高阶，这才是矛盾的根本所在。\n\n于此同时，孩子需要闲暇时间，也就是我们俗称的留白。现在，无论是在中国还是美国，孩子们的课外时间都排得很满。家长、老师们都感叹昔日的童年已经不存在了。孩子们和稀泥的时间没有了，甚至思考的时间也大大缩短了。取而代之的是钢琴，游泳，象棋，体操，滑雪，高尔夫，网球，中文，数学补习班，编程，等等等等，数不胜数的课外班和竞赛。在这样的情况下，如何留白？\n\n在我所从事的投资和风控领域，这些年让我受益很深的是一个概念：区间。任何投资回报在时间轴上的未来走向都是个未知。那些把回报率锁定在一个特定的点的投资人失望的概率高于那些将回报率锁定在一个区间的投资者。另外，给自己一定的空间会让人在紧急和突发情况下有更多的时间和脑力以及心力来调整策略，甚至思考应对方式。我尝试着用这样的思维模式看待孩子的教育。与其对于孩子所学、所做的课业和课外尝试锁定在某个点作为期待值，我试着把时间条线拉长，放宽，帮助她做更长期的目标选择。例如，与其期待在每个学年将数学和英文阅读水平提升到某个位置，我们将时间拉长到三年。这样，在短期内，孩子能够根据自己阶段性的兴趣来集中学习某个科目。在一个个好奇心得以满足后，在转向下一个兴趣点。将目标做区间定义的领域给好处是，孩子的灵活度和弹性更大了。在某一方面做得不大理想时，她应对挫败感的能力也得以提升，因为她知道自己还有时间去做调整。从某个层面讲，这也许是另一种形式的留白吧。\n\n这些是我近期的读书心得以及一些在教育孩子方面的实践与大家分享。也请各位不吝赐教。感谢大家。","source":"_posts/Educational-experience-1.md","raw":"---\ntitle: 教育心得—智慧地给孩子留白（转载）\ndate: 2022-01-10 22:17:30\ntags: ‘教育’\n---\n转载至：[Michelle Wan：教育心得——智慧地给孩子留白（20181006）](https://www.wenzhao.ca/2018/10/06/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e5%bf%83%e5%be%97-%e6%99%ba%e6%85%a7%e5%9c%b0%e7%bb%99%e5%ad%a9%e5%ad%90%e7%95%99%e7%99%bd%ef%bc%8820181006/)\n\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"教育心得—智慧地给孩子留白（转载）\",\n            \"url\": \"http://cdn.zqlxtt.cn/Educational-experience-1.mp3\"\n        }\n    ]\n}\n{% endaplayerlist %}\n\n大家好，我是文昭，今天这集节目是来自于Michelle Wan女士的教育心得：智慧地给孩子留白。这期节目篇幅不长，但是“留白”这个概念与教育相结合，这样一个视角一下就引起我的兴趣。今天开头这一段算是我不揣冒昧，越俎代庖，在进入教育这个话题之前，对“留白”这个概念为什么能和教育实践贯通起来，做个解释。\n\n留白是中国画的一个传统技法，它的关键是在于：画面的美感，不是画家创作好了，端给观众们来品位的，而就要求观赏者的参与，最后那个美感是画家和赏画者共同完成的！\n\n“留白”相当于发出了一个邀请，它其实就是一种审美教育的手段，因为赏画的人参与了对美感的构建，他的审美能力、鉴赏品位在这个过程中得到了锻炼和充实，这其实就是教育要达到的目的\n\n<!-- more -->\n\n比如中国画里画月亮，一般不会以颜色、线条、光影这些西方油画或水彩画的要素来表示月亮，而是画云彩，在云彩当中留一块白，这块白就是月亮。这叫“烘云托月”（“烘托”这个成语就是这么来），画面的主题月亮，是一种不存在的方式来显示“存在”。那这个月亮应该是什么样呢、还给人的观感是什么呢？观赏这幅画的人实际上得把自己的理解力、和想像力加进去，才能达成对画面的完整诠释。所以如果你最终觉得这个画面很美、很动人，请不必谦虚，这个美感有一部分是你和画家共同完成的，你不再是这幅画被动的欣赏者，你可以是说这幅画的作者之一、这幅画有多少人欣赏，就有多少个作者。而最后那个印象一定会是很生动地、很深刻地留在你的心里，因为you are a part of it. 而这恰恰就是教育要达到的理想目标——把一个观念内化为自己的感受，你是在用你的全部生命、情感在体会它。你的情感因此变得更加丰富、理解力也得到了提升，你不是仅仅记忆一堆符号和定义，那教育的目标就达成了。\n\n“留白”这个思想进一步说，是“虚实相生”这个道家思想在艺术上的体现，画云彩，不实打实地把月亮画出来，这叫“虚”；可给人的印象又是如此的深刻，这叫“实”，虚和实这两概念的切换通过艺术完美地展现。留白的技法在中国的园林设计、文学创作上都有广泛的运用，唯有不着笔墨，得“无为”，留下这个“虚”、这个“白”，才能展示出意境。\n\n典型的像《诗经 国风》的《关雎》篇：“关关雎鸠，在河之洲，窈窕淑女，君子好逑。参差荇菜，左右流之，窈窕淑女，寤寐求之”。你看，诗里说的是雎鸠这种水鸟，说的是荇菜这种水草，然后就是诗人感受。窈窕淑女在哪儿，长什么样、什么打扮、高矮胖瘦如何，是什么来历、又姓甚名谁啊，诗中都没有出现，这叫结构性的留白。可是作为读者你是不是浮想联翩啊，头脑中不断构想这位让诗人魂牵梦绕的女子的芳容啊？这就是留白的魅力。要没有这些浮想联翩你又怎么会觉得这首诗很美呢？\n\n说了这么多是我喧宾夺主，是我对万女士教育心得的心得，想从审美教育，培养美感这个角度深谈一下“留白”和教育的贯通之处。在这期节目中，万女士还谈到了投资中的风险区间理论和教育心得的联结，这样的话题是一个开始，也许有待于更深入的发掘和锤炼，但是一个很有意义的开始。好，下面就是这一集的：教育心得——智慧地给孩子留白。\n\n在谷歌输入教育二字，瞬间可以搜索到16亿条讯息。教育话题从东方的应试教育延展到西方的素质教育。教育理论从苏格拉底时代盛行的古典教育穿梭到18世纪卢梭的自然主义教育，再发展到近代由杜威发起的进步教育。可以说，自从历史上有了对人类智慧的记载，教育便成为了一个重要的讨论课题。这些是众所周知的。近代，人们逐渐忘记了的，或者说忽略了的是大众教育是如何发展起来的。阅读过柏拉图著作的人也许都注意到了，苏格拉底时代与他展开讨论的和那些接受教育的似乎都是精英阶层。那么，在西方大众普遍接受教育是从何开始的呢？\n\n西方历史文明的早期，大众普遍是不识字的。大众接受宗教信息需要听少数识字，熟知拉丁文和希腊文的宗教工作者将上帝的话通过他们的描述讲给大众听。基督教的兴起带来了民众对读书识字的需求，而教会担任起了这一重要职责。逐渐地，民众能够自己读圣经，对神留给他们话有了自己的解读。可以说，接受教育在那时是个自由的选择，也是一个非常个人的决定。伴随15世纪宗教的腐败，自己能读圣经的民众逐渐不再信任那些传递上帝声音给他们的人了。由此，马丁路德才得以在16世纪发起一场浩荡的宗教改革。发展到近代，工业革命的发展带来了更多的教育需求。在现代的美国，孩子接受教育是法律规定的。如果谁家的孩子不上学，父母会被关押起来。关于现代西方教育，西方学者推出了各种理论与学说。对公共教育不满的学者将近代教育的失败归结于西方教育系统依然停留在为工业革命时代而设计的公校体系。简言之，现代公立教育的目标是培养听话的，服从规则的，有知识的工作人员，而非培养有独立思想的哲学家，思想家，乃至政治家。\n\n前面的阐述并非为指责公立教育，又或者为其开脱。但是，我们应该了解，面对教育时，父母们的焦虑起源点。教育，是个庞大的话题。其发展史几乎包含在整个人类文明历史的进程中。而教育又是各位父母唯一一项没有经历任何培训，就要开展的漫长的事业。我并非教育专家，在此，仅希望能将自己的经验总结与各位分享，与对此话题感兴趣的朋友交流、共同成长。\n\n那么在讨论什么是好的教育方式前，一个首要条件就是我们必须对教育加以定义。对于每个个人、家长与孩子来说，教育是什么? 怎样的教育才算成功呢？\n\n简单点看，很多人也许认为考高分，考好的大学，找高薪的工作就是一场成功教育的标志。更具体些，一些人会把上常青藤当作是教育的成功标志。古希腊赫赫有名的哲学家亚里士多德也在《政治学》和《伦理学》两本著作中对教育话题进行的充分的讨论。在他的《政治学》中，给我印象极为深刻的两点。首先，是他对教育对维持政体的重要性的讨论。他说：“The character of democracy creates democracy, and the character of oligarchy creates oligarchy; and always the better the character, the better the government.” 大意是，民主的品质创立了民主政体。寡头主义的品质创立了寡头政体。高尚的性格（品质）才能缔造高尚的政府。其次，在卷八中，他大篇幅的讨论了闲暇的重要性，并将闲暇的理性活动与游嬉加以区分。游嬉在紧张工作后让人得以松弛。而游嬉却不可能成为人生的唯一目的。而闲暇则不同；闲暇才能思考，才能带来人生终极的快乐。他也说，只有善德最大的人，才可能拥有这种由内而外的高尚的快乐。\n\n那么，在我看来，教育的根本目的是以立仁为本的教育。心正了，孩子才可能与周边的人，社会形成一种健康的，正向的关系。在他/她长大后，他可能会在心灵层面了解自己与神的关系。而后，他/她的各项技能才可能在属于他/她的领域得以发展。\n\n在价值层面，我认为品德方面的教育的重要性远远超越于各项能力的培养。而在实践中，品德是不可能仅通过说教甚至打骂来达到目的的。在时间层面，通过培养孩子各方面的能力，以及在此过程中遇到的问题，与孩子展开讨论，才可能让他们明白价值观，道德，以及优秀的品德是怎样的。所以，我认为应试教育和素质教育并不矛盾。如果一个孩子花大量时间刷题，把考取高分，高名次作为人生第一目标，在价值层面将此摆放在就对他人的需求，包括家人的需求和感受的对立面或者更高阶，这才是矛盾的根本所在。\n\n于此同时，孩子需要闲暇时间，也就是我们俗称的留白。现在，无论是在中国还是美国，孩子们的课外时间都排得很满。家长、老师们都感叹昔日的童年已经不存在了。孩子们和稀泥的时间没有了，甚至思考的时间也大大缩短了。取而代之的是钢琴，游泳，象棋，体操，滑雪，高尔夫，网球，中文，数学补习班，编程，等等等等，数不胜数的课外班和竞赛。在这样的情况下，如何留白？\n\n在我所从事的投资和风控领域，这些年让我受益很深的是一个概念：区间。任何投资回报在时间轴上的未来走向都是个未知。那些把回报率锁定在一个特定的点的投资人失望的概率高于那些将回报率锁定在一个区间的投资者。另外，给自己一定的空间会让人在紧急和突发情况下有更多的时间和脑力以及心力来调整策略，甚至思考应对方式。我尝试着用这样的思维模式看待孩子的教育。与其对于孩子所学、所做的课业和课外尝试锁定在某个点作为期待值，我试着把时间条线拉长，放宽，帮助她做更长期的目标选择。例如，与其期待在每个学年将数学和英文阅读水平提升到某个位置，我们将时间拉长到三年。这样，在短期内，孩子能够根据自己阶段性的兴趣来集中学习某个科目。在一个个好奇心得以满足后，在转向下一个兴趣点。将目标做区间定义的领域给好处是，孩子的灵活度和弹性更大了。在某一方面做得不大理想时，她应对挫败感的能力也得以提升，因为她知道自己还有时间去做调整。从某个层面讲，这也许是另一种形式的留白吧。\n\n这些是我近期的读书心得以及一些在教育孩子方面的实践与大家分享。也请各位不吝赐教。感谢大家。","slug":"Educational-experience-1","published":1,"updated":"2024-08-21T03:16:19.778Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vm00035p6t3cnm8bc6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>转载至：<a href=\"https://www.wenzhao.ca/2018/10/06/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e5%bf%83%e5%be%97-%e6%99%ba%e6%85%a7%e5%9c%b0%e7%bb%99%e5%ad%a9%e5%ad%90%e7%95%99%e7%99%bd%ef%bc%8820181006/\">Michelle Wan：教育心得——智慧地给孩子留白（20181006）</a></p>\n\n        <div id=\"aplayer-MwAIVmVj\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"教育心得—智慧地给孩子留白（转载）\",\"url\":\"http://cdn.zqlxtt.cn/Educational-experience-1.mp3\",\"pic\":\"\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-MwAIVmVj\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<p>大家好，我是文昭，今天这集节目是来自于Michelle Wan女士的教育心得：智慧地给孩子留白。这期节目篇幅不长，但是“留白”这个概念与教育相结合，这样一个视角一下就引起我的兴趣。今天开头这一段算是我不揣冒昧，越俎代庖，在进入教育这个话题之前，对“留白”这个概念为什么能和教育实践贯通起来，做个解释。</p>\n<p>留白是中国画的一个传统技法，它的关键是在于：画面的美感，不是画家创作好了，端给观众们来品位的，而就要求观赏者的参与，最后那个美感是画家和赏画者共同完成的！</p>\n<p>“留白”相当于发出了一个邀请，它其实就是一种审美教育的手段，因为赏画的人参与了对美感的构建，他的审美能力、鉴赏品位在这个过程中得到了锻炼和充实，这其实就是教育要达到的目的</p>\n<span id=\"more\"></span>\n\n<p>比如中国画里画月亮，一般不会以颜色、线条、光影这些西方油画或水彩画的要素来表示月亮，而是画云彩，在云彩当中留一块白，这块白就是月亮。这叫“烘云托月”（“烘托”这个成语就是这么来），画面的主题月亮，是一种不存在的方式来显示“存在”。那这个月亮应该是什么样呢、还给人的观感是什么呢？观赏这幅画的人实际上得把自己的理解力、和想像力加进去，才能达成对画面的完整诠释。所以如果你最终觉得这个画面很美、很动人，请不必谦虚，这个美感有一部分是你和画家共同完成的，你不再是这幅画被动的欣赏者，你可以是说这幅画的作者之一、这幅画有多少人欣赏，就有多少个作者。而最后那个印象一定会是很生动地、很深刻地留在你的心里，因为you are a part of it. 而这恰恰就是教育要达到的理想目标——把一个观念内化为自己的感受，你是在用你的全部生命、情感在体会它。你的情感因此变得更加丰富、理解力也得到了提升，你不是仅仅记忆一堆符号和定义，那教育的目标就达成了。</p>\n<p>“留白”这个思想进一步说，是“虚实相生”这个道家思想在艺术上的体现，画云彩，不实打实地把月亮画出来，这叫“虚”；可给人的印象又是如此的深刻，这叫“实”，虚和实这两概念的切换通过艺术完美地展现。留白的技法在中国的园林设计、文学创作上都有广泛的运用，唯有不着笔墨，得“无为”，留下这个“虚”、这个“白”，才能展示出意境。</p>\n<p>典型的像《诗经 国风》的《关雎》篇：“关关雎鸠，在河之洲，窈窕淑女，君子好逑。参差荇菜，左右流之，窈窕淑女，寤寐求之”。你看，诗里说的是雎鸠这种水鸟，说的是荇菜这种水草，然后就是诗人感受。窈窕淑女在哪儿，长什么样、什么打扮、高矮胖瘦如何，是什么来历、又姓甚名谁啊，诗中都没有出现，这叫结构性的留白。可是作为读者你是不是浮想联翩啊，头脑中不断构想这位让诗人魂牵梦绕的女子的芳容啊？这就是留白的魅力。要没有这些浮想联翩你又怎么会觉得这首诗很美呢？</p>\n<p>说了这么多是我喧宾夺主，是我对万女士教育心得的心得，想从审美教育，培养美感这个角度深谈一下“留白”和教育的贯通之处。在这期节目中，万女士还谈到了投资中的风险区间理论和教育心得的联结，这样的话题是一个开始，也许有待于更深入的发掘和锤炼，但是一个很有意义的开始。好，下面就是这一集的：教育心得——智慧地给孩子留白。</p>\n<p>在谷歌输入教育二字，瞬间可以搜索到16亿条讯息。教育话题从东方的应试教育延展到西方的素质教育。教育理论从苏格拉底时代盛行的古典教育穿梭到18世纪卢梭的自然主义教育，再发展到近代由杜威发起的进步教育。可以说，自从历史上有了对人类智慧的记载，教育便成为了一个重要的讨论课题。这些是众所周知的。近代，人们逐渐忘记了的，或者说忽略了的是大众教育是如何发展起来的。阅读过柏拉图著作的人也许都注意到了，苏格拉底时代与他展开讨论的和那些接受教育的似乎都是精英阶层。那么，在西方大众普遍接受教育是从何开始的呢？</p>\n<p>西方历史文明的早期，大众普遍是不识字的。大众接受宗教信息需要听少数识字，熟知拉丁文和希腊文的宗教工作者将上帝的话通过他们的描述讲给大众听。基督教的兴起带来了民众对读书识字的需求，而教会担任起了这一重要职责。逐渐地，民众能够自己读圣经，对神留给他们话有了自己的解读。可以说，接受教育在那时是个自由的选择，也是一个非常个人的决定。伴随15世纪宗教的腐败，自己能读圣经的民众逐渐不再信任那些传递上帝声音给他们的人了。由此，马丁路德才得以在16世纪发起一场浩荡的宗教改革。发展到近代，工业革命的发展带来了更多的教育需求。在现代的美国，孩子接受教育是法律规定的。如果谁家的孩子不上学，父母会被关押起来。关于现代西方教育，西方学者推出了各种理论与学说。对公共教育不满的学者将近代教育的失败归结于西方教育系统依然停留在为工业革命时代而设计的公校体系。简言之，现代公立教育的目标是培养听话的，服从规则的，有知识的工作人员，而非培养有独立思想的哲学家，思想家，乃至政治家。</p>\n<p>前面的阐述并非为指责公立教育，又或者为其开脱。但是，我们应该了解，面对教育时，父母们的焦虑起源点。教育，是个庞大的话题。其发展史几乎包含在整个人类文明历史的进程中。而教育又是各位父母唯一一项没有经历任何培训，就要开展的漫长的事业。我并非教育专家，在此，仅希望能将自己的经验总结与各位分享，与对此话题感兴趣的朋友交流、共同成长。</p>\n<p>那么在讨论什么是好的教育方式前，一个首要条件就是我们必须对教育加以定义。对于每个个人、家长与孩子来说，教育是什么? 怎样的教育才算成功呢？</p>\n<p>简单点看，很多人也许认为考高分，考好的大学，找高薪的工作就是一场成功教育的标志。更具体些，一些人会把上常青藤当作是教育的成功标志。古希腊赫赫有名的哲学家亚里士多德也在《政治学》和《伦理学》两本著作中对教育话题进行的充分的讨论。在他的《政治学》中，给我印象极为深刻的两点。首先，是他对教育对维持政体的重要性的讨论。他说：“The character of democracy creates democracy, and the character of oligarchy creates oligarchy; and always the better the character, the better the government.” 大意是，民主的品质创立了民主政体。寡头主义的品质创立了寡头政体。高尚的性格（品质）才能缔造高尚的政府。其次，在卷八中，他大篇幅的讨论了闲暇的重要性，并将闲暇的理性活动与游嬉加以区分。游嬉在紧张工作后让人得以松弛。而游嬉却不可能成为人生的唯一目的。而闲暇则不同；闲暇才能思考，才能带来人生终极的快乐。他也说，只有善德最大的人，才可能拥有这种由内而外的高尚的快乐。</p>\n<p>那么，在我看来，教育的根本目的是以立仁为本的教育。心正了，孩子才可能与周边的人，社会形成一种健康的，正向的关系。在他/她长大后，他可能会在心灵层面了解自己与神的关系。而后，他/她的各项技能才可能在属于他/她的领域得以发展。</p>\n<p>在价值层面，我认为品德方面的教育的重要性远远超越于各项能力的培养。而在实践中，品德是不可能仅通过说教甚至打骂来达到目的的。在时间层面，通过培养孩子各方面的能力，以及在此过程中遇到的问题，与孩子展开讨论，才可能让他们明白价值观，道德，以及优秀的品德是怎样的。所以，我认为应试教育和素质教育并不矛盾。如果一个孩子花大量时间刷题，把考取高分，高名次作为人生第一目标，在价值层面将此摆放在就对他人的需求，包括家人的需求和感受的对立面或者更高阶，这才是矛盾的根本所在。</p>\n<p>于此同时，孩子需要闲暇时间，也就是我们俗称的留白。现在，无论是在中国还是美国，孩子们的课外时间都排得很满。家长、老师们都感叹昔日的童年已经不存在了。孩子们和稀泥的时间没有了，甚至思考的时间也大大缩短了。取而代之的是钢琴，游泳，象棋，体操，滑雪，高尔夫，网球，中文，数学补习班，编程，等等等等，数不胜数的课外班和竞赛。在这样的情况下，如何留白？</p>\n<p>在我所从事的投资和风控领域，这些年让我受益很深的是一个概念：区间。任何投资回报在时间轴上的未来走向都是个未知。那些把回报率锁定在一个特定的点的投资人失望的概率高于那些将回报率锁定在一个区间的投资者。另外，给自己一定的空间会让人在紧急和突发情况下有更多的时间和脑力以及心力来调整策略，甚至思考应对方式。我尝试着用这样的思维模式看待孩子的教育。与其对于孩子所学、所做的课业和课外尝试锁定在某个点作为期待值，我试着把时间条线拉长，放宽，帮助她做更长期的目标选择。例如，与其期待在每个学年将数学和英文阅读水平提升到某个位置，我们将时间拉长到三年。这样，在短期内，孩子能够根据自己阶段性的兴趣来集中学习某个科目。在一个个好奇心得以满足后，在转向下一个兴趣点。将目标做区间定义的领域给好处是，孩子的灵活度和弹性更大了。在某一方面做得不大理想时，她应对挫败感的能力也得以提升，因为她知道自己还有时间去做调整。从某个层面讲，这也许是另一种形式的留白吧。</p>\n<p>这些是我近期的读书心得以及一些在教育孩子方面的实践与大家分享。也请各位不吝赐教。感谢大家。</p>\n","excerpt":"<p>转载至：<a href=\"https://www.wenzhao.ca/2018/10/06/michelle-wan%ef%bc%9a%e6%95%99%e8%82%b2%e5%bf%83%e5%be%97-%e6%99%ba%e6%85%a7%e5%9c%b0%e7%bb%99%e5%ad%a9%e5%ad%90%e7%95%99%e7%99%bd%ef%bc%8820181006/\">Michelle Wan：教育心得——智慧地给孩子留白（20181006）</a></p>\n\n        <div id=\"aplayer-MwAIVmVj\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"教育心得—智慧地给孩子留白（转载）\",\"url\":\"http://cdn.zqlxtt.cn/Educational-experience-1.mp3\",\"pic\":\"\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-MwAIVmVj\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>\n\n<p>大家好，我是文昭，今天这集节目是来自于Michelle Wan女士的教育心得：智慧地给孩子留白。这期节目篇幅不长，但是“留白”这个概念与教育相结合，这样一个视角一下就引起我的兴趣。今天开头这一段算是我不揣冒昧，越俎代庖，在进入教育这个话题之前，对“留白”这个概念为什么能和教育实践贯通起来，做个解释。</p>\n<p>留白是中国画的一个传统技法，它的关键是在于：画面的美感，不是画家创作好了，端给观众们来品位的，而就要求观赏者的参与，最后那个美感是画家和赏画者共同完成的！</p>\n<p>“留白”相当于发出了一个邀请，它其实就是一种审美教育的手段，因为赏画的人参与了对美感的构建，他的审美能力、鉴赏品位在这个过程中得到了锻炼和充实，这其实就是教育要达到的目的</p>","more":"<p>比如中国画里画月亮，一般不会以颜色、线条、光影这些西方油画或水彩画的要素来表示月亮，而是画云彩，在云彩当中留一块白，这块白就是月亮。这叫“烘云托月”（“烘托”这个成语就是这么来），画面的主题月亮，是一种不存在的方式来显示“存在”。那这个月亮应该是什么样呢、还给人的观感是什么呢？观赏这幅画的人实际上得把自己的理解力、和想像力加进去，才能达成对画面的完整诠释。所以如果你最终觉得这个画面很美、很动人，请不必谦虚，这个美感有一部分是你和画家共同完成的，你不再是这幅画被动的欣赏者，你可以是说这幅画的作者之一、这幅画有多少人欣赏，就有多少个作者。而最后那个印象一定会是很生动地、很深刻地留在你的心里，因为you are a part of it. 而这恰恰就是教育要达到的理想目标——把一个观念内化为自己的感受，你是在用你的全部生命、情感在体会它。你的情感因此变得更加丰富、理解力也得到了提升，你不是仅仅记忆一堆符号和定义，那教育的目标就达成了。</p>\n<p>“留白”这个思想进一步说，是“虚实相生”这个道家思想在艺术上的体现，画云彩，不实打实地把月亮画出来，这叫“虚”；可给人的印象又是如此的深刻，这叫“实”，虚和实这两概念的切换通过艺术完美地展现。留白的技法在中国的园林设计、文学创作上都有广泛的运用，唯有不着笔墨，得“无为”，留下这个“虚”、这个“白”，才能展示出意境。</p>\n<p>典型的像《诗经 国风》的《关雎》篇：“关关雎鸠，在河之洲，窈窕淑女，君子好逑。参差荇菜，左右流之，窈窕淑女，寤寐求之”。你看，诗里说的是雎鸠这种水鸟，说的是荇菜这种水草，然后就是诗人感受。窈窕淑女在哪儿，长什么样、什么打扮、高矮胖瘦如何，是什么来历、又姓甚名谁啊，诗中都没有出现，这叫结构性的留白。可是作为读者你是不是浮想联翩啊，头脑中不断构想这位让诗人魂牵梦绕的女子的芳容啊？这就是留白的魅力。要没有这些浮想联翩你又怎么会觉得这首诗很美呢？</p>\n<p>说了这么多是我喧宾夺主，是我对万女士教育心得的心得，想从审美教育，培养美感这个角度深谈一下“留白”和教育的贯通之处。在这期节目中，万女士还谈到了投资中的风险区间理论和教育心得的联结，这样的话题是一个开始，也许有待于更深入的发掘和锤炼，但是一个很有意义的开始。好，下面就是这一集的：教育心得——智慧地给孩子留白。</p>\n<p>在谷歌输入教育二字，瞬间可以搜索到16亿条讯息。教育话题从东方的应试教育延展到西方的素质教育。教育理论从苏格拉底时代盛行的古典教育穿梭到18世纪卢梭的自然主义教育，再发展到近代由杜威发起的进步教育。可以说，自从历史上有了对人类智慧的记载，教育便成为了一个重要的讨论课题。这些是众所周知的。近代，人们逐渐忘记了的，或者说忽略了的是大众教育是如何发展起来的。阅读过柏拉图著作的人也许都注意到了，苏格拉底时代与他展开讨论的和那些接受教育的似乎都是精英阶层。那么，在西方大众普遍接受教育是从何开始的呢？</p>\n<p>西方历史文明的早期，大众普遍是不识字的。大众接受宗教信息需要听少数识字，熟知拉丁文和希腊文的宗教工作者将上帝的话通过他们的描述讲给大众听。基督教的兴起带来了民众对读书识字的需求，而教会担任起了这一重要职责。逐渐地，民众能够自己读圣经，对神留给他们话有了自己的解读。可以说，接受教育在那时是个自由的选择，也是一个非常个人的决定。伴随15世纪宗教的腐败，自己能读圣经的民众逐渐不再信任那些传递上帝声音给他们的人了。由此，马丁路德才得以在16世纪发起一场浩荡的宗教改革。发展到近代，工业革命的发展带来了更多的教育需求。在现代的美国，孩子接受教育是法律规定的。如果谁家的孩子不上学，父母会被关押起来。关于现代西方教育，西方学者推出了各种理论与学说。对公共教育不满的学者将近代教育的失败归结于西方教育系统依然停留在为工业革命时代而设计的公校体系。简言之，现代公立教育的目标是培养听话的，服从规则的，有知识的工作人员，而非培养有独立思想的哲学家，思想家，乃至政治家。</p>\n<p>前面的阐述并非为指责公立教育，又或者为其开脱。但是，我们应该了解，面对教育时，父母们的焦虑起源点。教育，是个庞大的话题。其发展史几乎包含在整个人类文明历史的进程中。而教育又是各位父母唯一一项没有经历任何培训，就要开展的漫长的事业。我并非教育专家，在此，仅希望能将自己的经验总结与各位分享，与对此话题感兴趣的朋友交流、共同成长。</p>\n<p>那么在讨论什么是好的教育方式前，一个首要条件就是我们必须对教育加以定义。对于每个个人、家长与孩子来说，教育是什么? 怎样的教育才算成功呢？</p>\n<p>简单点看，很多人也许认为考高分，考好的大学，找高薪的工作就是一场成功教育的标志。更具体些，一些人会把上常青藤当作是教育的成功标志。古希腊赫赫有名的哲学家亚里士多德也在《政治学》和《伦理学》两本著作中对教育话题进行的充分的讨论。在他的《政治学》中，给我印象极为深刻的两点。首先，是他对教育对维持政体的重要性的讨论。他说：“The character of democracy creates democracy, and the character of oligarchy creates oligarchy; and always the better the character, the better the government.” 大意是，民主的品质创立了民主政体。寡头主义的品质创立了寡头政体。高尚的性格（品质）才能缔造高尚的政府。其次，在卷八中，他大篇幅的讨论了闲暇的重要性，并将闲暇的理性活动与游嬉加以区分。游嬉在紧张工作后让人得以松弛。而游嬉却不可能成为人生的唯一目的。而闲暇则不同；闲暇才能思考，才能带来人生终极的快乐。他也说，只有善德最大的人，才可能拥有这种由内而外的高尚的快乐。</p>\n<p>那么，在我看来，教育的根本目的是以立仁为本的教育。心正了，孩子才可能与周边的人，社会形成一种健康的，正向的关系。在他/她长大后，他可能会在心灵层面了解自己与神的关系。而后，他/她的各项技能才可能在属于他/她的领域得以发展。</p>\n<p>在价值层面，我认为品德方面的教育的重要性远远超越于各项能力的培养。而在实践中，品德是不可能仅通过说教甚至打骂来达到目的的。在时间层面，通过培养孩子各方面的能力，以及在此过程中遇到的问题，与孩子展开讨论，才可能让他们明白价值观，道德，以及优秀的品德是怎样的。所以，我认为应试教育和素质教育并不矛盾。如果一个孩子花大量时间刷题，把考取高分，高名次作为人生第一目标，在价值层面将此摆放在就对他人的需求，包括家人的需求和感受的对立面或者更高阶，这才是矛盾的根本所在。</p>\n<p>于此同时，孩子需要闲暇时间，也就是我们俗称的留白。现在，无论是在中国还是美国，孩子们的课外时间都排得很满。家长、老师们都感叹昔日的童年已经不存在了。孩子们和稀泥的时间没有了，甚至思考的时间也大大缩短了。取而代之的是钢琴，游泳，象棋，体操，滑雪，高尔夫，网球，中文，数学补习班，编程，等等等等，数不胜数的课外班和竞赛。在这样的情况下，如何留白？</p>\n<p>在我所从事的投资和风控领域，这些年让我受益很深的是一个概念：区间。任何投资回报在时间轴上的未来走向都是个未知。那些把回报率锁定在一个特定的点的投资人失望的概率高于那些将回报率锁定在一个区间的投资者。另外，给自己一定的空间会让人在紧急和突发情况下有更多的时间和脑力以及心力来调整策略，甚至思考应对方式。我尝试着用这样的思维模式看待孩子的教育。与其对于孩子所学、所做的课业和课外尝试锁定在某个点作为期待值，我试着把时间条线拉长，放宽，帮助她做更长期的目标选择。例如，与其期待在每个学年将数学和英文阅读水平提升到某个位置，我们将时间拉长到三年。这样，在短期内，孩子能够根据自己阶段性的兴趣来集中学习某个科目。在一个个好奇心得以满足后，在转向下一个兴趣点。将目标做区间定义的领域给好处是，孩子的灵活度和弹性更大了。在某一方面做得不大理想时，她应对挫败感的能力也得以提升，因为她知道自己还有时间去做调整。从某个层面讲，这也许是另一种形式的留白吧。</p>\n<p>这些是我近期的读书心得以及一些在教育孩子方面的实践与大家分享。也请各位不吝赐教。感谢大家。</p>"},{"title":"GIF and LWZ","date":"2017-11-17T08:42:56.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/4.webp","_content":"在讲 LZW 在 GIF 中的应用前，有必要先简单的过一下 LZW 算法。\n\n> LZW算法又叫“串表压缩算法”就是通过建立一个字符串表，用较短的代码来表示较长的字符串来实现压缩。 LZW压缩算法是Unisys的专利，有效期到2003年，所以对它的使用已经没有限制了\n\n在上面的介绍中，关键在于`字符串表`这一概念，为了简单理解，我举一个例子（此例子并不是完全使用的 LWZ 算法，但思想是一致的）。\n<!-- more -->\n假设有以下字符串：AABCCBACBCBAABC\n如果这时有以下字符串表：\n\n| 码 | 字符串 |\n| --- | --- |\n| 0 | A |\n| 1 | B |\n| 2 | C |\n| 3 | AA |\n| 4 | BC |\n| 5 | CB |\n| 6 | AC |\n| 7 | BCB |\n| 8 | AAB |\n\n那么以上的字符串就可以用字符串表中的码来表示，其中一种表示方法为：345678。可以看到只用了 6 个字符就表示了长度为 15 的字符串。当然这个只是我为了大家好理解随意些的一个表，真正的 LZW 算法生成表的算法相对比较复杂。到这里你只需要理解字符串表的作用即可，不必纠结表中的内容是如何生成的（其实是我胡乱编的，没有使用 LZW 算法）。\n\n## LZW 在 GIF 中的压缩与解压缩过程\nLZW 在对文本进行压缩的时候建立的是字符串表，其中每个码对应的是一个字符串。而在 GIF 中并不是字符串表，而是颜色索引表。其中码不变，而字符串则变成了某种颜色在 Global Color Table 或 Local Color Table 中的索引。因为本身使用这两个表也是为了对颜色数据有一个压缩效果。\n\n在上一篇[《GIF 字节格式介绍》](http://www.jianshu.com/p/4fabac6b15b3)中 Image Data 一节，讲到 `LZW Minimum Code Size` 的时候并没有过多介绍，这里我详细解释一下它的意思。\n\n在 LZW 中，在进行压缩之前，其实已经存在了字符串表或颜色索引表的一部分。在文本压缩中（英文压缩，忽略字母大小写以及字母以外的字符），已经存在了一个大小为 26 的，字符串表，其中码的范围为 0 ~ 25，字符串分别为 A~Z。这时候 minimum code 的值为 28（minmum code size为 5） 。那么为什么会跳过中间的 26 和 27 呢？其实紧跟在初始表码后的两个数有它特殊的用处，其分别是 `清空码（clear code）`和`信息终止码（end of information code）`。\n\n而对于 GIF 图来说，其颜色支持 2^(2~8) 种，所以其初始化表如下：\n\n| LZW Mini Code Size | 颜色码 | 清空码 | 信息终止码 |\n| --- | --- | --- | ---|\n| 2 | #0 - #3 | #4 | #5 |\n| 3 | #0 - #7 | #8 | #9 |\n| 4 | #0 - #15 | #16 | #17 |\n| 5 | #0 - #31 | #32 | #33 |\n| 6 | #0 - #63 | #64 | #65 |\n| 7 | #0 - #127 | #128 | #129 |\n| 8 | #0 - #255 | #256 | #257 |\n\n而这里的清空码和信息终止码有什么用呢？一般说来，当遇到清空码的时候，我们就要把之前生成的表重置为初始状态。而当遇到信息终止码的时候，则说明压缩或解压缩到此为止。\n那这里为什么需要在遇到清空码的时候重置表呢？这其实也是为了压缩效率考虑，是想一下，如果一个文本包含千万个字母，那如果不对表中的码的长度做一个限制，可能会出现一个很大很大的数字。这在 LZW 中是被禁止的。在 LZW 的不同运用场景中，这个码的长度有不同的要求，在 GIF 中码被限制在了 12 位以内。\n\n### GIF 的 LZW压缩\n\n首先我们还是使用[《GIF 字节格式介绍》](http://www.jianshu.com/p/4fabac6b15b3)中的实例图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/1.webp)\n\n其放大后的效果图如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/2.webp)\n\n其全局颜色表：\n\n|索引|字节组合|颜色|\n|---|---|---|\n|0|FFFFFF|白色|\n|1|FF0000|红色|\n|2|0000FF|蓝色|\n|3|000000|黑色|\n\n其初始的颜色索引表为：\n\n|码|索引|\n|---|---|\n|#0|0|\n|#1|1|\n|#2|2|\n|#3|3|\n|#4|清空码 |\n|#5|信息终止码|\n\n其每个像素的颜色对应的索引如下：\n\n    1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...\n    \n在描述压缩过程前，需要先约定几个需要使用的变量：\n- 输入流（Index Stream）：即上面给出的颜色对应的索引数据流\n- 输出流（Code Stream）：即压缩后的码流\n- 索引缓存（Index Buffer）：在压缩过程中用来暂存颜色索引的值（它可以是一个数组）\n- K：用来存储缓存后面的那个索引值\n\n一下用 (index ...) 表示索引缓存，[index] 表示 K。\n\n在压缩的初期会有一个初始化的步骤，这一步中我们取输入流中的第一个数据存入索引缓存，K 暂时没有值。然后往输出流里面写一个清空码，这里的话是 #4。\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ...|| #4 |\n\n初始化完成后的数据如上，下面进入循环。\n\n先将索引缓存后面的值读入 K，如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n\n给 K 赋值完成后我们就需要看索引缓存 + K 的集合是否在颜色索引表中存在，这里索引缓存 + K = (1,1)，很显然我们的颜色索引表目前还是初始化状态，并没有 (1,1) 这个索引组合。那么就向颜色索引表中添加 #6 - (1,1) 这条数据。此时我们还需要往输出流写一个码，很多人可能会觉的是 #6，但事实上我们要写的是此时索引缓存中值所对应的码，此时的索引缓存是 (1)，其对应的码为 #1。接着将索引缓存的值设为 K，并将 K 的值清空（以上为没有找到索引缓存 + K 的操作）。最后数据如下图：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n\n在读取 K 的值，读取完数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n\n给 K 赋值以后我们继续看索引缓存 + K 的集合是否存在在颜色索引表，此时索引缓存 + K = (1,1)，很熟悉嘛，这不就是刚刚往颜色索引表添加的 #6 吗？此时我们不需要也没有新的组合可以往颜色索引表添加，也不需要往输出流写码。我们需要做的就是索引缓存 + K 的值赋给索引缓存，并将 K 的值清空（以上为找到索引缓存 + K 的操作）。最后的数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n\n接着再读取 K 的值，读取后数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n|5| 读取 K | 1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1|\n\n这时候应该知道要干嘛了吧，索引缓存 + K 的值为 (1,1,1)，在我们的颜色索引表中并有这个值，这时候我们重复上面没有找到索引缓存 + K的操作即可，最后的数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n|5| 读取 K | 1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1|\n|6| 没有找到| 1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 ... | #7 - (1,1,1)| #4 #1 #6 |\n\n整个压缩差不多就是这样一个循环找索引缓存 + K 的步骤，下图是执行到26步后的数据，你可以参考看看自己是否掌握了 LZW 的压缩算法。\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3| 读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n|5| 读取 K | 1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1|\n|6| 没有找到| 1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 ... | #7 - (1,1,1)| #4 #1 #6 |\n|7| 读取 K | 1 1 1 (1) [1] 2 2 2 2 2 1 1 1 1 ...|| #4 #1 #6|\n|8| 找到索引缓存 + K | 1 1 1 (1 1) 2 2 2 2 2 1 1 1 1 ...||#4 #1 #6|\n|9| 读取 K | 1 1 1 (1 1) [2] 2 2 2 2 1 1 1 1 ...||#4 #1 #6|\n|10| 没有找到索引缓存 + K |1 1 1 1 1 (2) 2 2 2 2 1 1 1 1 ...| #8 - (1,1,2)|#4 #1 #6 #6|\n|11| 读取 K |1 1 1 1 1 (2) [2] 2 2 2 1 1 1 1 ...||#4 #1 #6 #6|\n|12| 没有找到索引缓存 + K |1 1 1 1 1 2 (2) 2 2 2 1 1 1 1 ...|#9 - (2,2)|#4 #1 #6 #6 #2|\n|13| 读取 K |1 1 1 1 1 2 (2) [2] 2 2 1 1 1 1 ...||#4 #1 #6 #6 #2|\n|14| 找到索引缓存 + K |1 1 1 1 1 2 (2 2) 2 2 1 1 1 1 ...||#4 #1 #6 #6 #2|\n|15| 读取 K |1 1 1 1 1 2 (2 2) [2] 2 1 1 1 1 ...||#4 #1 #6 #6 #2|\n|16| 没有找到索引缓存 + K |1 1 1 1 1 2 2 2 (2) 2 1 1 1 1 ...|#10 - (2,2,2)|#4 #1 #6 #6 #2 #9|\n|17| 读取 K |1 1 1 1 1 2 2 2 (2) [2] 1 1 1 1 ...||#4 #1 #6 #6 #2 #9|\n|18| 找到索引缓存 + K |1 1 1 1 1 2 2 2 (2 2) 1 1 1 1 ...||#4 #1 #6 #6 #2 #9|\n|19| 读取 K |1 1 1 1 1 2 2 2 (2 2) [1] 1 1 1 ...||#4 #1 #6 #6 #2 #9|\n|20| 没有找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 (1) 1 1 1 ...|#11 - (2,2,1)|#4 #1 #6 #6 #2 #9 #9|\n|21| 读取 K |1 1 1 1 1 2 2 2 2 2 (1) [1] 1 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|22| 找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 (1 1) 1 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|23| 读取 K |1 1 1 1 1 2 2 2 2 2 (1 1) [1] 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|24| 找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 (1 1 1) 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|25| 读取 K |1 1 1 1 1 2 2 2 2 2 (1 1 1) [1] ...||#4 #1 #6 #6 #2 #9 #9|\n|26| 没有找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 1 1 1 (1) ...|#12 - (1,1,1,1)|#4 #1 #6 #6 #2 #9 #9 #7|\n\n\n当处理完所有的数据后不要忘记在最后加上一个信息终止码，在这里的 #5。\n最终的输出流如下：\n\n    #4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5\n    \n可以看到通过 LZW 的压缩，把原本 10*10 = 100 个数据压缩到了36个码。\n\n### GIF 的 LZW 解压缩\n\n在上面一节讲了 LZW 在 GIF 中对每一帧图像数据的压缩过程，最终得到的数据如下：\n\n    #4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5\n\n这一节我们要讲解如何根据根据上面的这串压缩的数据获得原始数据，这里需要注意的是在 LZW 的压缩过程中生成的颜色索引表在最后会被清除，所以在解压缩的时候并不是简单的从颜色索引表去取对应的数据，而是需要我们重新再构建新的颜色索引表。\n\n在描述解压缩过程前，还是需要先约定一个变量：\n\n- 输入流（Code Stream）：这里的输入流变成了压缩过程中生成的码流。\n- 输出流（Index Stream）：输出流为图像上颜色对应索引的数据流。\n- CODE ： 解压过程中读取的码，如 #6。\n- CODE - 1 ： CODE 前一个码。\n- {CODE}：表示 CODE 所表示码的索引，如 #6 - 1,1 那么这时的 {CODE} = {1，1}\n- K ：解压过程的一个变量。\n\n在进行解压的循环之前，会有一步初始化操作。这一步首先读取码流的第一个元素，通常都是清空码，这里是 #4，它表示接下来我们要建立一个新的颜色索引表。然后读取下一个元素作为 CODE 的值，这里应该是 CODE = #1 。然后在输出流输出 CODE 对应的索引，即 1 。数据见下表：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n\n类似的，我们用 () 表示 CODE，用 [] 表示 CODE - 1，接着进入循环。CODE 读取下一个元素为 #6，此时 CODE - 1 为 #1。然后我们看 CODE 所对应的码 #6 是否存在在我们的颜色索引表中。这是的索引表应该是初始状态，只有原始的四个码和清空码以及信息终止码。由于 #6 不在表中，我们令 K = {CODE - 1} 的第一个元素，在此时 CODE - 1 = {1}，所以 K = 1，然后往颜色索引表添加新的一行数据 {CODE - 1} + K。因为此时的信息终止码为#5，所以接下就应该是 # 6 。此时数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n\n接着再往下，CODE 取值 #6，CODE - 1也为 #6，此时我们发现 CODE 对应的 #6 已经存在于颜色索引表中，这时候将 {CODE} 的第一元素赋值给 K 即 K = 1，然后将 {CODE} 添加到输出流，并且往颜色索引表添加一条新数据 {CODE - 1} + K，此时的 {CODE - 1}为{1，1}，所以新数据是{1，1，1}。这一步的数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n|2| 找到 CODE| #4 #1 [#6] \\(#6) #2 #9 #9 #7 ... | #7 - 1,1,1| 1,1,1,1,1|\n\n下一步，接着来。CODE 为 #2，CODE - 1 为 #6，此时的 CODE 也就是 #2 存在于颜色索引表，所以将 {CODE} 输出到输出流。接着还是把 {CODE} 的第一个值赋值给 K ，即 K = 2，并将 {CODE - 1} + K 添加进颜色索引表，即{1，1，2}。此时数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n|2| 找到 CODE| #4 #1 [#6] \\(#6) #2 #9 #9 #7 ... | #7 - 1,1,1| 1,1,1,1,1|\n|3| 找到 CODE| #4 #1 #6 [#6] \\(#2) #9 #9 #7 ... | #8 - 1,1,2| 1,1,1,1,1,2|\n\n到这里差不到知道接下来该如何了。对于找到 CODE 的情况，K 取 {CODE} 的第一个值，找不到的话 K 取 {CODE - 1} 的第一个值。接着讲  {CODE - 1}+K添加进颜色索引表（循环的每一步都要添加）。对于输出的话，如果找到了 CODE，就直接输出 {CODE}，若没有找到，则输出 {CODE - 1} + K。下面是执行了 6 步以后的数据，读者可以看一下是否和自己想的一致：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n|2| 找到 CODE| #4 #1 [#6] \\(#6) #2 #9 #9 #7 ... | #7 - 1,1,1| 1,1,1,1,1|\n|3| 找到 CODE| #4 #1 #6 [#6] \\(#2) #9 #9 #7 ... | #8 - 1,1,2| 1,1,1,1,1,2|\n|4|  没有找到 CODE|  #4 #1 #6 #6 [#2] \\(#9) #9 #7 ... |#9 - 2,2|1,1,1,1,1,2,2,2|\n|5| 找到 CODE |#4 #1 #6 #6 #2 [#9] \\(#9) #7 ...| #10 - 2,2,2|1,1,1,1,1,2,2,2,2,2|\n|6| 找到 CODE|#4 #1 #6 #6 #2 #9 [#9] \\(#7) ...| #11 - 2,2,1|1,1,1,1,1,2,2,2,2,2,1,1,1|\n\n最终得到的输出流为：\n\n    1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...\n\n应该与压缩前数据一致。\n\n> 注意：在解压缩的过程中，如果数据量大，很有可能会读到清空码，如 #4，此时就必须将之前生成的颜色索引表清除，重置为一开始的状态，然后再处理。\n\n## 码流的处理\n\n### 码流转字节流\n在 GIF 的 LZW 压缩后，我们得到了如下码流：\n\n    #4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5\n    \n那么你觉得这段码流会如何转为字节数组呢？你可能会觉得这还不简单，一个码对应一个字节呗。如果你这样想就大错特错了。之前说过 GIF 的码最大支持 12 位，一个字段不够啊。所以在存储码流的时候也是经过处理的。在刚开始的时候每个码只会用(mini code size) + 1 个位表示，本示例中的 mini code size 为 2，所以刚开始只会用三位来表示一个码，由于一个字节有八位，所以最开始的一个字节的组成如下：#4对应的三位 + #1 对应的三位 + #6对应三位中的两位。然后 #6 中剩下的一位放到下一个字节。如果对此难以理解可以看下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/3.webp)\n\n\n在以上字节的拼接过程中我们假设当前的 code size 为 SIZE，SIZE 最初的值为 mini code size + 1。而这个值在何时增加其实还要跟 GIF 压缩过程结合在一起。在压缩过程中当我们往颜色索引表添加的码 = 2^SIZE - 1 的时候，就是增加 SIZE 的时候。如刚开始 SIZE 的值是3，所以当我们添加码 #7 的时候，就应该增加 SIZE 的值，为 4 。结合压缩过程的表来看，在进行到第 6 步的时候，我们往颜色索引表添加了 #7，而此时输出的码为 #6，所以当往输出流写下一个不为 #6 的码是，其值就应该用 4 位来表示。而根据表中的第 12 步，下一个非 #6 的码是 #2 。从上图中也能看出来在 2D 这个字节中，最左边的四位表示的码为 #2。\n\n那么为什么 SIZE 要这么做呢？当我们往颜色索引表添加 #7 的时候，下一个产生的码就是 #8 了，而且如果输出 #8 的话必定是需要四位（1000）来表示的。由于一开始我们用三位来表示 #6，所以如果再遇到 #6，我们知道三位来表示他已经足够了。但对于下一个非 #6 的码，编码器不能确定其是否大于3位，所以就统一用四位来表示。\n\n### 字节流转码流\n\n上面讲的是如何将码流转换为字节流，接着讲如何将字节流转换成码流。道理都一样，刚开始读取的 SIZE 大小为 3。我们看上图的 8C 这个字节，最开始读最右边 3 位，‘100’ = #4，清空码没啥问题。接着是#1，#6，#6。读这三个码的时候用的还是三位，在看下一个码 #2，这时用了四位。我们还是结合解码的图表看，当处理完第二个 #6 后（第 2 步）我们往颜色索引表添加了 #7 - 1,1,1。这里的 7 正好等于 2^3 - 1。也就是说当往颜色索引表添加的码 = 2^SIZE - 1 的时候，SIZE 就需要做加 1 的处理了。\n\n下图是当 SIZE = 5的时候，字节的处理示意图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/4.webp)\n\n## 字节流转码流实战\n在[《GIF 字节格式介绍》](http://www.jianshu.com/p/4fabac6b15b3)中的 Image Data 小节，我们的得到了 Image Data 的字节数组如下：\n\n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    \n其中 02 用于表示 mini code size = 2，那么此时的 SIZE = 3 。下一个字节 16 表示为十六进制，表示在它之后有 22 个字节是用码流转换而来的。\n\n第一个字节为 8C = 1 0 - 0 0 1 - 1 0 0，首先取右边三位 1 0 0，为 #4，再取中间三位 0 0 1 为 #1，在进行取码的操作同时需要进行解码操作，解码操作可对照`GIF 的 LZW 解压缩`这一节的图表。\n\n第二个字节为 2D = 0 0 1 0 - 1 1 0 - 1,首先去最右边第一位 1 和第一个字节剩下的 1 0 组合成 1 1 0 为 # 6，接着是中间的 1 1 0 为 #6 。根据`GIF 的 LZW 解压缩`这一节的图表，当得到这个 #6 的时候，SIZE 需要做 + 1 处理，为 4。所以接下来的 0 0 1 0 为 #2 为下一个码。\n\n第三个字节 99 = 1 0 0 1 - 1 0 0 1 ，取右边四位 1 0 0 1，为 #9，左边四位 1 0 0 1 为 #9 。\n\n到此位置我们得到的码流为 #4 #1 #6 #6 #2 #9 #9，与`GIF 的 LZW压缩`中产生的码流对比是正确没有差别的。\n\n> 注意：虽然在本文中 `GIF 的 LZW 解压缩`和`字节流转码流`是分开将的，但在实际程序中，这两部分是同时进行的，由后者产生码流的同时，由前者根据码流来解压缩。\n\n\n## 总结\n\n到此为止，GIF 与 LZW 的相关内容就讲完了，讲得比较粗略。有些细节可能只有在实际编码中才会遇到我没有细讲。如果有问题可以留言，大家一起讨论。","source":"_posts/GIF-and-LWZ.md","raw":"---\ntitle: GIF and LWZ\ndate: 2017-11-17 16:42:56\ntags: 多媒体\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/4.webp\n---\n在讲 LZW 在 GIF 中的应用前，有必要先简单的过一下 LZW 算法。\n\n> LZW算法又叫“串表压缩算法”就是通过建立一个字符串表，用较短的代码来表示较长的字符串来实现压缩。 LZW压缩算法是Unisys的专利，有效期到2003年，所以对它的使用已经没有限制了\n\n在上面的介绍中，关键在于`字符串表`这一概念，为了简单理解，我举一个例子（此例子并不是完全使用的 LWZ 算法，但思想是一致的）。\n<!-- more -->\n假设有以下字符串：AABCCBACBCBAABC\n如果这时有以下字符串表：\n\n| 码 | 字符串 |\n| --- | --- |\n| 0 | A |\n| 1 | B |\n| 2 | C |\n| 3 | AA |\n| 4 | BC |\n| 5 | CB |\n| 6 | AC |\n| 7 | BCB |\n| 8 | AAB |\n\n那么以上的字符串就可以用字符串表中的码来表示，其中一种表示方法为：345678。可以看到只用了 6 个字符就表示了长度为 15 的字符串。当然这个只是我为了大家好理解随意些的一个表，真正的 LZW 算法生成表的算法相对比较复杂。到这里你只需要理解字符串表的作用即可，不必纠结表中的内容是如何生成的（其实是我胡乱编的，没有使用 LZW 算法）。\n\n## LZW 在 GIF 中的压缩与解压缩过程\nLZW 在对文本进行压缩的时候建立的是字符串表，其中每个码对应的是一个字符串。而在 GIF 中并不是字符串表，而是颜色索引表。其中码不变，而字符串则变成了某种颜色在 Global Color Table 或 Local Color Table 中的索引。因为本身使用这两个表也是为了对颜色数据有一个压缩效果。\n\n在上一篇[《GIF 字节格式介绍》](http://www.jianshu.com/p/4fabac6b15b3)中 Image Data 一节，讲到 `LZW Minimum Code Size` 的时候并没有过多介绍，这里我详细解释一下它的意思。\n\n在 LZW 中，在进行压缩之前，其实已经存在了字符串表或颜色索引表的一部分。在文本压缩中（英文压缩，忽略字母大小写以及字母以外的字符），已经存在了一个大小为 26 的，字符串表，其中码的范围为 0 ~ 25，字符串分别为 A~Z。这时候 minimum code 的值为 28（minmum code size为 5） 。那么为什么会跳过中间的 26 和 27 呢？其实紧跟在初始表码后的两个数有它特殊的用处，其分别是 `清空码（clear code）`和`信息终止码（end of information code）`。\n\n而对于 GIF 图来说，其颜色支持 2^(2~8) 种，所以其初始化表如下：\n\n| LZW Mini Code Size | 颜色码 | 清空码 | 信息终止码 |\n| --- | --- | --- | ---|\n| 2 | #0 - #3 | #4 | #5 |\n| 3 | #0 - #7 | #8 | #9 |\n| 4 | #0 - #15 | #16 | #17 |\n| 5 | #0 - #31 | #32 | #33 |\n| 6 | #0 - #63 | #64 | #65 |\n| 7 | #0 - #127 | #128 | #129 |\n| 8 | #0 - #255 | #256 | #257 |\n\n而这里的清空码和信息终止码有什么用呢？一般说来，当遇到清空码的时候，我们就要把之前生成的表重置为初始状态。而当遇到信息终止码的时候，则说明压缩或解压缩到此为止。\n那这里为什么需要在遇到清空码的时候重置表呢？这其实也是为了压缩效率考虑，是想一下，如果一个文本包含千万个字母，那如果不对表中的码的长度做一个限制，可能会出现一个很大很大的数字。这在 LZW 中是被禁止的。在 LZW 的不同运用场景中，这个码的长度有不同的要求，在 GIF 中码被限制在了 12 位以内。\n\n### GIF 的 LZW压缩\n\n首先我们还是使用[《GIF 字节格式介绍》](http://www.jianshu.com/p/4fabac6b15b3)中的实例图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/1.webp)\n\n其放大后的效果图如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/2.webp)\n\n其全局颜色表：\n\n|索引|字节组合|颜色|\n|---|---|---|\n|0|FFFFFF|白色|\n|1|FF0000|红色|\n|2|0000FF|蓝色|\n|3|000000|黑色|\n\n其初始的颜色索引表为：\n\n|码|索引|\n|---|---|\n|#0|0|\n|#1|1|\n|#2|2|\n|#3|3|\n|#4|清空码 |\n|#5|信息终止码|\n\n其每个像素的颜色对应的索引如下：\n\n    1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...\n    \n在描述压缩过程前，需要先约定几个需要使用的变量：\n- 输入流（Index Stream）：即上面给出的颜色对应的索引数据流\n- 输出流（Code Stream）：即压缩后的码流\n- 索引缓存（Index Buffer）：在压缩过程中用来暂存颜色索引的值（它可以是一个数组）\n- K：用来存储缓存后面的那个索引值\n\n一下用 (index ...) 表示索引缓存，[index] 表示 K。\n\n在压缩的初期会有一个初始化的步骤，这一步中我们取输入流中的第一个数据存入索引缓存，K 暂时没有值。然后往输出流里面写一个清空码，这里的话是 #4。\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ...|| #4 |\n\n初始化完成后的数据如上，下面进入循环。\n\n先将索引缓存后面的值读入 K，如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n\n给 K 赋值完成后我们就需要看索引缓存 + K 的集合是否在颜色索引表中存在，这里索引缓存 + K = (1,1)，很显然我们的颜色索引表目前还是初始化状态，并没有 (1,1) 这个索引组合。那么就向颜色索引表中添加 #6 - (1,1) 这条数据。此时我们还需要往输出流写一个码，很多人可能会觉的是 #6，但事实上我们要写的是此时索引缓存中值所对应的码，此时的索引缓存是 (1)，其对应的码为 #1。接着将索引缓存的值设为 K，并将 K 的值清空（以上为没有找到索引缓存 + K 的操作）。最后数据如下图：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n\n在读取 K 的值，读取完数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n\n给 K 赋值以后我们继续看索引缓存 + K 的集合是否存在在颜色索引表，此时索引缓存 + K = (1,1)，很熟悉嘛，这不就是刚刚往颜色索引表添加的 #6 吗？此时我们不需要也没有新的组合可以往颜色索引表添加，也不需要往输出流写码。我们需要做的就是索引缓存 + K 的值赋给索引缓存，并将 K 的值清空（以上为找到索引缓存 + K 的操作）。最后的数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n\n接着再读取 K 的值，读取后数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n|5| 读取 K | 1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1|\n\n这时候应该知道要干嘛了吧，索引缓存 + K 的值为 (1,1,1)，在我们的颜色索引表中并有这个值，这时候我们重复上面没有找到索引缓存 + K的操作即可，最后的数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3|读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n|5| 读取 K | 1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1|\n|6| 没有找到| 1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 ... | #7 - (1,1,1)| #4 #1 #6 |\n\n整个压缩差不多就是这样一个循环找索引缓存 + K 的步骤，下图是执行到26步后的数据，你可以参考看看自己是否掌握了 LZW 的压缩算法。\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n|0| 初始化| (1) 1 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4 |\n|1| 读取 K | (1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 ... || #4|\n|2| 没有找到索引缓存 + K | 1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 ... | #6 - (1,1)| #4 #1|\n|3| 读取 K | 1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1 |\n|4| 找到索引缓存 + K | 1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 ...| | #4 #1|\n|5| 读取 K | 1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 ... | | #4 #1|\n|6| 没有找到| 1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 ... | #7 - (1,1,1)| #4 #1 #6 |\n|7| 读取 K | 1 1 1 (1) [1] 2 2 2 2 2 1 1 1 1 ...|| #4 #1 #6|\n|8| 找到索引缓存 + K | 1 1 1 (1 1) 2 2 2 2 2 1 1 1 1 ...||#4 #1 #6|\n|9| 读取 K | 1 1 1 (1 1) [2] 2 2 2 2 1 1 1 1 ...||#4 #1 #6|\n|10| 没有找到索引缓存 + K |1 1 1 1 1 (2) 2 2 2 2 1 1 1 1 ...| #8 - (1,1,2)|#4 #1 #6 #6|\n|11| 读取 K |1 1 1 1 1 (2) [2] 2 2 2 1 1 1 1 ...||#4 #1 #6 #6|\n|12| 没有找到索引缓存 + K |1 1 1 1 1 2 (2) 2 2 2 1 1 1 1 ...|#9 - (2,2)|#4 #1 #6 #6 #2|\n|13| 读取 K |1 1 1 1 1 2 (2) [2] 2 2 1 1 1 1 ...||#4 #1 #6 #6 #2|\n|14| 找到索引缓存 + K |1 1 1 1 1 2 (2 2) 2 2 1 1 1 1 ...||#4 #1 #6 #6 #2|\n|15| 读取 K |1 1 1 1 1 2 (2 2) [2] 2 1 1 1 1 ...||#4 #1 #6 #6 #2|\n|16| 没有找到索引缓存 + K |1 1 1 1 1 2 2 2 (2) 2 1 1 1 1 ...|#10 - (2,2,2)|#4 #1 #6 #6 #2 #9|\n|17| 读取 K |1 1 1 1 1 2 2 2 (2) [2] 1 1 1 1 ...||#4 #1 #6 #6 #2 #9|\n|18| 找到索引缓存 + K |1 1 1 1 1 2 2 2 (2 2) 1 1 1 1 ...||#4 #1 #6 #6 #2 #9|\n|19| 读取 K |1 1 1 1 1 2 2 2 (2 2) [1] 1 1 1 ...||#4 #1 #6 #6 #2 #9|\n|20| 没有找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 (1) 1 1 1 ...|#11 - (2,2,1)|#4 #1 #6 #6 #2 #9 #9|\n|21| 读取 K |1 1 1 1 1 2 2 2 2 2 (1) [1] 1 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|22| 找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 (1 1) 1 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|23| 读取 K |1 1 1 1 1 2 2 2 2 2 (1 1) [1] 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|24| 找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 (1 1 1) 1 ...||#4 #1 #6 #6 #2 #9 #9|\n|25| 读取 K |1 1 1 1 1 2 2 2 2 2 (1 1 1) [1] ...||#4 #1 #6 #6 #2 #9 #9|\n|26| 没有找到索引缓存 + K |1 1 1 1 1 2 2 2 2 2 1 1 1 (1) ...|#12 - (1,1,1,1)|#4 #1 #6 #6 #2 #9 #9 #7|\n\n\n当处理完所有的数据后不要忘记在最后加上一个信息终止码，在这里的 #5。\n最终的输出流如下：\n\n    #4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5\n    \n可以看到通过 LZW 的压缩，把原本 10*10 = 100 个数据压缩到了36个码。\n\n### GIF 的 LZW 解压缩\n\n在上面一节讲了 LZW 在 GIF 中对每一帧图像数据的压缩过程，最终得到的数据如下：\n\n    #4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5\n\n这一节我们要讲解如何根据根据上面的这串压缩的数据获得原始数据，这里需要注意的是在 LZW 的压缩过程中生成的颜色索引表在最后会被清除，所以在解压缩的时候并不是简单的从颜色索引表去取对应的数据，而是需要我们重新再构建新的颜色索引表。\n\n在描述解压缩过程前，还是需要先约定一个变量：\n\n- 输入流（Code Stream）：这里的输入流变成了压缩过程中生成的码流。\n- 输出流（Index Stream）：输出流为图像上颜色对应索引的数据流。\n- CODE ： 解压过程中读取的码，如 #6。\n- CODE - 1 ： CODE 前一个码。\n- {CODE}：表示 CODE 所表示码的索引，如 #6 - 1,1 那么这时的 {CODE} = {1，1}\n- K ：解压过程的一个变量。\n\n在进行解压的循环之前，会有一步初始化操作。这一步首先读取码流的第一个元素，通常都是清空码，这里是 #4，它表示接下来我们要建立一个新的颜色索引表。然后读取下一个元素作为 CODE 的值，这里应该是 CODE = #1 。然后在输出流输出 CODE 对应的索引，即 1 。数据见下表：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n\n类似的，我们用 () 表示 CODE，用 [] 表示 CODE - 1，接着进入循环。CODE 读取下一个元素为 #6，此时 CODE - 1 为 #1。然后我们看 CODE 所对应的码 #6 是否存在在我们的颜色索引表中。这是的索引表应该是初始状态，只有原始的四个码和清空码以及信息终止码。由于 #6 不在表中，我们令 K = {CODE - 1} 的第一个元素，在此时 CODE - 1 = {1}，所以 K = 1，然后往颜色索引表添加新的一行数据 {CODE - 1} + K。因为此时的信息终止码为#5，所以接下就应该是 # 6 。此时数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n\n接着再往下，CODE 取值 #6，CODE - 1也为 #6，此时我们发现 CODE 对应的 #6 已经存在于颜色索引表中，这时候将 {CODE} 的第一元素赋值给 K 即 K = 1，然后将 {CODE} 添加到输出流，并且往颜色索引表添加一条新数据 {CODE - 1} + K，此时的 {CODE - 1}为{1，1}，所以新数据是{1，1，1}。这一步的数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n|2| 找到 CODE| #4 #1 [#6] \\(#6) #2 #9 #9 #7 ... | #7 - 1,1,1| 1,1,1,1,1|\n\n下一步，接着来。CODE 为 #2，CODE - 1 为 #6，此时的 CODE 也就是 #2 存在于颜色索引表，所以将 {CODE} 输出到输出流。接着还是把 {CODE} 的第一个值赋值给 K ，即 K = 2，并将 {CODE - 1} + K 添加进颜色索引表，即{1，1，2}。此时数据如下：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n|2| 找到 CODE| #4 #1 [#6] \\(#6) #2 #9 #9 #7 ... | #7 - 1,1,1| 1,1,1,1,1|\n|3| 找到 CODE| #4 #1 #6 [#6] \\(#2) #9 #9 #7 ... | #8 - 1,1,2| 1,1,1,1,1,2|\n\n到这里差不到知道接下来该如何了。对于找到 CODE 的情况，K 取 {CODE} 的第一个值，找不到的话 K 取 {CODE - 1} 的第一个值。接着讲  {CODE - 1}+K添加进颜色索引表（循环的每一步都要添加）。对于输出的话，如果找到了 CODE，就直接输出 {CODE}，若没有找到，则输出 {CODE - 1} + K。下面是执行了 6 步以后的数据，读者可以看一下是否和自己想的一致：\n\n| 步骤 | 动作 | 输入流 | 颜色索引列表新增行 | 输出流 |\n| --- | --- | --- | --- | --- |\n| 0 | 初始化| #4 (#1) #6 #6 #2 #9 #9 #7 ...|| 1 |\n|1| 没有找的 CODE | #4 [#1] \\(#6) #6 #2 #9 #9 #7 ... | #6 - 1,1|1,1,1|\n|2| 找到 CODE| #4 #1 [#6] \\(#6) #2 #9 #9 #7 ... | #7 - 1,1,1| 1,1,1,1,1|\n|3| 找到 CODE| #4 #1 #6 [#6] \\(#2) #9 #9 #7 ... | #8 - 1,1,2| 1,1,1,1,1,2|\n|4|  没有找到 CODE|  #4 #1 #6 #6 [#2] \\(#9) #9 #7 ... |#9 - 2,2|1,1,1,1,1,2,2,2|\n|5| 找到 CODE |#4 #1 #6 #6 #2 [#9] \\(#9) #7 ...| #10 - 2,2,2|1,1,1,1,1,2,2,2,2,2|\n|6| 找到 CODE|#4 #1 #6 #6 #2 #9 [#9] \\(#7) ...| #11 - 2,2,1|1,1,1,1,1,2,2,2,2,2,1,1,1|\n\n最终得到的输出流为：\n\n    1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...\n\n应该与压缩前数据一致。\n\n> 注意：在解压缩的过程中，如果数据量大，很有可能会读到清空码，如 #4，此时就必须将之前生成的颜色索引表清除，重置为一开始的状态，然后再处理。\n\n## 码流的处理\n\n### 码流转字节流\n在 GIF 的 LZW 压缩后，我们得到了如下码流：\n\n    #4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5\n    \n那么你觉得这段码流会如何转为字节数组呢？你可能会觉得这还不简单，一个码对应一个字节呗。如果你这样想就大错特错了。之前说过 GIF 的码最大支持 12 位，一个字段不够啊。所以在存储码流的时候也是经过处理的。在刚开始的时候每个码只会用(mini code size) + 1 个位表示，本示例中的 mini code size 为 2，所以刚开始只会用三位来表示一个码，由于一个字节有八位，所以最开始的一个字节的组成如下：#4对应的三位 + #1 对应的三位 + #6对应三位中的两位。然后 #6 中剩下的一位放到下一个字节。如果对此难以理解可以看下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/3.webp)\n\n\n在以上字节的拼接过程中我们假设当前的 code size 为 SIZE，SIZE 最初的值为 mini code size + 1。而这个值在何时增加其实还要跟 GIF 压缩过程结合在一起。在压缩过程中当我们往颜色索引表添加的码 = 2^SIZE - 1 的时候，就是增加 SIZE 的时候。如刚开始 SIZE 的值是3，所以当我们添加码 #7 的时候，就应该增加 SIZE 的值，为 4 。结合压缩过程的表来看，在进行到第 6 步的时候，我们往颜色索引表添加了 #7，而此时输出的码为 #6，所以当往输出流写下一个不为 #6 的码是，其值就应该用 4 位来表示。而根据表中的第 12 步，下一个非 #6 的码是 #2 。从上图中也能看出来在 2D 这个字节中，最左边的四位表示的码为 #2。\n\n那么为什么 SIZE 要这么做呢？当我们往颜色索引表添加 #7 的时候，下一个产生的码就是 #8 了，而且如果输出 #8 的话必定是需要四位（1000）来表示的。由于一开始我们用三位来表示 #6，所以如果再遇到 #6，我们知道三位来表示他已经足够了。但对于下一个非 #6 的码，编码器不能确定其是否大于3位，所以就统一用四位来表示。\n\n### 字节流转码流\n\n上面讲的是如何将码流转换为字节流，接着讲如何将字节流转换成码流。道理都一样，刚开始读取的 SIZE 大小为 3。我们看上图的 8C 这个字节，最开始读最右边 3 位，‘100’ = #4，清空码没啥问题。接着是#1，#6，#6。读这三个码的时候用的还是三位，在看下一个码 #2，这时用了四位。我们还是结合解码的图表看，当处理完第二个 #6 后（第 2 步）我们往颜色索引表添加了 #7 - 1,1,1。这里的 7 正好等于 2^3 - 1。也就是说当往颜色索引表添加的码 = 2^SIZE - 1 的时候，SIZE 就需要做加 1 的处理了。\n\n下图是当 SIZE = 5的时候，字节的处理示意图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/4.webp)\n\n## 字节流转码流实战\n在[《GIF 字节格式介绍》](http://www.jianshu.com/p/4fabac6b15b3)中的 Image Data 小节，我们的得到了 Image Data 的字节数组如下：\n\n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    \n其中 02 用于表示 mini code size = 2，那么此时的 SIZE = 3 。下一个字节 16 表示为十六进制，表示在它之后有 22 个字节是用码流转换而来的。\n\n第一个字节为 8C = 1 0 - 0 0 1 - 1 0 0，首先取右边三位 1 0 0，为 #4，再取中间三位 0 0 1 为 #1，在进行取码的操作同时需要进行解码操作，解码操作可对照`GIF 的 LZW 解压缩`这一节的图表。\n\n第二个字节为 2D = 0 0 1 0 - 1 1 0 - 1,首先去最右边第一位 1 和第一个字节剩下的 1 0 组合成 1 1 0 为 # 6，接着是中间的 1 1 0 为 #6 。根据`GIF 的 LZW 解压缩`这一节的图表，当得到这个 #6 的时候，SIZE 需要做 + 1 处理，为 4。所以接下来的 0 0 1 0 为 #2 为下一个码。\n\n第三个字节 99 = 1 0 0 1 - 1 0 0 1 ，取右边四位 1 0 0 1，为 #9，左边四位 1 0 0 1 为 #9 。\n\n到此位置我们得到的码流为 #4 #1 #6 #6 #2 #9 #9，与`GIF 的 LZW压缩`中产生的码流对比是正确没有差别的。\n\n> 注意：虽然在本文中 `GIF 的 LZW 解压缩`和`字节流转码流`是分开将的，但在实际程序中，这两部分是同时进行的，由后者产生码流的同时，由前者根据码流来解压缩。\n\n\n## 总结\n\n到此为止，GIF 与 LZW 的相关内容就讲完了，讲得比较粗略。有些细节可能只有在实际编码中才会遇到我没有细讲。如果有问题可以留言，大家一起讨论。","slug":"GIF-and-LWZ","published":1,"updated":"2024-08-21T03:16:19.779Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vo00065p6t41ok1m8h","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>在讲 LZW 在 GIF 中的应用前，有必要先简单的过一下 LZW 算法。</p>\n<blockquote>\n<p>LZW算法又叫“串表压缩算法”就是通过建立一个字符串表，用较短的代码来表示较长的字符串来实现压缩。 LZW压缩算法是Unisys的专利，有效期到2003年，所以对它的使用已经没有限制了</p>\n</blockquote>\n<p>在上面的介绍中，关键在于<code>字符串表</code>这一概念，为了简单理解，我举一个例子（此例子并不是完全使用的 LWZ 算法，但思想是一致的）。</p>\n<span id=\"more\"></span>\n<p>假设有以下字符串：AABCCBACBCBAABC<br>如果这时有以下字符串表：</p>\n<table>\n<thead>\n<tr>\n<th>码</th>\n<th>字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>C</td>\n</tr>\n<tr>\n<td>3</td>\n<td>AA</td>\n</tr>\n<tr>\n<td>4</td>\n<td>BC</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CB</td>\n</tr>\n<tr>\n<td>6</td>\n<td>AC</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BCB</td>\n</tr>\n<tr>\n<td>8</td>\n<td>AAB</td>\n</tr>\n</tbody></table>\n<p>那么以上的字符串就可以用字符串表中的码来表示，其中一种表示方法为：345678。可以看到只用了 6 个字符就表示了长度为 15 的字符串。当然这个只是我为了大家好理解随意些的一个表，真正的 LZW 算法生成表的算法相对比较复杂。到这里你只需要理解字符串表的作用即可，不必纠结表中的内容是如何生成的（其实是我胡乱编的，没有使用 LZW 算法）。</p>\n<h2 id=\"LZW-在-GIF-中的压缩与解压缩过程\"><a href=\"#LZW-在-GIF-中的压缩与解压缩过程\" class=\"headerlink\" title=\"LZW 在 GIF 中的压缩与解压缩过程\"></a>LZW 在 GIF 中的压缩与解压缩过程</h2><p>LZW 在对文本进行压缩的时候建立的是字符串表，其中每个码对应的是一个字符串。而在 GIF 中并不是字符串表，而是颜色索引表。其中码不变，而字符串则变成了某种颜色在 Global Color Table 或 Local Color Table 中的索引。因为本身使用这两个表也是为了对颜色数据有一个压缩效果。</p>\n<p>在上一篇<a href=\"http://www.jianshu.com/p/4fabac6b15b3\">《GIF 字节格式介绍》</a>中 Image Data 一节，讲到 <code>LZW Minimum Code Size</code> 的时候并没有过多介绍，这里我详细解释一下它的意思。</p>\n<p>在 LZW 中，在进行压缩之前，其实已经存在了字符串表或颜色索引表的一部分。在文本压缩中（英文压缩，忽略字母大小写以及字母以外的字符），已经存在了一个大小为 26 的，字符串表，其中码的范围为 0 ~ 25，字符串分别为 A~Z。这时候 minimum code 的值为 28（minmum code size为 5） 。那么为什么会跳过中间的 26 和 27 呢？其实紧跟在初始表码后的两个数有它特殊的用处，其分别是 <code>清空码（clear code）</code>和<code>信息终止码（end of information code）</code>。</p>\n<p>而对于 GIF 图来说，其颜色支持 2^(2~8) 种，所以其初始化表如下：</p>\n<table>\n<thead>\n<tr>\n<th>LZW Mini Code Size</th>\n<th>颜色码</th>\n<th>清空码</th>\n<th>信息终止码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>#0 - #3</td>\n<td>#4</td>\n<td>#5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>#0 - #7</td>\n<td>#8</td>\n<td>#9</td>\n</tr>\n<tr>\n<td>4</td>\n<td>#0 - #15</td>\n<td>#16</td>\n<td>#17</td>\n</tr>\n<tr>\n<td>5</td>\n<td>#0 - #31</td>\n<td>#32</td>\n<td>#33</td>\n</tr>\n<tr>\n<td>6</td>\n<td>#0 - #63</td>\n<td>#64</td>\n<td>#65</td>\n</tr>\n<tr>\n<td>7</td>\n<td>#0 - #127</td>\n<td>#128</td>\n<td>#129</td>\n</tr>\n<tr>\n<td>8</td>\n<td>#0 - #255</td>\n<td>#256</td>\n<td>#257</td>\n</tr>\n</tbody></table>\n<p>而这里的清空码和信息终止码有什么用呢？一般说来，当遇到清空码的时候，我们就要把之前生成的表重置为初始状态。而当遇到信息终止码的时候，则说明压缩或解压缩到此为止。<br>那这里为什么需要在遇到清空码的时候重置表呢？这其实也是为了压缩效率考虑，是想一下，如果一个文本包含千万个字母，那如果不对表中的码的长度做一个限制，可能会出现一个很大很大的数字。这在 LZW 中是被禁止的。在 LZW 的不同运用场景中，这个码的长度有不同的要求，在 GIF 中码被限制在了 12 位以内。</p>\n<h3 id=\"GIF-的-LZW压缩\"><a href=\"#GIF-的-LZW压缩\" class=\"headerlink\" title=\"GIF 的 LZW压缩\"></a>GIF 的 LZW压缩</h3><p>首先我们还是使用<a href=\"http://www.jianshu.com/p/4fabac6b15b3\">《GIF 字节格式介绍》</a>中的实例图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/1.webp\" alt=\"image\"></p>\n<p>其放大后的效果图如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/2.webp\" alt=\"image\"></p>\n<p>其全局颜色表：</p>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>字节组合</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>FFFFFF</td>\n<td>白色</td>\n</tr>\n<tr>\n<td>1</td>\n<td>FF0000</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0000FF</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>3</td>\n<td>000000</td>\n<td>黑色</td>\n</tr>\n</tbody></table>\n<p>其初始的颜色索引表为：</p>\n<table>\n<thead>\n<tr>\n<th>码</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>#1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>#2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>#3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>#4</td>\n<td>清空码</td>\n</tr>\n<tr>\n<td>#5</td>\n<td>信息终止码</td>\n</tr>\n</tbody></table>\n<p>其每个像素的颜色对应的索引如下：</p>\n<pre><code>1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...</code></pre><p>在描述压缩过程前，需要先约定几个需要使用的变量：</p>\n<ul>\n<li>输入流（Index Stream）：即上面给出的颜色对应的索引数据流</li>\n<li>输出流（Code Stream）：即压缩后的码流</li>\n<li>索引缓存（Index Buffer）：在压缩过程中用来暂存颜色索引的值（它可以是一个数组）</li>\n<li>K：用来存储缓存后面的那个索引值</li>\n</ul>\n<p>一下用 (index …) 表示索引缓存，[index] 表示 K。</p>\n<p>在压缩的初期会有一个初始化的步骤，这一步中我们取输入流中的第一个数据存入索引缓存，K 暂时没有值。然后往输出流里面写一个清空码，这里的话是 #4。</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n</tbody></table>\n<p>初始化完成后的数据如上，下面进入循环。</p>\n<p>先将索引缓存后面的值读入 K，如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n</tbody></table>\n<p>给 K 赋值完成后我们就需要看索引缓存 + K 的集合是否在颜色索引表中存在，这里索引缓存 + K = (1,1)，很显然我们的颜色索引表目前还是初始化状态，并没有 (1,1) 这个索引组合。那么就向颜色索引表中添加 #6 - (1,1) 这条数据。此时我们还需要往输出流写一个码，很多人可能会觉的是 #6，但事实上我们要写的是此时索引缓存中值所对应的码，此时的索引缓存是 (1)，其对应的码为 #1。接着将索引缓存的值设为 K，并将 K 的值清空（以上为没有找到索引缓存 + K 的操作）。最后数据如下图：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>在读取 K 的值，读取完数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>给 K 赋值以后我们继续看索引缓存 + K 的集合是否存在在颜色索引表，此时索引缓存 + K = (1,1)，很熟悉嘛，这不就是刚刚往颜色索引表添加的 #6 吗？此时我们不需要也没有新的组合可以往颜色索引表添加，也不需要往输出流写码。我们需要做的就是索引缓存 + K 的值赋给索引缓存，并将 K 的值清空（以上为找到索引缓存 + K 的操作）。最后的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>接着再读取 K 的值，读取后数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读取 K</td>\n<td>1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>这时候应该知道要干嘛了吧，索引缓存 + K 的值为 (1,1,1)，在我们的颜色索引表中并有这个值，这时候我们重复上面没有找到索引缓存 + K的操作即可，最后的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读取 K</td>\n<td>1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>没有找到</td>\n<td>1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#7 - (1,1,1)</td>\n<td>#4 #1 #6</td>\n</tr>\n</tbody></table>\n<p>整个压缩差不多就是这样一个循环找索引缓存 + K 的步骤，下图是执行到26步后的数据，你可以参考看看自己是否掌握了 LZW 的压缩算法。</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读取 K</td>\n<td>1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>没有找到</td>\n<td>1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#7 - (1,1,1)</td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>读取 K</td>\n<td>1 1 1 (1) [1] 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>8</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 (1 1) 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>9</td>\n<td>读取 K</td>\n<td>1 1 1 (1 1) [2] 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>10</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 (2) 2 2 2 2 1 1 1 1 …</td>\n<td>#8 - (1,1,2)</td>\n<td>#4 #1 #6 #6</td>\n</tr>\n<tr>\n<td>11</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 (2) [2] 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6</td>\n</tr>\n<tr>\n<td>12</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 (2) 2 2 2 1 1 1 1 …</td>\n<td>#9 - (2,2)</td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>13</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 (2) [2] 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>14</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 (2 2) 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>15</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 (2 2) [2] 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>16</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 (2) 2 1 1 1 1 …</td>\n<td>#10 - (2,2,2)</td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>17</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 (2) [2] 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>18</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 (2 2) 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>19</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 (2 2) [1] 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>20</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1) 1 1 1 …</td>\n<td>#11 - (2,2,1)</td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>21</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1) [1] 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>22</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1) 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>23</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1) [1] 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>24</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1 1) 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>25</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1 1) [1] …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>26</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 1 1 1 (1) …</td>\n<td>#12 - (1,1,1,1)</td>\n<td>#4 #1 #6 #6 #2 #9 #9 #7</td>\n</tr>\n</tbody></table>\n<p>当处理完所有的数据后不要忘记在最后加上一个信息终止码，在这里的 #5。<br>最终的输出流如下：</p>\n<pre><code>#4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5</code></pre><p>可以看到通过 LZW 的压缩，把原本 10*10 = 100 个数据压缩到了36个码。</p>\n<h3 id=\"GIF-的-LZW-解压缩\"><a href=\"#GIF-的-LZW-解压缩\" class=\"headerlink\" title=\"GIF 的 LZW 解压缩\"></a>GIF 的 LZW 解压缩</h3><p>在上面一节讲了 LZW 在 GIF 中对每一帧图像数据的压缩过程，最终得到的数据如下：</p>\n<pre><code>#4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5</code></pre><p>这一节我们要讲解如何根据根据上面的这串压缩的数据获得原始数据，这里需要注意的是在 LZW 的压缩过程中生成的颜色索引表在最后会被清除，所以在解压缩的时候并不是简单的从颜色索引表去取对应的数据，而是需要我们重新再构建新的颜色索引表。</p>\n<p>在描述解压缩过程前，还是需要先约定一个变量：</p>\n<ul>\n<li>输入流（Code Stream）：这里的输入流变成了压缩过程中生成的码流。</li>\n<li>输出流（Index Stream）：输出流为图像上颜色对应索引的数据流。</li>\n<li>CODE ： 解压过程中读取的码，如 #6。</li>\n<li>CODE - 1 ： CODE 前一个码。</li>\n<li>{CODE}：表示 CODE 所表示码的索引，如 #6 - 1,1 那么这时的 {CODE} = {1，1}</li>\n<li>K ：解压过程的一个变量。</li>\n</ul>\n<p>在进行解压的循环之前，会有一步初始化操作。这一步首先读取码流的第一个元素，通常都是清空码，这里是 #4，它表示接下来我们要建立一个新的颜色索引表。然后读取下一个元素作为 CODE 的值，这里应该是 CODE = #1 。然后在输出流输出 CODE 对应的索引，即 1 。数据见下表：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>类似的，我们用 () 表示 CODE，用 [] 表示 CODE - 1，接着进入循环。CODE 读取下一个元素为 #6，此时 CODE - 1 为 #1。然后我们看 CODE 所对应的码 #6 是否存在在我们的颜色索引表中。这是的索引表应该是初始状态，只有原始的四个码和清空码以及信息终止码。由于 #6 不在表中，我们令 K = {CODE - 1} 的第一个元素，在此时 CODE - 1 = {1}，所以 K = 1，然后往颜色索引表添加新的一行数据 {CODE - 1} + K。因为此时的信息终止码为#5，所以接下就应该是 # 6 。此时数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n</tbody></table>\n<p>接着再往下，CODE 取值 #6，CODE - 1也为 #6，此时我们发现 CODE 对应的 #6 已经存在于颜色索引表中，这时候将 {CODE} 的第一元素赋值给 K 即 K = 1，然后将 {CODE} 添加到输出流，并且往颜色索引表添加一条新数据 {CODE - 1} + K，此时的 {CODE - 1}为{1，1}，所以新数据是{1，1，1}。这一步的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>找到 CODE</td>\n<td>#4 #1 [#6] (#6) #2 #9 #9 #7 …</td>\n<td>#7 - 1,1,1</td>\n<td>1,1,1,1,1</td>\n</tr>\n</tbody></table>\n<p>下一步，接着来。CODE 为 #2，CODE - 1 为 #6，此时的 CODE 也就是 #2 存在于颜色索引表，所以将 {CODE} 输出到输出流。接着还是把 {CODE} 的第一个值赋值给 K ，即 K = 2，并将 {CODE - 1} + K 添加进颜色索引表，即{1，1，2}。此时数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>找到 CODE</td>\n<td>#4 #1 [#6] (#6) #2 #9 #9 #7 …</td>\n<td>#7 - 1,1,1</td>\n<td>1,1,1,1,1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 [#6] (#2) #9 #9 #7 …</td>\n<td>#8 - 1,1,2</td>\n<td>1,1,1,1,1,2</td>\n</tr>\n</tbody></table>\n<p>到这里差不到知道接下来该如何了。对于找到 CODE 的情况，K 取 {CODE} 的第一个值，找不到的话 K 取 {CODE - 1} 的第一个值。接着讲  {CODE - 1}+K添加进颜色索引表（循环的每一步都要添加）。对于输出的话，如果找到了 CODE，就直接输出 {CODE}，若没有找到，则输出 {CODE - 1} + K。下面是执行了 6 步以后的数据，读者可以看一下是否和自己想的一致：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>找到 CODE</td>\n<td>#4 #1 [#6] (#6) #2 #9 #9 #7 …</td>\n<td>#7 - 1,1,1</td>\n<td>1,1,1,1,1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 [#6] (#2) #9 #9 #7 …</td>\n<td>#8 - 1,1,2</td>\n<td>1,1,1,1,1,2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>没有找到 CODE</td>\n<td>#4 #1 #6 #6 [#2] (#9) #9 #7 …</td>\n<td>#9 - 2,2</td>\n<td>1,1,1,1,1,2,2,2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 #6 #2 [#9] (#9) #7 …</td>\n<td>#10 - 2,2,2</td>\n<td>1,1,1,1,1,2,2,2,2,2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 #6 #2 #9 [#9] (#7) …</td>\n<td>#11 - 2,2,1</td>\n<td>1,1,1,1,1,2,2,2,2,2,1,1,1</td>\n</tr>\n</tbody></table>\n<p>最终得到的输出流为：</p>\n<pre><code>1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...</code></pre><p>应该与压缩前数据一致。</p>\n<blockquote>\n<p>注意：在解压缩的过程中，如果数据量大，很有可能会读到清空码，如 #4，此时就必须将之前生成的颜色索引表清除，重置为一开始的状态，然后再处理。</p>\n</blockquote>\n<h2 id=\"码流的处理\"><a href=\"#码流的处理\" class=\"headerlink\" title=\"码流的处理\"></a>码流的处理</h2><h3 id=\"码流转字节流\"><a href=\"#码流转字节流\" class=\"headerlink\" title=\"码流转字节流\"></a>码流转字节流</h3><p>在 GIF 的 LZW 压缩后，我们得到了如下码流：</p>\n<pre><code>#4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5</code></pre><p>那么你觉得这段码流会如何转为字节数组呢？你可能会觉得这还不简单，一个码对应一个字节呗。如果你这样想就大错特错了。之前说过 GIF 的码最大支持 12 位，一个字段不够啊。所以在存储码流的时候也是经过处理的。在刚开始的时候每个码只会用(mini code size) + 1 个位表示，本示例中的 mini code size 为 2，所以刚开始只会用三位来表示一个码，由于一个字节有八位，所以最开始的一个字节的组成如下：#4对应的三位 + #1 对应的三位 + #6对应三位中的两位。然后 #6 中剩下的一位放到下一个字节。如果对此难以理解可以看下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/3.webp\" alt=\"image\"></p>\n<p>在以上字节的拼接过程中我们假设当前的 code size 为 SIZE，SIZE 最初的值为 mini code size + 1。而这个值在何时增加其实还要跟 GIF 压缩过程结合在一起。在压缩过程中当我们往颜色索引表添加的码 = 2^SIZE - 1 的时候，就是增加 SIZE 的时候。如刚开始 SIZE 的值是3，所以当我们添加码 #7 的时候，就应该增加 SIZE 的值，为 4 。结合压缩过程的表来看，在进行到第 6 步的时候，我们往颜色索引表添加了 #7，而此时输出的码为 #6，所以当往输出流写下一个不为 #6 的码是，其值就应该用 4 位来表示。而根据表中的第 12 步，下一个非 #6 的码是 #2 。从上图中也能看出来在 2D 这个字节中，最左边的四位表示的码为 #2。</p>\n<p>那么为什么 SIZE 要这么做呢？当我们往颜色索引表添加 #7 的时候，下一个产生的码就是 #8 了，而且如果输出 #8 的话必定是需要四位（1000）来表示的。由于一开始我们用三位来表示 #6，所以如果再遇到 #6，我们知道三位来表示他已经足够了。但对于下一个非 #6 的码，编码器不能确定其是否大于3位，所以就统一用四位来表示。</p>\n<h3 id=\"字节流转码流\"><a href=\"#字节流转码流\" class=\"headerlink\" title=\"字节流转码流\"></a>字节流转码流</h3><p>上面讲的是如何将码流转换为字节流，接着讲如何将字节流转换成码流。道理都一样，刚开始读取的 SIZE 大小为 3。我们看上图的 8C 这个字节，最开始读最右边 3 位，‘100’ = #4，清空码没啥问题。接着是#1，#6，#6。读这三个码的时候用的还是三位，在看下一个码 #2，这时用了四位。我们还是结合解码的图表看，当处理完第二个 #6 后（第 2 步）我们往颜色索引表添加了 #7 - 1,1,1。这里的 7 正好等于 2^3 - 1。也就是说当往颜色索引表添加的码 = 2^SIZE - 1 的时候，SIZE 就需要做加 1 的处理了。</p>\n<p>下图是当 SIZE = 5的时候，字节的处理示意图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/4.webp\" alt=\"image\"></p>\n<h2 id=\"字节流转码流实战\"><a href=\"#字节流转码流实战\" class=\"headerlink\" title=\"字节流转码流实战\"></a>字节流转码流实战</h2><p>在<a href=\"http://www.jianshu.com/p/4fabac6b15b3\">《GIF 字节格式介绍》</a>中的 Image Data 小节，我们的得到了 Image Data 的字节数组如下：</p>\n<pre><code>02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00</code></pre><p>其中 02 用于表示 mini code size = 2，那么此时的 SIZE = 3 。下一个字节 16 表示为十六进制，表示在它之后有 22 个字节是用码流转换而来的。</p>\n<p>第一个字节为 8C = 1 0 - 0 0 1 - 1 0 0，首先取右边三位 1 0 0，为 #4，再取中间三位 0 0 1 为 #1，在进行取码的操作同时需要进行解码操作，解码操作可对照<code>GIF 的 LZW 解压缩</code>这一节的图表。</p>\n<p>第二个字节为 2D = 0 0 1 0 - 1 1 0 - 1,首先去最右边第一位 1 和第一个字节剩下的 1 0 组合成 1 1 0 为 # 6，接着是中间的 1 1 0 为 #6 。根据<code>GIF 的 LZW 解压缩</code>这一节的图表，当得到这个 #6 的时候，SIZE 需要做 + 1 处理，为 4。所以接下来的 0 0 1 0 为 #2 为下一个码。</p>\n<p>第三个字节 99 = 1 0 0 1 - 1 0 0 1 ，取右边四位 1 0 0 1，为 #9，左边四位 1 0 0 1 为 #9 。</p>\n<p>到此位置我们得到的码流为 #4 #1 #6 #6 #2 #9 #9，与<code>GIF 的 LZW压缩</code>中产生的码流对比是正确没有差别的。</p>\n<blockquote>\n<p>注意：虽然在本文中 <code>GIF 的 LZW 解压缩</code>和<code>字节流转码流</code>是分开将的，但在实际程序中，这两部分是同时进行的，由后者产生码流的同时，由前者根据码流来解压缩。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此为止，GIF 与 LZW 的相关内容就讲完了，讲得比较粗略。有些细节可能只有在实际编码中才会遇到我没有细讲。如果有问题可以留言，大家一起讨论。</p>\n","excerpt":"<p>在讲 LZW 在 GIF 中的应用前，有必要先简单的过一下 LZW 算法。</p>\n<blockquote>\n<p>LZW算法又叫“串表压缩算法”就是通过建立一个字符串表，用较短的代码来表示较长的字符串来实现压缩。 LZW压缩算法是Unisys的专利，有效期到2003年，所以对它的使用已经没有限制了</p>\n</blockquote>\n<p>在上面的介绍中，关键在于<code>字符串表</code>这一概念，为了简单理解，我举一个例子（此例子并不是完全使用的 LWZ 算法，但思想是一致的）。</p>","more":"<p>假设有以下字符串：AABCCBACBCBAABC<br>如果这时有以下字符串表：</p>\n<table>\n<thead>\n<tr>\n<th>码</th>\n<th>字符串</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>A</td>\n</tr>\n<tr>\n<td>1</td>\n<td>B</td>\n</tr>\n<tr>\n<td>2</td>\n<td>C</td>\n</tr>\n<tr>\n<td>3</td>\n<td>AA</td>\n</tr>\n<tr>\n<td>4</td>\n<td>BC</td>\n</tr>\n<tr>\n<td>5</td>\n<td>CB</td>\n</tr>\n<tr>\n<td>6</td>\n<td>AC</td>\n</tr>\n<tr>\n<td>7</td>\n<td>BCB</td>\n</tr>\n<tr>\n<td>8</td>\n<td>AAB</td>\n</tr>\n</tbody></table>\n<p>那么以上的字符串就可以用字符串表中的码来表示，其中一种表示方法为：345678。可以看到只用了 6 个字符就表示了长度为 15 的字符串。当然这个只是我为了大家好理解随意些的一个表，真正的 LZW 算法生成表的算法相对比较复杂。到这里你只需要理解字符串表的作用即可，不必纠结表中的内容是如何生成的（其实是我胡乱编的，没有使用 LZW 算法）。</p>\n<h2 id=\"LZW-在-GIF-中的压缩与解压缩过程\"><a href=\"#LZW-在-GIF-中的压缩与解压缩过程\" class=\"headerlink\" title=\"LZW 在 GIF 中的压缩与解压缩过程\"></a>LZW 在 GIF 中的压缩与解压缩过程</h2><p>LZW 在对文本进行压缩的时候建立的是字符串表，其中每个码对应的是一个字符串。而在 GIF 中并不是字符串表，而是颜色索引表。其中码不变，而字符串则变成了某种颜色在 Global Color Table 或 Local Color Table 中的索引。因为本身使用这两个表也是为了对颜色数据有一个压缩效果。</p>\n<p>在上一篇<a href=\"http://www.jianshu.com/p/4fabac6b15b3\">《GIF 字节格式介绍》</a>中 Image Data 一节，讲到 <code>LZW Minimum Code Size</code> 的时候并没有过多介绍，这里我详细解释一下它的意思。</p>\n<p>在 LZW 中，在进行压缩之前，其实已经存在了字符串表或颜色索引表的一部分。在文本压缩中（英文压缩，忽略字母大小写以及字母以外的字符），已经存在了一个大小为 26 的，字符串表，其中码的范围为 0 ~ 25，字符串分别为 A~Z。这时候 minimum code 的值为 28（minmum code size为 5） 。那么为什么会跳过中间的 26 和 27 呢？其实紧跟在初始表码后的两个数有它特殊的用处，其分别是 <code>清空码（clear code）</code>和<code>信息终止码（end of information code）</code>。</p>\n<p>而对于 GIF 图来说，其颜色支持 2^(2~8) 种，所以其初始化表如下：</p>\n<table>\n<thead>\n<tr>\n<th>LZW Mini Code Size</th>\n<th>颜色码</th>\n<th>清空码</th>\n<th>信息终止码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>2</td>\n<td>#0 - #3</td>\n<td>#4</td>\n<td>#5</td>\n</tr>\n<tr>\n<td>3</td>\n<td>#0 - #7</td>\n<td>#8</td>\n<td>#9</td>\n</tr>\n<tr>\n<td>4</td>\n<td>#0 - #15</td>\n<td>#16</td>\n<td>#17</td>\n</tr>\n<tr>\n<td>5</td>\n<td>#0 - #31</td>\n<td>#32</td>\n<td>#33</td>\n</tr>\n<tr>\n<td>6</td>\n<td>#0 - #63</td>\n<td>#64</td>\n<td>#65</td>\n</tr>\n<tr>\n<td>7</td>\n<td>#0 - #127</td>\n<td>#128</td>\n<td>#129</td>\n</tr>\n<tr>\n<td>8</td>\n<td>#0 - #255</td>\n<td>#256</td>\n<td>#257</td>\n</tr>\n</tbody></table>\n<p>而这里的清空码和信息终止码有什么用呢？一般说来，当遇到清空码的时候，我们就要把之前生成的表重置为初始状态。而当遇到信息终止码的时候，则说明压缩或解压缩到此为止。<br>那这里为什么需要在遇到清空码的时候重置表呢？这其实也是为了压缩效率考虑，是想一下，如果一个文本包含千万个字母，那如果不对表中的码的长度做一个限制，可能会出现一个很大很大的数字。这在 LZW 中是被禁止的。在 LZW 的不同运用场景中，这个码的长度有不同的要求，在 GIF 中码被限制在了 12 位以内。</p>\n<h3 id=\"GIF-的-LZW压缩\"><a href=\"#GIF-的-LZW压缩\" class=\"headerlink\" title=\"GIF 的 LZW压缩\"></a>GIF 的 LZW压缩</h3><p>首先我们还是使用<a href=\"http://www.jianshu.com/p/4fabac6b15b3\">《GIF 字节格式介绍》</a>中的实例图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/1.webp\" alt=\"image\"></p>\n<p>其放大后的效果图如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/2.webp\" alt=\"image\"></p>\n<p>其全局颜色表：</p>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>字节组合</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>FFFFFF</td>\n<td>白色</td>\n</tr>\n<tr>\n<td>1</td>\n<td>FF0000</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0000FF</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>3</td>\n<td>000000</td>\n<td>黑色</td>\n</tr>\n</tbody></table>\n<p>其初始的颜色索引表为：</p>\n<table>\n<thead>\n<tr>\n<th>码</th>\n<th>索引</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>#0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>#1</td>\n<td>1</td>\n</tr>\n<tr>\n<td>#2</td>\n<td>2</td>\n</tr>\n<tr>\n<td>#3</td>\n<td>3</td>\n</tr>\n<tr>\n<td>#4</td>\n<td>清空码</td>\n</tr>\n<tr>\n<td>#5</td>\n<td>信息终止码</td>\n</tr>\n</tbody></table>\n<p>其每个像素的颜色对应的索引如下：</p>\n<pre><code>1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...</code></pre><p>在描述压缩过程前，需要先约定几个需要使用的变量：</p>\n<ul>\n<li>输入流（Index Stream）：即上面给出的颜色对应的索引数据流</li>\n<li>输出流（Code Stream）：即压缩后的码流</li>\n<li>索引缓存（Index Buffer）：在压缩过程中用来暂存颜色索引的值（它可以是一个数组）</li>\n<li>K：用来存储缓存后面的那个索引值</li>\n</ul>\n<p>一下用 (index …) 表示索引缓存，[index] 表示 K。</p>\n<p>在压缩的初期会有一个初始化的步骤，这一步中我们取输入流中的第一个数据存入索引缓存，K 暂时没有值。然后往输出流里面写一个清空码，这里的话是 #4。</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n</tbody></table>\n<p>初始化完成后的数据如上，下面进入循环。</p>\n<p>先将索引缓存后面的值读入 K，如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n</tbody></table>\n<p>给 K 赋值完成后我们就需要看索引缓存 + K 的集合是否在颜色索引表中存在，这里索引缓存 + K = (1,1)，很显然我们的颜色索引表目前还是初始化状态，并没有 (1,1) 这个索引组合。那么就向颜色索引表中添加 #6 - (1,1) 这条数据。此时我们还需要往输出流写一个码，很多人可能会觉的是 #6，但事实上我们要写的是此时索引缓存中值所对应的码，此时的索引缓存是 (1)，其对应的码为 #1。接着将索引缓存的值设为 K，并将 K 的值清空（以上为没有找到索引缓存 + K 的操作）。最后数据如下图：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>在读取 K 的值，读取完数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>给 K 赋值以后我们继续看索引缓存 + K 的集合是否存在在颜色索引表，此时索引缓存 + K = (1,1)，很熟悉嘛，这不就是刚刚往颜色索引表添加的 #6 吗？此时我们不需要也没有新的组合可以往颜色索引表添加，也不需要往输出流写码。我们需要做的就是索引缓存 + K 的值赋给索引缓存，并将 K 的值清空（以上为找到索引缓存 + K 的操作）。最后的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>接着再读取 K 的值，读取后数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读取 K</td>\n<td>1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n</tbody></table>\n<p>这时候应该知道要干嘛了吧，索引缓存 + K 的值为 (1,1,1)，在我们的颜色索引表中并有这个值，这时候我们重复上面没有找到索引缓存 + K的操作即可，最后的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读取 K</td>\n<td>1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>没有找到</td>\n<td>1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#7 - (1,1,1)</td>\n<td>#4 #1 #6</td>\n</tr>\n</tbody></table>\n<p>整个压缩差不多就是这样一个循环找索引缓存 + K 的步骤，下图是执行到26步后的数据，你可以参考看看自己是否掌握了 LZW 的压缩算法。</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>(1) 1 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>1</td>\n<td>读取 K</td>\n<td>(1) [1] 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4</td>\n</tr>\n<tr>\n<td>2</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 (1) 1 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#6 - (1,1)</td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>读取 K</td>\n<td>1 (1) [1] 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>4</td>\n<td>找到索引缓存 + K</td>\n<td>1 (1 1) 1 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>5</td>\n<td>读取 K</td>\n<td>1 (1 1) [1] 1 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1</td>\n</tr>\n<tr>\n<td>6</td>\n<td>没有找到</td>\n<td>1 1 1 (1) 1 2 2 2 2 2 1 1 1 1 …</td>\n<td>#7 - (1,1,1)</td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>7</td>\n<td>读取 K</td>\n<td>1 1 1 (1) [1] 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>8</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 (1 1) 2 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>9</td>\n<td>读取 K</td>\n<td>1 1 1 (1 1) [2] 2 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6</td>\n</tr>\n<tr>\n<td>10</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 (2) 2 2 2 2 1 1 1 1 …</td>\n<td>#8 - (1,1,2)</td>\n<td>#4 #1 #6 #6</td>\n</tr>\n<tr>\n<td>11</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 (2) [2] 2 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6</td>\n</tr>\n<tr>\n<td>12</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 (2) 2 2 2 1 1 1 1 …</td>\n<td>#9 - (2,2)</td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>13</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 (2) [2] 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>14</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 (2 2) 2 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>15</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 (2 2) [2] 2 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2</td>\n</tr>\n<tr>\n<td>16</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 (2) 2 1 1 1 1 …</td>\n<td>#10 - (2,2,2)</td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>17</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 (2) [2] 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>18</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 (2 2) 1 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>19</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 (2 2) [1] 1 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9</td>\n</tr>\n<tr>\n<td>20</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1) 1 1 1 …</td>\n<td>#11 - (2,2,1)</td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>21</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1) [1] 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>22</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1) 1 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>23</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1) [1] 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>24</td>\n<td>找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1 1) 1 …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>25</td>\n<td>读取 K</td>\n<td>1 1 1 1 1 2 2 2 2 2 (1 1 1) [1] …</td>\n<td></td>\n<td>#4 #1 #6 #6 #2 #9 #9</td>\n</tr>\n<tr>\n<td>26</td>\n<td>没有找到索引缓存 + K</td>\n<td>1 1 1 1 1 2 2 2 2 2 1 1 1 (1) …</td>\n<td>#12 - (1,1,1,1)</td>\n<td>#4 #1 #6 #6 #2 #9 #9 #7</td>\n</tr>\n</tbody></table>\n<p>当处理完所有的数据后不要忘记在最后加上一个信息终止码，在这里的 #5。<br>最终的输出流如下：</p>\n<pre><code>#4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5</code></pre><p>可以看到通过 LZW 的压缩，把原本 10*10 = 100 个数据压缩到了36个码。</p>\n<h3 id=\"GIF-的-LZW-解压缩\"><a href=\"#GIF-的-LZW-解压缩\" class=\"headerlink\" title=\"GIF 的 LZW 解压缩\"></a>GIF 的 LZW 解压缩</h3><p>在上面一节讲了 LZW 在 GIF 中对每一帧图像数据的压缩过程，最终得到的数据如下：</p>\n<pre><code>#4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5</code></pre><p>这一节我们要讲解如何根据根据上面的这串压缩的数据获得原始数据，这里需要注意的是在 LZW 的压缩过程中生成的颜色索引表在最后会被清除，所以在解压缩的时候并不是简单的从颜色索引表去取对应的数据，而是需要我们重新再构建新的颜色索引表。</p>\n<p>在描述解压缩过程前，还是需要先约定一个变量：</p>\n<ul>\n<li>输入流（Code Stream）：这里的输入流变成了压缩过程中生成的码流。</li>\n<li>输出流（Index Stream）：输出流为图像上颜色对应索引的数据流。</li>\n<li>CODE ： 解压过程中读取的码，如 #6。</li>\n<li>CODE - 1 ： CODE 前一个码。</li>\n<li>{CODE}：表示 CODE 所表示码的索引，如 #6 - 1,1 那么这时的 {CODE} = {1，1}</li>\n<li>K ：解压过程的一个变量。</li>\n</ul>\n<p>在进行解压的循环之前，会有一步初始化操作。这一步首先读取码流的第一个元素，通常都是清空码，这里是 #4，它表示接下来我们要建立一个新的颜色索引表。然后读取下一个元素作为 CODE 的值，这里应该是 CODE = #1 。然后在输出流输出 CODE 对应的索引，即 1 。数据见下表：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n</tbody></table>\n<p>类似的，我们用 () 表示 CODE，用 [] 表示 CODE - 1，接着进入循环。CODE 读取下一个元素为 #6，此时 CODE - 1 为 #1。然后我们看 CODE 所对应的码 #6 是否存在在我们的颜色索引表中。这是的索引表应该是初始状态，只有原始的四个码和清空码以及信息终止码。由于 #6 不在表中，我们令 K = {CODE - 1} 的第一个元素，在此时 CODE - 1 = {1}，所以 K = 1，然后往颜色索引表添加新的一行数据 {CODE - 1} + K。因为此时的信息终止码为#5，所以接下就应该是 # 6 。此时数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n</tbody></table>\n<p>接着再往下，CODE 取值 #6，CODE - 1也为 #6，此时我们发现 CODE 对应的 #6 已经存在于颜色索引表中，这时候将 {CODE} 的第一元素赋值给 K 即 K = 1，然后将 {CODE} 添加到输出流，并且往颜色索引表添加一条新数据 {CODE - 1} + K，此时的 {CODE - 1}为{1，1}，所以新数据是{1，1，1}。这一步的数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>找到 CODE</td>\n<td>#4 #1 [#6] (#6) #2 #9 #9 #7 …</td>\n<td>#7 - 1,1,1</td>\n<td>1,1,1,1,1</td>\n</tr>\n</tbody></table>\n<p>下一步，接着来。CODE 为 #2，CODE - 1 为 #6，此时的 CODE 也就是 #2 存在于颜色索引表，所以将 {CODE} 输出到输出流。接着还是把 {CODE} 的第一个值赋值给 K ，即 K = 2，并将 {CODE - 1} + K 添加进颜色索引表，即{1，1，2}。此时数据如下：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>找到 CODE</td>\n<td>#4 #1 [#6] (#6) #2 #9 #9 #7 …</td>\n<td>#7 - 1,1,1</td>\n<td>1,1,1,1,1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 [#6] (#2) #9 #9 #7 …</td>\n<td>#8 - 1,1,2</td>\n<td>1,1,1,1,1,2</td>\n</tr>\n</tbody></table>\n<p>到这里差不到知道接下来该如何了。对于找到 CODE 的情况，K 取 {CODE} 的第一个值，找不到的话 K 取 {CODE - 1} 的第一个值。接着讲  {CODE - 1}+K添加进颜色索引表（循环的每一步都要添加）。对于输出的话，如果找到了 CODE，就直接输出 {CODE}，若没有找到，则输出 {CODE - 1} + K。下面是执行了 6 步以后的数据，读者可以看一下是否和自己想的一致：</p>\n<table>\n<thead>\n<tr>\n<th>步骤</th>\n<th>动作</th>\n<th>输入流</th>\n<th>颜色索引列表新增行</th>\n<th>输出流</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>初始化</td>\n<td>#4 (#1) #6 #6 #2 #9 #9 #7 …</td>\n<td></td>\n<td>1</td>\n</tr>\n<tr>\n<td>1</td>\n<td>没有找的 CODE</td>\n<td>#4 [#1] (#6) #6 #2 #9 #9 #7 …</td>\n<td>#6 - 1,1</td>\n<td>1,1,1</td>\n</tr>\n<tr>\n<td>2</td>\n<td>找到 CODE</td>\n<td>#4 #1 [#6] (#6) #2 #9 #9 #7 …</td>\n<td>#7 - 1,1,1</td>\n<td>1,1,1,1,1</td>\n</tr>\n<tr>\n<td>3</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 [#6] (#2) #9 #9 #7 …</td>\n<td>#8 - 1,1,2</td>\n<td>1,1,1,1,1,2</td>\n</tr>\n<tr>\n<td>4</td>\n<td>没有找到 CODE</td>\n<td>#4 #1 #6 #6 [#2] (#9) #9 #7 …</td>\n<td>#9 - 2,2</td>\n<td>1,1,1,1,1,2,2,2</td>\n</tr>\n<tr>\n<td>5</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 #6 #2 [#9] (#9) #7 …</td>\n<td>#10 - 2,2,2</td>\n<td>1,1,1,1,1,2,2,2,2,2</td>\n</tr>\n<tr>\n<td>6</td>\n<td>找到 CODE</td>\n<td>#4 #1 #6 #6 #2 #9 [#9] (#7) …</td>\n<td>#11 - 2,2,1</td>\n<td>1,1,1,1,1,2,2,2,2,2,1,1,1</td>\n</tr>\n</tbody></table>\n<p>最终得到的输出流为：</p>\n<pre><code>1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, 2, 2, 2, ...</code></pre><p>应该与压缩前数据一致。</p>\n<blockquote>\n<p>注意：在解压缩的过程中，如果数据量大，很有可能会读到清空码，如 #4，此时就必须将之前生成的颜色索引表清除，重置为一开始的状态，然后再处理。</p>\n</blockquote>\n<h2 id=\"码流的处理\"><a href=\"#码流的处理\" class=\"headerlink\" title=\"码流的处理\"></a>码流的处理</h2><h3 id=\"码流转字节流\"><a href=\"#码流转字节流\" class=\"headerlink\" title=\"码流转字节流\"></a>码流转字节流</h3><p>在 GIF 的 LZW 压缩后，我们得到了如下码流：</p>\n<pre><code>#4 #1 #6 #6 #2 #9 #9 #7 #8 #10 #2 #12 #1 #14 #15 #6 #0 #21 #0 #10 #7 #22 #23 #18 #26 #7 #10 #29 #13 #24 #12 #18 #16 #36 #12 #5</code></pre><p>那么你觉得这段码流会如何转为字节数组呢？你可能会觉得这还不简单，一个码对应一个字节呗。如果你这样想就大错特错了。之前说过 GIF 的码最大支持 12 位，一个字段不够啊。所以在存储码流的时候也是经过处理的。在刚开始的时候每个码只会用(mini code size) + 1 个位表示，本示例中的 mini code size 为 2，所以刚开始只会用三位来表示一个码，由于一个字节有八位，所以最开始的一个字节的组成如下：#4对应的三位 + #1 对应的三位 + #6对应三位中的两位。然后 #6 中剩下的一位放到下一个字节。如果对此难以理解可以看下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/3.webp\" alt=\"image\"></p>\n<p>在以上字节的拼接过程中我们假设当前的 code size 为 SIZE，SIZE 最初的值为 mini code size + 1。而这个值在何时增加其实还要跟 GIF 压缩过程结合在一起。在压缩过程中当我们往颜色索引表添加的码 = 2^SIZE - 1 的时候，就是增加 SIZE 的时候。如刚开始 SIZE 的值是3，所以当我们添加码 #7 的时候，就应该增加 SIZE 的值，为 4 。结合压缩过程的表来看，在进行到第 6 步的时候，我们往颜色索引表添加了 #7，而此时输出的码为 #6，所以当往输出流写下一个不为 #6 的码是，其值就应该用 4 位来表示。而根据表中的第 12 步，下一个非 #6 的码是 #2 。从上图中也能看出来在 2D 这个字节中，最左边的四位表示的码为 #2。</p>\n<p>那么为什么 SIZE 要这么做呢？当我们往颜色索引表添加 #7 的时候，下一个产生的码就是 #8 了，而且如果输出 #8 的话必定是需要四位（1000）来表示的。由于一开始我们用三位来表示 #6，所以如果再遇到 #6，我们知道三位来表示他已经足够了。但对于下一个非 #6 的码，编码器不能确定其是否大于3位，所以就统一用四位来表示。</p>\n<h3 id=\"字节流转码流\"><a href=\"#字节流转码流\" class=\"headerlink\" title=\"字节流转码流\"></a>字节流转码流</h3><p>上面讲的是如何将码流转换为字节流，接着讲如何将字节流转换成码流。道理都一样，刚开始读取的 SIZE 大小为 3。我们看上图的 8C 这个字节，最开始读最右边 3 位，‘100’ = #4，清空码没啥问题。接着是#1，#6，#6。读这三个码的时候用的还是三位，在看下一个码 #2，这时用了四位。我们还是结合解码的图表看，当处理完第二个 #6 后（第 2 步）我们往颜色索引表添加了 #7 - 1,1,1。这里的 7 正好等于 2^3 - 1。也就是说当往颜色索引表添加的码 = 2^SIZE - 1 的时候，SIZE 就需要做加 1 的处理了。</p>\n<p>下图是当 SIZE = 5的时候，字节的处理示意图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/gif/4.webp\" alt=\"image\"></p>\n<h2 id=\"字节流转码流实战\"><a href=\"#字节流转码流实战\" class=\"headerlink\" title=\"字节流转码流实战\"></a>字节流转码流实战</h2><p>在<a href=\"http://www.jianshu.com/p/4fabac6b15b3\">《GIF 字节格式介绍》</a>中的 Image Data 小节，我们的得到了 Image Data 的字节数组如下：</p>\n<pre><code>02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00</code></pre><p>其中 02 用于表示 mini code size = 2，那么此时的 SIZE = 3 。下一个字节 16 表示为十六进制，表示在它之后有 22 个字节是用码流转换而来的。</p>\n<p>第一个字节为 8C = 1 0 - 0 0 1 - 1 0 0，首先取右边三位 1 0 0，为 #4，再取中间三位 0 0 1 为 #1，在进行取码的操作同时需要进行解码操作，解码操作可对照<code>GIF 的 LZW 解压缩</code>这一节的图表。</p>\n<p>第二个字节为 2D = 0 0 1 0 - 1 1 0 - 1,首先去最右边第一位 1 和第一个字节剩下的 1 0 组合成 1 1 0 为 # 6，接着是中间的 1 1 0 为 #6 。根据<code>GIF 的 LZW 解压缩</code>这一节的图表，当得到这个 #6 的时候，SIZE 需要做 + 1 处理，为 4。所以接下来的 0 0 1 0 为 #2 为下一个码。</p>\n<p>第三个字节 99 = 1 0 0 1 - 1 0 0 1 ，取右边四位 1 0 0 1，为 #9，左边四位 1 0 0 1 为 #9 。</p>\n<p>到此位置我们得到的码流为 #4 #1 #6 #6 #2 #9 #9，与<code>GIF 的 LZW压缩</code>中产生的码流对比是正确没有差别的。</p>\n<blockquote>\n<p>注意：虽然在本文中 <code>GIF 的 LZW 解压缩</code>和<code>字节流转码流</code>是分开将的，但在实际程序中，这两部分是同时进行的，由后者产生码流的同时，由前者根据码流来解压缩。</p>\n</blockquote>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>到此为止，GIF 与 LZW 的相关内容就讲完了，讲得比较粗略。有些细节可能只有在实际编码中才会遇到我没有细讲。如果有问题可以留言，大家一起讨论。</p>"},{"title":"Android官方架构组件介绍之Room[翻译]","date":"2017-05-22T09:52:27.000Z","cover":"http://cdn.zqlxtt.cn/final-architecture.png","_content":"## 持久库Room\n\nRoom在SQLite上提供了一个抽象层，以便在利用SQLite的全部功能的同时使流畅的数据库访问。\n\n需要处理一些重要的结构化数据的App通常会从本地的持久数据中受益匪浅。最常见的就是使用本地缓存，这样的话下次如果设备无法联网用户也能浏览本地数据并进行更改。等下次联网后再和服务器进行同步。\n\nAndroid的Framework为了支持处理原始SQL而提供了SQLite这一强大的API，当时SQLite的API还是相对比较低级，在使用的时候需要花费大量的经历：\n\n- 没有对原始SQL语句的编译时验证，随着数据库表格的更改，你需要更新相关SQL操作，而这个过程可能耗时且容易出错。\n- 你需要使用大量的样板代码在SQL查询和Java数据对象之间进行转换。\n\n`Room`在为SQL提供抽象层的同时也会考虑到上述的问题。\n<!-- more -->\n下面是Room中三个主要组件：\n\n- **Database：**此组件用于创建数据库的持有者，同时在类层级上使用注解来定义一系列的`Entity`，这些Entity对应着数据库中的表格。Database类中的方法则用来获取对应的DAO列表。Database是App层与底层SQLite之间的连接点。\n在应用中要使用此组件的话需要继承`RoomDatabase`。然后通过`Room.databaseBuilder()`或者`Room.inMemoryDatabaseBuilder().`获得该类的实例。（讲到这里其实读者可以发现，这不就是GreenDao吗？😂）。\n\n- **Entity：**此组件的一个实例表示数据库的一行数据，对于每个Entity类来说，都会有对应的`table`被创建。想要这些Entity被创建，就需要写在上面Database的注解参数`entities`列表中。默认Entity中的所有字段都会拿来创建表，除非在该字段上加上`@Ignore`注解。\n\n> **注意：**Entity默认都只有空的构造方法（如果DAO类可以访问每个持久化字段），或者构造方法的参数与Entity中的字段的类型和名字相匹配。Room可以使用全字段构造方法，也可以使用部分字段构造方法。\n\n- **DAO：**这个组件用来表示具有`Data Access Object(DAO)`功能的类或接口。DAO类是Room的重要组件，负责定义访问数据库的方法。继承`RoomDatabase`的类必须包含一个0参数且返回DAO类的方法。当在编译期生成代码的时候，Room会创建实现此DAO的类。\n\n> **注意：**通过使用DAO类而不是传统的查询接口来访问数据库，可以做到数据库组件的分离。同时DAO可以在测试APP时支持Mock数据。\n\n<!--more-->\n\n下面是其三者和数据库的关系图：\n\n![room architecture](http://backup.flutter-dev.cn/room_architecture.png)\n\n下面看一下简单的实例，其包含一个Entity，一个Dao以及一个Database。\n\nUser.java\n\n```java\n@Entity\npublic class User {\n    @PrimaryKey\n    private int uid;\n\n    @ColumnInfo(name = \"first_name\")\n    private String firstName;\n\n    @ColumnInfo(name = \"last_name\")\n    private String lastName;\n\n    // Getters and setters are ignored for brevity,\n    // but they're required for Room to work.\n}\n```\n\nUserDao.java\n\n```java\n@Dao\npublic interface UserDao {\n    @Query(\"SELECT * FROM user\")\n    List<User> getAll();\n\n    @Query(\"SELECT * FROM user WHERE uid IN (:userIds)\")\n    List<User> loadAllByIds(int[] userIds);\n\n    @Query(\"SELECT * FROM user WHERE first_name LIKE :first AND \"\n           + \"last_name LIKE :last LIMIT 1\")\n    User findByName(String first, String last);\n\n    @Insert\n    void insertAll(User... users);\n\n    @Delete\n    void delete(User user);\n}\n```\n\nAppDatabase.java\n\n```java\n@Database(entities = {User.class}, version = 1)\npublic abstract class AppDatabase extends RoomDatabase {\n    public abstract UserDao userDao();\n}\n```\n\n当创建完这些文件后，你就可以使用下面的方法来获得被创建的AppDatabase实例：\n\n```java\nAppDatabase db = Room.databaseBuilder(getApplicationContext(),\n        AppDatabase.class, \"database-name\").build();\n```\n\n> **注意：**实例化AppDatabase对象时，应遵循单例设计模式，因为每个数据库实例都相当昂贵，而且很少需要访问多个实例。\n\n\n## Entity\n\n当一个类被添加了`@Entity`注解并且在Database的`@entities`被引用，Room就会为其创建对应的数据库。\n\n默认情况Room会为Entity的每个字段创建对应的数据库列，如果某个字段不想被创建的话可以使用`@Ignore`注解：\n\n```java\n@Entity\nclass User {\n    @PrimaryKey\n    public int id;\n\n    public String firstName;\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n为了Room可以访问到Entity的字段，你可以将这些字段声明为`public`，或者可以给这些字段提供`setter`和`getter`方法。如果使用setter和getter的话，需要注意命名规则。具体参照`Java Beans`。\n\n### Primary key\n\n每个Entity至少定义一个主键，即使你的Entity只有一个字段也是如此。定义主键使用`@PrimaryKey`。如果你想让Room给你的Entity自动生成ID的话，可以使用@Primary的`autoGenerate`属性。如果Entity具有复合主键的话，可以使用@Entity的primaryKeys属性，参照下方代码：\n\n```java\n@Entity(primaryKeys = {\"firstName\", \"lastName\"})\nclass User {\n    public String firstName;\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n默认情况Room使用Entity的类名来作为数据库的表名。如果想自定义表名，可以使用@Entity的`tableName`属性,如下：\n\n```java\n@Entity(tableName = \"users\")\nclass User {\n    ...\n}\n```\n\n> **注意：**SQLite中的表名是大小写不敏感的。\n\n与上面的tableName类似，Room使用Entity的字段名来作为对应的列名，如果想要自定义类名，可以使用`@ColumnInfo`注解的`name`属性，如下：\n\n```java\n@Entity(tableName = \"users\")\nclass User {\n    @PrimaryKey\n    public int id;\n\n    @ColumnInfo(name = \"first_name\")\n    public String firstName;\n\n    @ColumnInfo(name = \"last_name\")\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n### 索引及唯一性\n\n在适当的字段上添加索引可以加快数据库的访问速度，要在Entity上添加索引可以使用@Entity的`indices`属性，可以添加索引或组合索引：\n\n```java\n@Entity(indices = {@Index(\"firstName\"), @Index(\"last_name\", \"address\")})\nclass User {\n    @PrimaryKey\n    public int id;\n\n    public String firstName;\n    public String address;\n\n    @ColumnInfo(name = \"last_name\")\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n有些情况下，数据库中的某个字段或字段组合必须是唯一的，可以通过将@Index的属性`unique`设置为ture来实现这一唯一性。以下代码用于放置User表中出现姓名组合相同的数据。\n\n```java\n@Entity(indices = {@Index(value = {\"first_name\", \"last_name\"},\n        unique = true)})\nclass User {\n    @PrimaryKey\n    public int id;\n\n    @ColumnInfo(name = \"first_name\")\n    public String firstName;\n\n    @ColumnInfo(name = \"last_name\")\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n### 表间关系\n\n由于SQLite是关系型数据库，所以你可以指定对象之间的关系，但在Room中这是命令禁止的。\n\n虽然在Room中的Entity不能有直接的引用关系，但Room任然支持在Entity间定义`Foreign Key`。\n\n例如有个另一个Entity叫做`Book`，你可以使用`@ForeignKey`来定义它和User之间的关系，如下：\n\n```java\n@Entity(foreignKeys = @ForeignKey(entity = User.class,\n                                  parentColumns = \"id\",\n                                  childColumns = \"user_id\"))\nclass Book {\n    @PrimaryKey\n    public int bookId;\n\n    public String title;\n\n    @ColumnInfo(name = \"user_id\")\n    public int userId;\n}\n```\n\n外键是十分强大的，它允许你指定引用实体发生更新是发生的行为，比如，当需要删除一个用户的时候删除其下所有的图书，只需要为Book的@ForeignKey的属性`onDelete`设置为`CASCADE`。\n\n> **注意：**SQLite在处理`@Insert(onConflict=REPLACE)`的时候，其实是进行了`REMOVE`和`REPLACE`两个操作，而不是单单的`UPDATE`。此时这里的REMOVE操作可能会影响到对应的外键，\n\n\n### 嵌套对象\n\n有时你需要在数据库逻辑中表达一个实体或者Java类，你可以使用`@Embedded`注解来实现。具体看例子。\n\n例如上面的User实体有一个`Address`类型的字段，Address包含了`street,city,state`和`postCode`这几个字段。当生成表格时，Address中的字段将被分别定义为User表中的列名。如下：\n\n```java\nclass Address {\n    public String street;\n    public String state;\n    public String city;\n\n    @ColumnInfo(name = \"post_code\")\n    public int postCode;\n}\n\n@Entity\nclass User {\n    @PrimaryKey\n    public int id;\n\n    public String firstName;\n\n    @Embedded\n    public Address address;\n}\n```\n\n这是User表包含以下字段：`id, firstName, street, state, city`和`post_code`。\n\n> **注意：**以上是可以多重嵌套的。\n\n如果User中嵌套的A和B中存在相同字段，可以使用@Embedded的`prefix`属性，Room会在生成table的时候将prefix的值加在列名前。\n\n## Data Access Objects (DAOs)\n\nRoom中的主要组件就是`Dao`，DAO以简洁的方式抽象访问数据库。\n\n### Intert\n\n当你创建了一个DAO的方法并加上`@Insert`注解，Room就会生成一个这个方法是实现，用于完成此次插入操作：\n\n```java\n@Dao\npublic interface MyDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    public void insertUsers(User... users);\n\n    @Insert\n    public void insertBothUsers(User user1, User user2);\n\n    @Insert\n    public void insertUsersAndFriends(User user, List<User> friends);\n}\n```\n如果插入方法只接受一个参数的话，表示仅仅插入一条数据，这是这个方法可以返回一个long型值，为新行的id。如果参数为数组或集合，则需要返回对应的`long[]`或者`List<Long>`。\n\n### Update\n\nUpdate是一个用于更新批量数据的实用方法，它通过主键来匹配需要更改数据库数据：\n\n```java\n@Dao\npublic interface MyDao {\n    @Update\n    public void updateUsers(User... users);\n}\n```\n此方法可以返回一个int型数据，表示此次修改影响到的行数。\n\n### DELETE\n\nDelete用于批量删除数据库中的数据，它也是通过主键来匹配需要删除的数据：\n\n```java\n@Dao\npublic interface MyDao {\n    @Delete\n    public void deleteUsers(User... users);\n}\n```\n此方法可以返回一个int型数据，表示此次删除的行数。\n\n### QUERY\n\n`@Query`是DAO中的一个重要注解，它允许你对数据库进行读写操作。每一个@Query方法都会在编译期做校验，所以如果query存在问题的话，你的App编译将无法通过。\n\nRoom同时也会校验query的返回值，如果返回结果和查询语句中的结果不匹配，Room将会以一下两种方式提醒你：\n\n- 如果有部分字段匹配的话会给出警告。\n- 如果没有字段匹配，则给出错误提示。\n\n#### 简单的查询\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user\")\n    public User[] loadAllUsers();\n}\n```\n这是一个加载所有用户的查询，写法比较简单。在编译期，Room知道需要查询User的所有列的值。如果查询语句包含语法错误或者没有user这个表，则Room会在编译时期报错并给出错误信息。\n\n#### 查询的参数传递\n大部分情况，你需要给查询语句传递特定的参数，比如查询特定年龄段的User，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user WHERE age > :minAge\")\n    public User[] loadAllUsersOlderThan(int minAge);\n}\n```\n在编译器处理这个查询操作的时候，Room会将参数minAge与`:minAge`进行绑定。如果此时无法匹配，则会出现编译错误。\n\n当然也可以传递多个参数，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user WHERE age BETWEEN :minAge AND :maxAge\")\n    public User[] loadAllUsersBetweenAges(int minAge, int maxAge);\n\n    @Query(\"SELECT * FROM user WHERE first_name LIKE :search \"\n           + \"OR last_name LIKE :search\")\n    public List<User> findUserWithName(String search);\n}\n```\n\n#### 返回所有列的子集\n\n通常你需要的只是Entity的一部分字段，例如你的UI只需要先死User的姓名，而不是所有信息。这是为了保证UI的更新速度，你会选择只查询姓名这个两个数据。\n\n只要可以将查询的结果集映射到返回对象的字段，你就可以返回任何对象，如下：\n\n```java\npublic class NameTuple {\n    @ColumnInfo(name=\"first_name\")\n    public String firstName;\n\n    @ColumnInfo(name=\"last_name\")\n    public String lastName;\n}\n```\n现在你可以在DAO中使用NameTuple了。\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT first_name, last_name FROM user\")\n    public List<NameTuple> loadFullName();\n}\n```\nRoom能够返回的`first_name`和`last_name`能够映射到NameTuple，所以Room会生成相应的赋值代码。如果返回字段太多或者字段不存在于NameTuple中，则会发生编译出错。\n\n> **注意：**这里的NameTuple也可以使用@Embedded注解。\n\n#### 将集合作为参数传递\n\n有些情况当你查询时需要传递较多的变量，例如想要查询某一地区集合下的所有用户，这个集合可能包含几十个地区，如果用上述简单的参数传递恐怕够呛，现在看看怎么用集合传递：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT first_name, last_name FROM user WHERE region IN (:regions)\")\n    public List<NameTuple> loadUsersFromRegions(List<String> regions);\n}\n```\nRoom可以判断你传递的是集合，并在SQL语句中将你的参数进行展开并填充。\n\n#### 可监听的查询\n\n在进行查询的时候，你希望UI会在查询结束后自动更新UI，为了满足这一点，这里可以使用前面讲到的`LiveData`对你的查询返回值进行封装。如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT first_name, last_name FROM user WHERE region IN (:regions)\")\n    public LiveData<List<User>> loadUsersFromRegionsSync(List<String> regions);\n}\n```\n\n如果你比较熟悉RxJava，那么很高兴告诉你，Room同样支持返回ExJava2中的`Publisher`和`Flowable`对象，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * from user where id = :id LIMIT 1\")\n    public Flowable<User> loadUserById(int id);\n}\n```\n\n#### 直接返回Cursor\n如果你的App中有部分逻辑需要直接用Cursor的话，可以将DAO的返回值设置为Curso，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user WHERE age > :minAge LIMIT 5\")\n    public Cursor loadRawUsersOlderThan(int minAge);\n}\n```\n\n> **注意：**Room很不推荐使用以上Cursor的方法，应为你并不知道Cursor有无数据或者包含哪些列。\n\n#### 多表联查\n\nRoom支持多表联查，如果返回数据是可监听的，那么Room会监听所有查询中涉及到的表并及时更新数据。\n下面这个例子是通过内联查询某个名字下借阅的图书：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM book \"\n           + \"INNER JOIN loan ON loan.book_id = book.id \"\n           + \"INNER JOIN user ON user.id = loan.user_id \"\n           + \"WHERE user.name LIKE :userName\")\n   public List<Book> findBooksBorrowedByNameSync(String userName);\n}\n```\n\n你也可以通过查询返回纯java对象，如下：\n\n```java\n@Dao\npublic interface MyDao {\n   @Query(\"SELECT user.name AS userName, pet.name AS petName \"\n          + \"FROM user, pet \"\n          + \"WHERE user.id = pet.user_id\")\n   public LiveData<List<UserPet>> loadUserAndPetNames();\n\n   // You can also define this class in a separate file, as long as you add the\n   // \"public\" access modifier.\n   static class UserPet {\n       public String userName;\n       public String petName;\n   }\n}\n```\n\n## 类型转换\n\nRoom中的类型转换支持你将某个类的值存储到某一列中，为此Room提供了`TypeConverter`这个类用于将自定义类转换成Room所支持的类型。\n\n例如我们想要将`Date`对象进行存储，我们可以这么写：\n\n```java\npublic class Converters {\n    @TypeConverter\n    public static Date fromTimestamp(Long value) {\n        return value == null ? null : new Date(value);\n    }\n\n    @TypeConverter\n    public static Long dateToTimestamp(Date date) {\n        return date == null ? null : date.getTime();\n    }\n}\n```\n\n这样定义完以后，下次Room遇到Date，就能将其转换成Room所支持的Long了。\n\n下面看看AppDatabase要怎么写：\n\n```java\n@Database(entities = {User.java}, version = 1)\n@TypeConverters({Converter.class})\npublic abstract class AppDatabase extends RoomDatabase {\n    public abstract UserDao userDao();\n}\n```\n在AppDatabase上添加`TypeConverters注解`,并将Converter作为其参数。\n\n接着User实体：\n\n```java\n@Entity\npublic class User {\n    ...\n    private Date birthday;\n}\n```\n\n然后是DAO：\n\n```java\n@Dao\npublic interface UserDao {\n    ...\n    @Query(\"SELECT * FROM user WHERE birthday BETWEEN :from AND :to\")\n    List<User> findUsersBornBetweenDates(Date from, Date to);\n}\n```\n\n这里你可以对@TypeConverter做一些范围限制，比如限制只能在某个Entity，某个DAO或某个DAO方法中使用。详细说明可见@TypeConverter文档。\n\n\n## 数据库迭代升级\n\n当你的App迭代升级的时候，也需要给你的Entity做迭代升级，为此你将修改Entity的代码。当你的用户升级到最新的App版本的时候，你可不希望他们丢失老版本的所有数据，尤其是在没有服务器备份的情况下。\n\nRoom支持通过写`Migration`类来保留用户数据。每个Migration都需要指定上一个版本和现在的版本，在App运行的时候，Room会运行每一个Migration的`migrate`方法，并使用正确顺序将数据库升级到最新版本。\n\n> **注意：**如果你不提供Migration的话，Room会重建数据库而不是升级数据库，这样的后果就是用户数据会全部都是。\n\n\n```java\nRoom.databaseBuilder(getApplicationContext(), MyDb.class, \"database-name\")\n        .addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();\n\nstatic final Migration MIGRATION_1_2 = new Migration(1, 2) {\n    @Override\n    public void migrate(SupportSQLiteDatabase database) {\n        database.execSQL(\"CREATE TABLE `Fruit` (`id` INTEGER, \"\n                + \"`name` TEXT, PRIMARY KEY(`id`))\");\n    }\n};\n\nstatic final Migration MIGRATION_2_3 = new Migration(2, 3) {\n    @Override\n    public void migrate(SupportSQLiteDatabase database) {\n        database.execSQL(\"ALTER TABLE Book \"\n                + \" ADD COLUMN pub_year INTEGER\");\n    }\n};\n```\n\n> **注意：**为了使迁移逻辑保持正常运行，请使用完整的查询语句，即使用硬编码（对这里推荐硬编码）。而不是用一些字符串引用。\n\n一旦升级工作完成，Room会进行schema的验证，如验证有误，则会抛出异常。\n\n### 测试升级\nMigration并不是简单的数据库写入操作，一旦升级失败，会对App致命的Crash。为了保证应用的稳定性，应该事先测试Migration，Room提供了一套测试框架，下面我们来简单学习下。\n\n#### 导出Schema文件\nRoom需要将你数据库的Schema已Json格式的文件导出，为了导出Schema，需要在`build.gradle`中做如下配置：\n\n```groovy\nandroid {\n    ...\n    defaultConfig {\n        ...\n        javaCompileOptions {\n            annotationProcessorOptions {\n                arguments = [\"room.schemaLocation\":\n                             \"$projectDir/schemas\".toString()]\n            }\n        }\n    }\n}\n```\n你需要将导出的Json文件保存起来，以便Room通过schema文件创建老版数据库进行升级测试。\n\n为了进行升级测试，需要将`android.arch.persistence.room:testing`添加到你的测试依赖当中，然后添加如下配置：\n\n```groovy\nandroid {\n    ...\n    sourceSets {\n        androidTest.assets.srcDirs += files(\"$projectDir/schemas\".toString())\n    }\n}\n```\n测试框架提供了名为`MigrationTestHelper`的类，它可以读取schema文件，这也是一个遵循`Junit4`测试原则的类。具体测试代码如下：\n\n```java\n@RunWith(AndroidJUnit4.class)\npublic class MigrationTest {\n    private static final String TEST_DB = \"migration-test\";\n\n    @Rule\n    public MigrationTestHelper helper;\n\n    public MigrationTest() {\n        helper = new MigrationTestHelper(InstrumentationRegistry.getContext(),\n                MigrationDb.class.getCanonicalName(),\n                new FrameworkSQLiteOpenHelperFactory());\n    }\n\n    @Test\n    public void migrate1To2() throws IOException {\n        SupportSQLiteDatabase db = helper.createDatabase(TEST_DB, 1);\n\n        // db has schema version 1. insert some data using SQL queries.\n        // You cannot use DAO classes because they expect the latest schema.\n        db.execSQL(...);\n\n        // Prepare for the next version.\n        db.close();\n\n        // Re-open the database with version 2 and provide\n        // MIGRATION_1_2 as the migration process.\n        db = helper.runMigrationsAndValidate(TEST_DB, 2, true, MIGRATION_1_2);\n\n        // MigrationTestHelper automatically verifies the schema changes,\n        // but you need to validate that the data was migrated properly.\n    }\n}\n\n```\n\n## 测试数据库\n\n当你的应用程序运行测试时，如果你没有测试数据库本身，则不需要创建完整的数据库。Room允许你轻松地模拟测试中的数据访问层。这个过程是可能的，因为您的DAO不会泄露您的数据库的任何细节。测试其余的应用程序时，应该创建DAO类的模拟或假的实例。\n\n这里推荐在Android设备上编写JUnit测试，因为这些测试并不需要UI的支持，所以这些测试会比UI测试速度更快。\n\n测试代码如下：\n\n```java\n@RunWith(AndroidJUnit4.class)\npublic class SimpleEntityReadWriteTest {\n    private UserDao mUserDao;\n    private TestDatabase mDb;\n\n    @Before\n    public void createDb() {\n        Context context = InstrumentationRegistry.getTargetContext();\n        //将数据库建在内存中，可以让你的测试整体更加一体化，更密闭。\n        mDb = Room.inMemoryDatabaseBuilder(context, TestDatabase.class).build();\n        mUserDao = mDb.getUserDao();\n    }\n\n    @After\n    public void closeDb() throws IOException {\n        mDb.close();\n    }\n\n    @Test\n    public void writeUserAndReadInList() throws Exception {\n        User user = TestUtil.createUser(3);\n        user.setName(\"george\");\n        mUserDao.insert(user);\n        List<User> byName = mUserDao.findUsersByName(\"george\");\n        assertThat(byName.get(0), equalTo(user));\n    }\n}\n```\n\n## 补充：禁止Entity之间的相互引用\n\n将数据库中的关系映射到相应的对象模型是一个常见的做法，在服务器端可以很好地运行，在访问它们时，它们可以很方便地加载字段。\n\n然而，在客户端，延迟加载是不可行的，因为它可能发生在UI线程上，并且在UI线程中查询磁盘上的信息会产生显着的性能问题。UI线程有大约16ms的时间来计算和绘制Activity的更新的布局，所以即使一个查询只需要5 ms，你的应用程序仍然可能耗尽用于绘制的时间，引起明显的卡顿。更糟糕的是，如果并行运行单独的事务，或者设备忙于其他磁盘重的任务，则查询可能需要更多时间才能完成。但是，如果不使用延迟加载，则应用程序将获取比其需要的更多数据，从而产生内存消耗问题。\n\nORM通常将此决定留给开发人员，以便他们可以为应用程序的用例做最好的事情。不幸的是，开发人员不会在他们的应用程序和UI之间共享模型。UI随着时间的推移而变化，难以预料和调试的问题会不断出现。\n\n例如，使用加载Book对象列表的UI为例，每本书都有一个Author对象。你可能最初设计你的查询时使用延迟加载，以便Book的实例使用getAuthor()方法来返回作者。一段时间后，你意识到需要在应用中显示作者姓名。你可以轻松添加方法调用，如以下代码片段所示：\n\n```java\nauthorNameTextView.setText(user.getAuthor().getName());\n```\n就这么一个简单的操作，导致了在主线程中访问数据库。如果Author用引用了另一张表，那情况可能更糟糕。如果需求变化，这个界面不在需要作者姓名，那么你的代码可能会做无畏的延迟加载。\n\n基于以上原因，Room禁止Entity之间的引用，如果需要加载相关数据，可以使用显示的方法去加载。","source":"_posts/android-arch-room.md","raw":"---\ntitle: Android官方架构组件介绍之Room[翻译]\ndate: 2017-05-22 17:52:27\ntags: android\ncover: http://cdn.zqlxtt.cn/final-architecture.png\n---\n## 持久库Room\n\nRoom在SQLite上提供了一个抽象层，以便在利用SQLite的全部功能的同时使流畅的数据库访问。\n\n需要处理一些重要的结构化数据的App通常会从本地的持久数据中受益匪浅。最常见的就是使用本地缓存，这样的话下次如果设备无法联网用户也能浏览本地数据并进行更改。等下次联网后再和服务器进行同步。\n\nAndroid的Framework为了支持处理原始SQL而提供了SQLite这一强大的API，当时SQLite的API还是相对比较低级，在使用的时候需要花费大量的经历：\n\n- 没有对原始SQL语句的编译时验证，随着数据库表格的更改，你需要更新相关SQL操作，而这个过程可能耗时且容易出错。\n- 你需要使用大量的样板代码在SQL查询和Java数据对象之间进行转换。\n\n`Room`在为SQL提供抽象层的同时也会考虑到上述的问题。\n<!-- more -->\n下面是Room中三个主要组件：\n\n- **Database：**此组件用于创建数据库的持有者，同时在类层级上使用注解来定义一系列的`Entity`，这些Entity对应着数据库中的表格。Database类中的方法则用来获取对应的DAO列表。Database是App层与底层SQLite之间的连接点。\n在应用中要使用此组件的话需要继承`RoomDatabase`。然后通过`Room.databaseBuilder()`或者`Room.inMemoryDatabaseBuilder().`获得该类的实例。（讲到这里其实读者可以发现，这不就是GreenDao吗？😂）。\n\n- **Entity：**此组件的一个实例表示数据库的一行数据，对于每个Entity类来说，都会有对应的`table`被创建。想要这些Entity被创建，就需要写在上面Database的注解参数`entities`列表中。默认Entity中的所有字段都会拿来创建表，除非在该字段上加上`@Ignore`注解。\n\n> **注意：**Entity默认都只有空的构造方法（如果DAO类可以访问每个持久化字段），或者构造方法的参数与Entity中的字段的类型和名字相匹配。Room可以使用全字段构造方法，也可以使用部分字段构造方法。\n\n- **DAO：**这个组件用来表示具有`Data Access Object(DAO)`功能的类或接口。DAO类是Room的重要组件，负责定义访问数据库的方法。继承`RoomDatabase`的类必须包含一个0参数且返回DAO类的方法。当在编译期生成代码的时候，Room会创建实现此DAO的类。\n\n> **注意：**通过使用DAO类而不是传统的查询接口来访问数据库，可以做到数据库组件的分离。同时DAO可以在测试APP时支持Mock数据。\n\n<!--more-->\n\n下面是其三者和数据库的关系图：\n\n![room architecture](http://backup.flutter-dev.cn/room_architecture.png)\n\n下面看一下简单的实例，其包含一个Entity，一个Dao以及一个Database。\n\nUser.java\n\n```java\n@Entity\npublic class User {\n    @PrimaryKey\n    private int uid;\n\n    @ColumnInfo(name = \"first_name\")\n    private String firstName;\n\n    @ColumnInfo(name = \"last_name\")\n    private String lastName;\n\n    // Getters and setters are ignored for brevity,\n    // but they're required for Room to work.\n}\n```\n\nUserDao.java\n\n```java\n@Dao\npublic interface UserDao {\n    @Query(\"SELECT * FROM user\")\n    List<User> getAll();\n\n    @Query(\"SELECT * FROM user WHERE uid IN (:userIds)\")\n    List<User> loadAllByIds(int[] userIds);\n\n    @Query(\"SELECT * FROM user WHERE first_name LIKE :first AND \"\n           + \"last_name LIKE :last LIMIT 1\")\n    User findByName(String first, String last);\n\n    @Insert\n    void insertAll(User... users);\n\n    @Delete\n    void delete(User user);\n}\n```\n\nAppDatabase.java\n\n```java\n@Database(entities = {User.class}, version = 1)\npublic abstract class AppDatabase extends RoomDatabase {\n    public abstract UserDao userDao();\n}\n```\n\n当创建完这些文件后，你就可以使用下面的方法来获得被创建的AppDatabase实例：\n\n```java\nAppDatabase db = Room.databaseBuilder(getApplicationContext(),\n        AppDatabase.class, \"database-name\").build();\n```\n\n> **注意：**实例化AppDatabase对象时，应遵循单例设计模式，因为每个数据库实例都相当昂贵，而且很少需要访问多个实例。\n\n\n## Entity\n\n当一个类被添加了`@Entity`注解并且在Database的`@entities`被引用，Room就会为其创建对应的数据库。\n\n默认情况Room会为Entity的每个字段创建对应的数据库列，如果某个字段不想被创建的话可以使用`@Ignore`注解：\n\n```java\n@Entity\nclass User {\n    @PrimaryKey\n    public int id;\n\n    public String firstName;\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n为了Room可以访问到Entity的字段，你可以将这些字段声明为`public`，或者可以给这些字段提供`setter`和`getter`方法。如果使用setter和getter的话，需要注意命名规则。具体参照`Java Beans`。\n\n### Primary key\n\n每个Entity至少定义一个主键，即使你的Entity只有一个字段也是如此。定义主键使用`@PrimaryKey`。如果你想让Room给你的Entity自动生成ID的话，可以使用@Primary的`autoGenerate`属性。如果Entity具有复合主键的话，可以使用@Entity的primaryKeys属性，参照下方代码：\n\n```java\n@Entity(primaryKeys = {\"firstName\", \"lastName\"})\nclass User {\n    public String firstName;\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n默认情况Room使用Entity的类名来作为数据库的表名。如果想自定义表名，可以使用@Entity的`tableName`属性,如下：\n\n```java\n@Entity(tableName = \"users\")\nclass User {\n    ...\n}\n```\n\n> **注意：**SQLite中的表名是大小写不敏感的。\n\n与上面的tableName类似，Room使用Entity的字段名来作为对应的列名，如果想要自定义类名，可以使用`@ColumnInfo`注解的`name`属性，如下：\n\n```java\n@Entity(tableName = \"users\")\nclass User {\n    @PrimaryKey\n    public int id;\n\n    @ColumnInfo(name = \"first_name\")\n    public String firstName;\n\n    @ColumnInfo(name = \"last_name\")\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n### 索引及唯一性\n\n在适当的字段上添加索引可以加快数据库的访问速度，要在Entity上添加索引可以使用@Entity的`indices`属性，可以添加索引或组合索引：\n\n```java\n@Entity(indices = {@Index(\"firstName\"), @Index(\"last_name\", \"address\")})\nclass User {\n    @PrimaryKey\n    public int id;\n\n    public String firstName;\n    public String address;\n\n    @ColumnInfo(name = \"last_name\")\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n有些情况下，数据库中的某个字段或字段组合必须是唯一的，可以通过将@Index的属性`unique`设置为ture来实现这一唯一性。以下代码用于放置User表中出现姓名组合相同的数据。\n\n```java\n@Entity(indices = {@Index(value = {\"first_name\", \"last_name\"},\n        unique = true)})\nclass User {\n    @PrimaryKey\n    public int id;\n\n    @ColumnInfo(name = \"first_name\")\n    public String firstName;\n\n    @ColumnInfo(name = \"last_name\")\n    public String lastName;\n\n    @Ignore\n    Bitmap picture;\n}\n```\n\n### 表间关系\n\n由于SQLite是关系型数据库，所以你可以指定对象之间的关系，但在Room中这是命令禁止的。\n\n虽然在Room中的Entity不能有直接的引用关系，但Room任然支持在Entity间定义`Foreign Key`。\n\n例如有个另一个Entity叫做`Book`，你可以使用`@ForeignKey`来定义它和User之间的关系，如下：\n\n```java\n@Entity(foreignKeys = @ForeignKey(entity = User.class,\n                                  parentColumns = \"id\",\n                                  childColumns = \"user_id\"))\nclass Book {\n    @PrimaryKey\n    public int bookId;\n\n    public String title;\n\n    @ColumnInfo(name = \"user_id\")\n    public int userId;\n}\n```\n\n外键是十分强大的，它允许你指定引用实体发生更新是发生的行为，比如，当需要删除一个用户的时候删除其下所有的图书，只需要为Book的@ForeignKey的属性`onDelete`设置为`CASCADE`。\n\n> **注意：**SQLite在处理`@Insert(onConflict=REPLACE)`的时候，其实是进行了`REMOVE`和`REPLACE`两个操作，而不是单单的`UPDATE`。此时这里的REMOVE操作可能会影响到对应的外键，\n\n\n### 嵌套对象\n\n有时你需要在数据库逻辑中表达一个实体或者Java类，你可以使用`@Embedded`注解来实现。具体看例子。\n\n例如上面的User实体有一个`Address`类型的字段，Address包含了`street,city,state`和`postCode`这几个字段。当生成表格时，Address中的字段将被分别定义为User表中的列名。如下：\n\n```java\nclass Address {\n    public String street;\n    public String state;\n    public String city;\n\n    @ColumnInfo(name = \"post_code\")\n    public int postCode;\n}\n\n@Entity\nclass User {\n    @PrimaryKey\n    public int id;\n\n    public String firstName;\n\n    @Embedded\n    public Address address;\n}\n```\n\n这是User表包含以下字段：`id, firstName, street, state, city`和`post_code`。\n\n> **注意：**以上是可以多重嵌套的。\n\n如果User中嵌套的A和B中存在相同字段，可以使用@Embedded的`prefix`属性，Room会在生成table的时候将prefix的值加在列名前。\n\n## Data Access Objects (DAOs)\n\nRoom中的主要组件就是`Dao`，DAO以简洁的方式抽象访问数据库。\n\n### Intert\n\n当你创建了一个DAO的方法并加上`@Insert`注解，Room就会生成一个这个方法是实现，用于完成此次插入操作：\n\n```java\n@Dao\npublic interface MyDao {\n    @Insert(onConflict = OnConflictStrategy.REPLACE)\n    public void insertUsers(User... users);\n\n    @Insert\n    public void insertBothUsers(User user1, User user2);\n\n    @Insert\n    public void insertUsersAndFriends(User user, List<User> friends);\n}\n```\n如果插入方法只接受一个参数的话，表示仅仅插入一条数据，这是这个方法可以返回一个long型值，为新行的id。如果参数为数组或集合，则需要返回对应的`long[]`或者`List<Long>`。\n\n### Update\n\nUpdate是一个用于更新批量数据的实用方法，它通过主键来匹配需要更改数据库数据：\n\n```java\n@Dao\npublic interface MyDao {\n    @Update\n    public void updateUsers(User... users);\n}\n```\n此方法可以返回一个int型数据，表示此次修改影响到的行数。\n\n### DELETE\n\nDelete用于批量删除数据库中的数据，它也是通过主键来匹配需要删除的数据：\n\n```java\n@Dao\npublic interface MyDao {\n    @Delete\n    public void deleteUsers(User... users);\n}\n```\n此方法可以返回一个int型数据，表示此次删除的行数。\n\n### QUERY\n\n`@Query`是DAO中的一个重要注解，它允许你对数据库进行读写操作。每一个@Query方法都会在编译期做校验，所以如果query存在问题的话，你的App编译将无法通过。\n\nRoom同时也会校验query的返回值，如果返回结果和查询语句中的结果不匹配，Room将会以一下两种方式提醒你：\n\n- 如果有部分字段匹配的话会给出警告。\n- 如果没有字段匹配，则给出错误提示。\n\n#### 简单的查询\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user\")\n    public User[] loadAllUsers();\n}\n```\n这是一个加载所有用户的查询，写法比较简单。在编译期，Room知道需要查询User的所有列的值。如果查询语句包含语法错误或者没有user这个表，则Room会在编译时期报错并给出错误信息。\n\n#### 查询的参数传递\n大部分情况，你需要给查询语句传递特定的参数，比如查询特定年龄段的User，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user WHERE age > :minAge\")\n    public User[] loadAllUsersOlderThan(int minAge);\n}\n```\n在编译器处理这个查询操作的时候，Room会将参数minAge与`:minAge`进行绑定。如果此时无法匹配，则会出现编译错误。\n\n当然也可以传递多个参数，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user WHERE age BETWEEN :minAge AND :maxAge\")\n    public User[] loadAllUsersBetweenAges(int minAge, int maxAge);\n\n    @Query(\"SELECT * FROM user WHERE first_name LIKE :search \"\n           + \"OR last_name LIKE :search\")\n    public List<User> findUserWithName(String search);\n}\n```\n\n#### 返回所有列的子集\n\n通常你需要的只是Entity的一部分字段，例如你的UI只需要先死User的姓名，而不是所有信息。这是为了保证UI的更新速度，你会选择只查询姓名这个两个数据。\n\n只要可以将查询的结果集映射到返回对象的字段，你就可以返回任何对象，如下：\n\n```java\npublic class NameTuple {\n    @ColumnInfo(name=\"first_name\")\n    public String firstName;\n\n    @ColumnInfo(name=\"last_name\")\n    public String lastName;\n}\n```\n现在你可以在DAO中使用NameTuple了。\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT first_name, last_name FROM user\")\n    public List<NameTuple> loadFullName();\n}\n```\nRoom能够返回的`first_name`和`last_name`能够映射到NameTuple，所以Room会生成相应的赋值代码。如果返回字段太多或者字段不存在于NameTuple中，则会发生编译出错。\n\n> **注意：**这里的NameTuple也可以使用@Embedded注解。\n\n#### 将集合作为参数传递\n\n有些情况当你查询时需要传递较多的变量，例如想要查询某一地区集合下的所有用户，这个集合可能包含几十个地区，如果用上述简单的参数传递恐怕够呛，现在看看怎么用集合传递：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT first_name, last_name FROM user WHERE region IN (:regions)\")\n    public List<NameTuple> loadUsersFromRegions(List<String> regions);\n}\n```\nRoom可以判断你传递的是集合，并在SQL语句中将你的参数进行展开并填充。\n\n#### 可监听的查询\n\n在进行查询的时候，你希望UI会在查询结束后自动更新UI，为了满足这一点，这里可以使用前面讲到的`LiveData`对你的查询返回值进行封装。如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT first_name, last_name FROM user WHERE region IN (:regions)\")\n    public LiveData<List<User>> loadUsersFromRegionsSync(List<String> regions);\n}\n```\n\n如果你比较熟悉RxJava，那么很高兴告诉你，Room同样支持返回ExJava2中的`Publisher`和`Flowable`对象，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * from user where id = :id LIMIT 1\")\n    public Flowable<User> loadUserById(int id);\n}\n```\n\n#### 直接返回Cursor\n如果你的App中有部分逻辑需要直接用Cursor的话，可以将DAO的返回值设置为Curso，如下：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM user WHERE age > :minAge LIMIT 5\")\n    public Cursor loadRawUsersOlderThan(int minAge);\n}\n```\n\n> **注意：**Room很不推荐使用以上Cursor的方法，应为你并不知道Cursor有无数据或者包含哪些列。\n\n#### 多表联查\n\nRoom支持多表联查，如果返回数据是可监听的，那么Room会监听所有查询中涉及到的表并及时更新数据。\n下面这个例子是通过内联查询某个名字下借阅的图书：\n\n```java\n@Dao\npublic interface MyDao {\n    @Query(\"SELECT * FROM book \"\n           + \"INNER JOIN loan ON loan.book_id = book.id \"\n           + \"INNER JOIN user ON user.id = loan.user_id \"\n           + \"WHERE user.name LIKE :userName\")\n   public List<Book> findBooksBorrowedByNameSync(String userName);\n}\n```\n\n你也可以通过查询返回纯java对象，如下：\n\n```java\n@Dao\npublic interface MyDao {\n   @Query(\"SELECT user.name AS userName, pet.name AS petName \"\n          + \"FROM user, pet \"\n          + \"WHERE user.id = pet.user_id\")\n   public LiveData<List<UserPet>> loadUserAndPetNames();\n\n   // You can also define this class in a separate file, as long as you add the\n   // \"public\" access modifier.\n   static class UserPet {\n       public String userName;\n       public String petName;\n   }\n}\n```\n\n## 类型转换\n\nRoom中的类型转换支持你将某个类的值存储到某一列中，为此Room提供了`TypeConverter`这个类用于将自定义类转换成Room所支持的类型。\n\n例如我们想要将`Date`对象进行存储，我们可以这么写：\n\n```java\npublic class Converters {\n    @TypeConverter\n    public static Date fromTimestamp(Long value) {\n        return value == null ? null : new Date(value);\n    }\n\n    @TypeConverter\n    public static Long dateToTimestamp(Date date) {\n        return date == null ? null : date.getTime();\n    }\n}\n```\n\n这样定义完以后，下次Room遇到Date，就能将其转换成Room所支持的Long了。\n\n下面看看AppDatabase要怎么写：\n\n```java\n@Database(entities = {User.java}, version = 1)\n@TypeConverters({Converter.class})\npublic abstract class AppDatabase extends RoomDatabase {\n    public abstract UserDao userDao();\n}\n```\n在AppDatabase上添加`TypeConverters注解`,并将Converter作为其参数。\n\n接着User实体：\n\n```java\n@Entity\npublic class User {\n    ...\n    private Date birthday;\n}\n```\n\n然后是DAO：\n\n```java\n@Dao\npublic interface UserDao {\n    ...\n    @Query(\"SELECT * FROM user WHERE birthday BETWEEN :from AND :to\")\n    List<User> findUsersBornBetweenDates(Date from, Date to);\n}\n```\n\n这里你可以对@TypeConverter做一些范围限制，比如限制只能在某个Entity，某个DAO或某个DAO方法中使用。详细说明可见@TypeConverter文档。\n\n\n## 数据库迭代升级\n\n当你的App迭代升级的时候，也需要给你的Entity做迭代升级，为此你将修改Entity的代码。当你的用户升级到最新的App版本的时候，你可不希望他们丢失老版本的所有数据，尤其是在没有服务器备份的情况下。\n\nRoom支持通过写`Migration`类来保留用户数据。每个Migration都需要指定上一个版本和现在的版本，在App运行的时候，Room会运行每一个Migration的`migrate`方法，并使用正确顺序将数据库升级到最新版本。\n\n> **注意：**如果你不提供Migration的话，Room会重建数据库而不是升级数据库，这样的后果就是用户数据会全部都是。\n\n\n```java\nRoom.databaseBuilder(getApplicationContext(), MyDb.class, \"database-name\")\n        .addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();\n\nstatic final Migration MIGRATION_1_2 = new Migration(1, 2) {\n    @Override\n    public void migrate(SupportSQLiteDatabase database) {\n        database.execSQL(\"CREATE TABLE `Fruit` (`id` INTEGER, \"\n                + \"`name` TEXT, PRIMARY KEY(`id`))\");\n    }\n};\n\nstatic final Migration MIGRATION_2_3 = new Migration(2, 3) {\n    @Override\n    public void migrate(SupportSQLiteDatabase database) {\n        database.execSQL(\"ALTER TABLE Book \"\n                + \" ADD COLUMN pub_year INTEGER\");\n    }\n};\n```\n\n> **注意：**为了使迁移逻辑保持正常运行，请使用完整的查询语句，即使用硬编码（对这里推荐硬编码）。而不是用一些字符串引用。\n\n一旦升级工作完成，Room会进行schema的验证，如验证有误，则会抛出异常。\n\n### 测试升级\nMigration并不是简单的数据库写入操作，一旦升级失败，会对App致命的Crash。为了保证应用的稳定性，应该事先测试Migration，Room提供了一套测试框架，下面我们来简单学习下。\n\n#### 导出Schema文件\nRoom需要将你数据库的Schema已Json格式的文件导出，为了导出Schema，需要在`build.gradle`中做如下配置：\n\n```groovy\nandroid {\n    ...\n    defaultConfig {\n        ...\n        javaCompileOptions {\n            annotationProcessorOptions {\n                arguments = [\"room.schemaLocation\":\n                             \"$projectDir/schemas\".toString()]\n            }\n        }\n    }\n}\n```\n你需要将导出的Json文件保存起来，以便Room通过schema文件创建老版数据库进行升级测试。\n\n为了进行升级测试，需要将`android.arch.persistence.room:testing`添加到你的测试依赖当中，然后添加如下配置：\n\n```groovy\nandroid {\n    ...\n    sourceSets {\n        androidTest.assets.srcDirs += files(\"$projectDir/schemas\".toString())\n    }\n}\n```\n测试框架提供了名为`MigrationTestHelper`的类，它可以读取schema文件，这也是一个遵循`Junit4`测试原则的类。具体测试代码如下：\n\n```java\n@RunWith(AndroidJUnit4.class)\npublic class MigrationTest {\n    private static final String TEST_DB = \"migration-test\";\n\n    @Rule\n    public MigrationTestHelper helper;\n\n    public MigrationTest() {\n        helper = new MigrationTestHelper(InstrumentationRegistry.getContext(),\n                MigrationDb.class.getCanonicalName(),\n                new FrameworkSQLiteOpenHelperFactory());\n    }\n\n    @Test\n    public void migrate1To2() throws IOException {\n        SupportSQLiteDatabase db = helper.createDatabase(TEST_DB, 1);\n\n        // db has schema version 1. insert some data using SQL queries.\n        // You cannot use DAO classes because they expect the latest schema.\n        db.execSQL(...);\n\n        // Prepare for the next version.\n        db.close();\n\n        // Re-open the database with version 2 and provide\n        // MIGRATION_1_2 as the migration process.\n        db = helper.runMigrationsAndValidate(TEST_DB, 2, true, MIGRATION_1_2);\n\n        // MigrationTestHelper automatically verifies the schema changes,\n        // but you need to validate that the data was migrated properly.\n    }\n}\n\n```\n\n## 测试数据库\n\n当你的应用程序运行测试时，如果你没有测试数据库本身，则不需要创建完整的数据库。Room允许你轻松地模拟测试中的数据访问层。这个过程是可能的，因为您的DAO不会泄露您的数据库的任何细节。测试其余的应用程序时，应该创建DAO类的模拟或假的实例。\n\n这里推荐在Android设备上编写JUnit测试，因为这些测试并不需要UI的支持，所以这些测试会比UI测试速度更快。\n\n测试代码如下：\n\n```java\n@RunWith(AndroidJUnit4.class)\npublic class SimpleEntityReadWriteTest {\n    private UserDao mUserDao;\n    private TestDatabase mDb;\n\n    @Before\n    public void createDb() {\n        Context context = InstrumentationRegistry.getTargetContext();\n        //将数据库建在内存中，可以让你的测试整体更加一体化，更密闭。\n        mDb = Room.inMemoryDatabaseBuilder(context, TestDatabase.class).build();\n        mUserDao = mDb.getUserDao();\n    }\n\n    @After\n    public void closeDb() throws IOException {\n        mDb.close();\n    }\n\n    @Test\n    public void writeUserAndReadInList() throws Exception {\n        User user = TestUtil.createUser(3);\n        user.setName(\"george\");\n        mUserDao.insert(user);\n        List<User> byName = mUserDao.findUsersByName(\"george\");\n        assertThat(byName.get(0), equalTo(user));\n    }\n}\n```\n\n## 补充：禁止Entity之间的相互引用\n\n将数据库中的关系映射到相应的对象模型是一个常见的做法，在服务器端可以很好地运行，在访问它们时，它们可以很方便地加载字段。\n\n然而，在客户端，延迟加载是不可行的，因为它可能发生在UI线程上，并且在UI线程中查询磁盘上的信息会产生显着的性能问题。UI线程有大约16ms的时间来计算和绘制Activity的更新的布局，所以即使一个查询只需要5 ms，你的应用程序仍然可能耗尽用于绘制的时间，引起明显的卡顿。更糟糕的是，如果并行运行单独的事务，或者设备忙于其他磁盘重的任务，则查询可能需要更多时间才能完成。但是，如果不使用延迟加载，则应用程序将获取比其需要的更多数据，从而产生内存消耗问题。\n\nORM通常将此决定留给开发人员，以便他们可以为应用程序的用例做最好的事情。不幸的是，开发人员不会在他们的应用程序和UI之间共享模型。UI随着时间的推移而变化，难以预料和调试的问题会不断出现。\n\n例如，使用加载Book对象列表的UI为例，每本书都有一个Author对象。你可能最初设计你的查询时使用延迟加载，以便Book的实例使用getAuthor()方法来返回作者。一段时间后，你意识到需要在应用中显示作者姓名。你可以轻松添加方法调用，如以下代码片段所示：\n\n```java\nauthorNameTextView.setText(user.getAuthor().getName());\n```\n就这么一个简单的操作，导致了在主线程中访问数据库。如果Author用引用了另一张表，那情况可能更糟糕。如果需求变化，这个界面不在需要作者姓名，那么你的代码可能会做无畏的延迟加载。\n\n基于以上原因，Room禁止Entity之间的引用，如果需要加载相关数据，可以使用显示的方法去加载。","slug":"android-arch-room","published":1,"updated":"2024-08-21T03:16:19.780Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vo00085p6tcea01j2b","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"持久库Room\"><a href=\"#持久库Room\" class=\"headerlink\" title=\"持久库Room\"></a>持久库Room</h2><p>Room在SQLite上提供了一个抽象层，以便在利用SQLite的全部功能的同时使流畅的数据库访问。</p>\n<p>需要处理一些重要的结构化数据的App通常会从本地的持久数据中受益匪浅。最常见的就是使用本地缓存，这样的话下次如果设备无法联网用户也能浏览本地数据并进行更改。等下次联网后再和服务器进行同步。</p>\n<p>Android的Framework为了支持处理原始SQL而提供了SQLite这一强大的API，当时SQLite的API还是相对比较低级，在使用的时候需要花费大量的经历：</p>\n<ul>\n<li>没有对原始SQL语句的编译时验证，随着数据库表格的更改，你需要更新相关SQL操作，而这个过程可能耗时且容易出错。</li>\n<li>你需要使用大量的样板代码在SQL查询和Java数据对象之间进行转换。</li>\n</ul>\n<p><code>Room</code>在为SQL提供抽象层的同时也会考虑到上述的问题。</p>\n<span id=\"more\"></span>\n<p>下面是Room中三个主要组件：</p>\n<ul>\n<li><p><strong>Database：</strong>此组件用于创建数据库的持有者，同时在类层级上使用注解来定义一系列的<code>Entity</code>，这些Entity对应着数据库中的表格。Database类中的方法则用来获取对应的DAO列表。Database是App层与底层SQLite之间的连接点。<br>在应用中要使用此组件的话需要继承<code>RoomDatabase</code>。然后通过<code>Room.databaseBuilder()</code>或者<code>Room.inMemoryDatabaseBuilder().</code>获得该类的实例。（讲到这里其实读者可以发现，这不就是GreenDao吗？😂）。</p>\n</li>\n<li><p><strong>Entity：</strong>此组件的一个实例表示数据库的一行数据，对于每个Entity类来说，都会有对应的<code>table</code>被创建。想要这些Entity被创建，就需要写在上面Database的注解参数<code>entities</code>列表中。默认Entity中的所有字段都会拿来创建表，除非在该字段上加上<code>@Ignore</code>注解。</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>Entity默认都只有空的构造方法（如果DAO类可以访问每个持久化字段），或者构造方法的参数与Entity中的字段的类型和名字相匹配。Room可以使用全字段构造方法，也可以使用部分字段构造方法。</p>\n</blockquote>\n<ul>\n<li><strong>DAO：</strong>这个组件用来表示具有<code>Data Access Object(DAO)</code>功能的类或接口。DAO类是Room的重要组件，负责定义访问数据库的方法。继承<code>RoomDatabase</code>的类必须包含一个0参数且返回DAO类的方法。当在编译期生成代码的时候，Room会创建实现此DAO的类。</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>通过使用DAO类而不是传统的查询接口来访问数据库，可以做到数据库组件的分离。同时DAO可以在测试APP时支持Mock数据。</p>\n</blockquote>\n<!--more-->\n\n<p>下面是其三者和数据库的关系图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/room_architecture.png\" alt=\"room architecture\"></p>\n<p>下面看一下简单的实例，其包含一个Entity，一个Dao以及一个Database。</p>\n<p>User.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> uid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters are ignored for brevity,</span></span><br><span class=\"line\">    <span class=\"comment\">// but they&#x27;re required for Room to work.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UserDao.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">getAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">loadAllByIds</span><span class=\"params\">(<span class=\"type\">int</span>[] userIds)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE first_name LIKE :first AND &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;last_name LIKE :last LIMIT 1&quot;)</span></span><br><span class=\"line\">    User <span class=\"title function_\">findByName</span><span class=\"params\">(String first, String last)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insertAll</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AppDatabase.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.class&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserDao <span class=\"title function_\">userDao</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当创建完这些文件后，你就可以使用下面的方法来获得被创建的AppDatabase实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AppDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> Room.databaseBuilder(getApplicationContext(),</span><br><span class=\"line\">        AppDatabase.class, <span class=\"string\">&quot;database-name&quot;</span>).build();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>实例化AppDatabase对象时，应遵循单例设计模式，因为每个数据库实例都相当昂贵，而且很少需要访问多个实例。</p>\n</blockquote>\n<h2 id=\"Entity\"><a href=\"#Entity\" class=\"headerlink\" title=\"Entity\"></a>Entity</h2><p>当一个类被添加了<code>@Entity</code>注解并且在Database的<code>@entities</code>被引用，Room就会为其创建对应的数据库。</p>\n<p>默认情况Room会为Entity的每个字段创建对应的数据库列，如果某个字段不想被创建的话可以使用<code>@Ignore</code>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了Room可以访问到Entity的字段，你可以将这些字段声明为<code>public</code>，或者可以给这些字段提供<code>setter</code>和<code>getter</code>方法。如果使用setter和getter的话，需要注意命名规则。具体参照<code>Java Beans</code>。</p>\n<h3 id=\"Primary-key\"><a href=\"#Primary-key\" class=\"headerlink\" title=\"Primary key\"></a>Primary key</h3><p>每个Entity至少定义一个主键，即使你的Entity只有一个字段也是如此。定义主键使用<code>@PrimaryKey</code>。如果你想让Room给你的Entity自动生成ID的话，可以使用@Primary的<code>autoGenerate</code>属性。如果Entity具有复合主键的话，可以使用@Entity的primaryKeys属性，参照下方代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(primaryKeys = &#123;&quot;firstName&quot;, &quot;lastName&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况Room使用Entity的类名来作为数据库的表名。如果想自定义表名，可以使用@Entity的<code>tableName</code>属性,如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(tableName = &quot;users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>SQLite中的表名是大小写不敏感的。</p>\n</blockquote>\n<p>与上面的tableName类似，Room使用Entity的字段名来作为对应的列名，如果想要自定义类名，可以使用<code>@ColumnInfo</code>注解的<code>name</code>属性，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(tableName = &quot;users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引及唯一性\"><a href=\"#索引及唯一性\" class=\"headerlink\" title=\"索引及唯一性\"></a>索引及唯一性</h3><p>在适当的字段上添加索引可以加快数据库的访问速度，要在Entity上添加索引可以使用@Entity的<code>indices</code>属性，可以添加索引或组合索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(indices = &#123;@Index(&quot;firstName&quot;), @Index(&quot;last_name&quot;, &quot;address&quot;)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有些情况下，数据库中的某个字段或字段组合必须是唯一的，可以通过将@Index的属性<code>unique</code>设置为ture来实现这一唯一性。以下代码用于放置User表中出现姓名组合相同的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(indices = &#123;@Index(value = &#123;&quot;first_name&quot;, &quot;last_name&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        unique = true)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表间关系\"><a href=\"#表间关系\" class=\"headerlink\" title=\"表间关系\"></a>表间关系</h3><p>由于SQLite是关系型数据库，所以你可以指定对象之间的关系，但在Room中这是命令禁止的。</p>\n<p>虽然在Room中的Entity不能有直接的引用关系，但Room任然支持在Entity间定义<code>Foreign Key</code>。</p>\n<p>例如有个另一个Entity叫做<code>Book</code>，你可以使用<code>@ForeignKey</code>来定义它和User之间的关系，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(foreignKeys = @ForeignKey(entity = User.class,</span></span><br><span class=\"line\"><span class=\"meta\">                                  parentColumns = &quot;id&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                                  childColumns = &quot;user_id&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Book</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> bookId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String title;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;user_id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> userId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外键是十分强大的，它允许你指定引用实体发生更新是发生的行为，比如，当需要删除一个用户的时候删除其下所有的图书，只需要为Book的@ForeignKey的属性<code>onDelete</code>设置为<code>CASCADE</code>。</p>\n<blockquote>\n<p><strong>注意：</strong>SQLite在处理<code>@Insert(onConflict=REPLACE)</code>的时候，其实是进行了<code>REMOVE</code>和<code>REPLACE</code>两个操作，而不是单单的<code>UPDATE</code>。此时这里的REMOVE操作可能会影响到对应的外键，</p>\n</blockquote>\n<h3 id=\"嵌套对象\"><a href=\"#嵌套对象\" class=\"headerlink\" title=\"嵌套对象\"></a>嵌套对象</h3><p>有时你需要在数据库逻辑中表达一个实体或者Java类，你可以使用<code>@Embedded</code>注解来实现。具体看例子。</p>\n<p>例如上面的User实体有一个<code>Address</code>类型的字段，Address包含了<code>street,city,state</code>和<code>postCode</code>这几个字段。当生成表格时，Address中的字段将被分别定义为User表中的列名。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String state;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String city;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;post_code&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> postCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Address address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是User表包含以下字段：<code>id, firstName, street, state, city</code>和<code>post_code</code>。</p>\n<blockquote>\n<p><strong>注意：</strong>以上是可以多重嵌套的。</p>\n</blockquote>\n<p>如果User中嵌套的A和B中存在相同字段，可以使用@Embedded的<code>prefix</code>属性，Room会在生成table的时候将prefix的值加在列名前。</p>\n<h2 id=\"Data-Access-Objects-DAOs\"><a href=\"#Data-Access-Objects-DAOs\" class=\"headerlink\" title=\"Data Access Objects (DAOs)\"></a>Data Access Objects (DAOs)</h2><p>Room中的主要组件就是<code>Dao</code>，DAO以简洁的方式抽象访问数据库。</p>\n<h3 id=\"Intert\"><a href=\"#Intert\" class=\"headerlink\" title=\"Intert\"></a>Intert</h3><p>当你创建了一个DAO的方法并加上<code>@Insert</code>注解，Room就会生成一个这个方法是实现，用于完成此次插入操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertUsers</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertBothUsers</span><span class=\"params\">(User user1, User user2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertUsersAndFriends</span><span class=\"params\">(User user, List&lt;User&gt; friends)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果插入方法只接受一个参数的话，表示仅仅插入一条数据，这是这个方法可以返回一个long型值，为新行的id。如果参数为数组或集合，则需要返回对应的<code>long[]</code>或者<code>List&lt;Long&gt;</code>。</p>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><p>Update是一个用于更新批量数据的实用方法，它通过主键来匹配需要更改数据库数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Update</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUsers</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此方法可以返回一个int型数据，表示此次修改影响到的行数。</p>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><p>Delete用于批量删除数据库中的数据，它也是通过主键来匹配需要删除的数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUsers</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此方法可以返回一个int型数据，表示此次删除的行数。</p>\n<h3 id=\"QUERY\"><a href=\"#QUERY\" class=\"headerlink\" title=\"QUERY\"></a>QUERY</h3><p><code>@Query</code>是DAO中的一个重要注解，它允许你对数据库进行读写操作。每一个@Query方法都会在编译期做校验，所以如果query存在问题的话，你的App编译将无法通过。</p>\n<p>Room同时也会校验query的返回值，如果返回结果和查询语句中的结果不匹配，Room将会以一下两种方式提醒你：</p>\n<ul>\n<li>如果有部分字段匹配的话会给出警告。</li>\n<li>如果没有字段匹配，则给出错误提示。</li>\n</ul>\n<h4 id=\"简单的查询\"><a href=\"#简单的查询\" class=\"headerlink\" title=\"简单的查询\"></a>简单的查询</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User[] loadAllUsers();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个加载所有用户的查询，写法比较简单。在编译期，Room知道需要查询User的所有列的值。如果查询语句包含语法错误或者没有user这个表，则Room会在编译时期报错并给出错误信息。</p>\n<h4 id=\"查询的参数传递\"><a href=\"#查询的参数传递\" class=\"headerlink\" title=\"查询的参数传递\"></a>查询的参数传递</h4><p>大部分情况，你需要给查询语句传递特定的参数，比如查询特定年龄段的User，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE age &gt; :minAge&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User[] loadAllUsersOlderThan(<span class=\"type\">int</span> minAge);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在编译器处理这个查询操作的时候，Room会将参数minAge与<code>:minAge</code>进行绑定。如果此时无法匹配，则会出现编译错误。</p>\n<p>当然也可以传递多个参数，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE age BETWEEN :minAge AND :maxAge&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User[] loadAllUsersBetweenAges(<span class=\"type\">int</span> minAge, <span class=\"type\">int</span> maxAge);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE first_name LIKE :search &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;OR last_name LIKE :search&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">findUserWithName</span><span class=\"params\">(String search)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"返回所有列的子集\"><a href=\"#返回所有列的子集\" class=\"headerlink\" title=\"返回所有列的子集\"></a>返回所有列的子集</h4><p>通常你需要的只是Entity的一部分字段，例如你的UI只需要先死User的姓名，而不是所有信息。这是为了保证UI的更新速度，你会选择只查询姓名这个两个数据。</p>\n<p>只要可以将查询的结果集映射到返回对象的字段，你就可以返回任何对象，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameTuple</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name=&quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name=&quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你可以在DAO中使用NameTuple了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT first_name, last_name FROM user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;NameTuple&gt; <span class=\"title function_\">loadFullName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Room能够返回的<code>first_name</code>和<code>last_name</code>能够映射到NameTuple，所以Room会生成相应的赋值代码。如果返回字段太多或者字段不存在于NameTuple中，则会发生编译出错。</p>\n<blockquote>\n<p><strong>注意：</strong>这里的NameTuple也可以使用@Embedded注解。</p>\n</blockquote>\n<h4 id=\"将集合作为参数传递\"><a href=\"#将集合作为参数传递\" class=\"headerlink\" title=\"将集合作为参数传递\"></a>将集合作为参数传递</h4><p>有些情况当你查询时需要传递较多的变量，例如想要查询某一地区集合下的所有用户，这个集合可能包含几十个地区，如果用上述简单的参数传递恐怕够呛，现在看看怎么用集合传递：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT first_name, last_name FROM user WHERE region IN (:regions)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;NameTuple&gt; <span class=\"title function_\">loadUsersFromRegions</span><span class=\"params\">(List&lt;String&gt; regions)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Room可以判断你传递的是集合，并在SQL语句中将你的参数进行展开并填充。</p>\n<h4 id=\"可监听的查询\"><a href=\"#可监听的查询\" class=\"headerlink\" title=\"可监听的查询\"></a>可监听的查询</h4><p>在进行查询的时候，你希望UI会在查询结束后自动更新UI，为了满足这一点，这里可以使用前面讲到的<code>LiveData</code>对你的查询返回值进行封装。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT first_name, last_name FROM user WHERE region IN (:regions)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;List&lt;User&gt;&gt; <span class=\"title function_\">loadUsersFromRegionsSync</span><span class=\"params\">(List&lt;String&gt; regions)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你比较熟悉RxJava，那么很高兴告诉你，Room同样支持返回ExJava2中的<code>Publisher</code>和<code>Flowable</code>对象，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * from user where id = :id LIMIT 1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flowable&lt;User&gt; <span class=\"title function_\">loadUserById</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"直接返回Cursor\"><a href=\"#直接返回Cursor\" class=\"headerlink\" title=\"直接返回Cursor\"></a>直接返回Cursor</h4><p>如果你的App中有部分逻辑需要直接用Cursor的话，可以将DAO的返回值设置为Curso，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE age &gt; :minAge LIMIT 5&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor <span class=\"title function_\">loadRawUsersOlderThan</span><span class=\"params\">(<span class=\"type\">int</span> minAge)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>Room很不推荐使用以上Cursor的方法，应为你并不知道Cursor有无数据或者包含哪些列。</p>\n</blockquote>\n<h4 id=\"多表联查\"><a href=\"#多表联查\" class=\"headerlink\" title=\"多表联查\"></a>多表联查</h4><p>Room支持多表联查，如果返回数据是可监听的，那么Room会监听所有查询中涉及到的表并及时更新数据。<br>下面这个例子是通过内联查询某个名字下借阅的图书：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM book &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;INNER JOIN loan ON loan.book_id = book.id &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;INNER JOIN user ON user.id = loan.user_id &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;WHERE user.name LIKE :userName&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title function_\">findBooksBorrowedByNameSync</span><span class=\"params\">(String userName)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以通过查询返回纯java对象，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Query(&quot;SELECT user.name AS userName, pet.name AS petName &quot;</span></span><br><span class=\"line\"><span class=\"meta\">          + &quot;FROM user, pet &quot;</span></span><br><span class=\"line\"><span class=\"meta\">          + &quot;WHERE user.id = pet.user_id&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> LiveData&lt;List&lt;UserPet&gt;&gt; <span class=\"title function_\">loadUserAndPetNames</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// You can also define this class in a separate file, as long as you add the</span></span><br><span class=\"line\">   <span class=\"comment\">// &quot;public&quot; access modifier.</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserPet</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> String petName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>Room中的类型转换支持你将某个类的值存储到某一列中，为此Room提供了<code>TypeConverter</code>这个类用于将自定义类转换成Room所支持的类型。</p>\n<p>例如我们想要将<code>Date</code>对象进行存储，我们可以这么写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Converters</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TypeConverter</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">fromTimestamp</span><span class=\"params\">(Long value)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TypeConverter</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">dateToTimestamp</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : date.getTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样定义完以后，下次Room遇到Date，就能将其转换成Room所支持的Long了。</p>\n<p>下面看看AppDatabase要怎么写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.java&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"meta\">@TypeConverters(&#123;Converter.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserDao <span class=\"title function_\">userDao</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在AppDatabase上添加<code>TypeConverters注解</code>,并将Converter作为其参数。</p>\n<p>接着User实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是DAO：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE birthday BETWEEN :from AND :to&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">findUsersBornBetweenDates</span><span class=\"params\">(Date from, Date to)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里你可以对@TypeConverter做一些范围限制，比如限制只能在某个Entity，某个DAO或某个DAO方法中使用。详细说明可见@TypeConverter文档。</p>\n<h2 id=\"数据库迭代升级\"><a href=\"#数据库迭代升级\" class=\"headerlink\" title=\"数据库迭代升级\"></a>数据库迭代升级</h2><p>当你的App迭代升级的时候，也需要给你的Entity做迭代升级，为此你将修改Entity的代码。当你的用户升级到最新的App版本的时候，你可不希望他们丢失老版本的所有数据，尤其是在没有服务器备份的情况下。</p>\n<p>Room支持通过写<code>Migration</code>类来保留用户数据。每个Migration都需要指定上一个版本和现在的版本，在App运行的时候，Room会运行每一个Migration的<code>migrate</code>方法，并使用正确顺序将数据库升级到最新版本。</p>\n<blockquote>\n<p><strong>注意：</strong>如果你不提供Migration的话，Room会重建数据库而不是升级数据库，这样的后果就是用户数据会全部都是。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Room.databaseBuilder(getApplicationContext(), MyDb.class, <span class=\"string\">&quot;database-name&quot;</span>)</span><br><span class=\"line\">        .addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Migration</span> <span class=\"variable\">MIGRATION_1_2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Migration</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">migrate</span><span class=\"params\">(SupportSQLiteDatabase database)</span> &#123;</span><br><span class=\"line\">        database.execSQL(<span class=\"string\">&quot;CREATE TABLE `Fruit` (`id` INTEGER, &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;`name` TEXT, PRIMARY KEY(`id`))&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Migration</span> <span class=\"variable\">MIGRATION_2_3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Migration</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">migrate</span><span class=\"params\">(SupportSQLiteDatabase database)</span> &#123;</span><br><span class=\"line\">        database.execSQL(<span class=\"string\">&quot;ALTER TABLE Book &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot; ADD COLUMN pub_year INTEGER&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>为了使迁移逻辑保持正常运行，请使用完整的查询语句，即使用硬编码（对这里推荐硬编码）。而不是用一些字符串引用。</p>\n</blockquote>\n<p>一旦升级工作完成，Room会进行schema的验证，如验证有误，则会抛出异常。</p>\n<h3 id=\"测试升级\"><a href=\"#测试升级\" class=\"headerlink\" title=\"测试升级\"></a>测试升级</h3><p>Migration并不是简单的数据库写入操作，一旦升级失败，会对App致命的Crash。为了保证应用的稳定性，应该事先测试Migration，Room提供了一套测试框架，下面我们来简单学习下。</p>\n<h4 id=\"导出Schema文件\"><a href=\"#导出Schema文件\" class=\"headerlink\" title=\"导出Schema文件\"></a>导出Schema文件</h4><p>Room需要将你数据库的Schema已Json格式的文件导出，为了导出Schema，需要在<code>build.gradle</code>中做如下配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        javaCompileOptions &#123;</span><br><span class=\"line\">            annotationProcessorOptions &#123;</span><br><span class=\"line\">                arguments = [<span class=\"string\">&quot;room.schemaLocation&quot;</span>:</span><br><span class=\"line\">                             <span class=\"string\">&quot;$projectDir/schemas&quot;</span>.toString()]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你需要将导出的Json文件保存起来，以便Room通过schema文件创建老版数据库进行升级测试。</p>\n<p>为了进行升级测试，需要将<code>android.arch.persistence.room:testing</code>添加到你的测试依赖当中，然后添加如下配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    sourceSets &#123;</span><br><span class=\"line\">        androidTest.assets.srcDirs += files(<span class=\"string\">&quot;$projectDir/schemas&quot;</span>.toString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试框架提供了名为<code>MigrationTestHelper</code>的类，它可以读取schema文件，这也是一个遵循<code>Junit4</code>测试原则的类。具体测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(AndroidJUnit4.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MigrationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TEST_DB</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;migration-test&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Rule</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MigrationTestHelper helper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MigrationTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        helper = <span class=\"keyword\">new</span> <span class=\"title class_\">MigrationTestHelper</span>(InstrumentationRegistry.getContext(),</span><br><span class=\"line\">                MigrationDb.class.getCanonicalName(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">FrameworkSQLiteOpenHelperFactory</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">migrate1To2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">SupportSQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> helper.createDatabase(TEST_DB, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// db has schema version 1. insert some data using SQL queries.</span></span><br><span class=\"line\">        <span class=\"comment\">// You cannot use DAO classes because they expect the latest schema.</span></span><br><span class=\"line\">        db.execSQL(...);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Prepare for the next version.</span></span><br><span class=\"line\">        db.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Re-open the database with version 2 and provide</span></span><br><span class=\"line\">        <span class=\"comment\">// MIGRATION_1_2 as the migration process.</span></span><br><span class=\"line\">        db = helper.runMigrationsAndValidate(TEST_DB, <span class=\"number\">2</span>, <span class=\"literal\">true</span>, MIGRATION_1_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// MigrationTestHelper automatically verifies the schema changes,</span></span><br><span class=\"line\">        <span class=\"comment\">// but you need to validate that the data was migrated properly.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试数据库\"><a href=\"#测试数据库\" class=\"headerlink\" title=\"测试数据库\"></a>测试数据库</h2><p>当你的应用程序运行测试时，如果你没有测试数据库本身，则不需要创建完整的数据库。Room允许你轻松地模拟测试中的数据访问层。这个过程是可能的，因为您的DAO不会泄露您的数据库的任何细节。测试其余的应用程序时，应该创建DAO类的模拟或假的实例。</p>\n<p>这里推荐在Android设备上编写JUnit测试，因为这些测试并不需要UI的支持，所以这些测试会比UI测试速度更快。</p>\n<p>测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(AndroidJUnit4.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleEntityReadWriteTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao mUserDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestDatabase mDb;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createDb</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> InstrumentationRegistry.getTargetContext();</span><br><span class=\"line\">        <span class=\"comment\">//将数据库建在内存中，可以让你的测试整体更加一体化，更密闭。</span></span><br><span class=\"line\">        mDb = Room.inMemoryDatabaseBuilder(context, TestDatabase.class).build();</span><br><span class=\"line\">        mUserDao = mDb.getUserDao();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeDb</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        mDb.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeUserAndReadInList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> TestUtil.createUser(<span class=\"number\">3</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;george&quot;</span>);</span><br><span class=\"line\">        mUserDao.insert(user);</span><br><span class=\"line\">        List&lt;User&gt; byName = mUserDao.findUsersByName(<span class=\"string\">&quot;george&quot;</span>);</span><br><span class=\"line\">        assertThat(byName.get(<span class=\"number\">0</span>), equalTo(user));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"补充：禁止Entity之间的相互引用\"><a href=\"#补充：禁止Entity之间的相互引用\" class=\"headerlink\" title=\"补充：禁止Entity之间的相互引用\"></a>补充：禁止Entity之间的相互引用</h2><p>将数据库中的关系映射到相应的对象模型是一个常见的做法，在服务器端可以很好地运行，在访问它们时，它们可以很方便地加载字段。</p>\n<p>然而，在客户端，延迟加载是不可行的，因为它可能发生在UI线程上，并且在UI线程中查询磁盘上的信息会产生显着的性能问题。UI线程有大约16ms的时间来计算和绘制Activity的更新的布局，所以即使一个查询只需要5 ms，你的应用程序仍然可能耗尽用于绘制的时间，引起明显的卡顿。更糟糕的是，如果并行运行单独的事务，或者设备忙于其他磁盘重的任务，则查询可能需要更多时间才能完成。但是，如果不使用延迟加载，则应用程序将获取比其需要的更多数据，从而产生内存消耗问题。</p>\n<p>ORM通常将此决定留给开发人员，以便他们可以为应用程序的用例做最好的事情。不幸的是，开发人员不会在他们的应用程序和UI之间共享模型。UI随着时间的推移而变化，难以预料和调试的问题会不断出现。</p>\n<p>例如，使用加载Book对象列表的UI为例，每本书都有一个Author对象。你可能最初设计你的查询时使用延迟加载，以便Book的实例使用getAuthor()方法来返回作者。一段时间后，你意识到需要在应用中显示作者姓名。你可以轻松添加方法调用，如以下代码片段所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorNameTextView.setText(user.getAuthor().getName());</span><br></pre></td></tr></table></figure>\n<p>就这么一个简单的操作，导致了在主线程中访问数据库。如果Author用引用了另一张表，那情况可能更糟糕。如果需求变化，这个界面不在需要作者姓名，那么你的代码可能会做无畏的延迟加载。</p>\n<p>基于以上原因，Room禁止Entity之间的引用，如果需要加载相关数据，可以使用显示的方法去加载。</p>\n","excerpt":"<h2 id=\"持久库Room\"><a href=\"#持久库Room\" class=\"headerlink\" title=\"持久库Room\"></a>持久库Room</h2><p>Room在SQLite上提供了一个抽象层，以便在利用SQLite的全部功能的同时使流畅的数据库访问。</p>\n<p>需要处理一些重要的结构化数据的App通常会从本地的持久数据中受益匪浅。最常见的就是使用本地缓存，这样的话下次如果设备无法联网用户也能浏览本地数据并进行更改。等下次联网后再和服务器进行同步。</p>\n<p>Android的Framework为了支持处理原始SQL而提供了SQLite这一强大的API，当时SQLite的API还是相对比较低级，在使用的时候需要花费大量的经历：</p>\n<ul>\n<li>没有对原始SQL语句的编译时验证，随着数据库表格的更改，你需要更新相关SQL操作，而这个过程可能耗时且容易出错。</li>\n<li>你需要使用大量的样板代码在SQL查询和Java数据对象之间进行转换。</li>\n</ul>\n<p><code>Room</code>在为SQL提供抽象层的同时也会考虑到上述的问题。</p>","more":"<p>下面是Room中三个主要组件：</p>\n<ul>\n<li><p><strong>Database：</strong>此组件用于创建数据库的持有者，同时在类层级上使用注解来定义一系列的<code>Entity</code>，这些Entity对应着数据库中的表格。Database类中的方法则用来获取对应的DAO列表。Database是App层与底层SQLite之间的连接点。<br>在应用中要使用此组件的话需要继承<code>RoomDatabase</code>。然后通过<code>Room.databaseBuilder()</code>或者<code>Room.inMemoryDatabaseBuilder().</code>获得该类的实例。（讲到这里其实读者可以发现，这不就是GreenDao吗？😂）。</p>\n</li>\n<li><p><strong>Entity：</strong>此组件的一个实例表示数据库的一行数据，对于每个Entity类来说，都会有对应的<code>table</code>被创建。想要这些Entity被创建，就需要写在上面Database的注解参数<code>entities</code>列表中。默认Entity中的所有字段都会拿来创建表，除非在该字段上加上<code>@Ignore</code>注解。</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>Entity默认都只有空的构造方法（如果DAO类可以访问每个持久化字段），或者构造方法的参数与Entity中的字段的类型和名字相匹配。Room可以使用全字段构造方法，也可以使用部分字段构造方法。</p>\n</blockquote>\n<ul>\n<li><strong>DAO：</strong>这个组件用来表示具有<code>Data Access Object(DAO)</code>功能的类或接口。DAO类是Room的重要组件，负责定义访问数据库的方法。继承<code>RoomDatabase</code>的类必须包含一个0参数且返回DAO类的方法。当在编译期生成代码的时候，Room会创建实现此DAO的类。</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong>通过使用DAO类而不是传统的查询接口来访问数据库，可以做到数据库组件的分离。同时DAO可以在测试APP时支持Mock数据。</p>\n</blockquote>\n<!--more-->\n\n<p>下面是其三者和数据库的关系图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/room_architecture.png\" alt=\"room architecture\"></p>\n<p>下面看一下简单的实例，其包含一个Entity，一个Dao以及一个Database。</p>\n<p>User.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> uid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Getters and setters are ignored for brevity,</span></span><br><span class=\"line\">    <span class=\"comment\">// but they&#x27;re required for Room to work.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>UserDao.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">getAll</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE uid IN (:userIds)&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">loadAllByIds</span><span class=\"params\">(<span class=\"type\">int</span>[] userIds)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE first_name LIKE :first AND &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;last_name LIKE :last LIMIT 1&quot;)</span></span><br><span class=\"line\">    User <span class=\"title function_\">findByName</span><span class=\"params\">(String first, String last)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">insertAll</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">delete</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>AppDatabase.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.class&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserDao <span class=\"title function_\">userDao</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当创建完这些文件后，你就可以使用下面的方法来获得被创建的AppDatabase实例：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">AppDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> Room.databaseBuilder(getApplicationContext(),</span><br><span class=\"line\">        AppDatabase.class, <span class=\"string\">&quot;database-name&quot;</span>).build();</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>实例化AppDatabase对象时，应遵循单例设计模式，因为每个数据库实例都相当昂贵，而且很少需要访问多个实例。</p>\n</blockquote>\n<h2 id=\"Entity\"><a href=\"#Entity\" class=\"headerlink\" title=\"Entity\"></a>Entity</h2><p>当一个类被添加了<code>@Entity</code>注解并且在Database的<code>@entities</code>被引用，Room就会为其创建对应的数据库。</p>\n<p>默认情况Room会为Entity的每个字段创建对应的数据库列，如果某个字段不想被创建的话可以使用<code>@Ignore</code>注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为了Room可以访问到Entity的字段，你可以将这些字段声明为<code>public</code>，或者可以给这些字段提供<code>setter</code>和<code>getter</code>方法。如果使用setter和getter的话，需要注意命名规则。具体参照<code>Java Beans</code>。</p>\n<h3 id=\"Primary-key\"><a href=\"#Primary-key\" class=\"headerlink\" title=\"Primary key\"></a>Primary key</h3><p>每个Entity至少定义一个主键，即使你的Entity只有一个字段也是如此。定义主键使用<code>@PrimaryKey</code>。如果你想让Room给你的Entity自动生成ID的话，可以使用@Primary的<code>autoGenerate</code>属性。如果Entity具有复合主键的话，可以使用@Entity的primaryKeys属性，参照下方代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(primaryKeys = &#123;&quot;firstName&quot;, &quot;lastName&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>默认情况Room使用Entity的类名来作为数据库的表名。如果想自定义表名，可以使用@Entity的<code>tableName</code>属性,如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(tableName = &quot;users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>SQLite中的表名是大小写不敏感的。</p>\n</blockquote>\n<p>与上面的tableName类似，Room使用Entity的字段名来作为对应的列名，如果想要自定义类名，可以使用<code>@ColumnInfo</code>注解的<code>name</code>属性，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(tableName = &quot;users&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"索引及唯一性\"><a href=\"#索引及唯一性\" class=\"headerlink\" title=\"索引及唯一性\"></a>索引及唯一性</h3><p>在适当的字段上添加索引可以加快数据库的访问速度，要在Entity上添加索引可以使用@Entity的<code>indices</code>属性，可以添加索引或组合索引：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(indices = &#123;@Index(&quot;firstName&quot;), @Index(&quot;last_name&quot;, &quot;address&quot;)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String address;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>有些情况下，数据库中的某个字段或字段组合必须是唯一的，可以通过将@Index的属性<code>unique</code>设置为ture来实现这一唯一性。以下代码用于放置User表中出现姓名组合相同的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(indices = &#123;@Index(value = &#123;&quot;first_name&quot;, &quot;last_name&quot;&#125;,</span></span><br><span class=\"line\"><span class=\"meta\">        unique = true)&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Ignore</span></span><br><span class=\"line\">    Bitmap picture;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表间关系\"><a href=\"#表间关系\" class=\"headerlink\" title=\"表间关系\"></a>表间关系</h3><p>由于SQLite是关系型数据库，所以你可以指定对象之间的关系，但在Room中这是命令禁止的。</p>\n<p>虽然在Room中的Entity不能有直接的引用关系，但Room任然支持在Entity间定义<code>Foreign Key</code>。</p>\n<p>例如有个另一个Entity叫做<code>Book</code>，你可以使用<code>@ForeignKey</code>来定义它和User之间的关系，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity(foreignKeys = @ForeignKey(entity = User.class,</span></span><br><span class=\"line\"><span class=\"meta\">                                  parentColumns = &quot;id&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">                                  childColumns = &quot;user_id&quot;))</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Book</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> bookId;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String title;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;user_id&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> userId;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>外键是十分强大的，它允许你指定引用实体发生更新是发生的行为，比如，当需要删除一个用户的时候删除其下所有的图书，只需要为Book的@ForeignKey的属性<code>onDelete</code>设置为<code>CASCADE</code>。</p>\n<blockquote>\n<p><strong>注意：</strong>SQLite在处理<code>@Insert(onConflict=REPLACE)</code>的时候，其实是进行了<code>REMOVE</code>和<code>REPLACE</code>两个操作，而不是单单的<code>UPDATE</code>。此时这里的REMOVE操作可能会影响到对应的外键，</p>\n</blockquote>\n<h3 id=\"嵌套对象\"><a href=\"#嵌套对象\" class=\"headerlink\" title=\"嵌套对象\"></a>嵌套对象</h3><p>有时你需要在数据库逻辑中表达一个实体或者Java类，你可以使用<code>@Embedded</code>注解来实现。具体看例子。</p>\n<p>例如上面的User实体有一个<code>Address</code>类型的字段，Address包含了<code>street,city,state</code>和<code>postCode</code>这几个字段。当生成表格时，Address中的字段将被分别定义为User表中的列名。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Address</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String street;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String state;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String city;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name = &quot;post_code&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> postCode;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Embedded</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Address address;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是User表包含以下字段：<code>id, firstName, street, state, city</code>和<code>post_code</code>。</p>\n<blockquote>\n<p><strong>注意：</strong>以上是可以多重嵌套的。</p>\n</blockquote>\n<p>如果User中嵌套的A和B中存在相同字段，可以使用@Embedded的<code>prefix</code>属性，Room会在生成table的时候将prefix的值加在列名前。</p>\n<h2 id=\"Data-Access-Objects-DAOs\"><a href=\"#Data-Access-Objects-DAOs\" class=\"headerlink\" title=\"Data Access Objects (DAOs)\"></a>Data Access Objects (DAOs)</h2><p>Room中的主要组件就是<code>Dao</code>，DAO以简洁的方式抽象访问数据库。</p>\n<h3 id=\"Intert\"><a href=\"#Intert\" class=\"headerlink\" title=\"Intert\"></a>Intert</h3><p>当你创建了一个DAO的方法并加上<code>@Insert</code>注解，Room就会生成一个这个方法是实现，用于完成此次插入操作：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(onConflict = OnConflictStrategy.REPLACE)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertUsers</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertBothUsers</span><span class=\"params\">(User user1, User user2)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Insert</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">insertUsersAndFriends</span><span class=\"params\">(User user, List&lt;User&gt; friends)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果插入方法只接受一个参数的话，表示仅仅插入一条数据，这是这个方法可以返回一个long型值，为新行的id。如果参数为数组或集合，则需要返回对应的<code>long[]</code>或者<code>List&lt;Long&gt;</code>。</p>\n<h3 id=\"Update\"><a href=\"#Update\" class=\"headerlink\" title=\"Update\"></a>Update</h3><p>Update是一个用于更新批量数据的实用方法，它通过主键来匹配需要更改数据库数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Update</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">updateUsers</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此方法可以返回一个int型数据，表示此次修改影响到的行数。</p>\n<h3 id=\"DELETE\"><a href=\"#DELETE\" class=\"headerlink\" title=\"DELETE\"></a>DELETE</h3><p>Delete用于批量删除数据库中的数据，它也是通过主键来匹配需要删除的数据：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Delete</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">deleteUsers</span><span class=\"params\">(User... users)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此方法可以返回一个int型数据，表示此次删除的行数。</p>\n<h3 id=\"QUERY\"><a href=\"#QUERY\" class=\"headerlink\" title=\"QUERY\"></a>QUERY</h3><p><code>@Query</code>是DAO中的一个重要注解，它允许你对数据库进行读写操作。每一个@Query方法都会在编译期做校验，所以如果query存在问题的话，你的App编译将无法通过。</p>\n<p>Room同时也会校验query的返回值，如果返回结果和查询语句中的结果不匹配，Room将会以一下两种方式提醒你：</p>\n<ul>\n<li>如果有部分字段匹配的话会给出警告。</li>\n<li>如果没有字段匹配，则给出错误提示。</li>\n</ul>\n<h4 id=\"简单的查询\"><a href=\"#简单的查询\" class=\"headerlink\" title=\"简单的查询\"></a>简单的查询</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User[] loadAllUsers();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这是一个加载所有用户的查询，写法比较简单。在编译期，Room知道需要查询User的所有列的值。如果查询语句包含语法错误或者没有user这个表，则Room会在编译时期报错并给出错误信息。</p>\n<h4 id=\"查询的参数传递\"><a href=\"#查询的参数传递\" class=\"headerlink\" title=\"查询的参数传递\"></a>查询的参数传递</h4><p>大部分情况，你需要给查询语句传递特定的参数，比如查询特定年龄段的User，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE age &gt; :minAge&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User[] loadAllUsersOlderThan(<span class=\"type\">int</span> minAge);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在编译器处理这个查询操作的时候，Room会将参数minAge与<code>:minAge</code>进行绑定。如果此时无法匹配，则会出现编译错误。</p>\n<p>当然也可以传递多个参数，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE age BETWEEN :minAge AND :maxAge&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User[] loadAllUsersBetweenAges(<span class=\"type\">int</span> minAge, <span class=\"type\">int</span> maxAge);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE first_name LIKE :search &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;OR last_name LIKE :search&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">findUserWithName</span><span class=\"params\">(String search)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"返回所有列的子集\"><a href=\"#返回所有列的子集\" class=\"headerlink\" title=\"返回所有列的子集\"></a>返回所有列的子集</h4><p>通常你需要的只是Entity的一部分字段，例如你的UI只需要先死User的姓名，而不是所有信息。这是为了保证UI的更新速度，你会选择只查询姓名这个两个数据。</p>\n<p>只要可以将查询的结果集映射到返回对象的字段，你就可以返回任何对象，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NameTuple</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name=&quot;first_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String firstName;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ColumnInfo(name=&quot;last_name&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>现在你可以在DAO中使用NameTuple了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT first_name, last_name FROM user&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;NameTuple&gt; <span class=\"title function_\">loadFullName</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Room能够返回的<code>first_name</code>和<code>last_name</code>能够映射到NameTuple，所以Room会生成相应的赋值代码。如果返回字段太多或者字段不存在于NameTuple中，则会发生编译出错。</p>\n<blockquote>\n<p><strong>注意：</strong>这里的NameTuple也可以使用@Embedded注解。</p>\n</blockquote>\n<h4 id=\"将集合作为参数传递\"><a href=\"#将集合作为参数传递\" class=\"headerlink\" title=\"将集合作为参数传递\"></a>将集合作为参数传递</h4><p>有些情况当你查询时需要传递较多的变量，例如想要查询某一地区集合下的所有用户，这个集合可能包含几十个地区，如果用上述简单的参数传递恐怕够呛，现在看看怎么用集合传递：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT first_name, last_name FROM user WHERE region IN (:regions)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;NameTuple&gt; <span class=\"title function_\">loadUsersFromRegions</span><span class=\"params\">(List&lt;String&gt; regions)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Room可以判断你传递的是集合，并在SQL语句中将你的参数进行展开并填充。</p>\n<h4 id=\"可监听的查询\"><a href=\"#可监听的查询\" class=\"headerlink\" title=\"可监听的查询\"></a>可监听的查询</h4><p>在进行查询的时候，你希望UI会在查询结束后自动更新UI，为了满足这一点，这里可以使用前面讲到的<code>LiveData</code>对你的查询返回值进行封装。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT first_name, last_name FROM user WHERE region IN (:regions)&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;List&lt;User&gt;&gt; <span class=\"title function_\">loadUsersFromRegionsSync</span><span class=\"params\">(List&lt;String&gt; regions)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你比较熟悉RxJava，那么很高兴告诉你，Room同样支持返回ExJava2中的<code>Publisher</code>和<code>Flowable</code>对象，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * from user where id = :id LIMIT 1&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Flowable&lt;User&gt; <span class=\"title function_\">loadUserById</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"直接返回Cursor\"><a href=\"#直接返回Cursor\" class=\"headerlink\" title=\"直接返回Cursor\"></a>直接返回Cursor</h4><p>如果你的App中有部分逻辑需要直接用Cursor的话，可以将DAO的返回值设置为Curso，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE age &gt; :minAge LIMIT 5&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Cursor <span class=\"title function_\">loadRawUsersOlderThan</span><span class=\"params\">(<span class=\"type\">int</span> minAge)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>Room很不推荐使用以上Cursor的方法，应为你并不知道Cursor有无数据或者包含哪些列。</p>\n</blockquote>\n<h4 id=\"多表联查\"><a href=\"#多表联查\" class=\"headerlink\" title=\"多表联查\"></a>多表联查</h4><p>Room支持多表联查，如果返回数据是可监听的，那么Room会监听所有查询中涉及到的表并及时更新数据。<br>下面这个例子是通过内联查询某个名字下借阅的图书：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM book &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;INNER JOIN loan ON loan.book_id = book.id &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;INNER JOIN user ON user.id = loan.user_id &quot;</span></span><br><span class=\"line\"><span class=\"meta\">           + &quot;WHERE user.name LIKE :userName&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> List&lt;Book&gt; <span class=\"title function_\">findBooksBorrowedByNameSync</span><span class=\"params\">(String userName)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你也可以通过查询返回纯java对象，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">MyDao</span> &#123;</span><br><span class=\"line\">   <span class=\"meta\">@Query(&quot;SELECT user.name AS userName, pet.name AS petName &quot;</span></span><br><span class=\"line\"><span class=\"meta\">          + &quot;FROM user, pet &quot;</span></span><br><span class=\"line\"><span class=\"meta\">          + &quot;WHERE user.id = pet.user_id&quot;)</span></span><br><span class=\"line\">   <span class=\"keyword\">public</span> LiveData&lt;List&lt;UserPet&gt;&gt; <span class=\"title function_\">loadUserAndPetNames</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// You can also define this class in a separate file, as long as you add the</span></span><br><span class=\"line\">   <span class=\"comment\">// &quot;public&quot; access modifier.</span></span><br><span class=\"line\">   <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserPet</span> &#123;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> String userName;</span><br><span class=\"line\">       <span class=\"keyword\">public</span> String petName;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>Room中的类型转换支持你将某个类的值存储到某一列中，为此Room提供了<code>TypeConverter</code>这个类用于将自定义类转换成Room所支持的类型。</p>\n<p>例如我们想要将<code>Date</code>对象进行存储，我们可以这么写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Converters</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@TypeConverter</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Date <span class=\"title function_\">fromTimestamp</span><span class=\"params\">(Long value)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@TypeConverter</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Long <span class=\"title function_\">dateToTimestamp</span><span class=\"params\">(Date date)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> date == <span class=\"literal\">null</span> ? <span class=\"literal\">null</span> : date.getTime();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样定义完以后，下次Room遇到Date，就能将其转换成Room所支持的Long了。</p>\n<p>下面看看AppDatabase要怎么写：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.java&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"meta\">@TypeConverters(&#123;Converter.class&#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserDao <span class=\"title function_\">userDao</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在AppDatabase上添加<code>TypeConverters注解</code>,并将Converter作为其参数。</p>\n<p>接着User实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birthday;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>然后是DAO：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE birthday BETWEEN :from AND :to&quot;)</span></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">findUsersBornBetweenDates</span><span class=\"params\">(Date from, Date to)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里你可以对@TypeConverter做一些范围限制，比如限制只能在某个Entity，某个DAO或某个DAO方法中使用。详细说明可见@TypeConverter文档。</p>\n<h2 id=\"数据库迭代升级\"><a href=\"#数据库迭代升级\" class=\"headerlink\" title=\"数据库迭代升级\"></a>数据库迭代升级</h2><p>当你的App迭代升级的时候，也需要给你的Entity做迭代升级，为此你将修改Entity的代码。当你的用户升级到最新的App版本的时候，你可不希望他们丢失老版本的所有数据，尤其是在没有服务器备份的情况下。</p>\n<p>Room支持通过写<code>Migration</code>类来保留用户数据。每个Migration都需要指定上一个版本和现在的版本，在App运行的时候，Room会运行每一个Migration的<code>migrate</code>方法，并使用正确顺序将数据库升级到最新版本。</p>\n<blockquote>\n<p><strong>注意：</strong>如果你不提供Migration的话，Room会重建数据库而不是升级数据库，这样的后果就是用户数据会全部都是。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Room.databaseBuilder(getApplicationContext(), MyDb.class, <span class=\"string\">&quot;database-name&quot;</span>)</span><br><span class=\"line\">        .addMigrations(MIGRATION_1_2, MIGRATION_2_3).build();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Migration</span> <span class=\"variable\">MIGRATION_1_2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Migration</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">migrate</span><span class=\"params\">(SupportSQLiteDatabase database)</span> &#123;</span><br><span class=\"line\">        database.execSQL(<span class=\"string\">&quot;CREATE TABLE `Fruit` (`id` INTEGER, &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot;`name` TEXT, PRIMARY KEY(`id`))&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Migration</span> <span class=\"variable\">MIGRATION_2_3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Migration</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">migrate</span><span class=\"params\">(SupportSQLiteDatabase database)</span> &#123;</span><br><span class=\"line\">        database.execSQL(<span class=\"string\">&quot;ALTER TABLE Book &quot;</span></span><br><span class=\"line\">                + <span class=\"string\">&quot; ADD COLUMN pub_year INTEGER&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>为了使迁移逻辑保持正常运行，请使用完整的查询语句，即使用硬编码（对这里推荐硬编码）。而不是用一些字符串引用。</p>\n</blockquote>\n<p>一旦升级工作完成，Room会进行schema的验证，如验证有误，则会抛出异常。</p>\n<h3 id=\"测试升级\"><a href=\"#测试升级\" class=\"headerlink\" title=\"测试升级\"></a>测试升级</h3><p>Migration并不是简单的数据库写入操作，一旦升级失败，会对App致命的Crash。为了保证应用的稳定性，应该事先测试Migration，Room提供了一套测试框架，下面我们来简单学习下。</p>\n<h4 id=\"导出Schema文件\"><a href=\"#导出Schema文件\" class=\"headerlink\" title=\"导出Schema文件\"></a>导出Schema文件</h4><p>Room需要将你数据库的Schema已Json格式的文件导出，为了导出Schema，需要在<code>build.gradle</code>中做如下配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    defaultConfig &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        javaCompileOptions &#123;</span><br><span class=\"line\">            annotationProcessorOptions &#123;</span><br><span class=\"line\">                arguments = [<span class=\"string\">&quot;room.schemaLocation&quot;</span>:</span><br><span class=\"line\">                             <span class=\"string\">&quot;$projectDir/schemas&quot;</span>.toString()]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>你需要将导出的Json文件保存起来，以便Room通过schema文件创建老版数据库进行升级测试。</p>\n<p>为了进行升级测试，需要将<code>android.arch.persistence.room:testing</code>添加到你的测试依赖当中，然后添加如下配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">android &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    sourceSets &#123;</span><br><span class=\"line\">        androidTest.assets.srcDirs += files(<span class=\"string\">&quot;$projectDir/schemas&quot;</span>.toString())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试框架提供了名为<code>MigrationTestHelper</code>的类，它可以读取schema文件，这也是一个遵循<code>Junit4</code>测试原则的类。具体测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(AndroidJUnit4.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MigrationTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">TEST_DB</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;migration-test&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Rule</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MigrationTestHelper helper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MigrationTest</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        helper = <span class=\"keyword\">new</span> <span class=\"title class_\">MigrationTestHelper</span>(InstrumentationRegistry.getContext(),</span><br><span class=\"line\">                MigrationDb.class.getCanonicalName(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">FrameworkSQLiteOpenHelperFactory</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">migrate1To2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        <span class=\"type\">SupportSQLiteDatabase</span> <span class=\"variable\">db</span> <span class=\"operator\">=</span> helper.createDatabase(TEST_DB, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// db has schema version 1. insert some data using SQL queries.</span></span><br><span class=\"line\">        <span class=\"comment\">// You cannot use DAO classes because they expect the latest schema.</span></span><br><span class=\"line\">        db.execSQL(...);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Prepare for the next version.</span></span><br><span class=\"line\">        db.close();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// Re-open the database with version 2 and provide</span></span><br><span class=\"line\">        <span class=\"comment\">// MIGRATION_1_2 as the migration process.</span></span><br><span class=\"line\">        db = helper.runMigrationsAndValidate(TEST_DB, <span class=\"number\">2</span>, <span class=\"literal\">true</span>, MIGRATION_1_2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// MigrationTestHelper automatically verifies the schema changes,</span></span><br><span class=\"line\">        <span class=\"comment\">// but you need to validate that the data was migrated properly.</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试数据库\"><a href=\"#测试数据库\" class=\"headerlink\" title=\"测试数据库\"></a>测试数据库</h2><p>当你的应用程序运行测试时，如果你没有测试数据库本身，则不需要创建完整的数据库。Room允许你轻松地模拟测试中的数据访问层。这个过程是可能的，因为您的DAO不会泄露您的数据库的任何细节。测试其余的应用程序时，应该创建DAO类的模拟或假的实例。</p>\n<p>这里推荐在Android设备上编写JUnit测试，因为这些测试并不需要UI的支持，所以这些测试会比UI测试速度更快。</p>\n<p>测试代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RunWith(AndroidJUnit4.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SimpleEntityReadWriteTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserDao mUserDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TestDatabase mDb;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Before</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">createDb</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Context</span> <span class=\"variable\">context</span> <span class=\"operator\">=</span> InstrumentationRegistry.getTargetContext();</span><br><span class=\"line\">        <span class=\"comment\">//将数据库建在内存中，可以让你的测试整体更加一体化，更密闭。</span></span><br><span class=\"line\">        mDb = Room.inMemoryDatabaseBuilder(context, TestDatabase.class).build();</span><br><span class=\"line\">        mUserDao = mDb.getUserDao();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@After</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">closeDb</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        mDb.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">writeUserAndReadInList</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> TestUtil.createUser(<span class=\"number\">3</span>);</span><br><span class=\"line\">        user.setName(<span class=\"string\">&quot;george&quot;</span>);</span><br><span class=\"line\">        mUserDao.insert(user);</span><br><span class=\"line\">        List&lt;User&gt; byName = mUserDao.findUsersByName(<span class=\"string\">&quot;george&quot;</span>);</span><br><span class=\"line\">        assertThat(byName.get(<span class=\"number\">0</span>), equalTo(user));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"补充：禁止Entity之间的相互引用\"><a href=\"#补充：禁止Entity之间的相互引用\" class=\"headerlink\" title=\"补充：禁止Entity之间的相互引用\"></a>补充：禁止Entity之间的相互引用</h2><p>将数据库中的关系映射到相应的对象模型是一个常见的做法，在服务器端可以很好地运行，在访问它们时，它们可以很方便地加载字段。</p>\n<p>然而，在客户端，延迟加载是不可行的，因为它可能发生在UI线程上，并且在UI线程中查询磁盘上的信息会产生显着的性能问题。UI线程有大约16ms的时间来计算和绘制Activity的更新的布局，所以即使一个查询只需要5 ms，你的应用程序仍然可能耗尽用于绘制的时间，引起明显的卡顿。更糟糕的是，如果并行运行单独的事务，或者设备忙于其他磁盘重的任务，则查询可能需要更多时间才能完成。但是，如果不使用延迟加载，则应用程序将获取比其需要的更多数据，从而产生内存消耗问题。</p>\n<p>ORM通常将此决定留给开发人员，以便他们可以为应用程序的用例做最好的事情。不幸的是，开发人员不会在他们的应用程序和UI之间共享模型。UI随着时间的推移而变化，难以预料和调试的问题会不断出现。</p>\n<p>例如，使用加载Book对象列表的UI为例，每本书都有一个Author对象。你可能最初设计你的查询时使用延迟加载，以便Book的实例使用getAuthor()方法来返回作者。一段时间后，你意识到需要在应用中显示作者姓名。你可以轻松添加方法调用，如以下代码片段所示：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authorNameTextView.setText(user.getAuthor().getName());</span><br></pre></td></tr></table></figure>\n<p>就这么一个简单的操作，导致了在主线程中访问数据库。如果Author用引用了另一张表，那情况可能更糟糕。如果需求变化，这个界面不在需要作者姓名，那么你的代码可能会做无畏的延迟加载。</p>\n<p>基于以上原因，Room禁止Entity之间的引用，如果需要加载相关数据，可以使用显示的方法去加载。</p>"},{"title":"Android官方架构组件介绍之LiveData[翻译]","date":"2017-05-21T07:12:01.000Z","cover":"http://cdn.zqlxtt.cn/final-architecture.png","_content":"\n## LiveData\n\n`LiveData`是一个用于持有数据并支持数据可被监听（观察）。和传统的观察者模式中的被观察者不一样，LiveData是一个`生命周期感知`组件，因此观察者可以指定某一个`LifeCycle`给LiveData，并对数据进行监听。\n\n如果观察者指定`LifeCycle`处于`Started`或者`RESUMED`状态，LiveData会将观察者视为活动状态，并通知其数据的变化。\n<!-- more -->\n我们看一段代码：\n\n```java\npublic class LocationLiveData extends LiveData<Location> {\n    private LocationManager locationManager;\n\n    private SimpleLocationListener listener = new SimpleLocationListener() {\n        @Override\n        public void onLocationChanged(Location location) {\n            setValue(location);\n        }\n    };\n\n    public LocationLiveData(Context context) {\n        locationManager = (LocationManager) context.getSystemService(\n                Context.LOCATION_SERVICE);\n    }\n\n    @Override\n    protected void onActive() {\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, listener);\n    }\n\n    @Override\n    protected void onInactive() {\n        locationManager.removeUpdates(listener);\n    }\n}\n```\n\n上面有三个值得注意的地方：\n\n<!--  more -->\n- onActive()\n\n当这个方法被调用时，表示LiveData的观察者数量从0变为了1，这时就我们的位置监听来说，就应该注册我们的时间监听了。\n\n- onInactive()\n\n这个方法被调用时，表示LiveData的观察者数量变为了0，既然没有了观察者，也就没有理由再做监听，此时我们就应该将位置监听移除。\n\n- setValue()\n\n通过调用这个方法来更新LiveData的数据，并通知处于活动状态的观察者。\n\n接着我们就能像下面这样使用LocationLiveData了。\n\n```java\npublic class MyFragment extends LifecycleFragment {\n    public void onActivityCreated (Bundle savedInstanceState) {\n        LiveData<Location> myLocationListener = ...;\n        Util.checkUserStatus(result -> {\n            if (result) {\n                myLocationListener.addObserver(this, location -> {\n                    // update UI\n                });\n            }\n        });\n    }\n}\n```\n\n注意上面的`addObserver`方法，我们将`LifeCycleOwner`作为第一个参数传递了进去，这表示我们的LocationLiveData将遵照这个Fragment所持有的LifeCycle办事。\n\n- 如果LifeCycle不在Started或者RESUMED这两个状态，那么观察者将无法接受到数据更新的回调，即使数据发生了变化。\n- 如果LifeCycle销毁了，即生命周期结束，观察者将被自动从LiveData中移除。\n\n既然LocationLiveData是生命周期感知的，那么我们就可以稍微改动一下它的代码，让它可以被多个Activity或者Fragment公用：\n\n```java\npublic class LocationLiveData extends LiveData<Location> {\n    private static LocationLiveData sInstance;\n    private LocationManager locationManager;\n\n    @MainThread\n    public static LocationLiveData get(Context context) {\n        if (sInstance == null) {\n            sInstance = new LocationLiveData(context.getApplicationContext());\n        }\n        return sInstance;\n    }\n\n    private SimpleLocationListener listener = new SimpleLocationListener() {\n        @Override\n        public void onLocationChanged(Location location) {\n            setValue(location);\n        }\n    };\n\n    private LocationLiveData(Context context) {\n        locationManager = (LocationManager) context.getSystemService(\n                Context.LOCATION_SERVICE);\n    }\n\n    @Override\n    protected void onActive() {\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, listener);\n    }\n\n    @Override\n    protected void onInactive() {\n        locationManager.removeUpdates(listener);\n    }\n}\n```\n这里使用单例的原因就是让多个Activity或者Fragment共享一个LocationLiveData实例。\n然后我们可以这么使用：\n\n```java\npublic class MyFragment extends LifecycleFragment {\n    public void onActivityCreated (Bundle savedInstanceState) {\n        Util.checkUserStatus(result -> {\n            if (result) {\n                MyLocationListener.get(getActivity()).addObserver(this, location -> {\n                   // update UI\n                });\n            }\n        });\n  }\n}\n```\n\n通过这么一改，现在即使有多个Activity或者Fragment在使用LocationLiveData，它也能对其进行优雅的管理。不必理会页面销毁带来的诸多麻烦。\n\n总结几点LiveData的有点：\n\n- 没有内存溢出\n\n当观察者被绑定他们对应的LifeCycle以后，当页面销毁时他们会自动被溢出，不会导致内存溢出。\n\n- 不会因为Activity的不可见导致Crash\n\n当Activity不可见时，即使有数据变化，LiveData也不会通知观察者。因为此时观察者的LifeCyele并不处于Started或者RESUMED状态。\n\n- 配置的改变\n\n当当前Activity配置改变（如屏幕方向），导致重新从onCreate走一遍，这是观察者们会立刻收到配置变化前的最新数据。\n\n- 资源共享\n\n我们只需要一个LocationLivaData,连接系统服务一次，就能支持所有的观察者。\n\n- 不再有人为生命周期处理\n\n通过上面的代码可以知道，我们的Activity或者Fragment只要在需要观察数据的时候观察数据即可，不需要理会生命周期变化了。这一切都交给LiveData来自动管理。\n\n## LiveData的转换\n\n有时候有这样的需求，需要在LiveData将变化的数据通知给观察者前，改变数据的类型；或者是返回一个不一样的LiveData。\n\n这里介绍一个类`Transformations`,它可以帮助完成上面的这些操作。\n\n- Transformations.map()\n\n在LiveData数据的改变传递到观察者之前，在数据上应用一个方法：\n\n```java\nLiveData<User> userLiveData = ...;\nLiveData<String> userName = Transformations.map(userLiveData, user -> {\n    user.name + \" \" + user.lastName\n});\n```\n\n这里我们如果只需要知道变化用户的名字，那么只要观察userName这个LiveData对象即可。它会从userLiveData数据中提取用户名并传递给它自己的观察者。\n\n- Transformations.switchMap()\n\n与Transformations.map()类似，只不过这里传递个switchMap()的方法必须返回一个LiveData对象。\n\n```java\nprivate LiveData<User> getUser(String id) {\n  ...;\n}\n\nLiveData<String> userId = ...;\nLiveData<User> user = Transformations.switchMap(userId, id -> getUser(id) );\n```\n\n当你考虑在ViewModel中使用LifeCycle对象时，这种转换就是一个可选的解决方案。\n假如有一下需求，用户输入一个地址，我们在屏幕上更新这个地址对应的邮编，简单的写法如下：\n\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    public MyViewModel(PostalCodeRepository repository) {\n       this.repository = repository;\n    }\n\n    private LiveData<String> getPostalCode(String address) {\n       // DON'T DO THIS\n       return repository.getPostCode(address);\n    }\n}\n```\n这样写问题显然很严重，当每次调用getPostalCode方法后，UI代码中都需要对getPostalCode的返回值做注册观察者操作，并且还要移除上一个观察者，这样显然是低效率的。此外，如果这时UI因为配置的变化（屏幕旋转）重建了，那么它会触发再次调用getPostalCode，而不是使用之前的调用结果。\n\n因此我们可以做如下转换：\n\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    private final MutableLiveData<String> addressInput = new MutableLiveData();\n    public final LiveData<String> postalCode =\n            Transformations.switchMap(addressInput, (address) -> {\n                return repository.getPostCode(address);\n             });\n\n  public MyViewModel(PostalCodeRepository repository) {\n      this.repository = repository\n  }\n\n  private void setInput(String address) {\n      addressInput.setValue(address);\n  }\n}\n```\n\n注意，这里我们将postalCode访问限制符写成public final，因为它将始终不变，UI只要在需要用的时候将观察者注册到postalCode中就行。这是当用户调用setInput后，如果postalCode上有可活动的观察者，那么repository.getPostCode(address)就会被调用，如果此时没有可活动的观察者，则repository.getPostCode(address)不会被调用。\n\n","source":"_posts/andrdoi-arch-livedata.md","raw":"---\ntitle: Android官方架构组件介绍之LiveData[翻译]\ndate: 2017-05-21 15:12:01\ntags: android\ncover: http://cdn.zqlxtt.cn/final-architecture.png\n---\n\n## LiveData\n\n`LiveData`是一个用于持有数据并支持数据可被监听（观察）。和传统的观察者模式中的被观察者不一样，LiveData是一个`生命周期感知`组件，因此观察者可以指定某一个`LifeCycle`给LiveData，并对数据进行监听。\n\n如果观察者指定`LifeCycle`处于`Started`或者`RESUMED`状态，LiveData会将观察者视为活动状态，并通知其数据的变化。\n<!-- more -->\n我们看一段代码：\n\n```java\npublic class LocationLiveData extends LiveData<Location> {\n    private LocationManager locationManager;\n\n    private SimpleLocationListener listener = new SimpleLocationListener() {\n        @Override\n        public void onLocationChanged(Location location) {\n            setValue(location);\n        }\n    };\n\n    public LocationLiveData(Context context) {\n        locationManager = (LocationManager) context.getSystemService(\n                Context.LOCATION_SERVICE);\n    }\n\n    @Override\n    protected void onActive() {\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, listener);\n    }\n\n    @Override\n    protected void onInactive() {\n        locationManager.removeUpdates(listener);\n    }\n}\n```\n\n上面有三个值得注意的地方：\n\n<!--  more -->\n- onActive()\n\n当这个方法被调用时，表示LiveData的观察者数量从0变为了1，这时就我们的位置监听来说，就应该注册我们的时间监听了。\n\n- onInactive()\n\n这个方法被调用时，表示LiveData的观察者数量变为了0，既然没有了观察者，也就没有理由再做监听，此时我们就应该将位置监听移除。\n\n- setValue()\n\n通过调用这个方法来更新LiveData的数据，并通知处于活动状态的观察者。\n\n接着我们就能像下面这样使用LocationLiveData了。\n\n```java\npublic class MyFragment extends LifecycleFragment {\n    public void onActivityCreated (Bundle savedInstanceState) {\n        LiveData<Location> myLocationListener = ...;\n        Util.checkUserStatus(result -> {\n            if (result) {\n                myLocationListener.addObserver(this, location -> {\n                    // update UI\n                });\n            }\n        });\n    }\n}\n```\n\n注意上面的`addObserver`方法，我们将`LifeCycleOwner`作为第一个参数传递了进去，这表示我们的LocationLiveData将遵照这个Fragment所持有的LifeCycle办事。\n\n- 如果LifeCycle不在Started或者RESUMED这两个状态，那么观察者将无法接受到数据更新的回调，即使数据发生了变化。\n- 如果LifeCycle销毁了，即生命周期结束，观察者将被自动从LiveData中移除。\n\n既然LocationLiveData是生命周期感知的，那么我们就可以稍微改动一下它的代码，让它可以被多个Activity或者Fragment公用：\n\n```java\npublic class LocationLiveData extends LiveData<Location> {\n    private static LocationLiveData sInstance;\n    private LocationManager locationManager;\n\n    @MainThread\n    public static LocationLiveData get(Context context) {\n        if (sInstance == null) {\n            sInstance = new LocationLiveData(context.getApplicationContext());\n        }\n        return sInstance;\n    }\n\n    private SimpleLocationListener listener = new SimpleLocationListener() {\n        @Override\n        public void onLocationChanged(Location location) {\n            setValue(location);\n        }\n    };\n\n    private LocationLiveData(Context context) {\n        locationManager = (LocationManager) context.getSystemService(\n                Context.LOCATION_SERVICE);\n    }\n\n    @Override\n    protected void onActive() {\n        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, listener);\n    }\n\n    @Override\n    protected void onInactive() {\n        locationManager.removeUpdates(listener);\n    }\n}\n```\n这里使用单例的原因就是让多个Activity或者Fragment共享一个LocationLiveData实例。\n然后我们可以这么使用：\n\n```java\npublic class MyFragment extends LifecycleFragment {\n    public void onActivityCreated (Bundle savedInstanceState) {\n        Util.checkUserStatus(result -> {\n            if (result) {\n                MyLocationListener.get(getActivity()).addObserver(this, location -> {\n                   // update UI\n                });\n            }\n        });\n  }\n}\n```\n\n通过这么一改，现在即使有多个Activity或者Fragment在使用LocationLiveData，它也能对其进行优雅的管理。不必理会页面销毁带来的诸多麻烦。\n\n总结几点LiveData的有点：\n\n- 没有内存溢出\n\n当观察者被绑定他们对应的LifeCycle以后，当页面销毁时他们会自动被溢出，不会导致内存溢出。\n\n- 不会因为Activity的不可见导致Crash\n\n当Activity不可见时，即使有数据变化，LiveData也不会通知观察者。因为此时观察者的LifeCyele并不处于Started或者RESUMED状态。\n\n- 配置的改变\n\n当当前Activity配置改变（如屏幕方向），导致重新从onCreate走一遍，这是观察者们会立刻收到配置变化前的最新数据。\n\n- 资源共享\n\n我们只需要一个LocationLivaData,连接系统服务一次，就能支持所有的观察者。\n\n- 不再有人为生命周期处理\n\n通过上面的代码可以知道，我们的Activity或者Fragment只要在需要观察数据的时候观察数据即可，不需要理会生命周期变化了。这一切都交给LiveData来自动管理。\n\n## LiveData的转换\n\n有时候有这样的需求，需要在LiveData将变化的数据通知给观察者前，改变数据的类型；或者是返回一个不一样的LiveData。\n\n这里介绍一个类`Transformations`,它可以帮助完成上面的这些操作。\n\n- Transformations.map()\n\n在LiveData数据的改变传递到观察者之前，在数据上应用一个方法：\n\n```java\nLiveData<User> userLiveData = ...;\nLiveData<String> userName = Transformations.map(userLiveData, user -> {\n    user.name + \" \" + user.lastName\n});\n```\n\n这里我们如果只需要知道变化用户的名字，那么只要观察userName这个LiveData对象即可。它会从userLiveData数据中提取用户名并传递给它自己的观察者。\n\n- Transformations.switchMap()\n\n与Transformations.map()类似，只不过这里传递个switchMap()的方法必须返回一个LiveData对象。\n\n```java\nprivate LiveData<User> getUser(String id) {\n  ...;\n}\n\nLiveData<String> userId = ...;\nLiveData<User> user = Transformations.switchMap(userId, id -> getUser(id) );\n```\n\n当你考虑在ViewModel中使用LifeCycle对象时，这种转换就是一个可选的解决方案。\n假如有一下需求，用户输入一个地址，我们在屏幕上更新这个地址对应的邮编，简单的写法如下：\n\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    public MyViewModel(PostalCodeRepository repository) {\n       this.repository = repository;\n    }\n\n    private LiveData<String> getPostalCode(String address) {\n       // DON'T DO THIS\n       return repository.getPostCode(address);\n    }\n}\n```\n这样写问题显然很严重，当每次调用getPostalCode方法后，UI代码中都需要对getPostalCode的返回值做注册观察者操作，并且还要移除上一个观察者，这样显然是低效率的。此外，如果这时UI因为配置的变化（屏幕旋转）重建了，那么它会触发再次调用getPostalCode，而不是使用之前的调用结果。\n\n因此我们可以做如下转换：\n\n```java\nclass MyViewModel extends ViewModel {\n    private final PostalCodeRepository repository;\n    private final MutableLiveData<String> addressInput = new MutableLiveData();\n    public final LiveData<String> postalCode =\n            Transformations.switchMap(addressInput, (address) -> {\n                return repository.getPostCode(address);\n             });\n\n  public MyViewModel(PostalCodeRepository repository) {\n      this.repository = repository\n  }\n\n  private void setInput(String address) {\n      addressInput.setValue(address);\n  }\n}\n```\n\n注意，这里我们将postalCode访问限制符写成public final，因为它将始终不变，UI只要在需要用的时候将观察者注册到postalCode中就行。这是当用户调用setInput后，如果postalCode上有可活动的观察者，那么repository.getPostCode(address)就会被调用，如果此时没有可活动的观察者，则repository.getPostCode(address)不会被调用。\n\n","slug":"andrdoi-arch-livedata","published":1,"updated":"2024-08-21T03:16:19.779Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vp000a5p6t9jn177u6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"LiveData\"><a href=\"#LiveData\" class=\"headerlink\" title=\"LiveData\"></a>LiveData</h2><p><code>LiveData</code>是一个用于持有数据并支持数据可被监听（观察）。和传统的观察者模式中的被观察者不一样，LiveData是一个<code>生命周期感知</code>组件，因此观察者可以指定某一个<code>LifeCycle</code>给LiveData，并对数据进行监听。</p>\n<p>如果观察者指定<code>LifeCycle</code>处于<code>Started</code>或者<code>RESUMED</code>状态，LiveData会将观察者视为活动状态，并通知其数据的变化。</p>\n<span id=\"more\"></span>\n<p>我们看一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocationLiveData</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiveData</span>&lt;Location&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocationManager locationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">SimpleLocationListener</span> <span class=\"variable\">listener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLocationListener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onLocationChanged</span><span class=\"params\">(Location location)</span> &#123;</span><br><span class=\"line\">            setValue(location);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LocationLiveData</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        locationManager = (LocationManager) context.getSystemService(</span><br><span class=\"line\">                Context.LOCATION_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">0</span>, <span class=\"number\">0</span>, listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onInactive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.removeUpdates(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面有三个值得注意的地方：</p>\n<!--  more -->\n<ul>\n<li>onActive()</li>\n</ul>\n<p>当这个方法被调用时，表示LiveData的观察者数量从0变为了1，这时就我们的位置监听来说，就应该注册我们的时间监听了。</p>\n<ul>\n<li>onInactive()</li>\n</ul>\n<p>这个方法被调用时，表示LiveData的观察者数量变为了0，既然没有了观察者，也就没有理由再做监听，此时我们就应该将位置监听移除。</p>\n<ul>\n<li>setValue()</li>\n</ul>\n<p>通过调用这个方法来更新LiveData的数据，并通知处于活动状态的观察者。</p>\n<p>接着我们就能像下面这样使用LocationLiveData了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span> <span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        LiveData&lt;Location&gt; myLocationListener = ...;</span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                myLocationListener.addObserver(<span class=\"built_in\">this</span>, location -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// update UI</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意上面的<code>addObserver</code>方法，我们将<code>LifeCycleOwner</code>作为第一个参数传递了进去，这表示我们的LocationLiveData将遵照这个Fragment所持有的LifeCycle办事。</p>\n<ul>\n<li>如果LifeCycle不在Started或者RESUMED这两个状态，那么观察者将无法接受到数据更新的回调，即使数据发生了变化。</li>\n<li>如果LifeCycle销毁了，即生命周期结束，观察者将被自动从LiveData中移除。</li>\n</ul>\n<p>既然LocationLiveData是生命周期感知的，那么我们就可以稍微改动一下它的代码，让它可以被多个Activity或者Fragment公用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocationLiveData</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiveData</span>&lt;Location&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LocationLiveData sInstance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocationManager locationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LocationLiveData <span class=\"title function_\">get</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sInstance = <span class=\"keyword\">new</span> <span class=\"title class_\">LocationLiveData</span>(context.getApplicationContext());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">SimpleLocationListener</span> <span class=\"variable\">listener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLocationListener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onLocationChanged</span><span class=\"params\">(Location location)</span> &#123;</span><br><span class=\"line\">            setValue(location);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LocationLiveData</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        locationManager = (LocationManager) context.getSystemService(</span><br><span class=\"line\">                Context.LOCATION_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">0</span>, <span class=\"number\">0</span>, listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onInactive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.removeUpdates(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用单例的原因就是让多个Activity或者Fragment共享一个LocationLiveData实例。<br>然后我们可以这么使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span> <span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                MyLocationListener.get(getActivity()).addObserver(<span class=\"built_in\">this</span>, location -&gt; &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// update UI</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这么一改，现在即使有多个Activity或者Fragment在使用LocationLiveData，它也能对其进行优雅的管理。不必理会页面销毁带来的诸多麻烦。</p>\n<p>总结几点LiveData的有点：</p>\n<ul>\n<li>没有内存溢出</li>\n</ul>\n<p>当观察者被绑定他们对应的LifeCycle以后，当页面销毁时他们会自动被溢出，不会导致内存溢出。</p>\n<ul>\n<li>不会因为Activity的不可见导致Crash</li>\n</ul>\n<p>当Activity不可见时，即使有数据变化，LiveData也不会通知观察者。因为此时观察者的LifeCyele并不处于Started或者RESUMED状态。</p>\n<ul>\n<li>配置的改变</li>\n</ul>\n<p>当当前Activity配置改变（如屏幕方向），导致重新从onCreate走一遍，这是观察者们会立刻收到配置变化前的最新数据。</p>\n<ul>\n<li>资源共享</li>\n</ul>\n<p>我们只需要一个LocationLivaData,连接系统服务一次，就能支持所有的观察者。</p>\n<ul>\n<li>不再有人为生命周期处理</li>\n</ul>\n<p>通过上面的代码可以知道，我们的Activity或者Fragment只要在需要观察数据的时候观察数据即可，不需要理会生命周期变化了。这一切都交给LiveData来自动管理。</p>\n<h2 id=\"LiveData的转换\"><a href=\"#LiveData的转换\" class=\"headerlink\" title=\"LiveData的转换\"></a>LiveData的转换</h2><p>有时候有这样的需求，需要在LiveData将变化的数据通知给观察者前，改变数据的类型；或者是返回一个不一样的LiveData。</p>\n<p>这里介绍一个类<code>Transformations</code>,它可以帮助完成上面的这些操作。</p>\n<ul>\n<li>Transformations.map()</li>\n</ul>\n<p>在LiveData数据的改变传递到观察者之前，在数据上应用一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData&lt;User&gt; userLiveData = ...;</span><br><span class=\"line\">LiveData&lt;String&gt; userName = Transformations.map(userLiveData, user -&gt; &#123;</span><br><span class=\"line\">    user.name + <span class=\"string\">&quot; &quot;</span> + user.lastName</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里我们如果只需要知道变化用户的名字，那么只要观察userName这个LiveData对象即可。它会从userLiveData数据中提取用户名并传递给它自己的观察者。</p>\n<ul>\n<li>Transformations.switchMap()</li>\n</ul>\n<p>与Transformations.map()类似，只不过这里传递个switchMap()的方法必须返回一个LiveData对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LiveData&lt;String&gt; userId = ...;</span><br><span class=\"line\">LiveData&lt;User&gt; user = Transformations.switchMap(userId, id -&gt; getUser(id) );</span><br></pre></td></tr></table></figure>\n\n<p>当你考虑在ViewModel中使用LifeCycle对象时，这种转换就是一个可选的解决方案。<br>假如有一下需求，用户输入一个地址，我们在屏幕上更新这个地址对应的邮编，简单的写法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiveData&lt;String&gt; <span class=\"title function_\">getPostalCode</span><span class=\"params\">(String address)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// DON&#x27;T DO THIS</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样写问题显然很严重，当每次调用getPostalCode方法后，UI代码中都需要对getPostalCode的返回值做注册观察者操作，并且还要移除上一个观察者，这样显然是低效率的。此外，如果这时UI因为配置的变化（屏幕旋转）重建了，那么它会触发再次调用getPostalCode，而不是使用之前的调用结果。</p>\n<p>因此我们可以做如下转换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;String&gt; addressInput = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;String&gt; postalCode =</span><br><span class=\"line\">            Transformations.switchMap(addressInput, (address) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.repository = repository</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setInput</span><span class=\"params\">(String address)</span> &#123;</span><br><span class=\"line\">      addressInput.setValue(address);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，这里我们将postalCode访问限制符写成public final，因为它将始终不变，UI只要在需要用的时候将观察者注册到postalCode中就行。这是当用户调用setInput后，如果postalCode上有可活动的观察者，那么repository.getPostCode(address)就会被调用，如果此时没有可活动的观察者，则repository.getPostCode(address)不会被调用。</p>\n","excerpt":"<h2 id=\"LiveData\"><a href=\"#LiveData\" class=\"headerlink\" title=\"LiveData\"></a>LiveData</h2><p><code>LiveData</code>是一个用于持有数据并支持数据可被监听（观察）。和传统的观察者模式中的被观察者不一样，LiveData是一个<code>生命周期感知</code>组件，因此观察者可以指定某一个<code>LifeCycle</code>给LiveData，并对数据进行监听。</p>\n<p>如果观察者指定<code>LifeCycle</code>处于<code>Started</code>或者<code>RESUMED</code>状态，LiveData会将观察者视为活动状态，并通知其数据的变化。</p>","more":"<p>我们看一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocationLiveData</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiveData</span>&lt;Location&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocationManager locationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">SimpleLocationListener</span> <span class=\"variable\">listener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLocationListener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onLocationChanged</span><span class=\"params\">(Location location)</span> &#123;</span><br><span class=\"line\">            setValue(location);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">LocationLiveData</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        locationManager = (LocationManager) context.getSystemService(</span><br><span class=\"line\">                Context.LOCATION_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">0</span>, <span class=\"number\">0</span>, listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onInactive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.removeUpdates(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面有三个值得注意的地方：</p>\n<!--  more -->\n<ul>\n<li>onActive()</li>\n</ul>\n<p>当这个方法被调用时，表示LiveData的观察者数量从0变为了1，这时就我们的位置监听来说，就应该注册我们的时间监听了。</p>\n<ul>\n<li>onInactive()</li>\n</ul>\n<p>这个方法被调用时，表示LiveData的观察者数量变为了0，既然没有了观察者，也就没有理由再做监听，此时我们就应该将位置监听移除。</p>\n<ul>\n<li>setValue()</li>\n</ul>\n<p>通过调用这个方法来更新LiveData的数据，并通知处于活动状态的观察者。</p>\n<p>接着我们就能像下面这样使用LocationLiveData了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span> <span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        LiveData&lt;Location&gt; myLocationListener = ...;</span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                myLocationListener.addObserver(<span class=\"built_in\">this</span>, location -&gt; &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// update UI</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意上面的<code>addObserver</code>方法，我们将<code>LifeCycleOwner</code>作为第一个参数传递了进去，这表示我们的LocationLiveData将遵照这个Fragment所持有的LifeCycle办事。</p>\n<ul>\n<li>如果LifeCycle不在Started或者RESUMED这两个状态，那么观察者将无法接受到数据更新的回调，即使数据发生了变化。</li>\n<li>如果LifeCycle销毁了，即生命周期结束，观察者将被自动从LiveData中移除。</li>\n</ul>\n<p>既然LocationLiveData是生命周期感知的，那么我们就可以稍微改动一下它的代码，让它可以被多个Activity或者Fragment公用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LocationLiveData</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LiveData</span>&lt;Location&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LocationLiveData sInstance;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocationManager locationManager;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LocationLiveData <span class=\"title function_\">get</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sInstance == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            sInstance = <span class=\"keyword\">new</span> <span class=\"title class_\">LocationLiveData</span>(context.getApplicationContext());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sInstance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">SimpleLocationListener</span> <span class=\"variable\">listener</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleLocationListener</span>() &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onLocationChanged</span><span class=\"params\">(Location location)</span> &#123;</span><br><span class=\"line\">            setValue(location);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LocationLiveData</span><span class=\"params\">(Context context)</span> &#123;</span><br><span class=\"line\">        locationManager = (LocationManager) context.getSystemService(</span><br><span class=\"line\">                Context.LOCATION_SERVICE);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, <span class=\"number\">0</span>, <span class=\"number\">0</span>, listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onInactive</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        locationManager.removeUpdates(listener);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里使用单例的原因就是让多个Activity或者Fragment共享一个LocationLiveData实例。<br>然后我们可以这么使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span> <span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                MyLocationListener.get(getActivity()).addObserver(<span class=\"built_in\">this</span>, location -&gt; &#123;</span><br><span class=\"line\">                   <span class=\"comment\">// update UI</span></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这么一改，现在即使有多个Activity或者Fragment在使用LocationLiveData，它也能对其进行优雅的管理。不必理会页面销毁带来的诸多麻烦。</p>\n<p>总结几点LiveData的有点：</p>\n<ul>\n<li>没有内存溢出</li>\n</ul>\n<p>当观察者被绑定他们对应的LifeCycle以后，当页面销毁时他们会自动被溢出，不会导致内存溢出。</p>\n<ul>\n<li>不会因为Activity的不可见导致Crash</li>\n</ul>\n<p>当Activity不可见时，即使有数据变化，LiveData也不会通知观察者。因为此时观察者的LifeCyele并不处于Started或者RESUMED状态。</p>\n<ul>\n<li>配置的改变</li>\n</ul>\n<p>当当前Activity配置改变（如屏幕方向），导致重新从onCreate走一遍，这是观察者们会立刻收到配置变化前的最新数据。</p>\n<ul>\n<li>资源共享</li>\n</ul>\n<p>我们只需要一个LocationLivaData,连接系统服务一次，就能支持所有的观察者。</p>\n<ul>\n<li>不再有人为生命周期处理</li>\n</ul>\n<p>通过上面的代码可以知道，我们的Activity或者Fragment只要在需要观察数据的时候观察数据即可，不需要理会生命周期变化了。这一切都交给LiveData来自动管理。</p>\n<h2 id=\"LiveData的转换\"><a href=\"#LiveData的转换\" class=\"headerlink\" title=\"LiveData的转换\"></a>LiveData的转换</h2><p>有时候有这样的需求，需要在LiveData将变化的数据通知给观察者前，改变数据的类型；或者是返回一个不一样的LiveData。</p>\n<p>这里介绍一个类<code>Transformations</code>,它可以帮助完成上面的这些操作。</p>\n<ul>\n<li>Transformations.map()</li>\n</ul>\n<p>在LiveData数据的改变传递到观察者之前，在数据上应用一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LiveData&lt;User&gt; userLiveData = ...;</span><br><span class=\"line\">LiveData&lt;String&gt; userName = Transformations.map(userLiveData, user -&gt; &#123;</span><br><span class=\"line\">    user.name + <span class=\"string\">&quot; &quot;</span> + user.lastName</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>这里我们如果只需要知道变化用户的名字，那么只要观察userName这个LiveData对象即可。它会从userLiveData数据中提取用户名并传递给它自己的观察者。</p>\n<ul>\n<li>Transformations.switchMap()</li>\n</ul>\n<p>与Transformations.map()类似，只不过这里传递个switchMap()的方法必须返回一个LiveData对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(String id)</span> &#123;</span><br><span class=\"line\">  ...;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">LiveData&lt;String&gt; userId = ...;</span><br><span class=\"line\">LiveData&lt;User&gt; user = Transformations.switchMap(userId, id -&gt; getUser(id) );</span><br></pre></td></tr></table></figure>\n\n<p>当你考虑在ViewModel中使用LifeCycle对象时，这种转换就是一个可选的解决方案。<br>假如有一下需求，用户输入一个地址，我们在屏幕上更新这个地址对应的邮编，简单的写法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> &#123;</span><br><span class=\"line\">       <span class=\"built_in\">this</span>.repository = repository;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiveData&lt;String&gt; <span class=\"title function_\">getPostalCode</span><span class=\"params\">(String address)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">// DON&#x27;T DO THIS</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样写问题显然很严重，当每次调用getPostalCode方法后，UI代码中都需要对getPostalCode的返回值做注册观察者操作，并且还要移除上一个观察者，这样显然是低效率的。此外，如果这时UI因为配置的变化（屏幕旋转）重建了，那么它会触发再次调用getPostalCode，而不是使用之前的调用结果。</p>\n<p>因此我们可以做如下转换：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> PostalCodeRepository repository;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;String&gt; addressInput = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;String&gt; postalCode =</span><br><span class=\"line\">            Transformations.switchMap(addressInput, (address) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> repository.getPostCode(address);</span><br><span class=\"line\">             &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">MyViewModel</span><span class=\"params\">(PostalCodeRepository repository)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.repository = repository</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setInput</span><span class=\"params\">(String address)</span> &#123;</span><br><span class=\"line\">      addressInput.setValue(address);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意，这里我们将postalCode访问限制符写成public final，因为它将始终不变，UI只要在需要用的时候将观察者注册到postalCode中就行。这是当用户调用setInput后，如果postalCode上有可活动的观察者，那么repository.getPostCode(address)就会被调用，如果此时没有可活动的观察者，则repository.getPostCode(address)不会被调用。</p>"},{"title":"Android官方架构组件介绍之ViewModel[翻译]","date":"2017-05-22T02:54:25.000Z","cover":"http://cdn.zqlxtt.cn/final-architecture.png","_content":"\n## ViewModel\n\n像Activity，Fragment这类应用组件都有自己的生命周期并且是被Android的Framework所管理的。Framework可能会根据用户的一些操作和设备的状态对Activity或者Fragment进行销毁和重构。作为开发者，这些行为我们是无法干预的。\n\n所以Activity或Fragment中的一些数据也会随着销毁而丢失，随着重构而重新生成。比如你的Activity中有个用户列表，当这个Activity重构的时候，新的Activity会重新获取用户列表。对于一些简单的数据，Activity可以使用`onSaveInstanceState()`方法，并从onCreate的bundle中重新获取。但这一方法途径仅仅适合一些简单的UI状态，对于用户列表这种庞大的数据并不适合。\n<!-- more -->\n还存在一个问题，Activity或者Fragment经常会做一些异步的耗时操作。随之就需要Activity和Fragment管理这些异步操作，并在自己被destroyed的时候清理它们，从而保证内存溢出这类问题的发生。这样的处理会随着项目扩大而变得十分复杂，一不留神，你的App就Crash了。\n\nActivity和Fragment本身需要处理很多用户的输入事件并和操作系统打交道，所以当它们还要花时间管理它们的数据资源时，class文件就会变得异常庞大，然后就会造就出所谓的`god activities`和`god fragments`。这些UI控制类仅仅靠一个class就能处理相关的所有事务。简直跟上帝没啥两样。但这些类如果要进行单元测试的话，那就尴尬了。\n\n所以就有了`MVC`,`MVP`这类设计模式，将视图与数据分离。今天讲到的`ViewModel`类的功能也一样，就是讲数据从UI中分离出来。并且当Activity或Fragment重构的时候，ViewModel会自动保留之前的数据并给新的Activity或Fragment使用。对于上面提到的用户列表的例子，ViewModel会为我们很好的管理这些数据。\n\n<!--more-->\n\n```java\npublic class MyViewModel extends ViewModel {\n    private MutableLiveData<List<User>> users;\n    public LiveData<List<User>> getUsers() {\n        if (users == null) {\n            users = new MutableLiveData<List<Users>>();\n            loadUsers();\n        }\n        return users;\n    }\n\n    private void loadUsers() {\n        // do async operation to fetch users\n    }\n}\n```\n\n接着在我们的Activity中就能这样使用了：\n\n```java\npublic class MyActivity extends AppCompatActivity {\n    public void onCreate(Bundle savedInstanceState) {\n        MyViewModel model = ViewModelProviders.of(this).get(MyViewModel.class);\n        model.getUsers().observe(this, users -> {\n            // update UI\n        });\n    }\n}\n```\n\n这是当MyActivity被重构时，获得到的model实例是与重构前同一个，当MyActivity被销毁时，Framework会调用ViewModel的`onCleared()`,我们就可以在此方法中做资源的清理。\n\n>   因为ViewModel的生命周期是和Activity或Fragment分开的，所以在ViewModel中绝对不能引用任何View对象或者任何引用了Activity的Context的对象。如果ViewModel中需要Application的Context的话，可以继承`AndroidViewModel`。\n\n\n## Fragment之间的数据共享\n\n在Activity中包好多个Fragment并且需要相互通信是非常常见的，这时就需要这些Fragment定义一些接口，然后让Activity来进行协调。而且这些Fragment还需要处理其他Fragment不可见或者还没有创建这些细节问题。\n\n上面这个动点可以被ViewModel轻易解决，想象意向有这么个Activity，它包含FragmentA和FragmentB，其中A是用户列表，B是用户的详细数据，点击列表上的某个用户，在B中显示相应的数据。\n\n看看使用ViewModel怎么处理这个问题：\n\n```java\npublic class SharedViewModel extends ViewModel {\n    private final MutableLiveData<Item> selected = new MutableLiveData<Item>();\n\n    public void select(Item item) {\n        selected.setValue(item);\n    }\n\n    public LiveData<Item> getSelected() {\n        return selected;\n    }\n}\n\npublic class MasterFragment extends Fragment {\n    private SharedViewModel model;\n    public void onActivityCreated() {\n        model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);\n        itemSelector.setOnClickListener(item -> {\n            model.select(item);\n        });\n    }\n}\n\npublic class DetailFragment extends LifecycleFragment {\n    public void onActivityCreated() {\n        SharedViewModel model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);\n        model.getSelected().observe(this, { item ->\n           // update UI\n        });\n    }\n}\n```\n\n这里要注意的是两个Fragment都使用了`getActivity`作为参数来获得ViewModel实例。这表示这两个Fragment获得的ViewModel对象是同一个。\n\n使用了ViewModel的好处如下：\n\n- Activity不需要做任何事情，不需要干涉这两个Fragment之间的通信。\n- Fragment不需要互相知道，即使一个消失不可见，另一个也能很好的工作。\n- Fragment有自己的生命周期，它们之间互不干扰，即便你用一个FragmentC替代了B，FragmentA也能正常工作，没有任何问题。\n\n## ViewModel的生命周期\n\nViewModel的生命周期跟着传递给`ViewModelProvider`的`LifeCycle`走，当生成了ViewModel的实例后，它会一直待在内存中，直到对应的LifeCycle彻底结束。下面是ViewModel与Activity对应的生命周期图：\n\n![ViewModel生命周期](http://backup.flutter-dev.cn/viewmodel-lifecycle.png)\n","source":"_posts/android-arch-viewmodel.md","raw":"---\ntitle: Android官方架构组件介绍之ViewModel[翻译]\ndate: 2017-05-22 10:54:25\ntags: android\ncover: http://cdn.zqlxtt.cn/final-architecture.png\n---\n\n## ViewModel\n\n像Activity，Fragment这类应用组件都有自己的生命周期并且是被Android的Framework所管理的。Framework可能会根据用户的一些操作和设备的状态对Activity或者Fragment进行销毁和重构。作为开发者，这些行为我们是无法干预的。\n\n所以Activity或Fragment中的一些数据也会随着销毁而丢失，随着重构而重新生成。比如你的Activity中有个用户列表，当这个Activity重构的时候，新的Activity会重新获取用户列表。对于一些简单的数据，Activity可以使用`onSaveInstanceState()`方法，并从onCreate的bundle中重新获取。但这一方法途径仅仅适合一些简单的UI状态，对于用户列表这种庞大的数据并不适合。\n<!-- more -->\n还存在一个问题，Activity或者Fragment经常会做一些异步的耗时操作。随之就需要Activity和Fragment管理这些异步操作，并在自己被destroyed的时候清理它们，从而保证内存溢出这类问题的发生。这样的处理会随着项目扩大而变得十分复杂，一不留神，你的App就Crash了。\n\nActivity和Fragment本身需要处理很多用户的输入事件并和操作系统打交道，所以当它们还要花时间管理它们的数据资源时，class文件就会变得异常庞大，然后就会造就出所谓的`god activities`和`god fragments`。这些UI控制类仅仅靠一个class就能处理相关的所有事务。简直跟上帝没啥两样。但这些类如果要进行单元测试的话，那就尴尬了。\n\n所以就有了`MVC`,`MVP`这类设计模式，将视图与数据分离。今天讲到的`ViewModel`类的功能也一样，就是讲数据从UI中分离出来。并且当Activity或Fragment重构的时候，ViewModel会自动保留之前的数据并给新的Activity或Fragment使用。对于上面提到的用户列表的例子，ViewModel会为我们很好的管理这些数据。\n\n<!--more-->\n\n```java\npublic class MyViewModel extends ViewModel {\n    private MutableLiveData<List<User>> users;\n    public LiveData<List<User>> getUsers() {\n        if (users == null) {\n            users = new MutableLiveData<List<Users>>();\n            loadUsers();\n        }\n        return users;\n    }\n\n    private void loadUsers() {\n        // do async operation to fetch users\n    }\n}\n```\n\n接着在我们的Activity中就能这样使用了：\n\n```java\npublic class MyActivity extends AppCompatActivity {\n    public void onCreate(Bundle savedInstanceState) {\n        MyViewModel model = ViewModelProviders.of(this).get(MyViewModel.class);\n        model.getUsers().observe(this, users -> {\n            // update UI\n        });\n    }\n}\n```\n\n这是当MyActivity被重构时，获得到的model实例是与重构前同一个，当MyActivity被销毁时，Framework会调用ViewModel的`onCleared()`,我们就可以在此方法中做资源的清理。\n\n>   因为ViewModel的生命周期是和Activity或Fragment分开的，所以在ViewModel中绝对不能引用任何View对象或者任何引用了Activity的Context的对象。如果ViewModel中需要Application的Context的话，可以继承`AndroidViewModel`。\n\n\n## Fragment之间的数据共享\n\n在Activity中包好多个Fragment并且需要相互通信是非常常见的，这时就需要这些Fragment定义一些接口，然后让Activity来进行协调。而且这些Fragment还需要处理其他Fragment不可见或者还没有创建这些细节问题。\n\n上面这个动点可以被ViewModel轻易解决，想象意向有这么个Activity，它包含FragmentA和FragmentB，其中A是用户列表，B是用户的详细数据，点击列表上的某个用户，在B中显示相应的数据。\n\n看看使用ViewModel怎么处理这个问题：\n\n```java\npublic class SharedViewModel extends ViewModel {\n    private final MutableLiveData<Item> selected = new MutableLiveData<Item>();\n\n    public void select(Item item) {\n        selected.setValue(item);\n    }\n\n    public LiveData<Item> getSelected() {\n        return selected;\n    }\n}\n\npublic class MasterFragment extends Fragment {\n    private SharedViewModel model;\n    public void onActivityCreated() {\n        model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);\n        itemSelector.setOnClickListener(item -> {\n            model.select(item);\n        });\n    }\n}\n\npublic class DetailFragment extends LifecycleFragment {\n    public void onActivityCreated() {\n        SharedViewModel model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);\n        model.getSelected().observe(this, { item ->\n           // update UI\n        });\n    }\n}\n```\n\n这里要注意的是两个Fragment都使用了`getActivity`作为参数来获得ViewModel实例。这表示这两个Fragment获得的ViewModel对象是同一个。\n\n使用了ViewModel的好处如下：\n\n- Activity不需要做任何事情，不需要干涉这两个Fragment之间的通信。\n- Fragment不需要互相知道，即使一个消失不可见，另一个也能很好的工作。\n- Fragment有自己的生命周期，它们之间互不干扰，即便你用一个FragmentC替代了B，FragmentA也能正常工作，没有任何问题。\n\n## ViewModel的生命周期\n\nViewModel的生命周期跟着传递给`ViewModelProvider`的`LifeCycle`走，当生成了ViewModel的实例后，它会一直待在内存中，直到对应的LifeCycle彻底结束。下面是ViewModel与Activity对应的生命周期图：\n\n![ViewModel生命周期](http://backup.flutter-dev.cn/viewmodel-lifecycle.png)\n","slug":"android-arch-viewmodel","published":1,"updated":"2024-08-21T03:16:19.781Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vp000d5p6tcfb63h5x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h2><p>像Activity，Fragment这类应用组件都有自己的生命周期并且是被Android的Framework所管理的。Framework可能会根据用户的一些操作和设备的状态对Activity或者Fragment进行销毁和重构。作为开发者，这些行为我们是无法干预的。</p>\n<p>所以Activity或Fragment中的一些数据也会随着销毁而丢失，随着重构而重新生成。比如你的Activity中有个用户列表，当这个Activity重构的时候，新的Activity会重新获取用户列表。对于一些简单的数据，Activity可以使用<code>onSaveInstanceState()</code>方法，并从onCreate的bundle中重新获取。但这一方法途径仅仅适合一些简单的UI状态，对于用户列表这种庞大的数据并不适合。</p>\n<span id=\"more\"></span>\n<p>还存在一个问题，Activity或者Fragment经常会做一些异步的耗时操作。随之就需要Activity和Fragment管理这些异步操作，并在自己被destroyed的时候清理它们，从而保证内存溢出这类问题的发生。这样的处理会随着项目扩大而变得十分复杂，一不留神，你的App就Crash了。</p>\n<p>Activity和Fragment本身需要处理很多用户的输入事件并和操作系统打交道，所以当它们还要花时间管理它们的数据资源时，class文件就会变得异常庞大，然后就会造就出所谓的<code>god activities</code>和<code>god fragments</code>。这些UI控制类仅仅靠一个class就能处理相关的所有事务。简直跟上帝没啥两样。但这些类如果要进行单元测试的话，那就尴尬了。</p>\n<p>所以就有了<code>MVC</code>,<code>MVP</code>这类设计模式，将视图与数据分离。今天讲到的<code>ViewModel</code>类的功能也一样，就是讲数据从UI中分离出来。并且当Activity或Fragment重构的时候，ViewModel会自动保留之前的数据并给新的Activity或Fragment使用。对于上面提到的用户列表的例子，ViewModel会为我们很好的管理这些数据。</p>\n<!--more-->\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MutableLiveData&lt;List&lt;User&gt;&gt; users;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;List&lt;User&gt;&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (users == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            users = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;List&lt;Users&gt;&gt;();</span><br><span class=\"line\">            loadUsers();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> users;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do async operation to fetch users</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在我们的Activity中就能这样使用了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyViewModel</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> ViewModelProviders.of(<span class=\"built_in\">this</span>).get(MyViewModel.class);</span><br><span class=\"line\">        model.getUsers().observe(<span class=\"built_in\">this</span>, users -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是当MyActivity被重构时，获得到的model实例是与重构前同一个，当MyActivity被销毁时，Framework会调用ViewModel的<code>onCleared()</code>,我们就可以在此方法中做资源的清理。</p>\n<blockquote>\n<p>  因为ViewModel的生命周期是和Activity或Fragment分开的，所以在ViewModel中绝对不能引用任何View对象或者任何引用了Activity的Context的对象。如果ViewModel中需要Application的Context的话，可以继承<code>AndroidViewModel</code>。</p>\n</blockquote>\n<h2 id=\"Fragment之间的数据共享\"><a href=\"#Fragment之间的数据共享\" class=\"headerlink\" title=\"Fragment之间的数据共享\"></a>Fragment之间的数据共享</h2><p>在Activity中包好多个Fragment并且需要相互通信是非常常见的，这时就需要这些Fragment定义一些接口，然后让Activity来进行协调。而且这些Fragment还需要处理其他Fragment不可见或者还没有创建这些细节问题。</p>\n<p>上面这个动点可以被ViewModel轻易解决，想象意向有这么个Activity，它包含FragmentA和FragmentB，其中A是用户列表，B是用户的详细数据，点击列表上的某个用户，在B中显示相应的数据。</p>\n<p>看看使用ViewModel怎么处理这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;Item&gt; selected = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;Item&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">select</span><span class=\"params\">(Item item)</span> &#123;</span><br><span class=\"line\">        selected.setValue(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;Item&gt; <span class=\"title function_\">getSelected</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> selected;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MasterFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SharedViewModel model;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);</span><br><span class=\"line\">        itemSelector.setOnClickListener(item -&gt; &#123;</span><br><span class=\"line\">            model.select(item);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SharedViewModel</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> ViewModelProviders.of(getActivity()).get(SharedViewModel.class);</span><br><span class=\"line\">        model.getSelected().observe(<span class=\"built_in\">this</span>, &#123; item -&gt;</span><br><span class=\"line\">           <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意的是两个Fragment都使用了<code>getActivity</code>作为参数来获得ViewModel实例。这表示这两个Fragment获得的ViewModel对象是同一个。</p>\n<p>使用了ViewModel的好处如下：</p>\n<ul>\n<li>Activity不需要做任何事情，不需要干涉这两个Fragment之间的通信。</li>\n<li>Fragment不需要互相知道，即使一个消失不可见，另一个也能很好的工作。</li>\n<li>Fragment有自己的生命周期，它们之间互不干扰，即便你用一个FragmentC替代了B，FragmentA也能正常工作，没有任何问题。</li>\n</ul>\n<h2 id=\"ViewModel的生命周期\"><a href=\"#ViewModel的生命周期\" class=\"headerlink\" title=\"ViewModel的生命周期\"></a>ViewModel的生命周期</h2><p>ViewModel的生命周期跟着传递给<code>ViewModelProvider</code>的<code>LifeCycle</code>走，当生成了ViewModel的实例后，它会一直待在内存中，直到对应的LifeCycle彻底结束。下面是ViewModel与Activity对应的生命周期图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/viewmodel-lifecycle.png\" alt=\"ViewModel生命周期\"></p>\n","excerpt":"<h2 id=\"ViewModel\"><a href=\"#ViewModel\" class=\"headerlink\" title=\"ViewModel\"></a>ViewModel</h2><p>像Activity，Fragment这类应用组件都有自己的生命周期并且是被Android的Framework所管理的。Framework可能会根据用户的一些操作和设备的状态对Activity或者Fragment进行销毁和重构。作为开发者，这些行为我们是无法干预的。</p>\n<p>所以Activity或Fragment中的一些数据也会随着销毁而丢失，随着重构而重新生成。比如你的Activity中有个用户列表，当这个Activity重构的时候，新的Activity会重新获取用户列表。对于一些简单的数据，Activity可以使用<code>onSaveInstanceState()</code>方法，并从onCreate的bundle中重新获取。但这一方法途径仅仅适合一些简单的UI状态，对于用户列表这种庞大的数据并不适合。</p>","more":"<p>还存在一个问题，Activity或者Fragment经常会做一些异步的耗时操作。随之就需要Activity和Fragment管理这些异步操作，并在自己被destroyed的时候清理它们，从而保证内存溢出这类问题的发生。这样的处理会随着项目扩大而变得十分复杂，一不留神，你的App就Crash了。</p>\n<p>Activity和Fragment本身需要处理很多用户的输入事件并和操作系统打交道，所以当它们还要花时间管理它们的数据资源时，class文件就会变得异常庞大，然后就会造就出所谓的<code>god activities</code>和<code>god fragments</code>。这些UI控制类仅仅靠一个class就能处理相关的所有事务。简直跟上帝没啥两样。但这些类如果要进行单元测试的话，那就尴尬了。</p>\n<p>所以就有了<code>MVC</code>,<code>MVP</code>这类设计模式，将视图与数据分离。今天讲到的<code>ViewModel</code>类的功能也一样，就是讲数据从UI中分离出来。并且当Activity或Fragment重构的时候，ViewModel会自动保留之前的数据并给新的Activity或Fragment使用。对于上面提到的用户列表的例子，ViewModel会为我们很好的管理这些数据。</p>\n<!--more-->\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MutableLiveData&lt;List&lt;User&gt;&gt; users;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;List&lt;User&gt;&gt; <span class=\"title function_\">getUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (users == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            users = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;List&lt;Users&gt;&gt;();</span><br><span class=\"line\">            loadUsers();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> users;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadUsers</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// do async operation to fetch users</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在我们的Activity中就能这样使用了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyViewModel</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> ViewModelProviders.of(<span class=\"built_in\">this</span>).get(MyViewModel.class);</span><br><span class=\"line\">        model.getUsers().observe(<span class=\"built_in\">this</span>, users -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这是当MyActivity被重构时，获得到的model实例是与重构前同一个，当MyActivity被销毁时，Framework会调用ViewModel的<code>onCleared()</code>,我们就可以在此方法中做资源的清理。</p>\n<blockquote>\n<p>  因为ViewModel的生命周期是和Activity或Fragment分开的，所以在ViewModel中绝对不能引用任何View对象或者任何引用了Activity的Context的对象。如果ViewModel中需要Application的Context的话，可以继承<code>AndroidViewModel</code>。</p>\n</blockquote>\n<h2 id=\"Fragment之间的数据共享\"><a href=\"#Fragment之间的数据共享\" class=\"headerlink\" title=\"Fragment之间的数据共享\"></a>Fragment之间的数据共享</h2><p>在Activity中包好多个Fragment并且需要相互通信是非常常见的，这时就需要这些Fragment定义一些接口，然后让Activity来进行协调。而且这些Fragment还需要处理其他Fragment不可见或者还没有创建这些细节问题。</p>\n<p>上面这个动点可以被ViewModel轻易解决，想象意向有这么个Activity，它包含FragmentA和FragmentB，其中A是用户列表，B是用户的详细数据，点击列表上的某个用户，在B中显示相应的数据。</p>\n<p>看看使用ViewModel怎么处理这个问题：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MutableLiveData&lt;Item&gt; selected = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;Item&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">select</span><span class=\"params\">(Item item)</span> &#123;</span><br><span class=\"line\">        selected.setValue(item);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;Item&gt; <span class=\"title function_\">getSelected</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> selected;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MasterFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> SharedViewModel model;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        model = ViewModelProviders.of(getActivity()).get(SharedViewModel.class);</span><br><span class=\"line\">        itemSelector.setOnClickListener(item -&gt; &#123;</span><br><span class=\"line\">            model.select(item);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DetailFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">SharedViewModel</span> <span class=\"variable\">model</span> <span class=\"operator\">=</span> ViewModelProviders.of(getActivity()).get(SharedViewModel.class);</span><br><span class=\"line\">        model.getSelected().observe(<span class=\"built_in\">this</span>, &#123; item -&gt;</span><br><span class=\"line\">           <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里要注意的是两个Fragment都使用了<code>getActivity</code>作为参数来获得ViewModel实例。这表示这两个Fragment获得的ViewModel对象是同一个。</p>\n<p>使用了ViewModel的好处如下：</p>\n<ul>\n<li>Activity不需要做任何事情，不需要干涉这两个Fragment之间的通信。</li>\n<li>Fragment不需要互相知道，即使一个消失不可见，另一个也能很好的工作。</li>\n<li>Fragment有自己的生命周期，它们之间互不干扰，即便你用一个FragmentC替代了B，FragmentA也能正常工作，没有任何问题。</li>\n</ul>\n<h2 id=\"ViewModel的生命周期\"><a href=\"#ViewModel的生命周期\" class=\"headerlink\" title=\"ViewModel的生命周期\"></a>ViewModel的生命周期</h2><p>ViewModel的生命周期跟着传递给<code>ViewModelProvider</code>的<code>LifeCycle</code>走，当生成了ViewModel的实例后，它会一直待在内存中，直到对应的LifeCycle彻底结束。下面是ViewModel与Activity对应的生命周期图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/viewmodel-lifecycle.png\" alt=\"ViewModel生命周期\"></p>"},{"title":"Android官方架构组件介绍之LifeCycle[翻译]","date":"2017-05-19T09:07:10.000Z","cover":"http://cdn.zqlxtt.cn/final-architecture.png","_content":"\n> Google 2017 I/O开发者大会于近日召开，在开发者大会上谷歌除了发布了Android O等一些新产品之外，也对Android代码的架构做出了一个官方的回应。\n\n[Google 2017 I/O开发者大会Android架构组件介绍现场视频](http://www.bilibili.com/video/av10638148/index_8.html)\n<!-- more -->\n下面是官方提供的Android App开发的架构图：\n\n![google官方Android架构图](http://cdn.zqlxtt.cn/final-architecture.png)\n\n<!-- more -->\n从上图可以看到一些关键字：`ViewModel`,`LiveData`,`Room`等。其实看了上面视频的会发现Google官方Android架构组件一共包括以下几个：\n\n- LifeCycle ： 与Activity和Fragment的生命周期有关\n- LiveData ：异步可订阅数据，也是生命周期感知\n- ViewModel ：视图数据持有模型，也是生命周期感知\n- Room ：SQLite抽象层，用于简化SQLite数据存储\n\n这篇文章主要讲解LifeCycle在项目的简单用法。\n\n## AS中添加依赖\n\n首先在工程根目录的`build.gradle`中添加一下内容：\n\n```groovy\nallprojects {\n    repositories {\n        jcenter()\n        maven { url 'https://maven.google.com' }  //添加此行\n    }\n}\n```\n然后在应用目录下的`build.gradle`中添加以下依赖：\n\n```groovy\n//For Lifecycles, LiveData, and ViewModel\ncompile \"android.arch.lifecycle:runtime:1.0.0-alpha1\"\ncompile \"android.arch.lifecycle:extensions:1.0.0-alpha1\"\nannotationProcessor \"android.arch.lifecycle:compiler:1.0.0-alpha1\"\n\n//For Room\ncompile \"android.arch.persistence.room:runtime:1.0.0-alpha1\"\nannotationProcessor \"android.arch.persistence.room:compiler:1.0.0-alpha1\"\n```\n\n## LifeCycle相关使用\n\n在我们平时的项目中经常会遇到很多需要依赖生命周期的逻辑处理，比如有这么一个需求。\n在某个Activity我们需要在屏幕上展现用户的地理位置。简单的实现方法如下：\n\n```java\nclass MyLocationListener {\n    public MyLocationListener(Context context, Callback callback) {\n        // ...\n    }\n\n    void start() {\n        // connect to system location service\n    }\n\n    void stop() {\n        // disconnect from system location service\n    }\n}\n\nclass MyActivity extends AppCompatActivity {\n    private MyLocationListener myLocationListener;\n\n    public void onCreate(...) {\n        myLocationListener = new MyLocationListener(this, (location) -> {\n            // update UI\n        });\n  }\n\n    public void onStart() {\n        super.onStart();\n        myLocationListener.start();\n    }\n\n    public void onStop() {\n        super.onStop();\n        myLocationListener.stop();\n    }\n}\n```\n\n虽然以上代码看起来很简洁，但在实际项目中的onStart，onStop方法可能会变得相当庞大。\n此外，实际情况可能并不像上面这么简单，例如我们需要在start位置监听前做用户状态检测，检测是一个耗时的任务，那么很有可能在检测结束前用户提前退出了Activity，这时候就会导致`myLocationListener.start()`在`myLocationListener.stop()`后面调用，从而引起很多难以定位的问题。代码如下：\n\n```java\nclass MyActivity extends AppCompatActivity {\n    private MyLocationListener myLocationListener;\n\n    public void onCreate(...) {\n        myLocationListener = new MyLocationListener(this, location -> {\n            // update UI\n        });\n    }\n\n    public void onStart() {\n        super.onStart();\n        Util.checkUserStatus(result -> {\n            // what if this callback is invoked AFTER activity is stopped?\n            if (result) {\n                myLocationListener.start();\n            }\n        });\n    }\n\n    public void onStop() {\n        super.onStop();\n        myLocationListener.stop();\n    }\n}\n```\n\n这时候就该今天的主角`LifeCycle`出场了。它提供了一套接口帮助你处理这些问题。\n\n### LifeCycle\n\n`LifeCyle`类持有Activity或者Fragment的生命周期相关信息，并且支持其他对象监听这些状态。\n\n`LifeCyle`有两个枚举用于追踪生命周期中的状态。\n\n**Event**\n\n这是生命周期的事件类，会在Framework和LifeCycle间传递，这些事件映射到Activity和Fragment的回调事件中。\n\n**State**\n\nLifeCycle所持有Activity或Fragment的当前状态。\n\n一个类想要监听LifeCycle的状态，只需要给其方法加上注解：\n\n```java\npublic class MyObserver implements LifecycleObserver {\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    public void onResume() {\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    public void onPause() {\n    }\n}\naLifecycleOwner.getLifecycle().addObserver(new MyObserver());\n```\n\n### LifeCycleOwner\n\n`LifeCycleOwner`是一个只有一个方法的接口用于表明其有一个LifeCycle对象。这个方法为`getLifecycle()`。\n这个对象给Acitivity，Fragment和LifeCycle提供了一个很好的抽象关系，Activity和Fragment只要实现这个接口就能配合LifeCycle实现生命周期监听。\n\n> 注意：由于目前LifeCycle处于alpha阶段，所以Fragment和AppCompatActivity并不会实现这些方法，在此之前，可以使用`LifecycleActivity`和`LifecycleFragment`。等LifeCycle趋于稳定后，Fragment和AppCompatActivity会默认实现这些。\n\n\n对于之前的位置监听的例子，我们可以让`MyLocationListener`继承LifecycleObserver，在onCreate中使用LifeCycle进行初始化，剩下的问题则不必担心了。因为`MyLocationListener`有能力进行生命周期的判断。\n\n```java\nclass MyActivity extends LifecycleActivity {\n    private MyLocationListener myLocationListener;\n\n    public void onCreate(...) {\n        //此处进行初始化getLifecycle()传入LifeCycle对象\n        myLocationListener = new MyLocationListener(this, getLifecycle(), location -> {\n            // update UI\n        });\n        //检测用户状态并启用监听\n        Util.checkUserStatus(result -> {\n            if (result) {\n                myLocationListener.enable();\n            }\n        });\n  }\n}\n\n```\n下面看一下MyLocationListener\n\n```java\nclass MyLocationListener implements LifecycleObserver {\n    private boolean enabled = false;\n    public MyLocationListener(Context context, Lifecycle lifecycle, Callback callback) {\n       ...\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_START)\n    void start() {\n        if (enabled) {\n           // connect\n        }\n    }\n\n    public void enable() {\n        enabled = true;\n        //⓵\n        if (lifecycle.getState().isAtLeast(STARTED)) {\n            // connect if not connected\n        }\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n    void stop() {\n        // disconnect if connected\n    }\n}\n```\nLifeCycle最重要的特性就是在⓵处，他可以提供主动查询生命周期状态的方法。这样就避免了上面遇到的`myLocationListener.start()`在`myLocationListener.stop()`后面调用的问题。\n\n通过以上的实现，我们的`LocationListener`是完全的生命周期感知了，它可以进行自己的初始化和资源清理而不必受Activity或者Fragment的管理。这时候如果我们在其他Activity或者Fragment中使用`LocationListener`，我们只需要初始化它就行了，不必再担心生命周期对它的影响，因为它内部会做好这一切。\n\n通过LefeCycle工作的类我们称之为`生命周期感知`。鼓励需要使用Android生命周期的类的库提供生命周期感知组件，以便客户端可以轻松地在客户端上集成这些类，而无需手动生命周期管理。\n\n`LiveData`就是生命周期感知组件的示例，将LiveData和ViewModel一起使用，可以在遵循Android生命周期的情况下，更容易的使用数据来填充UI。\n\n## 生命周期的最佳实践\n\n- 保持你的UI（Activity和Fragment）尽可能简洁。它们不应该试图获取它们的数据而是使用ViewModel来执行此操作，并通过LiveData的回调将数据更新到UI中。\n- 尝试编写数据驱动的UI，你的UI的责任是在数据更改时更新视图，或将用户操作通知给ViewModel。\n- 将你的数据逻辑放在ViewModel类中。 ViewModel应该作为UI和其他数据操作的连接器。值得注意的是，ViewModel并不负责提取数据（例如，从网络）。相反，ViewModel应该调用其他接口来执行此工作，然后将结果提供给UI。\n- 使用`Data Binding`可以让你的的UI代码变得相当干净利落。这将使你的UI更具声明性，并最大限度地减少书写UI更新的代码。如果您更喜欢在Java中执行此操作，请使用像`Butter Knife`这样的库来避免使用样板代码并进行更好的抽象。\n- 如果你有一个复杂的UI，请考虑创建一个Presenter类来处理UI修改。这通常是过度架构的，但可能有助于使你的UI更容易测试。\n- 不要在ViewModel中引用View或Activity上下文。如果ViewModel在Activity或View销毁的情况下依旧存活，这时将导致内存泄漏。\n\n## 补充\n在自定义的Activity或Fragment中实现LifeCycleOwner，可以实现`LifecycleRegistryOwner`这个接口。而不是继承（LifeCycleFragment和LifeCycleActivity）\n\n```java\npublic class MyFragment extends Fragment implements LifecycleRegistryOwner {\n    LifecycleRegistry lifecycleRegistry = new LifecycleRegistry(this);\n\n    @Override\n    public LifecycleRegistry getLifecycle() {\n        return lifecycleRegistry;\n    }\n}\n```\n\n如果你要在自定义的类中实现LifeCycleOwner，可以使用`LifecycleRegistry`,但是你需要主动向其转发生命周期的事件。但如果你自定义类是Fragment和Activity的话并且它们实现的是LifecycleRegistryOwner，那么事件转发都是自动完成的。\n","source":"_posts/android-arch-lifecycle.md","raw":"---\ntitle: Android官方架构组件介绍之LifeCycle[翻译]\ndate: 2017-05-19 17:07:10\ntags: android\ncover: http://cdn.zqlxtt.cn/final-architecture.png\n---\n\n> Google 2017 I/O开发者大会于近日召开，在开发者大会上谷歌除了发布了Android O等一些新产品之外，也对Android代码的架构做出了一个官方的回应。\n\n[Google 2017 I/O开发者大会Android架构组件介绍现场视频](http://www.bilibili.com/video/av10638148/index_8.html)\n<!-- more -->\n下面是官方提供的Android App开发的架构图：\n\n![google官方Android架构图](http://cdn.zqlxtt.cn/final-architecture.png)\n\n<!-- more -->\n从上图可以看到一些关键字：`ViewModel`,`LiveData`,`Room`等。其实看了上面视频的会发现Google官方Android架构组件一共包括以下几个：\n\n- LifeCycle ： 与Activity和Fragment的生命周期有关\n- LiveData ：异步可订阅数据，也是生命周期感知\n- ViewModel ：视图数据持有模型，也是生命周期感知\n- Room ：SQLite抽象层，用于简化SQLite数据存储\n\n这篇文章主要讲解LifeCycle在项目的简单用法。\n\n## AS中添加依赖\n\n首先在工程根目录的`build.gradle`中添加一下内容：\n\n```groovy\nallprojects {\n    repositories {\n        jcenter()\n        maven { url 'https://maven.google.com' }  //添加此行\n    }\n}\n```\n然后在应用目录下的`build.gradle`中添加以下依赖：\n\n```groovy\n//For Lifecycles, LiveData, and ViewModel\ncompile \"android.arch.lifecycle:runtime:1.0.0-alpha1\"\ncompile \"android.arch.lifecycle:extensions:1.0.0-alpha1\"\nannotationProcessor \"android.arch.lifecycle:compiler:1.0.0-alpha1\"\n\n//For Room\ncompile \"android.arch.persistence.room:runtime:1.0.0-alpha1\"\nannotationProcessor \"android.arch.persistence.room:compiler:1.0.0-alpha1\"\n```\n\n## LifeCycle相关使用\n\n在我们平时的项目中经常会遇到很多需要依赖生命周期的逻辑处理，比如有这么一个需求。\n在某个Activity我们需要在屏幕上展现用户的地理位置。简单的实现方法如下：\n\n```java\nclass MyLocationListener {\n    public MyLocationListener(Context context, Callback callback) {\n        // ...\n    }\n\n    void start() {\n        // connect to system location service\n    }\n\n    void stop() {\n        // disconnect from system location service\n    }\n}\n\nclass MyActivity extends AppCompatActivity {\n    private MyLocationListener myLocationListener;\n\n    public void onCreate(...) {\n        myLocationListener = new MyLocationListener(this, (location) -> {\n            // update UI\n        });\n  }\n\n    public void onStart() {\n        super.onStart();\n        myLocationListener.start();\n    }\n\n    public void onStop() {\n        super.onStop();\n        myLocationListener.stop();\n    }\n}\n```\n\n虽然以上代码看起来很简洁，但在实际项目中的onStart，onStop方法可能会变得相当庞大。\n此外，实际情况可能并不像上面这么简单，例如我们需要在start位置监听前做用户状态检测，检测是一个耗时的任务，那么很有可能在检测结束前用户提前退出了Activity，这时候就会导致`myLocationListener.start()`在`myLocationListener.stop()`后面调用，从而引起很多难以定位的问题。代码如下：\n\n```java\nclass MyActivity extends AppCompatActivity {\n    private MyLocationListener myLocationListener;\n\n    public void onCreate(...) {\n        myLocationListener = new MyLocationListener(this, location -> {\n            // update UI\n        });\n    }\n\n    public void onStart() {\n        super.onStart();\n        Util.checkUserStatus(result -> {\n            // what if this callback is invoked AFTER activity is stopped?\n            if (result) {\n                myLocationListener.start();\n            }\n        });\n    }\n\n    public void onStop() {\n        super.onStop();\n        myLocationListener.stop();\n    }\n}\n```\n\n这时候就该今天的主角`LifeCycle`出场了。它提供了一套接口帮助你处理这些问题。\n\n### LifeCycle\n\n`LifeCyle`类持有Activity或者Fragment的生命周期相关信息，并且支持其他对象监听这些状态。\n\n`LifeCyle`有两个枚举用于追踪生命周期中的状态。\n\n**Event**\n\n这是生命周期的事件类，会在Framework和LifeCycle间传递，这些事件映射到Activity和Fragment的回调事件中。\n\n**State**\n\nLifeCycle所持有Activity或Fragment的当前状态。\n\n一个类想要监听LifeCycle的状态，只需要给其方法加上注解：\n\n```java\npublic class MyObserver implements LifecycleObserver {\n    @OnLifecycleEvent(Lifecycle.Event.ON_RESUME)\n    public void onResume() {\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)\n    public void onPause() {\n    }\n}\naLifecycleOwner.getLifecycle().addObserver(new MyObserver());\n```\n\n### LifeCycleOwner\n\n`LifeCycleOwner`是一个只有一个方法的接口用于表明其有一个LifeCycle对象。这个方法为`getLifecycle()`。\n这个对象给Acitivity，Fragment和LifeCycle提供了一个很好的抽象关系，Activity和Fragment只要实现这个接口就能配合LifeCycle实现生命周期监听。\n\n> 注意：由于目前LifeCycle处于alpha阶段，所以Fragment和AppCompatActivity并不会实现这些方法，在此之前，可以使用`LifecycleActivity`和`LifecycleFragment`。等LifeCycle趋于稳定后，Fragment和AppCompatActivity会默认实现这些。\n\n\n对于之前的位置监听的例子，我们可以让`MyLocationListener`继承LifecycleObserver，在onCreate中使用LifeCycle进行初始化，剩下的问题则不必担心了。因为`MyLocationListener`有能力进行生命周期的判断。\n\n```java\nclass MyActivity extends LifecycleActivity {\n    private MyLocationListener myLocationListener;\n\n    public void onCreate(...) {\n        //此处进行初始化getLifecycle()传入LifeCycle对象\n        myLocationListener = new MyLocationListener(this, getLifecycle(), location -> {\n            // update UI\n        });\n        //检测用户状态并启用监听\n        Util.checkUserStatus(result -> {\n            if (result) {\n                myLocationListener.enable();\n            }\n        });\n  }\n}\n\n```\n下面看一下MyLocationListener\n\n```java\nclass MyLocationListener implements LifecycleObserver {\n    private boolean enabled = false;\n    public MyLocationListener(Context context, Lifecycle lifecycle, Callback callback) {\n       ...\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_START)\n    void start() {\n        if (enabled) {\n           // connect\n        }\n    }\n\n    public void enable() {\n        enabled = true;\n        //⓵\n        if (lifecycle.getState().isAtLeast(STARTED)) {\n            // connect if not connected\n        }\n    }\n\n    @OnLifecycleEvent(Lifecycle.Event.ON_STOP)\n    void stop() {\n        // disconnect if connected\n    }\n}\n```\nLifeCycle最重要的特性就是在⓵处，他可以提供主动查询生命周期状态的方法。这样就避免了上面遇到的`myLocationListener.start()`在`myLocationListener.stop()`后面调用的问题。\n\n通过以上的实现，我们的`LocationListener`是完全的生命周期感知了，它可以进行自己的初始化和资源清理而不必受Activity或者Fragment的管理。这时候如果我们在其他Activity或者Fragment中使用`LocationListener`，我们只需要初始化它就行了，不必再担心生命周期对它的影响，因为它内部会做好这一切。\n\n通过LefeCycle工作的类我们称之为`生命周期感知`。鼓励需要使用Android生命周期的类的库提供生命周期感知组件，以便客户端可以轻松地在客户端上集成这些类，而无需手动生命周期管理。\n\n`LiveData`就是生命周期感知组件的示例，将LiveData和ViewModel一起使用，可以在遵循Android生命周期的情况下，更容易的使用数据来填充UI。\n\n## 生命周期的最佳实践\n\n- 保持你的UI（Activity和Fragment）尽可能简洁。它们不应该试图获取它们的数据而是使用ViewModel来执行此操作，并通过LiveData的回调将数据更新到UI中。\n- 尝试编写数据驱动的UI，你的UI的责任是在数据更改时更新视图，或将用户操作通知给ViewModel。\n- 将你的数据逻辑放在ViewModel类中。 ViewModel应该作为UI和其他数据操作的连接器。值得注意的是，ViewModel并不负责提取数据（例如，从网络）。相反，ViewModel应该调用其他接口来执行此工作，然后将结果提供给UI。\n- 使用`Data Binding`可以让你的的UI代码变得相当干净利落。这将使你的UI更具声明性，并最大限度地减少书写UI更新的代码。如果您更喜欢在Java中执行此操作，请使用像`Butter Knife`这样的库来避免使用样板代码并进行更好的抽象。\n- 如果你有一个复杂的UI，请考虑创建一个Presenter类来处理UI修改。这通常是过度架构的，但可能有助于使你的UI更容易测试。\n- 不要在ViewModel中引用View或Activity上下文。如果ViewModel在Activity或View销毁的情况下依旧存活，这时将导致内存泄漏。\n\n## 补充\n在自定义的Activity或Fragment中实现LifeCycleOwner，可以实现`LifecycleRegistryOwner`这个接口。而不是继承（LifeCycleFragment和LifeCycleActivity）\n\n```java\npublic class MyFragment extends Fragment implements LifecycleRegistryOwner {\n    LifecycleRegistry lifecycleRegistry = new LifecycleRegistry(this);\n\n    @Override\n    public LifecycleRegistry getLifecycle() {\n        return lifecycleRegistry;\n    }\n}\n```\n\n如果你要在自定义的类中实现LifeCycleOwner，可以使用`LifecycleRegistry`,但是你需要主动向其转发生命周期的事件。但如果你自定义类是Fragment和Activity的话并且它们实现的是LifecycleRegistryOwner，那么事件转发都是自动完成的。\n","slug":"android-arch-lifecycle","published":1,"updated":"2024-08-21T03:16:19.780Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vp000e5p6t4ss151rw","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>Google 2017 I/O开发者大会于近日召开，在开发者大会上谷歌除了发布了Android O等一些新产品之外，也对Android代码的架构做出了一个官方的回应。</p>\n</blockquote>\n<p><a href=\"http://www.bilibili.com/video/av10638148/index_8.html\">Google 2017 I/O开发者大会Android架构组件介绍现场视频</a></p>\n<span id=\"more\"></span>\n<p>下面是官方提供的Android App开发的架构图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/final-architecture.png\" alt=\"google官方Android架构图\"></p>\n<!-- more -->\n<p>从上图可以看到一些关键字：<code>ViewModel</code>,<code>LiveData</code>,<code>Room</code>等。其实看了上面视频的会发现Google官方Android架构组件一共包括以下几个：</p>\n<ul>\n<li>LifeCycle ： 与Activity和Fragment的生命周期有关</li>\n<li>LiveData ：异步可订阅数据，也是生命周期感知</li>\n<li>ViewModel ：视图数据持有模型，也是生命周期感知</li>\n<li>Room ：SQLite抽象层，用于简化SQLite数据存储</li>\n</ul>\n<p>这篇文章主要讲解LifeCycle在项目的简单用法。</p>\n<h2 id=\"AS中添加依赖\"><a href=\"#AS中添加依赖\" class=\"headerlink\" title=\"AS中添加依赖\"></a>AS中添加依赖</h2><p>首先在工程根目录的<code>build.gradle</code>中添加一下内容：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://maven.google.com&#x27;</span> &#125;  <span class=\"comment\">//添加此行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在应用目录下的<code>build.gradle</code>中添加以下依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//For Lifecycles, LiveData, and ViewModel</span></span><br><span class=\"line\">compile <span class=\"string\">&quot;android.arch.lifecycle:runtime:1.0.0-alpha1&quot;</span></span><br><span class=\"line\">compile <span class=\"string\">&quot;android.arch.lifecycle:extensions:1.0.0-alpha1&quot;</span></span><br><span class=\"line\">annotationProcessor <span class=\"string\">&quot;android.arch.lifecycle:compiler:1.0.0-alpha1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//For Room</span></span><br><span class=\"line\">compile <span class=\"string\">&quot;android.arch.persistence.room:runtime:1.0.0-alpha1&quot;</span></span><br><span class=\"line\">annotationProcessor <span class=\"string\">&quot;android.arch.persistence.room:compiler:1.0.0-alpha1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LifeCycle相关使用\"><a href=\"#LifeCycle相关使用\" class=\"headerlink\" title=\"LifeCycle相关使用\"></a>LifeCycle相关使用</h2><p>在我们平时的项目中经常会遇到很多需要依赖生命周期的逻辑处理，比如有这么一个需求。<br>在某个Activity我们需要在屏幕上展现用户的地理位置。简单的实现方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocationListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocationListener</span><span class=\"params\">(Context context, Callback callback)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// connect to system location service</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// disconnect from system location service</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyLocationListener myLocationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(...)</span> &#123;</span><br><span class=\"line\">        myLocationListener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyLocationListener</span>(<span class=\"built_in\">this</span>, (location) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        myLocationListener.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        myLocationListener.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然以上代码看起来很简洁，但在实际项目中的onStart，onStop方法可能会变得相当庞大。<br>此外，实际情况可能并不像上面这么简单，例如我们需要在start位置监听前做用户状态检测，检测是一个耗时的任务，那么很有可能在检测结束前用户提前退出了Activity，这时候就会导致<code>myLocationListener.start()</code>在<code>myLocationListener.stop()</code>后面调用，从而引起很多难以定位的问题。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyLocationListener myLocationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(...)</span> &#123;</span><br><span class=\"line\">        myLocationListener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyLocationListener</span>(<span class=\"built_in\">this</span>, location -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// what if this callback is invoked AFTER activity is stopped?</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                myLocationListener.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        myLocationListener.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候就该今天的主角<code>LifeCycle</code>出场了。它提供了一套接口帮助你处理这些问题。</p>\n<h3 id=\"LifeCycle\"><a href=\"#LifeCycle\" class=\"headerlink\" title=\"LifeCycle\"></a>LifeCycle</h3><p><code>LifeCyle</code>类持有Activity或者Fragment的生命周期相关信息，并且支持其他对象监听这些状态。</p>\n<p><code>LifeCyle</code>有两个枚举用于追踪生命周期中的状态。</p>\n<p><strong>Event</strong></p>\n<p>这是生命周期的事件类，会在Framework和LifeCycle间传递，这些事件映射到Activity和Fragment的回调事件中。</p>\n<p><strong>State</strong></p>\n<p>LifeCycle所持有Activity或Fragment的当前状态。</p>\n<p>一个类想要监听LifeCycle的状态，只需要给其方法加上注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyObserver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleObserver</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aLifecycleOwner.getLifecycle().addObserver(<span class=\"keyword\">new</span> <span class=\"title class_\">MyObserver</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LifeCycleOwner\"><a href=\"#LifeCycleOwner\" class=\"headerlink\" title=\"LifeCycleOwner\"></a>LifeCycleOwner</h3><p><code>LifeCycleOwner</code>是一个只有一个方法的接口用于表明其有一个LifeCycle对象。这个方法为<code>getLifecycle()</code>。<br>这个对象给Acitivity，Fragment和LifeCycle提供了一个很好的抽象关系，Activity和Fragment只要实现这个接口就能配合LifeCycle实现生命周期监听。</p>\n<blockquote>\n<p>注意：由于目前LifeCycle处于alpha阶段，所以Fragment和AppCompatActivity并不会实现这些方法，在此之前，可以使用<code>LifecycleActivity</code>和<code>LifecycleFragment</code>。等LifeCycle趋于稳定后，Fragment和AppCompatActivity会默认实现这些。</p>\n</blockquote>\n<p>对于之前的位置监听的例子，我们可以让<code>MyLocationListener</code>继承LifecycleObserver，在onCreate中使用LifeCycle进行初始化，剩下的问题则不必担心了。因为<code>MyLocationListener</code>有能力进行生命周期的判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyLocationListener myLocationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(...)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//此处进行初始化getLifecycle()传入LifeCycle对象</span></span><br><span class=\"line\">        myLocationListener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyLocationListener</span>(<span class=\"built_in\">this</span>, getLifecycle(), location -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//检测用户状态并启用监听</span></span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                myLocationListener.enable();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面看一下MyLocationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocationListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleObserver</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabled</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocationListener</span><span class=\"params\">(Context context, Lifecycle lifecycle, Callback callback)</span> &#123;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enabled) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// connect</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">enable</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//⓵</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycle.getState().isAtLeast(STARTED)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// connect if not connected</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// disconnect if connected</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LifeCycle最重要的特性就是在⓵处，他可以提供主动查询生命周期状态的方法。这样就避免了上面遇到的<code>myLocationListener.start()</code>在<code>myLocationListener.stop()</code>后面调用的问题。</p>\n<p>通过以上的实现，我们的<code>LocationListener</code>是完全的生命周期感知了，它可以进行自己的初始化和资源清理而不必受Activity或者Fragment的管理。这时候如果我们在其他Activity或者Fragment中使用<code>LocationListener</code>，我们只需要初始化它就行了，不必再担心生命周期对它的影响，因为它内部会做好这一切。</p>\n<p>通过LefeCycle工作的类我们称之为<code>生命周期感知</code>。鼓励需要使用Android生命周期的类的库提供生命周期感知组件，以便客户端可以轻松地在客户端上集成这些类，而无需手动生命周期管理。</p>\n<p><code>LiveData</code>就是生命周期感知组件的示例，将LiveData和ViewModel一起使用，可以在遵循Android生命周期的情况下，更容易的使用数据来填充UI。</p>\n<h2 id=\"生命周期的最佳实践\"><a href=\"#生命周期的最佳实践\" class=\"headerlink\" title=\"生命周期的最佳实践\"></a>生命周期的最佳实践</h2><ul>\n<li>保持你的UI（Activity和Fragment）尽可能简洁。它们不应该试图获取它们的数据而是使用ViewModel来执行此操作，并通过LiveData的回调将数据更新到UI中。</li>\n<li>尝试编写数据驱动的UI，你的UI的责任是在数据更改时更新视图，或将用户操作通知给ViewModel。</li>\n<li>将你的数据逻辑放在ViewModel类中。 ViewModel应该作为UI和其他数据操作的连接器。值得注意的是，ViewModel并不负责提取数据（例如，从网络）。相反，ViewModel应该调用其他接口来执行此工作，然后将结果提供给UI。</li>\n<li>使用<code>Data Binding</code>可以让你的的UI代码变得相当干净利落。这将使你的UI更具声明性，并最大限度地减少书写UI更新的代码。如果您更喜欢在Java中执行此操作，请使用像<code>Butter Knife</code>这样的库来避免使用样板代码并进行更好的抽象。</li>\n<li>如果你有一个复杂的UI，请考虑创建一个Presenter类来处理UI修改。这通常是过度架构的，但可能有助于使你的UI更容易测试。</li>\n<li>不要在ViewModel中引用View或Activity上下文。如果ViewModel在Activity或View销毁的情况下依旧存活，这时将导致内存泄漏。</li>\n</ul>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>在自定义的Activity或Fragment中实现LifeCycleOwner，可以实现<code>LifecycleRegistryOwner</code>这个接口。而不是继承（LifeCycleFragment和LifeCycleActivity）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleRegistryOwner</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">LifecycleRegistry</span> <span class=\"variable\">lifecycleRegistry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleRegistry</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LifecycleRegistry <span class=\"title function_\">getLifecycle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你要在自定义的类中实现LifeCycleOwner，可以使用<code>LifecycleRegistry</code>,但是你需要主动向其转发生命周期的事件。但如果你自定义类是Fragment和Activity的话并且它们实现的是LifecycleRegistryOwner，那么事件转发都是自动完成的。</p>\n","excerpt":"<blockquote>\n<p>Google 2017 I/O开发者大会于近日召开，在开发者大会上谷歌除了发布了Android O等一些新产品之外，也对Android代码的架构做出了一个官方的回应。</p>\n</blockquote>\n<p><a href=\"http://www.bilibili.com/video/av10638148/index_8.html\">Google 2017 I/O开发者大会Android架构组件介绍现场视频</a></p>","more":"<p>下面是官方提供的Android App开发的架构图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/final-architecture.png\" alt=\"google官方Android架构图\"></p>\n<!-- more -->\n<p>从上图可以看到一些关键字：<code>ViewModel</code>,<code>LiveData</code>,<code>Room</code>等。其实看了上面视频的会发现Google官方Android架构组件一共包括以下几个：</p>\n<ul>\n<li>LifeCycle ： 与Activity和Fragment的生命周期有关</li>\n<li>LiveData ：异步可订阅数据，也是生命周期感知</li>\n<li>ViewModel ：视图数据持有模型，也是生命周期感知</li>\n<li>Room ：SQLite抽象层，用于简化SQLite数据存储</li>\n</ul>\n<p>这篇文章主要讲解LifeCycle在项目的简单用法。</p>\n<h2 id=\"AS中添加依赖\"><a href=\"#AS中添加依赖\" class=\"headerlink\" title=\"AS中添加依赖\"></a>AS中添加依赖</h2><p>首先在工程根目录的<code>build.gradle</code>中添加一下内容：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">allprojects &#123;</span><br><span class=\"line\">    repositories &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">        maven &#123; url <span class=\"string\">&#x27;https://maven.google.com&#x27;</span> &#125;  <span class=\"comment\">//添加此行</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后在应用目录下的<code>build.gradle</code>中添加以下依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//For Lifecycles, LiveData, and ViewModel</span></span><br><span class=\"line\">compile <span class=\"string\">&quot;android.arch.lifecycle:runtime:1.0.0-alpha1&quot;</span></span><br><span class=\"line\">compile <span class=\"string\">&quot;android.arch.lifecycle:extensions:1.0.0-alpha1&quot;</span></span><br><span class=\"line\">annotationProcessor <span class=\"string\">&quot;android.arch.lifecycle:compiler:1.0.0-alpha1&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//For Room</span></span><br><span class=\"line\">compile <span class=\"string\">&quot;android.arch.persistence.room:runtime:1.0.0-alpha1&quot;</span></span><br><span class=\"line\">annotationProcessor <span class=\"string\">&quot;android.arch.persistence.room:compiler:1.0.0-alpha1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"LifeCycle相关使用\"><a href=\"#LifeCycle相关使用\" class=\"headerlink\" title=\"LifeCycle相关使用\"></a>LifeCycle相关使用</h2><p>在我们平时的项目中经常会遇到很多需要依赖生命周期的逻辑处理，比如有这么一个需求。<br>在某个Activity我们需要在屏幕上展现用户的地理位置。简单的实现方法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocationListener</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocationListener</span><span class=\"params\">(Context context, Callback callback)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// connect to system location service</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// disconnect from system location service</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyLocationListener myLocationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(...)</span> &#123;</span><br><span class=\"line\">        myLocationListener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyLocationListener</span>(<span class=\"built_in\">this</span>, (location) -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        myLocationListener.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        myLocationListener.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>虽然以上代码看起来很简洁，但在实际项目中的onStart，onStop方法可能会变得相当庞大。<br>此外，实际情况可能并不像上面这么简单，例如我们需要在start位置监听前做用户状态检测，检测是一个耗时的任务，那么很有可能在检测结束前用户提前退出了Activity，这时候就会导致<code>myLocationListener.start()</code>在<code>myLocationListener.stop()</code>后面调用，从而引起很多难以定位的问题。代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyLocationListener myLocationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(...)</span> &#123;</span><br><span class=\"line\">        myLocationListener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyLocationListener</span>(<span class=\"built_in\">this</span>, location -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStart</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStart();</span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// what if this callback is invoked AFTER activity is stopped?</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                myLocationListener.start();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onStop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onStop();</span><br><span class=\"line\">        myLocationListener.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这时候就该今天的主角<code>LifeCycle</code>出场了。它提供了一套接口帮助你处理这些问题。</p>\n<h3 id=\"LifeCycle\"><a href=\"#LifeCycle\" class=\"headerlink\" title=\"LifeCycle\"></a>LifeCycle</h3><p><code>LifeCyle</code>类持有Activity或者Fragment的生命周期相关信息，并且支持其他对象监听这些状态。</p>\n<p><code>LifeCyle</code>有两个枚举用于追踪生命周期中的状态。</p>\n<p><strong>Event</strong></p>\n<p>这是生命周期的事件类，会在Framework和LifeCycle间传递，这些事件映射到Activity和Fragment的回调事件中。</p>\n<p><strong>State</strong></p>\n<p>LifeCycle所持有Activity或Fragment的当前状态。</p>\n<p>一个类想要监听LifeCycle的状态，只需要给其方法加上注解：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyObserver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleObserver</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_RESUME)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResume</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_PAUSE)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPause</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">aLifecycleOwner.getLifecycle().addObserver(<span class=\"keyword\">new</span> <span class=\"title class_\">MyObserver</span>());</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"LifeCycleOwner\"><a href=\"#LifeCycleOwner\" class=\"headerlink\" title=\"LifeCycleOwner\"></a>LifeCycleOwner</h3><p><code>LifeCycleOwner</code>是一个只有一个方法的接口用于表明其有一个LifeCycle对象。这个方法为<code>getLifecycle()</code>。<br>这个对象给Acitivity，Fragment和LifeCycle提供了一个很好的抽象关系，Activity和Fragment只要实现这个接口就能配合LifeCycle实现生命周期监听。</p>\n<blockquote>\n<p>注意：由于目前LifeCycle处于alpha阶段，所以Fragment和AppCompatActivity并不会实现这些方法，在此之前，可以使用<code>LifecycleActivity</code>和<code>LifecycleFragment</code>。等LifeCycle趋于稳定后，Fragment和AppCompatActivity会默认实现这些。</p>\n</blockquote>\n<p>对于之前的位置监听的例子，我们可以让<code>MyLocationListener</code>继承LifecycleObserver，在onCreate中使用LifeCycle进行初始化，剩下的问题则不必担心了。因为<code>MyLocationListener</code>有能力进行生命周期的判断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleActivity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyLocationListener myLocationListener;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(...)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//此处进行初始化getLifecycle()传入LifeCycle对象</span></span><br><span class=\"line\">        myLocationListener = <span class=\"keyword\">new</span> <span class=\"title class_\">MyLocationListener</span>(<span class=\"built_in\">this</span>, getLifecycle(), location -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// update UI</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//检测用户状态并启用监听</span></span><br><span class=\"line\">        Util.checkUserStatus(result -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result) &#123;</span><br><span class=\"line\">                myLocationListener.enable();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>下面看一下MyLocationListener</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocationListener</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleObserver</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"variable\">enabled</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocationListener</span><span class=\"params\">(Context context, Lifecycle lifecycle, Callback callback)</span> &#123;</span><br><span class=\"line\">       ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_START)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (enabled) &#123;</span><br><span class=\"line\">           <span class=\"comment\">// connect</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">enable</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        enabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"comment\">//⓵</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lifecycle.getState().isAtLeast(STARTED)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// connect if not connected</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@OnLifecycleEvent(Lifecycle.Event.ON_STOP)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// disconnect if connected</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>LifeCycle最重要的特性就是在⓵处，他可以提供主动查询生命周期状态的方法。这样就避免了上面遇到的<code>myLocationListener.start()</code>在<code>myLocationListener.stop()</code>后面调用的问题。</p>\n<p>通过以上的实现，我们的<code>LocationListener</code>是完全的生命周期感知了，它可以进行自己的初始化和资源清理而不必受Activity或者Fragment的管理。这时候如果我们在其他Activity或者Fragment中使用<code>LocationListener</code>，我们只需要初始化它就行了，不必再担心生命周期对它的影响，因为它内部会做好这一切。</p>\n<p>通过LefeCycle工作的类我们称之为<code>生命周期感知</code>。鼓励需要使用Android生命周期的类的库提供生命周期感知组件，以便客户端可以轻松地在客户端上集成这些类，而无需手动生命周期管理。</p>\n<p><code>LiveData</code>就是生命周期感知组件的示例，将LiveData和ViewModel一起使用，可以在遵循Android生命周期的情况下，更容易的使用数据来填充UI。</p>\n<h2 id=\"生命周期的最佳实践\"><a href=\"#生命周期的最佳实践\" class=\"headerlink\" title=\"生命周期的最佳实践\"></a>生命周期的最佳实践</h2><ul>\n<li>保持你的UI（Activity和Fragment）尽可能简洁。它们不应该试图获取它们的数据而是使用ViewModel来执行此操作，并通过LiveData的回调将数据更新到UI中。</li>\n<li>尝试编写数据驱动的UI，你的UI的责任是在数据更改时更新视图，或将用户操作通知给ViewModel。</li>\n<li>将你的数据逻辑放在ViewModel类中。 ViewModel应该作为UI和其他数据操作的连接器。值得注意的是，ViewModel并不负责提取数据（例如，从网络）。相反，ViewModel应该调用其他接口来执行此工作，然后将结果提供给UI。</li>\n<li>使用<code>Data Binding</code>可以让你的的UI代码变得相当干净利落。这将使你的UI更具声明性，并最大限度地减少书写UI更新的代码。如果您更喜欢在Java中执行此操作，请使用像<code>Butter Knife</code>这样的库来避免使用样板代码并进行更好的抽象。</li>\n<li>如果你有一个复杂的UI，请考虑创建一个Presenter类来处理UI修改。这通常是过度架构的，但可能有助于使你的UI更容易测试。</li>\n<li>不要在ViewModel中引用View或Activity上下文。如果ViewModel在Activity或View销毁的情况下依旧存活，这时将导致内存泄漏。</li>\n</ul>\n<h2 id=\"补充\"><a href=\"#补充\" class=\"headerlink\" title=\"补充\"></a>补充</h2><p>在自定义的Activity或Fragment中实现LifeCycleOwner，可以实现<code>LifecycleRegistryOwner</code>这个接口。而不是继承（LifeCycleFragment和LifeCycleActivity）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Fragment</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LifecycleRegistryOwner</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">LifecycleRegistry</span> <span class=\"variable\">lifecycleRegistry</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">LifecycleRegistry</span>(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LifecycleRegistry <span class=\"title function_\">getLifecycle</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lifecycleRegistry;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果你要在自定义的类中实现LifeCycleOwner，可以使用<code>LifecycleRegistry</code>,但是你需要主动向其转发生命周期的事件。但如果你自定义类是Fragment和Activity的话并且它们实现的是LifecycleRegistryOwner，那么事件转发都是自动完成的。</p>"},{"title":"Android OpenGL ES 入门 1 - GLSurfaceView 简单介绍","date":"2021-01-20T15:05:41.000Z","_content":"\n在 Android 应用层我们如果要使用 OpenGL 进行绘制，可以选择 Android 平台给我提供的 GLSurfaceView 和 GLSurfaceView.Renderer。\n其中 GLSurfaceView 是 SurfaceView 的子类，GLSurfaceView.Renderer 为我们在 GLSurfaceView 上渲染提供了回调。\n\n简单写一个例子，首先是定义 Renderer：\n\n```kotlin\nclass MyRenderer : GLSurfaceView.Renderer {\n    override fun onDrawFrame(gl: GL10?) {\n        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT)\n    }\n\n    override fun onSurfaceChanged(gl: GL10?, width: Int, height: Int) {\n        GLES32.glViewport(0, 0, width, height)\n    }\n\n    override fun onSurfaceCreated(gl: GL10?, config: EGLConfig?) {\n        GLES32.glClearColor(1.0F, 0F, 0F, 1F)\n    }\n}\n```\n\n<!--more-->\n在上面的代码中，根据以往经验首先被回调的应该是 `onSurfaceCreated` 方法，在这个方法中，我们设置 OpenGL 的清屏颜色为红色。接着在 `onSurfaceChanged` 设置 OpenGL 的视窗大小。最后在 `onDrawFrame` 回调中进行 OpenGL 的清屏操作。\n\n自定义一个 Renderer 就是这么简单，接下来是自定义 GLSurfaceView：\n\n```kotlin\nclass MyGLSurfaceView(context: Context) : GLSurfaceView(context) {\n    private val renderer: Renderer\n\n    init {\n        renderer = MyRenderer()\n        setRenderer(renderer)\n    }\n}\n```\n自定义 GLSurfaceView 也是非常简单，将 MyRenderer 初始化，然后通过 `setRenderer` 方法设置给 GLSurfaceView 即可。\n\n最后是在 Activity 中使用 MyGLSurfaceView：\n```kotlin\nclass GLSurfaceViewActivity : AppCompatActivity() {\n\n    private lateinit var glSurfaceView: SurfaceView\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        glSurfaceView = MyGLSurfaceView(this)\n        setContentView(glSurfaceView)\n    }\n}\n```\n很简答，不多说了，最后是运行结果图：\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg)\n\n我们代码中没有调用绘制命令，这个红色是怎么绘制出来的呢？其实这是 OpenGL 的一个内置方法，在 OpenGL 每次渲染前，都需要对上一次的绘制做清屏操作，不然两次绘制的内容就会叠加在一起。\n从上面的代码中可以看出来 GLSurfaceView 帮我们做了很多 OpenGL 的初始化工作，当然想要使用 OpenGL 绘制，在 Android 平台上还少不了 EGL 库，GLSurfaceView 同样给我们做了 EGL 的初始化，让我们将注意力集中在 OpenGL 的绘制上。\n\n后面我会化点时间，重点讲一下 EGL 的初始化以及更多 OpenGL 的渲染知识。","source":"_posts/android-glsurfaceview-overview.md","raw":"---\ntitle: Android OpenGL ES 入门 1 - GLSurfaceView 简单介绍\ndate: 2021-01-20 23:05:41\ntags: \n - opengl\n - android\n---\n\n在 Android 应用层我们如果要使用 OpenGL 进行绘制，可以选择 Android 平台给我提供的 GLSurfaceView 和 GLSurfaceView.Renderer。\n其中 GLSurfaceView 是 SurfaceView 的子类，GLSurfaceView.Renderer 为我们在 GLSurfaceView 上渲染提供了回调。\n\n简单写一个例子，首先是定义 Renderer：\n\n```kotlin\nclass MyRenderer : GLSurfaceView.Renderer {\n    override fun onDrawFrame(gl: GL10?) {\n        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT)\n    }\n\n    override fun onSurfaceChanged(gl: GL10?, width: Int, height: Int) {\n        GLES32.glViewport(0, 0, width, height)\n    }\n\n    override fun onSurfaceCreated(gl: GL10?, config: EGLConfig?) {\n        GLES32.glClearColor(1.0F, 0F, 0F, 1F)\n    }\n}\n```\n\n<!--more-->\n在上面的代码中，根据以往经验首先被回调的应该是 `onSurfaceCreated` 方法，在这个方法中，我们设置 OpenGL 的清屏颜色为红色。接着在 `onSurfaceChanged` 设置 OpenGL 的视窗大小。最后在 `onDrawFrame` 回调中进行 OpenGL 的清屏操作。\n\n自定义一个 Renderer 就是这么简单，接下来是自定义 GLSurfaceView：\n\n```kotlin\nclass MyGLSurfaceView(context: Context) : GLSurfaceView(context) {\n    private val renderer: Renderer\n\n    init {\n        renderer = MyRenderer()\n        setRenderer(renderer)\n    }\n}\n```\n自定义 GLSurfaceView 也是非常简单，将 MyRenderer 初始化，然后通过 `setRenderer` 方法设置给 GLSurfaceView 即可。\n\n最后是在 Activity 中使用 MyGLSurfaceView：\n```kotlin\nclass GLSurfaceViewActivity : AppCompatActivity() {\n\n    private lateinit var glSurfaceView: SurfaceView\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        glSurfaceView = MyGLSurfaceView(this)\n        setContentView(glSurfaceView)\n    }\n}\n```\n很简答，不多说了，最后是运行结果图：\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg)\n\n我们代码中没有调用绘制命令，这个红色是怎么绘制出来的呢？其实这是 OpenGL 的一个内置方法，在 OpenGL 每次渲染前，都需要对上一次的绘制做清屏操作，不然两次绘制的内容就会叠加在一起。\n从上面的代码中可以看出来 GLSurfaceView 帮我们做了很多 OpenGL 的初始化工作，当然想要使用 OpenGL 绘制，在 Android 平台上还少不了 EGL 库，GLSurfaceView 同样给我们做了 EGL 的初始化，让我们将注意力集中在 OpenGL 的绘制上。\n\n后面我会化点时间，重点讲一下 EGL 的初始化以及更多 OpenGL 的渲染知识。","slug":"android-glsurfaceview-overview","published":1,"updated":"2024-08-21T03:16:19.781Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vq000g5p6t46pa5jq6","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>在 Android 应用层我们如果要使用 OpenGL 进行绘制，可以选择 Android 平台给我提供的 GLSurfaceView 和 GLSurfaceView.Renderer。<br>其中 GLSurfaceView 是 SurfaceView 的子类，GLSurfaceView.Renderer 为我们在 GLSurfaceView 上渲染提供了回调。</p>\n<p>简单写一个例子，首先是定义 Renderer：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyRenderer</span> : <span class=\"type\">GLSurfaceView.Renderer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(gl: <span class=\"type\">GL10</span>?)</span></span> &#123;</span><br><span class=\"line\">        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(gl: <span class=\"type\">GL10</span>?, width: <span class=\"type\">Int</span>, height: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        GLES32.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(gl: <span class=\"type\">GL10</span>?, config: <span class=\"type\">EGLConfig</span>?)</span></span> &#123;</span><br><span class=\"line\">        GLES32.glClearColor(<span class=\"number\">1.0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">1F</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<span id=\"more\"></span>\n<p>在上面的代码中，根据以往经验首先被回调的应该是 <code>onSurfaceCreated</code> 方法，在这个方法中，我们设置 OpenGL 的清屏颜色为红色。接着在 <code>onSurfaceChanged</code> 设置 OpenGL 的视窗大小。最后在 <code>onDrawFrame</code> 回调中进行 OpenGL 的清屏操作。</p>\n<p>自定义一个 Renderer 就是这么简单，接下来是自定义 GLSurfaceView：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyGLSurfaceView</span>(context: Context) : GLSurfaceView(context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> renderer: Renderer</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        renderer = MyRenderer()</span><br><span class=\"line\">        setRenderer(renderer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义 GLSurfaceView 也是非常简单，将 MyRenderer 初始化，然后通过 <code>setRenderer</code> 方法设置给 GLSurfaceView 即可。</p>\n<p>最后是在 Activity 中使用 MyGLSurfaceView：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GLSurfaceViewActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> glSurfaceView: SurfaceView</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        glSurfaceView = MyGLSurfaceView(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        setContentView(glSurfaceView)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简答，不多说了，最后是运行结果图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg\" alt=\"\"></p>\n<p>我们代码中没有调用绘制命令，这个红色是怎么绘制出来的呢？其实这是 OpenGL 的一个内置方法，在 OpenGL 每次渲染前，都需要对上一次的绘制做清屏操作，不然两次绘制的内容就会叠加在一起。<br>从上面的代码中可以看出来 GLSurfaceView 帮我们做了很多 OpenGL 的初始化工作，当然想要使用 OpenGL 绘制，在 Android 平台上还少不了 EGL 库，GLSurfaceView 同样给我们做了 EGL 的初始化，让我们将注意力集中在 OpenGL 的绘制上。</p>\n<p>后面我会化点时间，重点讲一下 EGL 的初始化以及更多 OpenGL 的渲染知识。</p>\n","excerpt":"<p>在 Android 应用层我们如果要使用 OpenGL 进行绘制，可以选择 Android 平台给我提供的 GLSurfaceView 和 GLSurfaceView.Renderer。<br>其中 GLSurfaceView 是 SurfaceView 的子类，GLSurfaceView.Renderer 为我们在 GLSurfaceView 上渲染提供了回调。</p>\n<p>简单写一个例子，首先是定义 Renderer：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyRenderer</span> : <span class=\"type\">GLSurfaceView.Renderer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onDrawFrame</span><span class=\"params\">(gl: <span class=\"type\">GL10</span>?)</span></span> &#123;</span><br><span class=\"line\">        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSurfaceChanged</span><span class=\"params\">(gl: <span class=\"type\">GL10</span>?, width: <span class=\"type\">Int</span>, height: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\">        GLES32.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onSurfaceCreated</span><span class=\"params\">(gl: <span class=\"type\">GL10</span>?, config: <span class=\"type\">EGLConfig</span>?)</span></span> &#123;</span><br><span class=\"line\">        GLES32.glClearColor(<span class=\"number\">1.0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">1F</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>在上面的代码中，根据以往经验首先被回调的应该是 <code>onSurfaceCreated</code> 方法，在这个方法中，我们设置 OpenGL 的清屏颜色为红色。接着在 <code>onSurfaceChanged</code> 设置 OpenGL 的视窗大小。最后在 <code>onDrawFrame</code> 回调中进行 OpenGL 的清屏操作。</p>\n<p>自定义一个 Renderer 就是这么简单，接下来是自定义 GLSurfaceView：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyGLSurfaceView</span>(context: Context) : GLSurfaceView(context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> renderer: Renderer</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        renderer = MyRenderer()</span><br><span class=\"line\">        setRenderer(renderer)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>自定义 GLSurfaceView 也是非常简单，将 MyRenderer 初始化，然后通过 <code>setRenderer</code> 方法设置给 GLSurfaceView 即可。</p>\n<p>最后是在 Activity 中使用 MyGLSurfaceView：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">GLSurfaceViewActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">lateinit</span> <span class=\"keyword\">var</span> glSurfaceView: SurfaceView</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        glSurfaceView = MyGLSurfaceView(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">        setContentView(glSurfaceView)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简答，不多说了，最后是运行结果图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg\" alt=\"\"></p>\n<p>我们代码中没有调用绘制命令，这个红色是怎么绘制出来的呢？其实这是 OpenGL 的一个内置方法，在 OpenGL 每次渲染前，都需要对上一次的绘制做清屏操作，不然两次绘制的内容就会叠加在一起。<br>从上面的代码中可以看出来 GLSurfaceView 帮我们做了很多 OpenGL 的初始化工作，当然想要使用 OpenGL 绘制，在 Android 平台上还少不了 EGL 库，GLSurfaceView 同样给我们做了 EGL 的初始化，让我们将注意力集中在 OpenGL 的绘制上。</p>\n<p>后面我会化点时间，重点讲一下 EGL 的初始化以及更多 OpenGL 的渲染知识。</p>"},{"title":"Android官方架构组件指南[翻译]","date":"2017-05-23T11:38:44.000Z","cover":"http://cdn.zqlxtt.cn/final-architecture.png","_content":"此指南适用于那些曾经或现在进行Android应用的基础开发，并希望了解和学习编写Android程序的最佳实践和架构。通过学习来构建强大的生产级别的应用。\n\n> **注意：**此指南默认你对Android开发有比较深的理解，熟知Android Framework。如果你还只是个Android开发新手，那么建议先学习下Android的基础知识。\n<!-- more -->\n## Android程序员面临的问题\n\n传统的桌面应用程序开发在大多数情况下，启动器快捷方式都有一个入口点，并作为一个单一的过程运行，但Android应用程序的结构更为复杂。典型的Android应用程序由多个应用程序组件构成，包括Activity，Fragment，Service，ContentProvider和Broadcast Receiver。\n\n大多数这些应用程序组件在Android操作系统使用的AndroidManifest中声明，以决定如何将应用程序集成到设备上来为用户提供完整的体验。尽管如前所述，桌面应用程序传统上是作为一个单一的进程运行的，但正确编写的Android应用程序则需要更灵活，因为用户通过设备上的不同应用程序编织方式，不断切换流程和任务。\n\n举个例子，当用户在社交App上打算分享一张照片，那么Android系统就会为此启动相机来完成此次请求。此时用户离开了社交App，但是这个用户体验是无缝连接的。相机可能又会触发并启动文件管理器来选择照片。最终回到社交App并分享照片。此外，在此过程中的任何时候，用户可能会被打电话中断，并在完成电话后再回来分享照片。\n\n在Android中，这种应用间跳转行为很常见，因此你的应用必须正确处理这些流程。请记住，移动设备是资源有限的，所以在任何时候，操作系统可能需要杀死一些应用来为新的应用腾出空间。\n\n你的应用程序的所有组件都可以被单独启动或无序启动，并且在任何时候由用户或系统销毁。因为应用程序组件是短暂的，它们的生命周期（创建和销毁时）不受你的控制，**因此你不应该将任何应用程序数据或状态存储在应用程序组件中**，并且应用程序组件不应相互依赖。\n\n## 常见的架构原理\n\n如果你无法使用应用程序组件来存储应用程序数据和状态，应如何构建应用程序？\n\n在你的App开发中你应该将重心放在**分层**上，如果将所有的代码都写在Activity或者Fragment中，那问题就大了。任何不是处理UI或跟操作系统交互的操作不应该放在这两个类中。尽量保持它们代码的精简，这样你可以避免很多与生命周期相关的问题。记住你并不能掌控Activity和Fragment，他们只是在你的App和Android系统间起了桥梁的作用。任何时候，Android系统可能会根据用户操作或其他因素（如低内存）来回收它们。最好尽量减少对他们的依赖，以提供坚实的用户体验。\n\n还有一点比较重要的就是**持久模型驱动UI**。使用持久模型主要是因为当你的UI被回收或者在没有网络的情况下还能正常给用户展示数据。`模型`是用来处理应用数据的组件，它们独立于应用中的视图和四大组件。因此模型的生命周期必然和UI是分离的。保持UI代码的整洁，会让你能更容易的管理和调整UI。让你的应用基于模型开发可以很好的管理你应用的数据并是你的应用更具测试性和持续性。\n\n## 应用架构推荐\n\n回到这篇文章的主题，来说说Android官方架构组件（一下简称架构）。一下会介绍如何在你的应用中实践这一架构模式。\n\n> **注意：**不可能存在某一种架构方式可以完美适合任何场景。话虽如此，这种架构应该是大多数用例的良好起点。如果你已经有了很好的Android应用程序架构方式，请继续保持。\n\n假设我们需要一个现实用户资料的UI，该用户的资料文件将使用REST API从服务端获取。\n\n### 构建用户界面\n\n我们的这个用户界面由一个`UserProfileFragment.java`文件和它的布局文件`user_profile_layout.xml`。\n\n为了驱动UI，数据模型需要持有下面两个数据：\n\n- **User ID:**用户的标识符。最好使用Fragment的参数将此信息传递到Fragment中。如果Android操作系统回收了Fragment，则会保留此信息，以便下次重新启动应用时，该ID可用。\n- **User Object:**传统的Java对象，代表用户的数据。\n\n为此，我们新建一个继承自ViewModel的名为`UserProfileViewModel`的模型来持有这个数据。\n\nViewModel提供特定UI组件的数据，例如Activity和Fragment，并处理与数据处理业务部分的通信，例如调用其他组件来加载数据或转发用户修改。ViewModel不了解View，并且不受UI的重建（如重由于旋转而导致的Activity的重建）的影响。\n\n现在我们有一下三个文件：\n\n- user_profile.xml: 视图的布局文件。\n- UserProfileViewModel.java: 持有UI数据的模型。\n- UserProfileFragment.java: 用于显示数据模型中的数据并和用户进行交互。\n\n一下是具体代码（为了简化，布局文件省略）。\n\n```java\npublic class UserProfileViewModel extends ViewModel {\n    private String userId;\n    private User user;\n\n    public void init(String userId) {\n        this.userId = userId;\n    }\n    public User getUser() {\n        return user;\n    }\n}\n```\n\n```java\npublic class UserProfileFragment extends LifecycleFragment {\n    private static final String UID_KEY = \"uid\";\n    private UserProfileViewModel viewModel;\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        String userId = getArguments().getString(UID_KEY);\n        viewModel = ViewModelProviders.of(this).get(UserProfileViewModel.class);\n        viewModel.init(userId);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater,\n                @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.user_profile, container, false);\n    }\n}\n```\n\n> **注意：**上面的UserProfileFragment继承自LifeCycleFragment而不是Fragment。当Lifecycle的Api稳定后，Fragment会默认实现LifeCycleOwner。\n\n\n现在，我们有三个文件，我们如何连接它们？毕竟，当ViewModel的用户字段被设置时，我们需要一种通知UI的方法。这里就要提到LiveData了。\n\n> LiveData是一个可观察的数据持有者。它允许应用程序中的组件观察LiveData对象持有的数据，而不会在它们之间创建显式和刚性的依赖路径。LiveData还尊重你的应用程序组件（Activity，Fragment，Service）的生命周期状态，并做正确的事情以防止内存泄漏，从而你的应用程序不会消耗更多的内存。\n\n如果你已经使用了想Rxjava活着Agrea这类第三方库，那么你可以使用它们代替LiveData，不过你需要处理好它们与组件生命周期之间的关系。\n\n现在我们使用`LiveData<User>`来代替UserProfileViewModel中的User字段。所以Fragment可以通过观察它来更新数据。LiveData值得称道的地方就在于它是生命周期感知的，当生命周期结束是，其上的观察者会被即使清理。\n\n```java\npublic class UserProfileViewModel extends ViewModel {\n    ...\n    private LiveData<User> user;\n    public LiveData<User> getUser() {\n        return user;\n    }\n}\n```\n然后将UserProfileFragment修改如下，观察数据并更新UI：\n\n```java\n@Override\npublic void onActivityCreated(@Nullable Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n    viewModel.getUser().observe(this, user -> {\n      // update UI\n    });\n}\n```\n一旦用户数据更新，onChanged回调将被调用然后UI会被刷新。\n\n如果你熟悉一些使用观察者模式第三方库，你会觉得奇怪，为什么没有在Fragment的onStop()方法中将观察者移除。对于LiveData来说这是没有必要的，因为它是生命周期感知的，这意味着如果UI处于不活动状态，它就不会调用观察者的回调来更新数据。并且在onDestroy后会自动移除。\n\n我们也不需要处理任何视图重建（如屏幕旋转）。ViewModel会自动恢复重建前的数据。当新的视图被创建出来后，它会接收到与之前相同的ViewModel实例，并且观察者的回调会被立刻调用，更新最新的数据。这也是ViewModel为什么不能直接引用视图对象，因为它的生命周期长于视图对象。\n\n### 获取数据\n\n现在我们将视图和模型连接起来，但是模型该怎么获取数据呢？在这个例子中，我们假设使用REST API从后台获取。我们将使用Retrofit来向后台请求数据。\n\n我们的retrofit类Webservice如下：\n\n```java\npublic interface Webservice {\n    /**\n     * @GET declares an HTTP GET request\n     * @Path(\"user\") annotation on the userId parameter marks it as a\n     * replacement for the {user} placeholder in the @GET path\n     */\n    @GET(\"/users/{user}\")\n    Call<User> getUser(@Path(\"user\") String userId);\n}\n```\n如果只是简单的实现，ViewModel可以直接操作Webservice来获取用户数据。虽然这样可以正常工作，但你的应用无法保证它的后续迭代。因为这样做将太多的责任让ViewModel来承担，这样就违反类之前讲到的分层原则。又因为ViewModel的生命周期是绑定在Activity和Fragment上的，所以当UI被销毁后如果丢失所有数据将是很差的用户体验。所以我们的ViewModel将和一个新的模块进行交互，这个模块叫Repository。\n\n> **Repository**模块负责处理数据。它为应用程序的其余部分提供了一个干净的API。他知道在数据更新时从哪里获取数据和调用哪些API调用。你可以将它们视为不同数据源（持久性模型，Web服务，缓存等）之间的中介者。\n\nUserRepository类如下：\n\n```java\npublic class UserRepository {\n    private Webservice webservice;\n    // ...\n    public LiveData<User> getUser(int userId) {\n        // This is not an optimal implementation, we'll fix it below\n        final MutableLiveData<User> data = new MutableLiveData<>();\n        webservice.getUser(userId).enqueue(new Callback<User>() {\n            @Override\n            public void onResponse(Call<User> call, Response<User> response) {\n                // error case is left out for brevity\n                data.setValue(response.body());\n            }\n        });\n        return data;\n    }\n}\n```\n虽然repository模块看上去没有必要，但他起着重要的作用。它为App的其他部分抽象出了数据源。现在我们的ViewModel并不知道数据是通过WebService来获取的，这意味着我们可以随意替换掉获取数据的实现。\n\n#### 管理组件间的依赖关系\n上面这种写法可以看出来UserRepository需要初始化Webservice实例，这虽然说起来简单，但要实现的话还需要知道Webservice的具体构造方法该如何写。这将加大代码的复杂度，另外UserRepository可能并不是唯一使用Webservice的对象，所以这种在内部构建Webservice实例显然是不推荐的，下面有两种模式来解决这个问题：\n\n- **依赖注入：**依赖注入允许类定义它们的依赖关系而不构造它们。在运行时，另一个类负责提供这些依赖关系。我们建议在Android应用程序中使用Google的Dagger 2库实现依赖注入。Dagger 2通过遍历依赖关系树自动构建对象，并在依赖关系上提供编译时保证。\n- **服务定位器：**服务定位器提供了一个注册表，其中类可以获取它们的依赖关系而不是构造它们。与依赖注入（DI）相比，实现起来相对容易，因此如果您不熟悉DI，请改用Service Locator。\n\n这些模式允许你扩展代码，因为它们提供明确的模式来管理依赖关系，而不会重复代码或增加复杂性。两者都允许交换实现进行测试;这是使用它们的主要好处之一。在这个例子中，我们将使用Dagger 2来管理依赖关系。\n\n### 连接ViewModel和Repository\n现在，我们的UserProfileViewModel可以改写成这样：\n\n```java\npublic class UserProfileViewModel extends ViewModel {\n    private LiveData<User> user;\n    private UserRepository userRepo;\n\n    @Inject // UserRepository parameter is provided by Dagger 2\n    public UserProfileViewModel(UserRepository userRepo) {\n        this.userRepo = userRepo;\n    }\n\n    public void init(String userId) {\n        if (this.user != null) {\n            // ViewModel is created per Fragment so\n            // we know the userId won't change\n            return;\n        }\n        user = userRepo.getUser(userId);\n    }\n\n    public LiveData<User> getUser() {\n        return this.user;\n    }\n}\n```\n\n### 缓存数据\n\n上面的Repository虽然网络请求做了封装，但是它依赖后台数据源，所以存在不足。\n\n上面的UserRepository实现的问题是，在获取数据之后，它不会保留在任何地方。如果用户离开UserProfileFragment并重新进来，则应用程序将重新获取数据。这是不好的，有两个原因：它浪费了宝贵的网络带宽和迫使用户等待新的查询完成。为了解决这个问题，我们将向我们的UserRepository添加一个新的数据源，它将把User对象缓存在内存中。如下：\n\n```java\n@Singleton  // informs Dagger that this class should be constructed once\npublic class UserRepository {\n    private Webservice webservice;\n    // simple in memory cache, details omitted for brevity\n    private UserCache userCache;\n    public LiveData<User> getUser(String userId) {\n        LiveData<User> cached = userCache.get(userId);\n        if (cached != null) {\n            return cached;\n        }\n\n        final MutableLiveData<User> data = new MutableLiveData<>();\n        userCache.put(userId, data);\n        // this is still suboptimal but better than before.\n        // a complete implementation must also handle the error cases.\n        webservice.getUser(userId).enqueue(new Callback<User>() {\n            @Override\n            public void onResponse(Call<User> call, Response<User> response) {\n                data.setValue(response.body());\n            }\n        });\n        return data;\n    }\n}\n```\n\n### 持久化数据\n在当前的实现中，如果用户旋转屏幕或离开并返回到应用程序，现有UI将立即可见，因为Repository会从内存中检索数据。但是，如果用户离开应用程序，并在Android操作系统杀死进程后几小时后又会怎么样？\n\n在目前的实现中，我们将需要从网络中再次获取数据。这不仅是一个糟糕的用户体验，也是浪费，因为它将使用移动数据来重新获取相同的数据。你以通过缓存Web请求来简单地解决这个问题，但它会产生新的问题。如果请求一个朋友列表而不是单个用户，会发生什么情况？那么你的应用程序可能会显示不一致的数据，这是最令人困惑的用户体验。例如，相同的用户的数据可能会不同，因为朋友列表请求和用户请求可以在不同的时间执行。你的应用需要合并他们，以避免显示不一致的数据。\n\n正确的处理方法是使用持久模型。这时候Room就派上用场了。\n\n> Room是一个对象映射库，它提供本地数据持久性和最少的样板代码。在编译时，它根据模式验证每个查询，从而错误的SQL查询会导致编译时错误，而不是运行时失败。Room抽象了使用原始SQL表和查询的一些基本实现细节。它还允许观察数据库数据（包括集合和连接查询）的更改，通过LiveData对象公开这些更改。\n\n要使用Room我们首先需要使用@Entity来定义实体：\n\n```java\n@Entity\nclass User {\n  @PrimaryKey\n  private int id;\n  private String name;\n  private String lastName;\n  // getters and setters for fields\n}\n```\n\n接着创建数据库类：\n\n```java\n@Database(entities = {User.class}, version = 1)\npublic abstract class MyDatabase extends RoomDatabase {\n}\n```\n\n值得注意的是MyDatabase是一个抽象了，Room会在编译期间提供它的一个实现类。\n\n接下来需要定义DAO：\n\n```java\n@Dao\npublic interface UserDao {\n    @Insert(onConflict = REPLACE)\n    void save(User user);\n    @Query(\"SELECT * FROM user WHERE id = :userId\")\n    LiveData<User> load(String userId);\n}\n```\n\n接着在MyDatabase中添加获取上面这个DAO的方法：\n\n```java\n@Database(entities = {User.class}, version = 1)\npublic abstract class MyDatabase extends RoomDatabase {\n    public abstract UserDao userDao();\n}\n```\n这里的load方法返回的是LiveData<User>，所以当相关数据库中的数据有任何变化时，Room都会通知LiveData上的处于活动状态的观察者。\n\n现在我们可以修改UserRepository了：\n\n```java\n@Singleton\npublic class UserRepository {\n    private final Webservice webservice;\n    private final UserDao userDao;\n    private final Executor executor;\n\n    @Inject\n    public UserRepository(Webservice webservice, UserDao userDao, Executor executor) {\n        this.webservice = webservice;\n        this.userDao = userDao;\n        this.executor = executor;\n    }\n\n    public LiveData<User> getUser(String userId) {\n        refreshUser(userId);\n        // return a LiveData directly from the database.\n        return userDao.load(userId);\n    }\n\n    private void refreshUser(final String userId) {\n        executor.execute(() -> {\n            // running in a background thread\n            // check if user was fetched recently\n            boolean userExists = userDao.hasUser(FRESH_TIMEOUT);\n            if (!userExists) {\n                // refresh the data\n                Response response = webservice.getUser(userId).execute();\n                // TODO check for error etc.\n                // Update the database.The LiveData will automatically refresh so\n                // we don't need to do anything else here besides updating the database\n                userDao.save(response.body());\n            }\n        });\n    }\n}\n```\n这里虽然我们将UserRepository的直接数据来源从Webservice改为本地数据库，但我们却不需要修改UserProfileViewModel或者UserProfileFragment。这就是抽象层带来的好处。这也给测试带来了方便，因为你可以提供一个虚假的UserRepository来测试你的UserProfileViewModel。\n\n现在，如果用户重新回到这个界面，他们会立刻看到数据，因为我们已经将数据做了持久化的保存。当然如果有用例需要，我们也可不展示太老旧的持久化数据。\n\n在一些用例中，比如下拉刷新，如果正处于网络请求中，那UI需要告诉用户正处于网络请求中。一个好的实践方式就是将UI与数据分离，因为UI可能因为各种原因被更新。从UI的角度来说，请求中的数据和本地数据类似，只是它还没有被持久化到数据库中。\n\n以下有两种解决方法：\n\n- 将getUser的返回值中加入网络状态。\n- 在Repository中提供一个可以返回刷新状态的方法。如果你只是想在用户通过下拉刷新来告诉用户目前的网络状态的话，那这个方法是比较适合的。\n\n#### 数据唯一来源\n\n在以上实例中，数据唯一来源是数据库，这样做的好处是用户可以基于稳定的数据库数据来更新页面，而不需要处理大量的网络请求状态。数据库有数据则使用，没有数据则等待其更新。\n\n### 测试\n我们之前提到分层可以个应用提供良好的测试能力，接下来就看看我们怎么测试不同的模块。\n\n- **用户界面与交互：**这是唯一一个需要使用到`Android UI Instrumentation test`的测试模块。测试UI的最好方法就是使用Espresso框架。你可以创建Fragment然后提供一个虚假的ViewModel。因为Fragment只跟ViewModel交互，所以虚拟一个ViewModel就足够了。\n- **ViewModel：**ViewModel可以用JUnit test进行测试。因为其不涉及界面与交互。而且你只需要虚拟UserRepository即可。\n- **UserRepository：**测试UserRepository同样使用JUnit test。你可以虚拟出Webservice和DAO。你可以通过使用正确的网络请求来请求数据，让后将数据通过DAO写入数据库。如果数据库中有相关数据则无需进行网络请求。\n- **UserDao：**对于DAO的测试，推荐使用instrumentation进行测试。因为此处无需UI，并且可以使用in-memory数据库来保证测试的封闭性，不会影响到磁盘上的数据库。\n- **Webservice：**保持测试的封闭性是相当重要的，因此即使是你的Webservice测试也应避免对后端进行网络呼叫。有很多第三方库提供这方面的支持。例如，MockWebServer是一个很棒的库，可以帮助你为你的测试创建一个假的本地服务器。\n\n### 架构图\n![架构图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d76112977fe3f19d.webp)\n\n## 指导原则\n编程是一个创意领域，构建Android应用程序也不例外。有多种方法来解决问题，无论是在多个Activity或Fragment之间传递数据，还是检索远程数据并将其在本地保持离线模式，或者是任何其他常见的场景。\n\n虽然以下建议不是强制性的，但经验告诉我们，遵循这些建议将使你的代码库从长远来看更加强大，可测试和可维护。\n\n- 在AndroidManifest中定义的Activity，Service，Broadcast Receiver等，它们不是数据源。相反，他们只是用于协调和展示数据。由于每个应用程序组件的寿命相当短，运行状态取决于用户与其设备的交互以及运行时的整体当前运行状况，所以不要将这些组件作为数据源。\n- 你需要在应用程序的各个模块之间创建明确界定的责任范围。例如，不要在不同的类或包之间传递用于加载网络数据的代码。同样，不要将数据缓存和数据绑定这两个责任完全不同的放在同一个类中。\n- 每个模块之间要竟可能少的相互暴露。不要抱有侥幸心理去公开一个关于模块的内部实现细节的接口。你可能会在短期内获得到便捷，但是随着代码库的发展，你将多付多次技术性债务。\n- 当你定义模块之间的交互时，请考虑如何使每个模块隔离。例如，拥有用于从网络中提取数据的定义良好的API将使得更容易测试在本地数据库中持久存在该数据的模块。相反，如果将这两个模块的逻辑组合在一起，或者将整个代码库中的网络代码放在一起，那么测试就更难（如果不是不可能）。\n- 你的应用程序的核心是什么让它独立出来。不要花时间重复轮子或一次又一次地编写相同的样板代码。相反，将精力集中在使你的应用程序独一无二的同时，让Android架构组件和其他推荐的库来处理重复的样板代码。\n- 保持尽可能多的相关联的新鲜数据，以便你的应用程序在设备处于脱机模式时可用。虽然你可以享受恒定和高速连接，但你的用户可能不会。\n- 你的Repository应指定一个数据源作为真实的单一来源。每当你的应用程序需要访问这些数据时，它应该始终源于真实的单一来源。\n\n\n## 扩展： 公开网络状态\n在上面的小结我们故意省略了网络错误和加载状态来保证例子的简洁性。在这一小结我们演示一种使用Resource类来封装数据及其状态。以此来公开网络状态。\n\n下面是简单的Resource实现：\n\n```java\n//a generic class that describes a data with a status\npublic class Resource<T> {\n    @NonNull public final Status status;\n    @Nullable public final T data;\n    @Nullable public final String message;\n    private Resource(@NonNull Status status, @Nullable T data, @Nullable String message) {\n        this.status = status;\n        this.data = data;\n        this.message = message;\n    }\n\n    public static <T> Resource<T> success(@NonNull T data) {\n        return new Resource<>(SUCCESS, data, null);\n    }\n\n    public static <T> Resource<T> error(String msg, @Nullable T data) {\n        return new Resource<>(ERROR, data, msg);\n    }\n\n    public static <T> Resource<T> loading(@Nullable T data) {\n        return new Resource<>(LOADING, data, null);\n    }\n}\n```\n以为从网络上抓取视频的同时在UI上显示数据库的旧数据是很常见的用例，所以我们要创建一个可以在多个地方重复使用的帮助类NetworkBoundResource。以下是NetworkBoundResource的决策树：\n\n![NetworkBoundResource的决策树](http://upload-images.jianshu.io/upload_images/2702499-f95e8769c20c53aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nNetworkBoundResource从观察数据库开始，当第一次从数据库加载完实体后，NetworkBoundResource会检查这个结果是否满足用来展示的需求，如不满足则需要从网上重新获取。当然以上两种情况可能同时发生，你希望先将数据显示在UI上的同时去网络上请求新数据。\n\n如果网络请求成果，则将结果保存到数据库，然后重新从数据库加载数据，如果网络请求失败，则直接传递错误信息。\n\n> **注意：**在上面的过程中可以看到当将新数据保存到数据库后，我们重新从数据库加载数据。虽然大部分情况我们不必如此，因为数据库会为我们传递此次更新。但另一方面，依赖数据库内部的更新机制并不是我们想要的如果更新的数据与旧数据一致，则数据谷不会做出更新提示。我们也不希望直接从网络请求中获取数据直接用于UI，因为这样违背了单一数据源的原则。\n\n下面是NetworkBoundResource类的公共api：\n\n```java\n// ResultType: Type for the Resource data\n// RequestType: Type for the API response\npublic abstract class NetworkBoundResource<ResultType, RequestType> {\n    // Called to save the result of the API response into the database\n    @WorkerThread\n    protected abstract void saveCallResult(@NonNull RequestType item);\n\n    // Called with the data in the database to decide whether it should be\n    // fetched from the network.\n    @MainThread\n    protected abstract boolean shouldFetch(@Nullable ResultType data);\n\n    // Called to get the cached data from the database\n    @NonNull @MainThread\n    protected abstract LiveData<ResultType> loadFromDb();\n\n    // Called to create the API call.\n    @NonNull @MainThread\n    protected abstract LiveData<ApiResponse<RequestType>> createCall();\n\n    // Called when the fetch fails. The child class may want to reset components\n    // like rate limiter.\n    @MainThread\n    protected void onFetchFailed() {\n    }\n\n    // returns a LiveData that represents the resource\n    public final LiveData<Resource<ResultType>> getAsLiveData() {\n        return result;\n    }\n}\n```\n注意到上面定义了两种泛型，ResultType和RequestType，因为从网络请求返回的数据类型可能会和数据库返回的不一致。\n\n另外注意到上面代码中的ApiResponse这个类，他是将Retroft2.Call转换成LiveData的一个简单封装。\n\n下面是NetworkBoundResource余下部分的实现：\n\n```java\npublic abstract class NetworkBoundResource<ResultType, RequestType> {\n    private final MediatorLiveData<Resource<ResultType>> result = new MediatorLiveData<>();\n\n    @MainThread\n    NetworkBoundResource() {\n        //1初始化NetworkBoundResource\n        result.setValue(Resource.loading(null));\n        //2从数据库加载本地数据\n        LiveData<ResultType> dbSource = loadFromDb();\n\n        result.addSource(dbSource, data -> {\n            //3加载完成后判断是否需要从网上更新数据\n            result.removeSource(dbSource);\n            if (shouldFetch(data)) {\n                //4从网上更新数据\n                fetchFromNetwork(dbSource);\n            } else {\n                //直接用本地数据更新\n                result.addSource(dbSource,\n                        newData -> result.setValue(Resource.success(newData)));\n            }\n        });\n    }\n\n    private void fetchFromNetwork(final LiveData<ResultType> dbSource) {\n        //5进行网络请求\n        LiveData<ApiResponse<RequestType>> apiResponse = createCall();\n        // we re-attach dbSource as a new source,\n        // it will dispatch its latest value quickly\n        result.addSource(dbSource,\n                newData -> result.setValue(Resource.loading(newData)));\n        result.addSource(apiResponse, response -> {\n            \n            result.removeSource(apiResponse);\n            result.removeSource(dbSource);\n            //noinspection ConstantConditions\n            if (response.isSuccessful()) {\n                //6请求数据成功，保存数据\n                saveResultAndReInit(response);\n            } else {\n                //请求失败使用，传递失败信息\n                onFetchFailed();\n                result.addSource(dbSource,\n                        newData -> result.setValue(\n                                Resource.error(response.errorMessage, newData)));\n            }\n        });\n    }\n\n    @MainThread\n    private void saveResultAndReInit(ApiResponse<RequestType> response) {\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... voids) {\n                //7保存请求到的数据\n                saveCallResult(response.body);\n                return null;\n            }\n\n            @Override\n            protected void onPostExecute(Void aVoid) {\n                // we specially request a new live data,\n                // otherwise we will get immediately last cached value,\n                // which may not be updated with latest results received from network.\n                //8再次加载数据库，使用数据库中的最新数据\n                result.addSource(loadFromDb(),\n                        newData -> result.setValue(Resource.success(newData)));\n            }\n        }.execute();\n    }\n}\n```\n接着我们就可以在UserRepository中使用NetworkBoundResource了。\n\n```java\nclass UserRepository {\n    Webservice webservice;\n    UserDao userDao;\n\n    public LiveData<Resource<User>> loadUser(final String userId) {\n        return new NetworkBoundResource<User,User>() {\n            @Override\n            protected void saveCallResult(@NonNull User item) {\n                userDao.insert(item);\n            }\n\n            @Override\n            protected boolean shouldFetch(@Nullable User data) {\n                return rateLimiter.canFetch(userId) && (data == null || !isFresh(data));\n            }\n\n            @NonNull @Override\n            protected LiveData<User> loadFromDb() {\n                return userDao.load(userId);\n            }\n\n            @NonNull @Override\n            protected LiveData<ApiResponse<User>> createCall() {\n                return webservice.getUser(userId);\n            }\n        }.getAsLiveData();\n    }\n}\n\n```","source":"_posts/android-arch-intro.md","raw":"---\ntitle: Android官方架构组件指南[翻译]\ndate: 2017-05-23 19:38:44\ntags: android\ncover: http://cdn.zqlxtt.cn/final-architecture.png\n---\n此指南适用于那些曾经或现在进行Android应用的基础开发，并希望了解和学习编写Android程序的最佳实践和架构。通过学习来构建强大的生产级别的应用。\n\n> **注意：**此指南默认你对Android开发有比较深的理解，熟知Android Framework。如果你还只是个Android开发新手，那么建议先学习下Android的基础知识。\n<!-- more -->\n## Android程序员面临的问题\n\n传统的桌面应用程序开发在大多数情况下，启动器快捷方式都有一个入口点，并作为一个单一的过程运行，但Android应用程序的结构更为复杂。典型的Android应用程序由多个应用程序组件构成，包括Activity，Fragment，Service，ContentProvider和Broadcast Receiver。\n\n大多数这些应用程序组件在Android操作系统使用的AndroidManifest中声明，以决定如何将应用程序集成到设备上来为用户提供完整的体验。尽管如前所述，桌面应用程序传统上是作为一个单一的进程运行的，但正确编写的Android应用程序则需要更灵活，因为用户通过设备上的不同应用程序编织方式，不断切换流程和任务。\n\n举个例子，当用户在社交App上打算分享一张照片，那么Android系统就会为此启动相机来完成此次请求。此时用户离开了社交App，但是这个用户体验是无缝连接的。相机可能又会触发并启动文件管理器来选择照片。最终回到社交App并分享照片。此外，在此过程中的任何时候，用户可能会被打电话中断，并在完成电话后再回来分享照片。\n\n在Android中，这种应用间跳转行为很常见，因此你的应用必须正确处理这些流程。请记住，移动设备是资源有限的，所以在任何时候，操作系统可能需要杀死一些应用来为新的应用腾出空间。\n\n你的应用程序的所有组件都可以被单独启动或无序启动，并且在任何时候由用户或系统销毁。因为应用程序组件是短暂的，它们的生命周期（创建和销毁时）不受你的控制，**因此你不应该将任何应用程序数据或状态存储在应用程序组件中**，并且应用程序组件不应相互依赖。\n\n## 常见的架构原理\n\n如果你无法使用应用程序组件来存储应用程序数据和状态，应如何构建应用程序？\n\n在你的App开发中你应该将重心放在**分层**上，如果将所有的代码都写在Activity或者Fragment中，那问题就大了。任何不是处理UI或跟操作系统交互的操作不应该放在这两个类中。尽量保持它们代码的精简，这样你可以避免很多与生命周期相关的问题。记住你并不能掌控Activity和Fragment，他们只是在你的App和Android系统间起了桥梁的作用。任何时候，Android系统可能会根据用户操作或其他因素（如低内存）来回收它们。最好尽量减少对他们的依赖，以提供坚实的用户体验。\n\n还有一点比较重要的就是**持久模型驱动UI**。使用持久模型主要是因为当你的UI被回收或者在没有网络的情况下还能正常给用户展示数据。`模型`是用来处理应用数据的组件，它们独立于应用中的视图和四大组件。因此模型的生命周期必然和UI是分离的。保持UI代码的整洁，会让你能更容易的管理和调整UI。让你的应用基于模型开发可以很好的管理你应用的数据并是你的应用更具测试性和持续性。\n\n## 应用架构推荐\n\n回到这篇文章的主题，来说说Android官方架构组件（一下简称架构）。一下会介绍如何在你的应用中实践这一架构模式。\n\n> **注意：**不可能存在某一种架构方式可以完美适合任何场景。话虽如此，这种架构应该是大多数用例的良好起点。如果你已经有了很好的Android应用程序架构方式，请继续保持。\n\n假设我们需要一个现实用户资料的UI，该用户的资料文件将使用REST API从服务端获取。\n\n### 构建用户界面\n\n我们的这个用户界面由一个`UserProfileFragment.java`文件和它的布局文件`user_profile_layout.xml`。\n\n为了驱动UI，数据模型需要持有下面两个数据：\n\n- **User ID:**用户的标识符。最好使用Fragment的参数将此信息传递到Fragment中。如果Android操作系统回收了Fragment，则会保留此信息，以便下次重新启动应用时，该ID可用。\n- **User Object:**传统的Java对象，代表用户的数据。\n\n为此，我们新建一个继承自ViewModel的名为`UserProfileViewModel`的模型来持有这个数据。\n\nViewModel提供特定UI组件的数据，例如Activity和Fragment，并处理与数据处理业务部分的通信，例如调用其他组件来加载数据或转发用户修改。ViewModel不了解View，并且不受UI的重建（如重由于旋转而导致的Activity的重建）的影响。\n\n现在我们有一下三个文件：\n\n- user_profile.xml: 视图的布局文件。\n- UserProfileViewModel.java: 持有UI数据的模型。\n- UserProfileFragment.java: 用于显示数据模型中的数据并和用户进行交互。\n\n一下是具体代码（为了简化，布局文件省略）。\n\n```java\npublic class UserProfileViewModel extends ViewModel {\n    private String userId;\n    private User user;\n\n    public void init(String userId) {\n        this.userId = userId;\n    }\n    public User getUser() {\n        return user;\n    }\n}\n```\n\n```java\npublic class UserProfileFragment extends LifecycleFragment {\n    private static final String UID_KEY = \"uid\";\n    private UserProfileViewModel viewModel;\n\n    @Override\n    public void onActivityCreated(@Nullable Bundle savedInstanceState) {\n        super.onActivityCreated(savedInstanceState);\n        String userId = getArguments().getString(UID_KEY);\n        viewModel = ViewModelProviders.of(this).get(UserProfileViewModel.class);\n        viewModel.init(userId);\n    }\n\n    @Override\n    public View onCreateView(LayoutInflater inflater,\n                @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {\n        return inflater.inflate(R.layout.user_profile, container, false);\n    }\n}\n```\n\n> **注意：**上面的UserProfileFragment继承自LifeCycleFragment而不是Fragment。当Lifecycle的Api稳定后，Fragment会默认实现LifeCycleOwner。\n\n\n现在，我们有三个文件，我们如何连接它们？毕竟，当ViewModel的用户字段被设置时，我们需要一种通知UI的方法。这里就要提到LiveData了。\n\n> LiveData是一个可观察的数据持有者。它允许应用程序中的组件观察LiveData对象持有的数据，而不会在它们之间创建显式和刚性的依赖路径。LiveData还尊重你的应用程序组件（Activity，Fragment，Service）的生命周期状态，并做正确的事情以防止内存泄漏，从而你的应用程序不会消耗更多的内存。\n\n如果你已经使用了想Rxjava活着Agrea这类第三方库，那么你可以使用它们代替LiveData，不过你需要处理好它们与组件生命周期之间的关系。\n\n现在我们使用`LiveData<User>`来代替UserProfileViewModel中的User字段。所以Fragment可以通过观察它来更新数据。LiveData值得称道的地方就在于它是生命周期感知的，当生命周期结束是，其上的观察者会被即使清理。\n\n```java\npublic class UserProfileViewModel extends ViewModel {\n    ...\n    private LiveData<User> user;\n    public LiveData<User> getUser() {\n        return user;\n    }\n}\n```\n然后将UserProfileFragment修改如下，观察数据并更新UI：\n\n```java\n@Override\npublic void onActivityCreated(@Nullable Bundle savedInstanceState) {\n    super.onActivityCreated(savedInstanceState);\n    viewModel.getUser().observe(this, user -> {\n      // update UI\n    });\n}\n```\n一旦用户数据更新，onChanged回调将被调用然后UI会被刷新。\n\n如果你熟悉一些使用观察者模式第三方库，你会觉得奇怪，为什么没有在Fragment的onStop()方法中将观察者移除。对于LiveData来说这是没有必要的，因为它是生命周期感知的，这意味着如果UI处于不活动状态，它就不会调用观察者的回调来更新数据。并且在onDestroy后会自动移除。\n\n我们也不需要处理任何视图重建（如屏幕旋转）。ViewModel会自动恢复重建前的数据。当新的视图被创建出来后，它会接收到与之前相同的ViewModel实例，并且观察者的回调会被立刻调用，更新最新的数据。这也是ViewModel为什么不能直接引用视图对象，因为它的生命周期长于视图对象。\n\n### 获取数据\n\n现在我们将视图和模型连接起来，但是模型该怎么获取数据呢？在这个例子中，我们假设使用REST API从后台获取。我们将使用Retrofit来向后台请求数据。\n\n我们的retrofit类Webservice如下：\n\n```java\npublic interface Webservice {\n    /**\n     * @GET declares an HTTP GET request\n     * @Path(\"user\") annotation on the userId parameter marks it as a\n     * replacement for the {user} placeholder in the @GET path\n     */\n    @GET(\"/users/{user}\")\n    Call<User> getUser(@Path(\"user\") String userId);\n}\n```\n如果只是简单的实现，ViewModel可以直接操作Webservice来获取用户数据。虽然这样可以正常工作，但你的应用无法保证它的后续迭代。因为这样做将太多的责任让ViewModel来承担，这样就违反类之前讲到的分层原则。又因为ViewModel的生命周期是绑定在Activity和Fragment上的，所以当UI被销毁后如果丢失所有数据将是很差的用户体验。所以我们的ViewModel将和一个新的模块进行交互，这个模块叫Repository。\n\n> **Repository**模块负责处理数据。它为应用程序的其余部分提供了一个干净的API。他知道在数据更新时从哪里获取数据和调用哪些API调用。你可以将它们视为不同数据源（持久性模型，Web服务，缓存等）之间的中介者。\n\nUserRepository类如下：\n\n```java\npublic class UserRepository {\n    private Webservice webservice;\n    // ...\n    public LiveData<User> getUser(int userId) {\n        // This is not an optimal implementation, we'll fix it below\n        final MutableLiveData<User> data = new MutableLiveData<>();\n        webservice.getUser(userId).enqueue(new Callback<User>() {\n            @Override\n            public void onResponse(Call<User> call, Response<User> response) {\n                // error case is left out for brevity\n                data.setValue(response.body());\n            }\n        });\n        return data;\n    }\n}\n```\n虽然repository模块看上去没有必要，但他起着重要的作用。它为App的其他部分抽象出了数据源。现在我们的ViewModel并不知道数据是通过WebService来获取的，这意味着我们可以随意替换掉获取数据的实现。\n\n#### 管理组件间的依赖关系\n上面这种写法可以看出来UserRepository需要初始化Webservice实例，这虽然说起来简单，但要实现的话还需要知道Webservice的具体构造方法该如何写。这将加大代码的复杂度，另外UserRepository可能并不是唯一使用Webservice的对象，所以这种在内部构建Webservice实例显然是不推荐的，下面有两种模式来解决这个问题：\n\n- **依赖注入：**依赖注入允许类定义它们的依赖关系而不构造它们。在运行时，另一个类负责提供这些依赖关系。我们建议在Android应用程序中使用Google的Dagger 2库实现依赖注入。Dagger 2通过遍历依赖关系树自动构建对象，并在依赖关系上提供编译时保证。\n- **服务定位器：**服务定位器提供了一个注册表，其中类可以获取它们的依赖关系而不是构造它们。与依赖注入（DI）相比，实现起来相对容易，因此如果您不熟悉DI，请改用Service Locator。\n\n这些模式允许你扩展代码，因为它们提供明确的模式来管理依赖关系，而不会重复代码或增加复杂性。两者都允许交换实现进行测试;这是使用它们的主要好处之一。在这个例子中，我们将使用Dagger 2来管理依赖关系。\n\n### 连接ViewModel和Repository\n现在，我们的UserProfileViewModel可以改写成这样：\n\n```java\npublic class UserProfileViewModel extends ViewModel {\n    private LiveData<User> user;\n    private UserRepository userRepo;\n\n    @Inject // UserRepository parameter is provided by Dagger 2\n    public UserProfileViewModel(UserRepository userRepo) {\n        this.userRepo = userRepo;\n    }\n\n    public void init(String userId) {\n        if (this.user != null) {\n            // ViewModel is created per Fragment so\n            // we know the userId won't change\n            return;\n        }\n        user = userRepo.getUser(userId);\n    }\n\n    public LiveData<User> getUser() {\n        return this.user;\n    }\n}\n```\n\n### 缓存数据\n\n上面的Repository虽然网络请求做了封装，但是它依赖后台数据源，所以存在不足。\n\n上面的UserRepository实现的问题是，在获取数据之后，它不会保留在任何地方。如果用户离开UserProfileFragment并重新进来，则应用程序将重新获取数据。这是不好的，有两个原因：它浪费了宝贵的网络带宽和迫使用户等待新的查询完成。为了解决这个问题，我们将向我们的UserRepository添加一个新的数据源，它将把User对象缓存在内存中。如下：\n\n```java\n@Singleton  // informs Dagger that this class should be constructed once\npublic class UserRepository {\n    private Webservice webservice;\n    // simple in memory cache, details omitted for brevity\n    private UserCache userCache;\n    public LiveData<User> getUser(String userId) {\n        LiveData<User> cached = userCache.get(userId);\n        if (cached != null) {\n            return cached;\n        }\n\n        final MutableLiveData<User> data = new MutableLiveData<>();\n        userCache.put(userId, data);\n        // this is still suboptimal but better than before.\n        // a complete implementation must also handle the error cases.\n        webservice.getUser(userId).enqueue(new Callback<User>() {\n            @Override\n            public void onResponse(Call<User> call, Response<User> response) {\n                data.setValue(response.body());\n            }\n        });\n        return data;\n    }\n}\n```\n\n### 持久化数据\n在当前的实现中，如果用户旋转屏幕或离开并返回到应用程序，现有UI将立即可见，因为Repository会从内存中检索数据。但是，如果用户离开应用程序，并在Android操作系统杀死进程后几小时后又会怎么样？\n\n在目前的实现中，我们将需要从网络中再次获取数据。这不仅是一个糟糕的用户体验，也是浪费，因为它将使用移动数据来重新获取相同的数据。你以通过缓存Web请求来简单地解决这个问题，但它会产生新的问题。如果请求一个朋友列表而不是单个用户，会发生什么情况？那么你的应用程序可能会显示不一致的数据，这是最令人困惑的用户体验。例如，相同的用户的数据可能会不同，因为朋友列表请求和用户请求可以在不同的时间执行。你的应用需要合并他们，以避免显示不一致的数据。\n\n正确的处理方法是使用持久模型。这时候Room就派上用场了。\n\n> Room是一个对象映射库，它提供本地数据持久性和最少的样板代码。在编译时，它根据模式验证每个查询，从而错误的SQL查询会导致编译时错误，而不是运行时失败。Room抽象了使用原始SQL表和查询的一些基本实现细节。它还允许观察数据库数据（包括集合和连接查询）的更改，通过LiveData对象公开这些更改。\n\n要使用Room我们首先需要使用@Entity来定义实体：\n\n```java\n@Entity\nclass User {\n  @PrimaryKey\n  private int id;\n  private String name;\n  private String lastName;\n  // getters and setters for fields\n}\n```\n\n接着创建数据库类：\n\n```java\n@Database(entities = {User.class}, version = 1)\npublic abstract class MyDatabase extends RoomDatabase {\n}\n```\n\n值得注意的是MyDatabase是一个抽象了，Room会在编译期间提供它的一个实现类。\n\n接下来需要定义DAO：\n\n```java\n@Dao\npublic interface UserDao {\n    @Insert(onConflict = REPLACE)\n    void save(User user);\n    @Query(\"SELECT * FROM user WHERE id = :userId\")\n    LiveData<User> load(String userId);\n}\n```\n\n接着在MyDatabase中添加获取上面这个DAO的方法：\n\n```java\n@Database(entities = {User.class}, version = 1)\npublic abstract class MyDatabase extends RoomDatabase {\n    public abstract UserDao userDao();\n}\n```\n这里的load方法返回的是LiveData<User>，所以当相关数据库中的数据有任何变化时，Room都会通知LiveData上的处于活动状态的观察者。\n\n现在我们可以修改UserRepository了：\n\n```java\n@Singleton\npublic class UserRepository {\n    private final Webservice webservice;\n    private final UserDao userDao;\n    private final Executor executor;\n\n    @Inject\n    public UserRepository(Webservice webservice, UserDao userDao, Executor executor) {\n        this.webservice = webservice;\n        this.userDao = userDao;\n        this.executor = executor;\n    }\n\n    public LiveData<User> getUser(String userId) {\n        refreshUser(userId);\n        // return a LiveData directly from the database.\n        return userDao.load(userId);\n    }\n\n    private void refreshUser(final String userId) {\n        executor.execute(() -> {\n            // running in a background thread\n            // check if user was fetched recently\n            boolean userExists = userDao.hasUser(FRESH_TIMEOUT);\n            if (!userExists) {\n                // refresh the data\n                Response response = webservice.getUser(userId).execute();\n                // TODO check for error etc.\n                // Update the database.The LiveData will automatically refresh so\n                // we don't need to do anything else here besides updating the database\n                userDao.save(response.body());\n            }\n        });\n    }\n}\n```\n这里虽然我们将UserRepository的直接数据来源从Webservice改为本地数据库，但我们却不需要修改UserProfileViewModel或者UserProfileFragment。这就是抽象层带来的好处。这也给测试带来了方便，因为你可以提供一个虚假的UserRepository来测试你的UserProfileViewModel。\n\n现在，如果用户重新回到这个界面，他们会立刻看到数据，因为我们已经将数据做了持久化的保存。当然如果有用例需要，我们也可不展示太老旧的持久化数据。\n\n在一些用例中，比如下拉刷新，如果正处于网络请求中，那UI需要告诉用户正处于网络请求中。一个好的实践方式就是将UI与数据分离，因为UI可能因为各种原因被更新。从UI的角度来说，请求中的数据和本地数据类似，只是它还没有被持久化到数据库中。\n\n以下有两种解决方法：\n\n- 将getUser的返回值中加入网络状态。\n- 在Repository中提供一个可以返回刷新状态的方法。如果你只是想在用户通过下拉刷新来告诉用户目前的网络状态的话，那这个方法是比较适合的。\n\n#### 数据唯一来源\n\n在以上实例中，数据唯一来源是数据库，这样做的好处是用户可以基于稳定的数据库数据来更新页面，而不需要处理大量的网络请求状态。数据库有数据则使用，没有数据则等待其更新。\n\n### 测试\n我们之前提到分层可以个应用提供良好的测试能力，接下来就看看我们怎么测试不同的模块。\n\n- **用户界面与交互：**这是唯一一个需要使用到`Android UI Instrumentation test`的测试模块。测试UI的最好方法就是使用Espresso框架。你可以创建Fragment然后提供一个虚假的ViewModel。因为Fragment只跟ViewModel交互，所以虚拟一个ViewModel就足够了。\n- **ViewModel：**ViewModel可以用JUnit test进行测试。因为其不涉及界面与交互。而且你只需要虚拟UserRepository即可。\n- **UserRepository：**测试UserRepository同样使用JUnit test。你可以虚拟出Webservice和DAO。你可以通过使用正确的网络请求来请求数据，让后将数据通过DAO写入数据库。如果数据库中有相关数据则无需进行网络请求。\n- **UserDao：**对于DAO的测试，推荐使用instrumentation进行测试。因为此处无需UI，并且可以使用in-memory数据库来保证测试的封闭性，不会影响到磁盘上的数据库。\n- **Webservice：**保持测试的封闭性是相当重要的，因此即使是你的Webservice测试也应避免对后端进行网络呼叫。有很多第三方库提供这方面的支持。例如，MockWebServer是一个很棒的库，可以帮助你为你的测试创建一个假的本地服务器。\n\n### 架构图\n![架构图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d76112977fe3f19d.webp)\n\n## 指导原则\n编程是一个创意领域，构建Android应用程序也不例外。有多种方法来解决问题，无论是在多个Activity或Fragment之间传递数据，还是检索远程数据并将其在本地保持离线模式，或者是任何其他常见的场景。\n\n虽然以下建议不是强制性的，但经验告诉我们，遵循这些建议将使你的代码库从长远来看更加强大，可测试和可维护。\n\n- 在AndroidManifest中定义的Activity，Service，Broadcast Receiver等，它们不是数据源。相反，他们只是用于协调和展示数据。由于每个应用程序组件的寿命相当短，运行状态取决于用户与其设备的交互以及运行时的整体当前运行状况，所以不要将这些组件作为数据源。\n- 你需要在应用程序的各个模块之间创建明确界定的责任范围。例如，不要在不同的类或包之间传递用于加载网络数据的代码。同样，不要将数据缓存和数据绑定这两个责任完全不同的放在同一个类中。\n- 每个模块之间要竟可能少的相互暴露。不要抱有侥幸心理去公开一个关于模块的内部实现细节的接口。你可能会在短期内获得到便捷，但是随着代码库的发展，你将多付多次技术性债务。\n- 当你定义模块之间的交互时，请考虑如何使每个模块隔离。例如，拥有用于从网络中提取数据的定义良好的API将使得更容易测试在本地数据库中持久存在该数据的模块。相反，如果将这两个模块的逻辑组合在一起，或者将整个代码库中的网络代码放在一起，那么测试就更难（如果不是不可能）。\n- 你的应用程序的核心是什么让它独立出来。不要花时间重复轮子或一次又一次地编写相同的样板代码。相反，将精力集中在使你的应用程序独一无二的同时，让Android架构组件和其他推荐的库来处理重复的样板代码。\n- 保持尽可能多的相关联的新鲜数据，以便你的应用程序在设备处于脱机模式时可用。虽然你可以享受恒定和高速连接，但你的用户可能不会。\n- 你的Repository应指定一个数据源作为真实的单一来源。每当你的应用程序需要访问这些数据时，它应该始终源于真实的单一来源。\n\n\n## 扩展： 公开网络状态\n在上面的小结我们故意省略了网络错误和加载状态来保证例子的简洁性。在这一小结我们演示一种使用Resource类来封装数据及其状态。以此来公开网络状态。\n\n下面是简单的Resource实现：\n\n```java\n//a generic class that describes a data with a status\npublic class Resource<T> {\n    @NonNull public final Status status;\n    @Nullable public final T data;\n    @Nullable public final String message;\n    private Resource(@NonNull Status status, @Nullable T data, @Nullable String message) {\n        this.status = status;\n        this.data = data;\n        this.message = message;\n    }\n\n    public static <T> Resource<T> success(@NonNull T data) {\n        return new Resource<>(SUCCESS, data, null);\n    }\n\n    public static <T> Resource<T> error(String msg, @Nullable T data) {\n        return new Resource<>(ERROR, data, msg);\n    }\n\n    public static <T> Resource<T> loading(@Nullable T data) {\n        return new Resource<>(LOADING, data, null);\n    }\n}\n```\n以为从网络上抓取视频的同时在UI上显示数据库的旧数据是很常见的用例，所以我们要创建一个可以在多个地方重复使用的帮助类NetworkBoundResource。以下是NetworkBoundResource的决策树：\n\n![NetworkBoundResource的决策树](http://upload-images.jianshu.io/upload_images/2702499-f95e8769c20c53aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nNetworkBoundResource从观察数据库开始，当第一次从数据库加载完实体后，NetworkBoundResource会检查这个结果是否满足用来展示的需求，如不满足则需要从网上重新获取。当然以上两种情况可能同时发生，你希望先将数据显示在UI上的同时去网络上请求新数据。\n\n如果网络请求成果，则将结果保存到数据库，然后重新从数据库加载数据，如果网络请求失败，则直接传递错误信息。\n\n> **注意：**在上面的过程中可以看到当将新数据保存到数据库后，我们重新从数据库加载数据。虽然大部分情况我们不必如此，因为数据库会为我们传递此次更新。但另一方面，依赖数据库内部的更新机制并不是我们想要的如果更新的数据与旧数据一致，则数据谷不会做出更新提示。我们也不希望直接从网络请求中获取数据直接用于UI，因为这样违背了单一数据源的原则。\n\n下面是NetworkBoundResource类的公共api：\n\n```java\n// ResultType: Type for the Resource data\n// RequestType: Type for the API response\npublic abstract class NetworkBoundResource<ResultType, RequestType> {\n    // Called to save the result of the API response into the database\n    @WorkerThread\n    protected abstract void saveCallResult(@NonNull RequestType item);\n\n    // Called with the data in the database to decide whether it should be\n    // fetched from the network.\n    @MainThread\n    protected abstract boolean shouldFetch(@Nullable ResultType data);\n\n    // Called to get the cached data from the database\n    @NonNull @MainThread\n    protected abstract LiveData<ResultType> loadFromDb();\n\n    // Called to create the API call.\n    @NonNull @MainThread\n    protected abstract LiveData<ApiResponse<RequestType>> createCall();\n\n    // Called when the fetch fails. The child class may want to reset components\n    // like rate limiter.\n    @MainThread\n    protected void onFetchFailed() {\n    }\n\n    // returns a LiveData that represents the resource\n    public final LiveData<Resource<ResultType>> getAsLiveData() {\n        return result;\n    }\n}\n```\n注意到上面定义了两种泛型，ResultType和RequestType，因为从网络请求返回的数据类型可能会和数据库返回的不一致。\n\n另外注意到上面代码中的ApiResponse这个类，他是将Retroft2.Call转换成LiveData的一个简单封装。\n\n下面是NetworkBoundResource余下部分的实现：\n\n```java\npublic abstract class NetworkBoundResource<ResultType, RequestType> {\n    private final MediatorLiveData<Resource<ResultType>> result = new MediatorLiveData<>();\n\n    @MainThread\n    NetworkBoundResource() {\n        //1初始化NetworkBoundResource\n        result.setValue(Resource.loading(null));\n        //2从数据库加载本地数据\n        LiveData<ResultType> dbSource = loadFromDb();\n\n        result.addSource(dbSource, data -> {\n            //3加载完成后判断是否需要从网上更新数据\n            result.removeSource(dbSource);\n            if (shouldFetch(data)) {\n                //4从网上更新数据\n                fetchFromNetwork(dbSource);\n            } else {\n                //直接用本地数据更新\n                result.addSource(dbSource,\n                        newData -> result.setValue(Resource.success(newData)));\n            }\n        });\n    }\n\n    private void fetchFromNetwork(final LiveData<ResultType> dbSource) {\n        //5进行网络请求\n        LiveData<ApiResponse<RequestType>> apiResponse = createCall();\n        // we re-attach dbSource as a new source,\n        // it will dispatch its latest value quickly\n        result.addSource(dbSource,\n                newData -> result.setValue(Resource.loading(newData)));\n        result.addSource(apiResponse, response -> {\n            \n            result.removeSource(apiResponse);\n            result.removeSource(dbSource);\n            //noinspection ConstantConditions\n            if (response.isSuccessful()) {\n                //6请求数据成功，保存数据\n                saveResultAndReInit(response);\n            } else {\n                //请求失败使用，传递失败信息\n                onFetchFailed();\n                result.addSource(dbSource,\n                        newData -> result.setValue(\n                                Resource.error(response.errorMessage, newData)));\n            }\n        });\n    }\n\n    @MainThread\n    private void saveResultAndReInit(ApiResponse<RequestType> response) {\n        new AsyncTask<Void, Void, Void>() {\n\n            @Override\n            protected Void doInBackground(Void... voids) {\n                //7保存请求到的数据\n                saveCallResult(response.body);\n                return null;\n            }\n\n            @Override\n            protected void onPostExecute(Void aVoid) {\n                // we specially request a new live data,\n                // otherwise we will get immediately last cached value,\n                // which may not be updated with latest results received from network.\n                //8再次加载数据库，使用数据库中的最新数据\n                result.addSource(loadFromDb(),\n                        newData -> result.setValue(Resource.success(newData)));\n            }\n        }.execute();\n    }\n}\n```\n接着我们就可以在UserRepository中使用NetworkBoundResource了。\n\n```java\nclass UserRepository {\n    Webservice webservice;\n    UserDao userDao;\n\n    public LiveData<Resource<User>> loadUser(final String userId) {\n        return new NetworkBoundResource<User,User>() {\n            @Override\n            protected void saveCallResult(@NonNull User item) {\n                userDao.insert(item);\n            }\n\n            @Override\n            protected boolean shouldFetch(@Nullable User data) {\n                return rateLimiter.canFetch(userId) && (data == null || !isFresh(data));\n            }\n\n            @NonNull @Override\n            protected LiveData<User> loadFromDb() {\n                return userDao.load(userId);\n            }\n\n            @NonNull @Override\n            protected LiveData<ApiResponse<User>> createCall() {\n                return webservice.getUser(userId);\n            }\n        }.getAsLiveData();\n    }\n}\n\n```","slug":"android-arch-intro","published":1,"updated":"2024-08-21T03:16:19.780Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vq000i5p6t21qo2uiq","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>此指南适用于那些曾经或现在进行Android应用的基础开发，并希望了解和学习编写Android程序的最佳实践和架构。通过学习来构建强大的生产级别的应用。</p>\n<blockquote>\n<p><strong>注意：</strong>此指南默认你对Android开发有比较深的理解，熟知Android Framework。如果你还只是个Android开发新手，那么建议先学习下Android的基础知识。</p>\n</blockquote>\n<span id=\"more\"></span>\n<h2 id=\"Android程序员面临的问题\"><a href=\"#Android程序员面临的问题\" class=\"headerlink\" title=\"Android程序员面临的问题\"></a>Android程序员面临的问题</h2><p>传统的桌面应用程序开发在大多数情况下，启动器快捷方式都有一个入口点，并作为一个单一的过程运行，但Android应用程序的结构更为复杂。典型的Android应用程序由多个应用程序组件构成，包括Activity，Fragment，Service，ContentProvider和Broadcast Receiver。</p>\n<p>大多数这些应用程序组件在Android操作系统使用的AndroidManifest中声明，以决定如何将应用程序集成到设备上来为用户提供完整的体验。尽管如前所述，桌面应用程序传统上是作为一个单一的进程运行的，但正确编写的Android应用程序则需要更灵活，因为用户通过设备上的不同应用程序编织方式，不断切换流程和任务。</p>\n<p>举个例子，当用户在社交App上打算分享一张照片，那么Android系统就会为此启动相机来完成此次请求。此时用户离开了社交App，但是这个用户体验是无缝连接的。相机可能又会触发并启动文件管理器来选择照片。最终回到社交App并分享照片。此外，在此过程中的任何时候，用户可能会被打电话中断，并在完成电话后再回来分享照片。</p>\n<p>在Android中，这种应用间跳转行为很常见，因此你的应用必须正确处理这些流程。请记住，移动设备是资源有限的，所以在任何时候，操作系统可能需要杀死一些应用来为新的应用腾出空间。</p>\n<p>你的应用程序的所有组件都可以被单独启动或无序启动，并且在任何时候由用户或系统销毁。因为应用程序组件是短暂的，它们的生命周期（创建和销毁时）不受你的控制，<strong>因此你不应该将任何应用程序数据或状态存储在应用程序组件中</strong>，并且应用程序组件不应相互依赖。</p>\n<h2 id=\"常见的架构原理\"><a href=\"#常见的架构原理\" class=\"headerlink\" title=\"常见的架构原理\"></a>常见的架构原理</h2><p>如果你无法使用应用程序组件来存储应用程序数据和状态，应如何构建应用程序？</p>\n<p>在你的App开发中你应该将重心放在<strong>分层</strong>上，如果将所有的代码都写在Activity或者Fragment中，那问题就大了。任何不是处理UI或跟操作系统交互的操作不应该放在这两个类中。尽量保持它们代码的精简，这样你可以避免很多与生命周期相关的问题。记住你并不能掌控Activity和Fragment，他们只是在你的App和Android系统间起了桥梁的作用。任何时候，Android系统可能会根据用户操作或其他因素（如低内存）来回收它们。最好尽量减少对他们的依赖，以提供坚实的用户体验。</p>\n<p>还有一点比较重要的就是<strong>持久模型驱动UI</strong>。使用持久模型主要是因为当你的UI被回收或者在没有网络的情况下还能正常给用户展示数据。<code>模型</code>是用来处理应用数据的组件，它们独立于应用中的视图和四大组件。因此模型的生命周期必然和UI是分离的。保持UI代码的整洁，会让你能更容易的管理和调整UI。让你的应用基于模型开发可以很好的管理你应用的数据并是你的应用更具测试性和持续性。</p>\n<h2 id=\"应用架构推荐\"><a href=\"#应用架构推荐\" class=\"headerlink\" title=\"应用架构推荐\"></a>应用架构推荐</h2><p>回到这篇文章的主题，来说说Android官方架构组件（一下简称架构）。一下会介绍如何在你的应用中实践这一架构模式。</p>\n<blockquote>\n<p><strong>注意：</strong>不可能存在某一种架构方式可以完美适合任何场景。话虽如此，这种架构应该是大多数用例的良好起点。如果你已经有了很好的Android应用程序架构方式，请继续保持。</p>\n</blockquote>\n<p>假设我们需要一个现实用户资料的UI，该用户的资料文件将使用REST API从服务端获取。</p>\n<h3 id=\"构建用户界面\"><a href=\"#构建用户界面\" class=\"headerlink\" title=\"构建用户界面\"></a>构建用户界面</h3><p>我们的这个用户界面由一个<code>UserProfileFragment.java</code>文件和它的布局文件<code>user_profile_layout.xml</code>。</p>\n<p>为了驱动UI，数据模型需要持有下面两个数据：</p>\n<ul>\n<li><strong>User ID:</strong>用户的标识符。最好使用Fragment的参数将此信息传递到Fragment中。如果Android操作系统回收了Fragment，则会保留此信息，以便下次重新启动应用时，该ID可用。</li>\n<li><strong>User Object:</strong>传统的Java对象，代表用户的数据。</li>\n</ul>\n<p>为此，我们新建一个继承自ViewModel的名为<code>UserProfileViewModel</code>的模型来持有这个数据。</p>\n<p>ViewModel提供特定UI组件的数据，例如Activity和Fragment，并处理与数据处理业务部分的通信，例如调用其他组件来加载数据或转发用户修改。ViewModel不了解View，并且不受UI的重建（如重由于旋转而导致的Activity的重建）的影响。</p>\n<p>现在我们有一下三个文件：</p>\n<ul>\n<li>user_profile.xml: 视图的布局文件。</li>\n<li>UserProfileViewModel.java: 持有UI数据的模型。</li>\n<li>UserProfileFragment.java: 用于显示数据模型中的数据并和用户进行交互。</li>\n</ul>\n<p>一下是具体代码（为了简化，布局文件省略）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userId = userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">UID_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;uid&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserProfileViewModel viewModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> getArguments().getString(UID_KEY);</span><br><span class=\"line\">        viewModel = ViewModelProviders.of(<span class=\"built_in\">this</span>).get(UserProfileViewModel.class);</span><br><span class=\"line\">        viewModel.init(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(LayoutInflater inflater,</span></span><br><span class=\"line\"><span class=\"params\">                <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.user_profile, container, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>上面的UserProfileFragment继承自LifeCycleFragment而不是Fragment。当Lifecycle的Api稳定后，Fragment会默认实现LifeCycleOwner。</p>\n</blockquote>\n<p>现在，我们有三个文件，我们如何连接它们？毕竟，当ViewModel的用户字段被设置时，我们需要一种通知UI的方法。这里就要提到LiveData了。</p>\n<blockquote>\n<p>LiveData是一个可观察的数据持有者。它允许应用程序中的组件观察LiveData对象持有的数据，而不会在它们之间创建显式和刚性的依赖路径。LiveData还尊重你的应用程序组件（Activity，Fragment，Service）的生命周期状态，并做正确的事情以防止内存泄漏，从而你的应用程序不会消耗更多的内存。</p>\n</blockquote>\n<p>如果你已经使用了想Rxjava活着Agrea这类第三方库，那么你可以使用它们代替LiveData，不过你需要处理好它们与组件生命周期之间的关系。</p>\n<p>现在我们使用<code>LiveData&lt;User&gt;</code>来代替UserProfileViewModel中的User字段。所以Fragment可以通过观察它来更新数据。LiveData值得称道的地方就在于它是生命周期感知的，当生命周期结束是，其上的观察者会被即使清理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiveData&lt;User&gt; user;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将UserProfileFragment修改如下，观察数据并更新UI：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">    viewModel.getUser().observe(<span class=\"built_in\">this</span>, user -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// update UI</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一旦用户数据更新，onChanged回调将被调用然后UI会被刷新。</p>\n<p>如果你熟悉一些使用观察者模式第三方库，你会觉得奇怪，为什么没有在Fragment的onStop()方法中将观察者移除。对于LiveData来说这是没有必要的，因为它是生命周期感知的，这意味着如果UI处于不活动状态，它就不会调用观察者的回调来更新数据。并且在onDestroy后会自动移除。</p>\n<p>我们也不需要处理任何视图重建（如屏幕旋转）。ViewModel会自动恢复重建前的数据。当新的视图被创建出来后，它会接收到与之前相同的ViewModel实例，并且观察者的回调会被立刻调用，更新最新的数据。这也是ViewModel为什么不能直接引用视图对象，因为它的生命周期长于视图对象。</p>\n<h3 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h3><p>现在我们将视图和模型连接起来，但是模型该怎么获取数据呢？在这个例子中，我们假设使用REST API从后台获取。我们将使用Retrofit来向后台请求数据。</p>\n<p>我们的retrofit类Webservice如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Webservice</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@GET</span> declares an HTTP GET request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Path</span>(&quot;user&quot;) annotation on the userId parameter marks it as a</span></span><br><span class=\"line\"><span class=\"comment\">     * replacement for the &#123;user&#125; placeholder in the <span class=\"doctag\">@GET</span> path</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GET(&quot;/users/&#123;user&#125;&quot;)</span></span><br><span class=\"line\">    Call&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(<span class=\"meta\">@Path(&quot;user&quot;)</span> String userId)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果只是简单的实现，ViewModel可以直接操作Webservice来获取用户数据。虽然这样可以正常工作，但你的应用无法保证它的后续迭代。因为这样做将太多的责任让ViewModel来承担，这样就违反类之前讲到的分层原则。又因为ViewModel的生命周期是绑定在Activity和Fragment上的，所以当UI被销毁后如果丢失所有数据将是很差的用户体验。所以我们的ViewModel将和一个新的模块进行交互，这个模块叫Repository。</p>\n<blockquote>\n<p><strong>Repository</strong>模块负责处理数据。它为应用程序的其余部分提供了一个干净的API。他知道在数据更新时从哪里获取数据和调用哪些API调用。你可以将它们视为不同数据源（持久性模型，Web服务，缓存等）之间的中介者。</p>\n</blockquote>\n<p>UserRepository类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Webservice webservice;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(<span class=\"type\">int</span> userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is not an optimal implementation, we&#x27;ll fix it below</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> MutableLiveData&lt;User&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;&gt;();</span><br><span class=\"line\">        webservice.getUser(userId).enqueue(<span class=\"keyword\">new</span> <span class=\"title class_\">Callback</span>&lt;User&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResponse</span><span class=\"params\">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// error case is left out for brevity</span></span><br><span class=\"line\">                data.setValue(response.body());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然repository模块看上去没有必要，但他起着重要的作用。它为App的其他部分抽象出了数据源。现在我们的ViewModel并不知道数据是通过WebService来获取的，这意味着我们可以随意替换掉获取数据的实现。</p>\n<h4 id=\"管理组件间的依赖关系\"><a href=\"#管理组件间的依赖关系\" class=\"headerlink\" title=\"管理组件间的依赖关系\"></a>管理组件间的依赖关系</h4><p>上面这种写法可以看出来UserRepository需要初始化Webservice实例，这虽然说起来简单，但要实现的话还需要知道Webservice的具体构造方法该如何写。这将加大代码的复杂度，另外UserRepository可能并不是唯一使用Webservice的对象，所以这种在内部构建Webservice实例显然是不推荐的，下面有两种模式来解决这个问题：</p>\n<ul>\n<li><strong>依赖注入：</strong>依赖注入允许类定义它们的依赖关系而不构造它们。在运行时，另一个类负责提供这些依赖关系。我们建议在Android应用程序中使用Google的Dagger 2库实现依赖注入。Dagger 2通过遍历依赖关系树自动构建对象，并在依赖关系上提供编译时保证。</li>\n<li><strong>服务定位器：</strong>服务定位器提供了一个注册表，其中类可以获取它们的依赖关系而不是构造它们。与依赖注入（DI）相比，实现起来相对容易，因此如果您不熟悉DI，请改用Service Locator。</li>\n</ul>\n<p>这些模式允许你扩展代码，因为它们提供明确的模式来管理依赖关系，而不会重复代码或增加复杂性。两者都允许交换实现进行测试;这是使用它们的主要好处之一。在这个例子中，我们将使用Dagger 2来管理依赖关系。</p>\n<h3 id=\"连接ViewModel和Repository\"><a href=\"#连接ViewModel和Repository\" class=\"headerlink\" title=\"连接ViewModel和Repository\"></a>连接ViewModel和Repository</h3><p>现在，我们的UserProfileViewModel可以改写成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiveData&lt;User&gt; user;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository userRepo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span> <span class=\"comment\">// UserRepository parameter is provided by Dagger 2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserProfileViewModel</span><span class=\"params\">(UserRepository userRepo)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userRepo = userRepo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.user != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ViewModel is created per Fragment so</span></span><br><span class=\"line\">            <span class=\"comment\">// we know the userId won&#x27;t change</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        user = userRepo.getUser(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓存数据\"><a href=\"#缓存数据\" class=\"headerlink\" title=\"缓存数据\"></a>缓存数据</h3><p>上面的Repository虽然网络请求做了封装，但是它依赖后台数据源，所以存在不足。</p>\n<p>上面的UserRepository实现的问题是，在获取数据之后，它不会保留在任何地方。如果用户离开UserProfileFragment并重新进来，则应用程序将重新获取数据。这是不好的，有两个原因：它浪费了宝贵的网络带宽和迫使用户等待新的查询完成。为了解决这个问题，我们将向我们的UserRepository添加一个新的数据源，它将把User对象缓存在内存中。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Singleton</span>  <span class=\"comment\">// informs Dagger that this class should be constructed once</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Webservice webservice;</span><br><span class=\"line\">    <span class=\"comment\">// simple in memory cache, details omitted for brevity</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserCache userCache;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        LiveData&lt;User&gt; cached = userCache.get(userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cached != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cached;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> MutableLiveData&lt;User&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;&gt;();</span><br><span class=\"line\">        userCache.put(userId, data);</span><br><span class=\"line\">        <span class=\"comment\">// this is still suboptimal but better than before.</span></span><br><span class=\"line\">        <span class=\"comment\">// a complete implementation must also handle the error cases.</span></span><br><span class=\"line\">        webservice.getUser(userId).enqueue(<span class=\"keyword\">new</span> <span class=\"title class_\">Callback</span>&lt;User&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResponse</span><span class=\"params\">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> &#123;</span><br><span class=\"line\">                data.setValue(response.body());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化数据\"><a href=\"#持久化数据\" class=\"headerlink\" title=\"持久化数据\"></a>持久化数据</h3><p>在当前的实现中，如果用户旋转屏幕或离开并返回到应用程序，现有UI将立即可见，因为Repository会从内存中检索数据。但是，如果用户离开应用程序，并在Android操作系统杀死进程后几小时后又会怎么样？</p>\n<p>在目前的实现中，我们将需要从网络中再次获取数据。这不仅是一个糟糕的用户体验，也是浪费，因为它将使用移动数据来重新获取相同的数据。你以通过缓存Web请求来简单地解决这个问题，但它会产生新的问题。如果请求一个朋友列表而不是单个用户，会发生什么情况？那么你的应用程序可能会显示不一致的数据，这是最令人困惑的用户体验。例如，相同的用户的数据可能会不同，因为朋友列表请求和用户请求可以在不同的时间执行。你的应用需要合并他们，以避免显示不一致的数据。</p>\n<p>正确的处理方法是使用持久模型。这时候Room就派上用场了。</p>\n<blockquote>\n<p>Room是一个对象映射库，它提供本地数据持久性和最少的样板代码。在编译时，它根据模式验证每个查询，从而错误的SQL查询会导致编译时错误，而不是运行时失败。Room抽象了使用原始SQL表和查询的一些基本实现细节。它还允许观察数据库数据（包括集合和连接查询）的更改，通过LiveData对象公开这些更改。</p>\n</blockquote>\n<p>要使用Room我们首先需要使用@Entity来定义实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">  <span class=\"comment\">// getters and setters for fields</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着创建数据库类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.class&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是MyDatabase是一个抽象了，Room会在编译期间提供它的一个实现类。</p>\n<p>接下来需要定义DAO：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(onConflict = REPLACE)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE id = :userId&quot;)</span></span><br><span class=\"line\">    LiveData&lt;User&gt; <span class=\"title function_\">load</span><span class=\"params\">(String userId)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在MyDatabase中添加获取上面这个DAO的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.class&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserDao <span class=\"title function_\">userDao</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的load方法返回的是LiveData<User>，所以当相关数据库中的数据有任何变化时，Room都会通知LiveData上的处于活动状态的观察者。</p>\n<p>现在我们可以修改UserRepository了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Webservice webservice;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Executor executor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserRepository</span><span class=\"params\">(Webservice webservice, UserDao userDao, Executor executor)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webservice = webservice;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userDao = userDao;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.executor = executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        refreshUser(userId);</span><br><span class=\"line\">        <span class=\"comment\">// return a LiveData directly from the database.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> userDao.load(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refreshUser</span><span class=\"params\">(<span class=\"keyword\">final</span> String userId)</span> &#123;</span><br><span class=\"line\">        executor.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// running in a background thread</span></span><br><span class=\"line\">            <span class=\"comment\">// check if user was fetched recently</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">userExists</span> <span class=\"operator\">=</span> userDao.hasUser(FRESH_TIMEOUT);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!userExists) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// refresh the data</span></span><br><span class=\"line\">                <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> webservice.getUser(userId).execute();</span><br><span class=\"line\">                <span class=\"comment\">// TODO check for error etc.</span></span><br><span class=\"line\">                <span class=\"comment\">// Update the database.The LiveData will automatically refresh so</span></span><br><span class=\"line\">                <span class=\"comment\">// we don&#x27;t need to do anything else here besides updating the database</span></span><br><span class=\"line\">                userDao.save(response.body());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里虽然我们将UserRepository的直接数据来源从Webservice改为本地数据库，但我们却不需要修改UserProfileViewModel或者UserProfileFragment。这就是抽象层带来的好处。这也给测试带来了方便，因为你可以提供一个虚假的UserRepository来测试你的UserProfileViewModel。</p>\n<p>现在，如果用户重新回到这个界面，他们会立刻看到数据，因为我们已经将数据做了持久化的保存。当然如果有用例需要，我们也可不展示太老旧的持久化数据。</p>\n<p>在一些用例中，比如下拉刷新，如果正处于网络请求中，那UI需要告诉用户正处于网络请求中。一个好的实践方式就是将UI与数据分离，因为UI可能因为各种原因被更新。从UI的角度来说，请求中的数据和本地数据类似，只是它还没有被持久化到数据库中。</p>\n<p>以下有两种解决方法：</p>\n<ul>\n<li>将getUser的返回值中加入网络状态。</li>\n<li>在Repository中提供一个可以返回刷新状态的方法。如果你只是想在用户通过下拉刷新来告诉用户目前的网络状态的话，那这个方法是比较适合的。</li>\n</ul>\n<h4 id=\"数据唯一来源\"><a href=\"#数据唯一来源\" class=\"headerlink\" title=\"数据唯一来源\"></a>数据唯一来源</h4><p>在以上实例中，数据唯一来源是数据库，这样做的好处是用户可以基于稳定的数据库数据来更新页面，而不需要处理大量的网络请求状态。数据库有数据则使用，没有数据则等待其更新。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们之前提到分层可以个应用提供良好的测试能力，接下来就看看我们怎么测试不同的模块。</p>\n<ul>\n<li><strong>用户界面与交互：</strong>这是唯一一个需要使用到<code>Android UI Instrumentation test</code>的测试模块。测试UI的最好方法就是使用Espresso框架。你可以创建Fragment然后提供一个虚假的ViewModel。因为Fragment只跟ViewModel交互，所以虚拟一个ViewModel就足够了。</li>\n<li><strong>ViewModel：</strong>ViewModel可以用JUnit test进行测试。因为其不涉及界面与交互。而且你只需要虚拟UserRepository即可。</li>\n<li><strong>UserRepository：</strong>测试UserRepository同样使用JUnit test。你可以虚拟出Webservice和DAO。你可以通过使用正确的网络请求来请求数据，让后将数据通过DAO写入数据库。如果数据库中有相关数据则无需进行网络请求。</li>\n<li><strong>UserDao：</strong>对于DAO的测试，推荐使用instrumentation进行测试。因为此处无需UI，并且可以使用in-memory数据库来保证测试的封闭性，不会影响到磁盘上的数据库。</li>\n<li><strong>Webservice：</strong>保持测试的封闭性是相当重要的，因此即使是你的Webservice测试也应避免对后端进行网络呼叫。有很多第三方库提供这方面的支持。例如，MockWebServer是一个很棒的库，可以帮助你为你的测试创建一个假的本地服务器。</li>\n</ul>\n<h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d76112977fe3f19d.webp\" alt=\"架构图\"></p>\n<h2 id=\"指导原则\"><a href=\"#指导原则\" class=\"headerlink\" title=\"指导原则\"></a>指导原则</h2><p>编程是一个创意领域，构建Android应用程序也不例外。有多种方法来解决问题，无论是在多个Activity或Fragment之间传递数据，还是检索远程数据并将其在本地保持离线模式，或者是任何其他常见的场景。</p>\n<p>虽然以下建议不是强制性的，但经验告诉我们，遵循这些建议将使你的代码库从长远来看更加强大，可测试和可维护。</p>\n<ul>\n<li>在AndroidManifest中定义的Activity，Service，Broadcast Receiver等，它们不是数据源。相反，他们只是用于协调和展示数据。由于每个应用程序组件的寿命相当短，运行状态取决于用户与其设备的交互以及运行时的整体当前运行状况，所以不要将这些组件作为数据源。</li>\n<li>你需要在应用程序的各个模块之间创建明确界定的责任范围。例如，不要在不同的类或包之间传递用于加载网络数据的代码。同样，不要将数据缓存和数据绑定这两个责任完全不同的放在同一个类中。</li>\n<li>每个模块之间要竟可能少的相互暴露。不要抱有侥幸心理去公开一个关于模块的内部实现细节的接口。你可能会在短期内获得到便捷，但是随着代码库的发展，你将多付多次技术性债务。</li>\n<li>当你定义模块之间的交互时，请考虑如何使每个模块隔离。例如，拥有用于从网络中提取数据的定义良好的API将使得更容易测试在本地数据库中持久存在该数据的模块。相反，如果将这两个模块的逻辑组合在一起，或者将整个代码库中的网络代码放在一起，那么测试就更难（如果不是不可能）。</li>\n<li>你的应用程序的核心是什么让它独立出来。不要花时间重复轮子或一次又一次地编写相同的样板代码。相反，将精力集中在使你的应用程序独一无二的同时，让Android架构组件和其他推荐的库来处理重复的样板代码。</li>\n<li>保持尽可能多的相关联的新鲜数据，以便你的应用程序在设备处于脱机模式时可用。虽然你可以享受恒定和高速连接，但你的用户可能不会。</li>\n<li>你的Repository应指定一个数据源作为真实的单一来源。每当你的应用程序需要访问这些数据时，它应该始终源于真实的单一来源。</li>\n</ul>\n<h2 id=\"扩展：-公开网络状态\"><a href=\"#扩展：-公开网络状态\" class=\"headerlink\" title=\"扩展： 公开网络状态\"></a>扩展： 公开网络状态</h2><p>在上面的小结我们故意省略了网络错误和加载状态来保证例子的简洁性。在这一小结我们演示一种使用Resource类来封装数据及其状态。以此来公开网络状态。</p>\n<p>下面是简单的Resource实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a generic class that describes a data with a status</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Resource</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Status status;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> T data;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String message;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Resource</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Status status, <span class=\"meta\">@Nullable</span> T data, <span class=\"meta\">@Nullable</span> String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = status;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Resource&lt;T&gt; <span class=\"title function_\">success</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Resource</span>&lt;&gt;(SUCCESS, data, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Resource&lt;T&gt; <span class=\"title function_\">error</span><span class=\"params\">(String msg, <span class=\"meta\">@Nullable</span> T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Resource</span>&lt;&gt;(ERROR, data, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Resource&lt;T&gt; <span class=\"title function_\">loading</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Resource</span>&lt;&gt;(LOADING, data, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以为从网络上抓取视频的同时在UI上显示数据库的旧数据是很常见的用例，所以我们要创建一个可以在多个地方重复使用的帮助类NetworkBoundResource。以下是NetworkBoundResource的决策树：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-f95e8769c20c53aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"NetworkBoundResource的决策树\"></p>\n<p>NetworkBoundResource从观察数据库开始，当第一次从数据库加载完实体后，NetworkBoundResource会检查这个结果是否满足用来展示的需求，如不满足则需要从网上重新获取。当然以上两种情况可能同时发生，你希望先将数据显示在UI上的同时去网络上请求新数据。</p>\n<p>如果网络请求成果，则将结果保存到数据库，然后重新从数据库加载数据，如果网络请求失败，则直接传递错误信息。</p>\n<blockquote>\n<p><strong>注意：</strong>在上面的过程中可以看到当将新数据保存到数据库后，我们重新从数据库加载数据。虽然大部分情况我们不必如此，因为数据库会为我们传递此次更新。但另一方面，依赖数据库内部的更新机制并不是我们想要的如果更新的数据与旧数据一致，则数据谷不会做出更新提示。我们也不希望直接从网络请求中获取数据直接用于UI，因为这样违背了单一数据源的原则。</p>\n</blockquote>\n<p>下面是NetworkBoundResource类的公共api：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ResultType: Type for the Resource data</span></span><br><span class=\"line\"><span class=\"comment\">// RequestType: Type for the API response</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NetworkBoundResource</span>&lt;ResultType, RequestType&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Called to save the result of the API response into the database</span></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveCallResult</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> RequestType item)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called with the data in the database to decide whether it should be</span></span><br><span class=\"line\">    <span class=\"comment\">// fetched from the network.</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFetch</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ResultType data)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called to get the cached data from the database</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> LiveData&lt;ResultType&gt; <span class=\"title function_\">loadFromDb</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called to create the API call.</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> LiveData&lt;ApiResponse&lt;RequestType&gt;&gt; <span class=\"title function_\">createCall</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called when the fetch fails. The child class may want to reset components</span></span><br><span class=\"line\">    <span class=\"comment\">// like rate limiter.</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onFetchFailed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// returns a LiveData that represents the resource</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;Resource&lt;ResultType&gt;&gt; <span class=\"title function_\">getAsLiveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到上面定义了两种泛型，ResultType和RequestType，因为从网络请求返回的数据类型可能会和数据库返回的不一致。</p>\n<p>另外注意到上面代码中的ApiResponse这个类，他是将Retroft2.Call转换成LiveData的一个简单封装。</p>\n<p>下面是NetworkBoundResource余下部分的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NetworkBoundResource</span>&lt;ResultType, RequestType&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MediatorLiveData&lt;Resource&lt;ResultType&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">MediatorLiveData</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    NetworkBoundResource() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1初始化NetworkBoundResource</span></span><br><span class=\"line\">        result.setValue(Resource.loading(<span class=\"literal\">null</span>));</span><br><span class=\"line\">        <span class=\"comment\">//2从数据库加载本地数据</span></span><br><span class=\"line\">        LiveData&lt;ResultType&gt; dbSource = loadFromDb();</span><br><span class=\"line\"></span><br><span class=\"line\">        result.addSource(dbSource, data -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//3加载完成后判断是否需要从网上更新数据</span></span><br><span class=\"line\">            result.removeSource(dbSource);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldFetch(data)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//4从网上更新数据</span></span><br><span class=\"line\">                fetchFromNetwork(dbSource);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//直接用本地数据更新</span></span><br><span class=\"line\">                result.addSource(dbSource,</span><br><span class=\"line\">                        newData -&gt; result.setValue(Resource.success(newData)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fetchFromNetwork</span><span class=\"params\">(<span class=\"keyword\">final</span> LiveData&lt;ResultType&gt; dbSource)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//5进行网络请求</span></span><br><span class=\"line\">        LiveData&lt;ApiResponse&lt;RequestType&gt;&gt; apiResponse = createCall();</span><br><span class=\"line\">        <span class=\"comment\">// we re-attach dbSource as a new source,</span></span><br><span class=\"line\">        <span class=\"comment\">// it will dispatch its latest value quickly</span></span><br><span class=\"line\">        result.addSource(dbSource,</span><br><span class=\"line\">                newData -&gt; result.setValue(Resource.loading(newData)));</span><br><span class=\"line\">        result.addSource(apiResponse, response -&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            result.removeSource(apiResponse);</span><br><span class=\"line\">            result.removeSource(dbSource);</span><br><span class=\"line\">            <span class=\"comment\">//noinspection ConstantConditions</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.isSuccessful()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//6请求数据成功，保存数据</span></span><br><span class=\"line\">                saveResultAndReInit(response);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//请求失败使用，传递失败信息</span></span><br><span class=\"line\">                onFetchFailed();</span><br><span class=\"line\">                result.addSource(dbSource,</span><br><span class=\"line\">                        newData -&gt; result.setValue(</span><br><span class=\"line\">                                Resource.error(response.errorMessage, newData)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveResultAndReInit</span><span class=\"params\">(ApiResponse&lt;RequestType&gt; response)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncTask</span>&lt;Void, Void, Void&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> Void <span class=\"title function_\">doInBackground</span><span class=\"params\">(Void... voids)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//7保存请求到的数据</span></span><br><span class=\"line\">                saveCallResult(response.body);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPostExecute</span><span class=\"params\">(Void aVoid)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// we specially request a new live data,</span></span><br><span class=\"line\">                <span class=\"comment\">// otherwise we will get immediately last cached value,</span></span><br><span class=\"line\">                <span class=\"comment\">// which may not be updated with latest results received from network.</span></span><br><span class=\"line\">                <span class=\"comment\">//8再次加载数据库，使用数据库中的最新数据</span></span><br><span class=\"line\">                result.addSource(loadFromDb(),</span><br><span class=\"line\">                        newData -&gt; result.setValue(Resource.success(newData)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们就可以在UserRepository中使用NetworkBoundResource了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    Webservice webservice;</span><br><span class=\"line\">    UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;Resource&lt;User&gt;&gt; <span class=\"title function_\">loadUser</span><span class=\"params\">(<span class=\"keyword\">final</span> String userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NetworkBoundResource</span>&lt;User,User&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveCallResult</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> User item)</span> &#123;</span><br><span class=\"line\">                userDao.insert(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFetch</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> User data)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> rateLimiter.canFetch(userId) &amp;&amp; (data == <span class=\"literal\">null</span> || !isFresh(data));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@NonNull</span> <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> LiveData&lt;User&gt; <span class=\"title function_\">loadFromDb</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userDao.load(userId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@NonNull</span> <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> LiveData&lt;ApiResponse&lt;User&gt;&gt; <span class=\"title function_\">createCall</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> webservice.getUser(userId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.getAsLiveData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"<p>此指南适用于那些曾经或现在进行Android应用的基础开发，并希望了解和学习编写Android程序的最佳实践和架构。通过学习来构建强大的生产级别的应用。</p>\n<blockquote>\n<p><strong>注意：</strong>此指南默认你对Android开发有比较深的理解，熟知Android Framework。如果你还只是个Android开发新手，那么建议先学习下Android的基础知识。</p>\n</blockquote>","more":"<h2 id=\"Android程序员面临的问题\"><a href=\"#Android程序员面临的问题\" class=\"headerlink\" title=\"Android程序员面临的问题\"></a>Android程序员面临的问题</h2><p>传统的桌面应用程序开发在大多数情况下，启动器快捷方式都有一个入口点，并作为一个单一的过程运行，但Android应用程序的结构更为复杂。典型的Android应用程序由多个应用程序组件构成，包括Activity，Fragment，Service，ContentProvider和Broadcast Receiver。</p>\n<p>大多数这些应用程序组件在Android操作系统使用的AndroidManifest中声明，以决定如何将应用程序集成到设备上来为用户提供完整的体验。尽管如前所述，桌面应用程序传统上是作为一个单一的进程运行的，但正确编写的Android应用程序则需要更灵活，因为用户通过设备上的不同应用程序编织方式，不断切换流程和任务。</p>\n<p>举个例子，当用户在社交App上打算分享一张照片，那么Android系统就会为此启动相机来完成此次请求。此时用户离开了社交App，但是这个用户体验是无缝连接的。相机可能又会触发并启动文件管理器来选择照片。最终回到社交App并分享照片。此外，在此过程中的任何时候，用户可能会被打电话中断，并在完成电话后再回来分享照片。</p>\n<p>在Android中，这种应用间跳转行为很常见，因此你的应用必须正确处理这些流程。请记住，移动设备是资源有限的，所以在任何时候，操作系统可能需要杀死一些应用来为新的应用腾出空间。</p>\n<p>你的应用程序的所有组件都可以被单独启动或无序启动，并且在任何时候由用户或系统销毁。因为应用程序组件是短暂的，它们的生命周期（创建和销毁时）不受你的控制，<strong>因此你不应该将任何应用程序数据或状态存储在应用程序组件中</strong>，并且应用程序组件不应相互依赖。</p>\n<h2 id=\"常见的架构原理\"><a href=\"#常见的架构原理\" class=\"headerlink\" title=\"常见的架构原理\"></a>常见的架构原理</h2><p>如果你无法使用应用程序组件来存储应用程序数据和状态，应如何构建应用程序？</p>\n<p>在你的App开发中你应该将重心放在<strong>分层</strong>上，如果将所有的代码都写在Activity或者Fragment中，那问题就大了。任何不是处理UI或跟操作系统交互的操作不应该放在这两个类中。尽量保持它们代码的精简，这样你可以避免很多与生命周期相关的问题。记住你并不能掌控Activity和Fragment，他们只是在你的App和Android系统间起了桥梁的作用。任何时候，Android系统可能会根据用户操作或其他因素（如低内存）来回收它们。最好尽量减少对他们的依赖，以提供坚实的用户体验。</p>\n<p>还有一点比较重要的就是<strong>持久模型驱动UI</strong>。使用持久模型主要是因为当你的UI被回收或者在没有网络的情况下还能正常给用户展示数据。<code>模型</code>是用来处理应用数据的组件，它们独立于应用中的视图和四大组件。因此模型的生命周期必然和UI是分离的。保持UI代码的整洁，会让你能更容易的管理和调整UI。让你的应用基于模型开发可以很好的管理你应用的数据并是你的应用更具测试性和持续性。</p>\n<h2 id=\"应用架构推荐\"><a href=\"#应用架构推荐\" class=\"headerlink\" title=\"应用架构推荐\"></a>应用架构推荐</h2><p>回到这篇文章的主题，来说说Android官方架构组件（一下简称架构）。一下会介绍如何在你的应用中实践这一架构模式。</p>\n<blockquote>\n<p><strong>注意：</strong>不可能存在某一种架构方式可以完美适合任何场景。话虽如此，这种架构应该是大多数用例的良好起点。如果你已经有了很好的Android应用程序架构方式，请继续保持。</p>\n</blockquote>\n<p>假设我们需要一个现实用户资料的UI，该用户的资料文件将使用REST API从服务端获取。</p>\n<h3 id=\"构建用户界面\"><a href=\"#构建用户界面\" class=\"headerlink\" title=\"构建用户界面\"></a>构建用户界面</h3><p>我们的这个用户界面由一个<code>UserProfileFragment.java</code>文件和它的布局文件<code>user_profile_layout.xml</code>。</p>\n<p>为了驱动UI，数据模型需要持有下面两个数据：</p>\n<ul>\n<li><strong>User ID:</strong>用户的标识符。最好使用Fragment的参数将此信息传递到Fragment中。如果Android操作系统回收了Fragment，则会保留此信息，以便下次重新启动应用时，该ID可用。</li>\n<li><strong>User Object:</strong>传统的Java对象，代表用户的数据。</li>\n</ul>\n<p>为此，我们新建一个继承自ViewModel的名为<code>UserProfileViewModel</code>的模型来持有这个数据。</p>\n<p>ViewModel提供特定UI组件的数据，例如Activity和Fragment，并处理与数据处理业务部分的通信，例如调用其他组件来加载数据或转发用户修改。ViewModel不了解View，并且不受UI的重建（如重由于旋转而导致的Activity的重建）的影响。</p>\n<p>现在我们有一下三个文件：</p>\n<ul>\n<li>user_profile.xml: 视图的布局文件。</li>\n<li>UserProfileViewModel.java: 持有UI数据的模型。</li>\n<li>UserProfileFragment.java: 用于显示数据模型中的数据并和用户进行交互。</li>\n</ul>\n<p>一下是具体代码（为了简化，布局文件省略）。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String userId;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> User user;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userId = userId;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileFragment</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">LifecycleFragment</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">UID_KEY</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;uid&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserProfileViewModel viewModel;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">userId</span> <span class=\"operator\">=</span> getArguments().getString(UID_KEY);</span><br><span class=\"line\">        viewModel = ViewModelProviders.of(<span class=\"built_in\">this</span>).get(UserProfileViewModel.class);</span><br><span class=\"line\">        viewModel.init(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> View <span class=\"title function_\">onCreateView</span><span class=\"params\">(LayoutInflater inflater,</span></span><br><span class=\"line\"><span class=\"params\">                <span class=\"meta\">@Nullable</span> ViewGroup container, <span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> inflater.inflate(R.layout.user_profile, container, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意：</strong>上面的UserProfileFragment继承自LifeCycleFragment而不是Fragment。当Lifecycle的Api稳定后，Fragment会默认实现LifeCycleOwner。</p>\n</blockquote>\n<p>现在，我们有三个文件，我们如何连接它们？毕竟，当ViewModel的用户字段被设置时，我们需要一种通知UI的方法。这里就要提到LiveData了。</p>\n<blockquote>\n<p>LiveData是一个可观察的数据持有者。它允许应用程序中的组件观察LiveData对象持有的数据，而不会在它们之间创建显式和刚性的依赖路径。LiveData还尊重你的应用程序组件（Activity，Fragment，Service）的生命周期状态，并做正确的事情以防止内存泄漏，从而你的应用程序不会消耗更多的内存。</p>\n</blockquote>\n<p>如果你已经使用了想Rxjava活着Agrea这类第三方库，那么你可以使用它们代替LiveData，不过你需要处理好它们与组件生命周期之间的关系。</p>\n<p>现在我们使用<code>LiveData&lt;User&gt;</code>来代替UserProfileViewModel中的User字段。所以Fragment可以通过观察它来更新数据。LiveData值得称道的地方就在于它是生命周期感知的，当生命周期结束是，其上的观察者会被即使清理。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiveData&lt;User&gt; user;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后将UserProfileFragment修改如下，观察数据并更新UI：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onActivityCreated</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>.onActivityCreated(savedInstanceState);</span><br><span class=\"line\">    viewModel.getUser().observe(<span class=\"built_in\">this</span>, user -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">// update UI</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一旦用户数据更新，onChanged回调将被调用然后UI会被刷新。</p>\n<p>如果你熟悉一些使用观察者模式第三方库，你会觉得奇怪，为什么没有在Fragment的onStop()方法中将观察者移除。对于LiveData来说这是没有必要的，因为它是生命周期感知的，这意味着如果UI处于不活动状态，它就不会调用观察者的回调来更新数据。并且在onDestroy后会自动移除。</p>\n<p>我们也不需要处理任何视图重建（如屏幕旋转）。ViewModel会自动恢复重建前的数据。当新的视图被创建出来后，它会接收到与之前相同的ViewModel实例，并且观察者的回调会被立刻调用，更新最新的数据。这也是ViewModel为什么不能直接引用视图对象，因为它的生命周期长于视图对象。</p>\n<h3 id=\"获取数据\"><a href=\"#获取数据\" class=\"headerlink\" title=\"获取数据\"></a>获取数据</h3><p>现在我们将视图和模型连接起来，但是模型该怎么获取数据呢？在这个例子中，我们假设使用REST API从后台获取。我们将使用Retrofit来向后台请求数据。</p>\n<p>我们的retrofit类Webservice如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Webservice</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@GET</span> declares an HTTP GET request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@Path</span>(&quot;user&quot;) annotation on the userId parameter marks it as a</span></span><br><span class=\"line\"><span class=\"comment\">     * replacement for the &#123;user&#125; placeholder in the <span class=\"doctag\">@GET</span> path</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@GET(&quot;/users/&#123;user&#125;&quot;)</span></span><br><span class=\"line\">    Call&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(<span class=\"meta\">@Path(&quot;user&quot;)</span> String userId)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果只是简单的实现，ViewModel可以直接操作Webservice来获取用户数据。虽然这样可以正常工作，但你的应用无法保证它的后续迭代。因为这样做将太多的责任让ViewModel来承担，这样就违反类之前讲到的分层原则。又因为ViewModel的生命周期是绑定在Activity和Fragment上的，所以当UI被销毁后如果丢失所有数据将是很差的用户体验。所以我们的ViewModel将和一个新的模块进行交互，这个模块叫Repository。</p>\n<blockquote>\n<p><strong>Repository</strong>模块负责处理数据。它为应用程序的其余部分提供了一个干净的API。他知道在数据更新时从哪里获取数据和调用哪些API调用。你可以将它们视为不同数据源（持久性模型，Web服务，缓存等）之间的中介者。</p>\n</blockquote>\n<p>UserRepository类如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Webservice webservice;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(<span class=\"type\">int</span> userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This is not an optimal implementation, we&#x27;ll fix it below</span></span><br><span class=\"line\">        <span class=\"keyword\">final</span> MutableLiveData&lt;User&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;&gt;();</span><br><span class=\"line\">        webservice.getUser(userId).enqueue(<span class=\"keyword\">new</span> <span class=\"title class_\">Callback</span>&lt;User&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResponse</span><span class=\"params\">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// error case is left out for brevity</span></span><br><span class=\"line\">                data.setValue(response.body());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>虽然repository模块看上去没有必要，但他起着重要的作用。它为App的其他部分抽象出了数据源。现在我们的ViewModel并不知道数据是通过WebService来获取的，这意味着我们可以随意替换掉获取数据的实现。</p>\n<h4 id=\"管理组件间的依赖关系\"><a href=\"#管理组件间的依赖关系\" class=\"headerlink\" title=\"管理组件间的依赖关系\"></a>管理组件间的依赖关系</h4><p>上面这种写法可以看出来UserRepository需要初始化Webservice实例，这虽然说起来简单，但要实现的话还需要知道Webservice的具体构造方法该如何写。这将加大代码的复杂度，另外UserRepository可能并不是唯一使用Webservice的对象，所以这种在内部构建Webservice实例显然是不推荐的，下面有两种模式来解决这个问题：</p>\n<ul>\n<li><strong>依赖注入：</strong>依赖注入允许类定义它们的依赖关系而不构造它们。在运行时，另一个类负责提供这些依赖关系。我们建议在Android应用程序中使用Google的Dagger 2库实现依赖注入。Dagger 2通过遍历依赖关系树自动构建对象，并在依赖关系上提供编译时保证。</li>\n<li><strong>服务定位器：</strong>服务定位器提供了一个注册表，其中类可以获取它们的依赖关系而不是构造它们。与依赖注入（DI）相比，实现起来相对容易，因此如果您不熟悉DI，请改用Service Locator。</li>\n</ul>\n<p>这些模式允许你扩展代码，因为它们提供明确的模式来管理依赖关系，而不会重复代码或增加复杂性。两者都允许交换实现进行测试;这是使用它们的主要好处之一。在这个例子中，我们将使用Dagger 2来管理依赖关系。</p>\n<h3 id=\"连接ViewModel和Repository\"><a href=\"#连接ViewModel和Repository\" class=\"headerlink\" title=\"连接ViewModel和Repository\"></a>连接ViewModel和Repository</h3><p>现在，我们的UserProfileViewModel可以改写成这样：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserProfileViewModel</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ViewModel</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> LiveData&lt;User&gt; user;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserRepository userRepo;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span> <span class=\"comment\">// UserRepository parameter is provided by Dagger 2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserProfileViewModel</span><span class=\"params\">(UserRepository userRepo)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userRepo = userRepo;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.user != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ViewModel is created per Fragment so</span></span><br><span class=\"line\">            <span class=\"comment\">// we know the userId won&#x27;t change</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        user = userRepo.getUser(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.user;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓存数据\"><a href=\"#缓存数据\" class=\"headerlink\" title=\"缓存数据\"></a>缓存数据</h3><p>上面的Repository虽然网络请求做了封装，但是它依赖后台数据源，所以存在不足。</p>\n<p>上面的UserRepository实现的问题是，在获取数据之后，它不会保留在任何地方。如果用户离开UserProfileFragment并重新进来，则应用程序将重新获取数据。这是不好的，有两个原因：它浪费了宝贵的网络带宽和迫使用户等待新的查询完成。为了解决这个问题，我们将向我们的UserRepository添加一个新的数据源，它将把User对象缓存在内存中。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Singleton</span>  <span class=\"comment\">// informs Dagger that this class should be constructed once</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Webservice webservice;</span><br><span class=\"line\">    <span class=\"comment\">// simple in memory cache, details omitted for brevity</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserCache userCache;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        LiveData&lt;User&gt; cached = userCache.get(userId);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (cached != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> cached;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">final</span> MutableLiveData&lt;User&gt; data = <span class=\"keyword\">new</span> <span class=\"title class_\">MutableLiveData</span>&lt;&gt;();</span><br><span class=\"line\">        userCache.put(userId, data);</span><br><span class=\"line\">        <span class=\"comment\">// this is still suboptimal but better than before.</span></span><br><span class=\"line\">        <span class=\"comment\">// a complete implementation must also handle the error cases.</span></span><br><span class=\"line\">        webservice.getUser(userId).enqueue(<span class=\"keyword\">new</span> <span class=\"title class_\">Callback</span>&lt;User&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onResponse</span><span class=\"params\">(Call&lt;User&gt; call, Response&lt;User&gt; response)</span> &#123;</span><br><span class=\"line\">                data.setValue(response.body());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化数据\"><a href=\"#持久化数据\" class=\"headerlink\" title=\"持久化数据\"></a>持久化数据</h3><p>在当前的实现中，如果用户旋转屏幕或离开并返回到应用程序，现有UI将立即可见，因为Repository会从内存中检索数据。但是，如果用户离开应用程序，并在Android操作系统杀死进程后几小时后又会怎么样？</p>\n<p>在目前的实现中，我们将需要从网络中再次获取数据。这不仅是一个糟糕的用户体验，也是浪费，因为它将使用移动数据来重新获取相同的数据。你以通过缓存Web请求来简单地解决这个问题，但它会产生新的问题。如果请求一个朋友列表而不是单个用户，会发生什么情况？那么你的应用程序可能会显示不一致的数据，这是最令人困惑的用户体验。例如，相同的用户的数据可能会不同，因为朋友列表请求和用户请求可以在不同的时间执行。你的应用需要合并他们，以避免显示不一致的数据。</p>\n<p>正确的处理方法是使用持久模型。这时候Room就派上用场了。</p>\n<blockquote>\n<p>Room是一个对象映射库，它提供本地数据持久性和最少的样板代码。在编译时，它根据模式验证每个查询，从而错误的SQL查询会导致编译时错误，而不是运行时失败。Room抽象了使用原始SQL表和查询的一些基本实现细节。它还允许观察数据库数据（包括集合和连接查询）的更改，通过LiveData对象公开这些更改。</p>\n</blockquote>\n<p>要使用Room我们首先需要使用@Entity来定义实体：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Entity</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">  <span class=\"meta\">@PrimaryKey</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> String lastName;</span><br><span class=\"line\">  <span class=\"comment\">// getters and setters for fields</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着创建数据库类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.class&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是MyDatabase是一个抽象了，Room会在编译期间提供它的一个实现类。</p>\n<p>接下来需要定义DAO：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Dao</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserDao</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Insert(onConflict = REPLACE)</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">save</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Query(&quot;SELECT * FROM user WHERE id = :userId&quot;)</span></span><br><span class=\"line\">    LiveData&lt;User&gt; <span class=\"title function_\">load</span><span class=\"params\">(String userId)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在MyDatabase中添加获取上面这个DAO的方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Database(entities = &#123;User.class&#125;, version = 1)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyDatabase</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RoomDatabase</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> UserDao <span class=\"title function_\">userDao</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的load方法返回的是LiveData<User>，所以当相关数据库中的数据有任何变化时，Room都会通知LiveData上的处于活动状态的观察者。</p>\n<p>现在我们可以修改UserRepository了：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Singleton</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Webservice webservice;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> UserDao userDao;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Executor executor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Inject</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">UserRepository</span><span class=\"params\">(Webservice webservice, UserDao userDao, Executor executor)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.webservice = webservice;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.userDao = userDao;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.executor = executor;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;User&gt; <span class=\"title function_\">getUser</span><span class=\"params\">(String userId)</span> &#123;</span><br><span class=\"line\">        refreshUser(userId);</span><br><span class=\"line\">        <span class=\"comment\">// return a LiveData directly from the database.</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> userDao.load(userId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">refreshUser</span><span class=\"params\">(<span class=\"keyword\">final</span> String userId)</span> &#123;</span><br><span class=\"line\">        executor.execute(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">// running in a background thread</span></span><br><span class=\"line\">            <span class=\"comment\">// check if user was fetched recently</span></span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">userExists</span> <span class=\"operator\">=</span> userDao.hasUser(FRESH_TIMEOUT);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!userExists) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// refresh the data</span></span><br><span class=\"line\">                <span class=\"type\">Response</span> <span class=\"variable\">response</span> <span class=\"operator\">=</span> webservice.getUser(userId).execute();</span><br><span class=\"line\">                <span class=\"comment\">// TODO check for error etc.</span></span><br><span class=\"line\">                <span class=\"comment\">// Update the database.The LiveData will automatically refresh so</span></span><br><span class=\"line\">                <span class=\"comment\">// we don&#x27;t need to do anything else here besides updating the database</span></span><br><span class=\"line\">                userDao.save(response.body());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里虽然我们将UserRepository的直接数据来源从Webservice改为本地数据库，但我们却不需要修改UserProfileViewModel或者UserProfileFragment。这就是抽象层带来的好处。这也给测试带来了方便，因为你可以提供一个虚假的UserRepository来测试你的UserProfileViewModel。</p>\n<p>现在，如果用户重新回到这个界面，他们会立刻看到数据，因为我们已经将数据做了持久化的保存。当然如果有用例需要，我们也可不展示太老旧的持久化数据。</p>\n<p>在一些用例中，比如下拉刷新，如果正处于网络请求中，那UI需要告诉用户正处于网络请求中。一个好的实践方式就是将UI与数据分离，因为UI可能因为各种原因被更新。从UI的角度来说，请求中的数据和本地数据类似，只是它还没有被持久化到数据库中。</p>\n<p>以下有两种解决方法：</p>\n<ul>\n<li>将getUser的返回值中加入网络状态。</li>\n<li>在Repository中提供一个可以返回刷新状态的方法。如果你只是想在用户通过下拉刷新来告诉用户目前的网络状态的话，那这个方法是比较适合的。</li>\n</ul>\n<h4 id=\"数据唯一来源\"><a href=\"#数据唯一来源\" class=\"headerlink\" title=\"数据唯一来源\"></a>数据唯一来源</h4><p>在以上实例中，数据唯一来源是数据库，这样做的好处是用户可以基于稳定的数据库数据来更新页面，而不需要处理大量的网络请求状态。数据库有数据则使用，没有数据则等待其更新。</p>\n<h3 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h3><p>我们之前提到分层可以个应用提供良好的测试能力，接下来就看看我们怎么测试不同的模块。</p>\n<ul>\n<li><strong>用户界面与交互：</strong>这是唯一一个需要使用到<code>Android UI Instrumentation test</code>的测试模块。测试UI的最好方法就是使用Espresso框架。你可以创建Fragment然后提供一个虚假的ViewModel。因为Fragment只跟ViewModel交互，所以虚拟一个ViewModel就足够了。</li>\n<li><strong>ViewModel：</strong>ViewModel可以用JUnit test进行测试。因为其不涉及界面与交互。而且你只需要虚拟UserRepository即可。</li>\n<li><strong>UserRepository：</strong>测试UserRepository同样使用JUnit test。你可以虚拟出Webservice和DAO。你可以通过使用正确的网络请求来请求数据，让后将数据通过DAO写入数据库。如果数据库中有相关数据则无需进行网络请求。</li>\n<li><strong>UserDao：</strong>对于DAO的测试，推荐使用instrumentation进行测试。因为此处无需UI，并且可以使用in-memory数据库来保证测试的封闭性，不会影响到磁盘上的数据库。</li>\n<li><strong>Webservice：</strong>保持测试的封闭性是相当重要的，因此即使是你的Webservice测试也应避免对后端进行网络呼叫。有很多第三方库提供这方面的支持。例如，MockWebServer是一个很棒的库，可以帮助你为你的测试创建一个假的本地服务器。</li>\n</ul>\n<h3 id=\"架构图\"><a href=\"#架构图\" class=\"headerlink\" title=\"架构图\"></a>架构图</h3><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d76112977fe3f19d.webp\" alt=\"架构图\"></p>\n<h2 id=\"指导原则\"><a href=\"#指导原则\" class=\"headerlink\" title=\"指导原则\"></a>指导原则</h2><p>编程是一个创意领域，构建Android应用程序也不例外。有多种方法来解决问题，无论是在多个Activity或Fragment之间传递数据，还是检索远程数据并将其在本地保持离线模式，或者是任何其他常见的场景。</p>\n<p>虽然以下建议不是强制性的，但经验告诉我们，遵循这些建议将使你的代码库从长远来看更加强大，可测试和可维护。</p>\n<ul>\n<li>在AndroidManifest中定义的Activity，Service，Broadcast Receiver等，它们不是数据源。相反，他们只是用于协调和展示数据。由于每个应用程序组件的寿命相当短，运行状态取决于用户与其设备的交互以及运行时的整体当前运行状况，所以不要将这些组件作为数据源。</li>\n<li>你需要在应用程序的各个模块之间创建明确界定的责任范围。例如，不要在不同的类或包之间传递用于加载网络数据的代码。同样，不要将数据缓存和数据绑定这两个责任完全不同的放在同一个类中。</li>\n<li>每个模块之间要竟可能少的相互暴露。不要抱有侥幸心理去公开一个关于模块的内部实现细节的接口。你可能会在短期内获得到便捷，但是随着代码库的发展，你将多付多次技术性债务。</li>\n<li>当你定义模块之间的交互时，请考虑如何使每个模块隔离。例如，拥有用于从网络中提取数据的定义良好的API将使得更容易测试在本地数据库中持久存在该数据的模块。相反，如果将这两个模块的逻辑组合在一起，或者将整个代码库中的网络代码放在一起，那么测试就更难（如果不是不可能）。</li>\n<li>你的应用程序的核心是什么让它独立出来。不要花时间重复轮子或一次又一次地编写相同的样板代码。相反，将精力集中在使你的应用程序独一无二的同时，让Android架构组件和其他推荐的库来处理重复的样板代码。</li>\n<li>保持尽可能多的相关联的新鲜数据，以便你的应用程序在设备处于脱机模式时可用。虽然你可以享受恒定和高速连接，但你的用户可能不会。</li>\n<li>你的Repository应指定一个数据源作为真实的单一来源。每当你的应用程序需要访问这些数据时，它应该始终源于真实的单一来源。</li>\n</ul>\n<h2 id=\"扩展：-公开网络状态\"><a href=\"#扩展：-公开网络状态\" class=\"headerlink\" title=\"扩展： 公开网络状态\"></a>扩展： 公开网络状态</h2><p>在上面的小结我们故意省略了网络错误和加载状态来保证例子的简洁性。在这一小结我们演示一种使用Resource类来封装数据及其状态。以此来公开网络状态。</p>\n<p>下面是简单的Resource实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//a generic class that describes a data with a status</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Resource</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> Status status;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> T data;</span><br><span class=\"line\">    <span class=\"meta\">@Nullable</span> <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> String message;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Resource</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> Status status, <span class=\"meta\">@Nullable</span> T data, <span class=\"meta\">@Nullable</span> String message)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = status;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.data = data;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.message = message;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Resource&lt;T&gt; <span class=\"title function_\">success</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Resource</span>&lt;&gt;(SUCCESS, data, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Resource&lt;T&gt; <span class=\"title function_\">error</span><span class=\"params\">(String msg, <span class=\"meta\">@Nullable</span> T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Resource</span>&lt;&gt;(ERROR, data, msg);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; Resource&lt;T&gt; <span class=\"title function_\">loading</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> T data)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Resource</span>&lt;&gt;(LOADING, data, <span class=\"literal\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>以为从网络上抓取视频的同时在UI上显示数据库的旧数据是很常见的用例，所以我们要创建一个可以在多个地方重复使用的帮助类NetworkBoundResource。以下是NetworkBoundResource的决策树：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-f95e8769c20c53aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"NetworkBoundResource的决策树\"></p>\n<p>NetworkBoundResource从观察数据库开始，当第一次从数据库加载完实体后，NetworkBoundResource会检查这个结果是否满足用来展示的需求，如不满足则需要从网上重新获取。当然以上两种情况可能同时发生，你希望先将数据显示在UI上的同时去网络上请求新数据。</p>\n<p>如果网络请求成果，则将结果保存到数据库，然后重新从数据库加载数据，如果网络请求失败，则直接传递错误信息。</p>\n<blockquote>\n<p><strong>注意：</strong>在上面的过程中可以看到当将新数据保存到数据库后，我们重新从数据库加载数据。虽然大部分情况我们不必如此，因为数据库会为我们传递此次更新。但另一方面，依赖数据库内部的更新机制并不是我们想要的如果更新的数据与旧数据一致，则数据谷不会做出更新提示。我们也不希望直接从网络请求中获取数据直接用于UI，因为这样违背了单一数据源的原则。</p>\n</blockquote>\n<p>下面是NetworkBoundResource类的公共api：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ResultType: Type for the Resource data</span></span><br><span class=\"line\"><span class=\"comment\">// RequestType: Type for the API response</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NetworkBoundResource</span>&lt;ResultType, RequestType&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// Called to save the result of the API response into the database</span></span><br><span class=\"line\">    <span class=\"meta\">@WorkerThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveCallResult</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> RequestType item)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called with the data in the database to decide whether it should be</span></span><br><span class=\"line\">    <span class=\"comment\">// fetched from the network.</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFetch</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> ResultType data)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called to get the cached data from the database</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> LiveData&lt;ResultType&gt; <span class=\"title function_\">loadFromDb</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called to create the API call.</span></span><br><span class=\"line\">    <span class=\"meta\">@NonNull</span> <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> LiveData&lt;ApiResponse&lt;RequestType&gt;&gt; <span class=\"title function_\">createCall</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Called when the fetch fails. The child class may want to reset components</span></span><br><span class=\"line\">    <span class=\"comment\">// like rate limiter.</span></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onFetchFailed</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// returns a LiveData that represents the resource</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">final</span> LiveData&lt;Resource&lt;ResultType&gt;&gt; <span class=\"title function_\">getAsLiveData</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意到上面定义了两种泛型，ResultType和RequestType，因为从网络请求返回的数据类型可能会和数据库返回的不一致。</p>\n<p>另外注意到上面代码中的ApiResponse这个类，他是将Retroft2.Call转换成LiveData的一个简单封装。</p>\n<p>下面是NetworkBoundResource余下部分的实现：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NetworkBoundResource</span>&lt;ResultType, RequestType&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> MediatorLiveData&lt;Resource&lt;ResultType&gt;&gt; result = <span class=\"keyword\">new</span> <span class=\"title class_\">MediatorLiveData</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    NetworkBoundResource() &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1初始化NetworkBoundResource</span></span><br><span class=\"line\">        result.setValue(Resource.loading(<span class=\"literal\">null</span>));</span><br><span class=\"line\">        <span class=\"comment\">//2从数据库加载本地数据</span></span><br><span class=\"line\">        LiveData&lt;ResultType&gt; dbSource = loadFromDb();</span><br><span class=\"line\"></span><br><span class=\"line\">        result.addSource(dbSource, data -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//3加载完成后判断是否需要从网上更新数据</span></span><br><span class=\"line\">            result.removeSource(dbSource);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (shouldFetch(data)) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//4从网上更新数据</span></span><br><span class=\"line\">                fetchFromNetwork(dbSource);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//直接用本地数据更新</span></span><br><span class=\"line\">                result.addSource(dbSource,</span><br><span class=\"line\">                        newData -&gt; result.setValue(Resource.success(newData)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">fetchFromNetwork</span><span class=\"params\">(<span class=\"keyword\">final</span> LiveData&lt;ResultType&gt; dbSource)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//5进行网络请求</span></span><br><span class=\"line\">        LiveData&lt;ApiResponse&lt;RequestType&gt;&gt; apiResponse = createCall();</span><br><span class=\"line\">        <span class=\"comment\">// we re-attach dbSource as a new source,</span></span><br><span class=\"line\">        <span class=\"comment\">// it will dispatch its latest value quickly</span></span><br><span class=\"line\">        result.addSource(dbSource,</span><br><span class=\"line\">                newData -&gt; result.setValue(Resource.loading(newData)));</span><br><span class=\"line\">        result.addSource(apiResponse, response -&gt; &#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">            result.removeSource(apiResponse);</span><br><span class=\"line\">            result.removeSource(dbSource);</span><br><span class=\"line\">            <span class=\"comment\">//noinspection ConstantConditions</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (response.isSuccessful()) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//6请求数据成功，保存数据</span></span><br><span class=\"line\">                saveResultAndReInit(response);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//请求失败使用，传递失败信息</span></span><br><span class=\"line\">                onFetchFailed();</span><br><span class=\"line\">                result.addSource(dbSource,</span><br><span class=\"line\">                        newData -&gt; result.setValue(</span><br><span class=\"line\">                                Resource.error(response.errorMessage, newData)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@MainThread</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveResultAndReInit</span><span class=\"params\">(ApiResponse&lt;RequestType&gt; response)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">AsyncTask</span>&lt;Void, Void, Void&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> Void <span class=\"title function_\">doInBackground</span><span class=\"params\">(Void... voids)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//7保存请求到的数据</span></span><br><span class=\"line\">                saveCallResult(response.body);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onPostExecute</span><span class=\"params\">(Void aVoid)</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// we specially request a new live data,</span></span><br><span class=\"line\">                <span class=\"comment\">// otherwise we will get immediately last cached value,</span></span><br><span class=\"line\">                <span class=\"comment\">// which may not be updated with latest results received from network.</span></span><br><span class=\"line\">                <span class=\"comment\">//8再次加载数据库，使用数据库中的最新数据</span></span><br><span class=\"line\">                result.addSource(loadFromDb(),</span><br><span class=\"line\">                        newData -&gt; result.setValue(Resource.success(newData)));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.execute();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着我们就可以在UserRepository中使用NetworkBoundResource了。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserRepository</span> &#123;</span><br><span class=\"line\">    Webservice webservice;</span><br><span class=\"line\">    UserDao userDao;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LiveData&lt;Resource&lt;User&gt;&gt; <span class=\"title function_\">loadUser</span><span class=\"params\">(<span class=\"keyword\">final</span> String userId)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NetworkBoundResource</span>&lt;User,User&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">saveCallResult</span><span class=\"params\">(<span class=\"meta\">@NonNull</span> User item)</span> &#123;</span><br><span class=\"line\">                userDao.insert(item);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> <span class=\"type\">boolean</span> <span class=\"title function_\">shouldFetch</span><span class=\"params\">(<span class=\"meta\">@Nullable</span> User data)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> rateLimiter.canFetch(userId) &amp;&amp; (data == <span class=\"literal\">null</span> || !isFresh(data));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@NonNull</span> <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> LiveData&lt;User&gt; <span class=\"title function_\">loadFromDb</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> userDao.load(userId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"meta\">@NonNull</span> <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">protected</span> LiveData&lt;ApiResponse&lt;User&gt;&gt; <span class=\"title function_\">createCall</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> webservice.getUser(userId);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;.getAsLiveData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>"},{"title":"Android OpenGL - 02.EGL创建流程及EGL测试","date":"2020-03-30T14:58:44.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_banner.jpg","_content":"\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-init-progress.PNG)\n\n在上一篇的基础上，我们开始进行EGL的初始化。\n\n在初始化之前先写一个工具类 `ZqlPlayerLog.h` 用户日志打印：\n<!-- more -->\n```cpp\n//\n// Created by zqlxt on 2020/3/29.\n//\n#ifndef ZQLPLAYER_ZQLPLAYERLOG_H\n#define ZQLPLAYER_ZQLPLAYERLOG_H\n\n#include \"android/log.h\"\n\n#define LOGD(FORMAT, ...) __android_log_print(ANDROID_LOG_DEBUG,\"scott\",FORMAT, ##__VA_ARGS__);\n#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,\"scott\",FORMAT, ##__VA_ARGS__);\n\n#endif //ZQLPLAYER_ZQLPLAYERLOG_H\n```\n\n\n接着我们在 `cpp` 下新建一个名为 `egl` 的文件夹，用于存放 EGL 初始化相关类。\n\n首先定义头文件 `EGLHelper.h` :\n\n```cpp\n//\n// Created by zqlxt on 2020/3/29.\n//\n\n#ifndef ZQLPLAYER_EGLHELPER_H\n#define ZQLPLAYER_EGLHELPER_H\n\n#include \"EGL/egl.h\"\n\nclass EGLHelper {\n\npublic:\n    EGLDisplay mEglDisplay;\n    EGLSurface mEglSurface;\n    EGLConfig mEglConfig;\n    EGLContext mEglContext;\npublic:\n    EGLHelper();\n\n    ~EGLHelper();\n\n    //初始化 EGL\n    int initEGL(EGLNativeWindowType win);\n    //对 surface 缓存进行交换，用于在 display 上显示画面\n    int swapBuffers();\n    //销毁 EGL\n    void destoryEgl();\n};\n\n\n#endif //ZQLPLAYER_EGLHELPER_H\n\n```\n\n接着是该头文件对应的实现 `EGLHelper.cpp` ：\n\n```cpp\n//\n// Created by zqlxt on 2020/3/29.\n//\n\n#include \"EGLHelper.h\"\n#include \"../log/ZqlPlayerLog.h\"\n\nEGLHelper::EGLHelper() {\n    mEglDisplay = EGL_NO_DISPLAY;\n    mEglSurface = EGL_NO_SURFACE;\n    mEglContext = EGL_NO_CONTEXT;\n    mEglConfig = NULL;\n}\n\nEGLHelper::~EGLHelper() {\n\n}\n\nint EGLHelper::initEGL(EGLNativeWindowType win) {\n    //1. 获取默认显示设备\n    mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n    if (mEglDisplay == EGL_NO_DISPLAY) {\n        LOGE(\"eglGetDisplay error\")\n        return -1;\n    }\n\n    //2. 初始化默认显示设备\n    EGLint *version = new EGLint[2];\n    if (!eglInitialize(mEglDisplay, &version[0], &version[1])) {\n        LOGE(\"eglInitialize error\");\n        return -1;\n    }\n\n    //3. 设置显示设备属性\n    const EGLint attribs[] = {\n            EGL_RED_SIZE, 8,\n            EGL_GREEN_SIZE, 8,\n            EGL_BLUE_SIZE, 8,\n            EGL_ALPHA_SIZE, 8,\n            EGL_DEPTH_SIZE, 8,\n            EGL_STENCIL_SIZE, 8,\n            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,\n            EGL_NONE\n    };\n    EGLint num_config;\n    if (!eglChooseConfig(mEglDisplay, attribs, NULL, 1, &num_config)) {\n        LOGE(\"eglChooseConfig error 1\");\n        return -1;\n    }\n\n    //4. 从系统中获取对应属性的配置\n    if (!eglChooseConfig(mEglDisplay, attribs, &mEglConfig, num_config, &num_config)) {\n        LOGE(\"eglChooseConfig error 2\");\n        return -1;\n    }\n\n    //5. 创建 EGLContext\n    int attrib_list[] = {\n            EGL_CONTEXT_CLIENT_VERSION, 2,\n            EGL_NONE\n    };\n    mEglContext = eglCreateContext(mEglDisplay, mEglConfig, EGL_NO_CONTEXT, attrib_list);\n    if (mEglContext == EGL_NO_CONTEXT) {\n        LOGE(\"eglCreateContext error\");\n        return -1;\n    }\n    //6.创建渲染的surface\n    mEglSurface = eglCreateWindowSurface(mEglDisplay, mEglConfig, win, NULL);\n    if (mEglSurface == EGL_NO_SURFACE) {\n        LOGE(\"eglCreateWindowSurface error\");\n        return -1;\n    }\n\n    //7. 绑定 EGLContext 和 Surface 到设备显示中\n    if (!eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext)) {\n        LOGE(\"eglMakeCurrent error\");\n        return -1;\n    }\n\n    LOGD(\"egl init success\");\n\n    return 0;\n}\n\nint EGLHelper::swapBuffers() {\n\n    if (mEglDisplay != EGL_NO_DISPLAY && mEglSurface != EGL_NO_SURFACE) {\n        if (eglSwapBuffers(mEglDisplay, mEglSurface)) {\n            return 0;\n        }\n    }\n\n    return -1;\n}\n\nvoid EGLHelper::destoryEgl() {\n\n    if (mEglDisplay != EGL_NO_DISPLAY) {\n        eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);\n    }\n    if (mEglDisplay != EGL_NO_DISPLAY && mEglSurface != EGL_NO_SURFACE) {\n        eglDestroySurface(mEglDisplay, mEglSurface);\n        mEglSurface = EGL_NO_SURFACE;\n    }\n    if (mEglDisplay != EGL_NO_DISPLAY && mEglContext != EGL_NO_CONTEXT) {\n        eglDestroyContext(mEglDisplay, mEglContext);\n        mEglContext = EGL_NO_CONTEXT;\n    }\n    if (mEglDisplay != EGL_NO_DISPLAY) {\n        eglTerminate(mEglDisplay);\n    }\n}\n\n```\n> 添加完以上c++方法后不要忘了在CMakeLists中添加相关路径，否则这些文件不会被编译进 lib。\n\nOK，到这一步 EGL 创建流程基本完成，接下来在 Activity 中测试下 EGL 是否可用。\n\n首先定义 `NativeOpengl` 类，用于与 c++ 层进行交互：\n\n```kotlin\npackage com.zql.zqlplayer.opengl\n\nimport android.view.Surface\n\n/**\n *    @author 番茄沙司 2020/3/29\n */\npublic class NativeOpengl {\n\n    external fun surfaceCreate(surface: Surface): Unit\n    external fun surfaceDestory()\n}\n```\n\n在对应的 jni 中实现相关方法：\n\n```cpp\n#include <jni.h>\n#include <string>\n#include \"log/ZqlPlayerLog.h\"\n#include \"egl/EGLHelper.h\"\n#include \"android/native_window.h\"\n#include \"android/native_window_jni.h\"\n#include \"GLES2/gl2.h\"\n\nEGLHelper *eglHelper = NULL;\nANativeWindow *nativeWindow = NULL;\nextern \"C\"\nJNIEXPORT void JNICALL\nJava_com_zql_zqlplayer_opengl_NativeOpengl_surfaceCreate(JNIEnv *env, jobject thiz,\n                                                         jobject surface) {\n\n    //java 层 SurfaceView 创建完成后，将 surface 对象传入，用于创建 NativeWindow\n    nativeWindow = ANativeWindow_fromSurface(env, surface);\n    eglHelper = new EGLHelper();\n    eglHelper->initEGL(nativeWindow);\n\n    //opengl 绘制\n    glViewport(0, 0, 720, 1280);\n    glClearColor(0.0F, 1.0F, 0.0F, 1.0F);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    eglHelper->swapBuffers();\n}\n\nextern \"C\"\nJNIEXPORT void JNICALL\nJava_com_zql_zqlplayer_opengl_NativeOpengl_surfaceDestory(JNIEnv *env, jobject thiz) {\n    //java 层 SurfaceView 销毁时调用\n    eglHelper->destoryEgl();\n}\n```\n\n\n有了以上方法，剩下的就是自定义一个 SurfaceView：\n\n```kotlin\npackage com.zql.zqlplayer.test\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport android.view.SurfaceHolder\nimport android.view.SurfaceView\nimport com.zql.zqlplayer.opengl.NativeOpengl\n\n/**\n *    @author 番茄沙司 2020/3/29\n */\nclass EglTestSurfaceView : SurfaceView, SurfaceHolder.Callback {\n\n    var nativeOpengl: NativeOpengl? = null\n\n    constructor(context: Context) : super(context) {\n    }\n\n    constructor(context: Context, attributeSet: AttributeSet) : super(context, attributeSet) {\n    }\n\n    constructor(context: Context, attributeSet: AttributeSet, defStyleAttr: Int) : super(\n        context,\n        attributeSet,\n        defStyleAttr\n    ) {\n    }\n\n    init {\n        holder.addCallback(this)\n    }\n\n    override fun surfaceChanged(holder: SurfaceHolder?, format: Int, width: Int, height: Int) {\n\n    }\n\n    override fun surfaceDestroyed(holder: SurfaceHolder?) {\n        nativeOpengl?.surfaceDestory()\n    }\n\n    override fun surfaceCreated(holder: SurfaceHolder?) {\n        holder?.surface?.let {\n            nativeOpengl?.surfaceCreate(it)\n        }\n    }\n}\n```\n\n以及 Activity：\n\n```kotlin\npackage com.zql.zqlplayer.test\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.zql.zqlplayer.R\nimport com.zql.zqlplayer.opengl.NativeOpengl\n\nimport kotlinx.android.synthetic.main.activity_e_g_l_test.*\n\nclass EGLTestActivity : AppCompatActivity() {\n\n    private val nativeOpengl = NativeOpengl()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_e_g_l_test)\n        surface_view.nativeOpengl = nativeOpengl\n    }\n\n}\n\n```\n\n最后的运行效果如图：\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/Screenshot_2020-03-30-23-18-28-597_com.zql.zqlplayer.jpg)","source":"_posts/android-opengl-02.md","raw":"---\ntitle: Android OpenGL - 02.EGL创建流程及EGL测试\ndate: 2020-03-30 22:58:44\ntags:\n- android\n- opengl\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_banner.jpg\n---\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-init-progress.PNG)\n\n在上一篇的基础上，我们开始进行EGL的初始化。\n\n在初始化之前先写一个工具类 `ZqlPlayerLog.h` 用户日志打印：\n<!-- more -->\n```cpp\n//\n// Created by zqlxt on 2020/3/29.\n//\n#ifndef ZQLPLAYER_ZQLPLAYERLOG_H\n#define ZQLPLAYER_ZQLPLAYERLOG_H\n\n#include \"android/log.h\"\n\n#define LOGD(FORMAT, ...) __android_log_print(ANDROID_LOG_DEBUG,\"scott\",FORMAT, ##__VA_ARGS__);\n#define LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,\"scott\",FORMAT, ##__VA_ARGS__);\n\n#endif //ZQLPLAYER_ZQLPLAYERLOG_H\n```\n\n\n接着我们在 `cpp` 下新建一个名为 `egl` 的文件夹，用于存放 EGL 初始化相关类。\n\n首先定义头文件 `EGLHelper.h` :\n\n```cpp\n//\n// Created by zqlxt on 2020/3/29.\n//\n\n#ifndef ZQLPLAYER_EGLHELPER_H\n#define ZQLPLAYER_EGLHELPER_H\n\n#include \"EGL/egl.h\"\n\nclass EGLHelper {\n\npublic:\n    EGLDisplay mEglDisplay;\n    EGLSurface mEglSurface;\n    EGLConfig mEglConfig;\n    EGLContext mEglContext;\npublic:\n    EGLHelper();\n\n    ~EGLHelper();\n\n    //初始化 EGL\n    int initEGL(EGLNativeWindowType win);\n    //对 surface 缓存进行交换，用于在 display 上显示画面\n    int swapBuffers();\n    //销毁 EGL\n    void destoryEgl();\n};\n\n\n#endif //ZQLPLAYER_EGLHELPER_H\n\n```\n\n接着是该头文件对应的实现 `EGLHelper.cpp` ：\n\n```cpp\n//\n// Created by zqlxt on 2020/3/29.\n//\n\n#include \"EGLHelper.h\"\n#include \"../log/ZqlPlayerLog.h\"\n\nEGLHelper::EGLHelper() {\n    mEglDisplay = EGL_NO_DISPLAY;\n    mEglSurface = EGL_NO_SURFACE;\n    mEglContext = EGL_NO_CONTEXT;\n    mEglConfig = NULL;\n}\n\nEGLHelper::~EGLHelper() {\n\n}\n\nint EGLHelper::initEGL(EGLNativeWindowType win) {\n    //1. 获取默认显示设备\n    mEglDisplay = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n    if (mEglDisplay == EGL_NO_DISPLAY) {\n        LOGE(\"eglGetDisplay error\")\n        return -1;\n    }\n\n    //2. 初始化默认显示设备\n    EGLint *version = new EGLint[2];\n    if (!eglInitialize(mEglDisplay, &version[0], &version[1])) {\n        LOGE(\"eglInitialize error\");\n        return -1;\n    }\n\n    //3. 设置显示设备属性\n    const EGLint attribs[] = {\n            EGL_RED_SIZE, 8,\n            EGL_GREEN_SIZE, 8,\n            EGL_BLUE_SIZE, 8,\n            EGL_ALPHA_SIZE, 8,\n            EGL_DEPTH_SIZE, 8,\n            EGL_STENCIL_SIZE, 8,\n            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,\n            EGL_NONE\n    };\n    EGLint num_config;\n    if (!eglChooseConfig(mEglDisplay, attribs, NULL, 1, &num_config)) {\n        LOGE(\"eglChooseConfig error 1\");\n        return -1;\n    }\n\n    //4. 从系统中获取对应属性的配置\n    if (!eglChooseConfig(mEglDisplay, attribs, &mEglConfig, num_config, &num_config)) {\n        LOGE(\"eglChooseConfig error 2\");\n        return -1;\n    }\n\n    //5. 创建 EGLContext\n    int attrib_list[] = {\n            EGL_CONTEXT_CLIENT_VERSION, 2,\n            EGL_NONE\n    };\n    mEglContext = eglCreateContext(mEglDisplay, mEglConfig, EGL_NO_CONTEXT, attrib_list);\n    if (mEglContext == EGL_NO_CONTEXT) {\n        LOGE(\"eglCreateContext error\");\n        return -1;\n    }\n    //6.创建渲染的surface\n    mEglSurface = eglCreateWindowSurface(mEglDisplay, mEglConfig, win, NULL);\n    if (mEglSurface == EGL_NO_SURFACE) {\n        LOGE(\"eglCreateWindowSurface error\");\n        return -1;\n    }\n\n    //7. 绑定 EGLContext 和 Surface 到设备显示中\n    if (!eglMakeCurrent(mEglDisplay, mEglSurface, mEglSurface, mEglContext)) {\n        LOGE(\"eglMakeCurrent error\");\n        return -1;\n    }\n\n    LOGD(\"egl init success\");\n\n    return 0;\n}\n\nint EGLHelper::swapBuffers() {\n\n    if (mEglDisplay != EGL_NO_DISPLAY && mEglSurface != EGL_NO_SURFACE) {\n        if (eglSwapBuffers(mEglDisplay, mEglSurface)) {\n            return 0;\n        }\n    }\n\n    return -1;\n}\n\nvoid EGLHelper::destoryEgl() {\n\n    if (mEglDisplay != EGL_NO_DISPLAY) {\n        eglMakeCurrent(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);\n    }\n    if (mEglDisplay != EGL_NO_DISPLAY && mEglSurface != EGL_NO_SURFACE) {\n        eglDestroySurface(mEglDisplay, mEglSurface);\n        mEglSurface = EGL_NO_SURFACE;\n    }\n    if (mEglDisplay != EGL_NO_DISPLAY && mEglContext != EGL_NO_CONTEXT) {\n        eglDestroyContext(mEglDisplay, mEglContext);\n        mEglContext = EGL_NO_CONTEXT;\n    }\n    if (mEglDisplay != EGL_NO_DISPLAY) {\n        eglTerminate(mEglDisplay);\n    }\n}\n\n```\n> 添加完以上c++方法后不要忘了在CMakeLists中添加相关路径，否则这些文件不会被编译进 lib。\n\nOK，到这一步 EGL 创建流程基本完成，接下来在 Activity 中测试下 EGL 是否可用。\n\n首先定义 `NativeOpengl` 类，用于与 c++ 层进行交互：\n\n```kotlin\npackage com.zql.zqlplayer.opengl\n\nimport android.view.Surface\n\n/**\n *    @author 番茄沙司 2020/3/29\n */\npublic class NativeOpengl {\n\n    external fun surfaceCreate(surface: Surface): Unit\n    external fun surfaceDestory()\n}\n```\n\n在对应的 jni 中实现相关方法：\n\n```cpp\n#include <jni.h>\n#include <string>\n#include \"log/ZqlPlayerLog.h\"\n#include \"egl/EGLHelper.h\"\n#include \"android/native_window.h\"\n#include \"android/native_window_jni.h\"\n#include \"GLES2/gl2.h\"\n\nEGLHelper *eglHelper = NULL;\nANativeWindow *nativeWindow = NULL;\nextern \"C\"\nJNIEXPORT void JNICALL\nJava_com_zql_zqlplayer_opengl_NativeOpengl_surfaceCreate(JNIEnv *env, jobject thiz,\n                                                         jobject surface) {\n\n    //java 层 SurfaceView 创建完成后，将 surface 对象传入，用于创建 NativeWindow\n    nativeWindow = ANativeWindow_fromSurface(env, surface);\n    eglHelper = new EGLHelper();\n    eglHelper->initEGL(nativeWindow);\n\n    //opengl 绘制\n    glViewport(0, 0, 720, 1280);\n    glClearColor(0.0F, 1.0F, 0.0F, 1.0F);\n    glClear(GL_COLOR_BUFFER_BIT);\n\n    eglHelper->swapBuffers();\n}\n\nextern \"C\"\nJNIEXPORT void JNICALL\nJava_com_zql_zqlplayer_opengl_NativeOpengl_surfaceDestory(JNIEnv *env, jobject thiz) {\n    //java 层 SurfaceView 销毁时调用\n    eglHelper->destoryEgl();\n}\n```\n\n\n有了以上方法，剩下的就是自定义一个 SurfaceView：\n\n```kotlin\npackage com.zql.zqlplayer.test\n\nimport android.content.Context\nimport android.util.AttributeSet\nimport android.view.SurfaceHolder\nimport android.view.SurfaceView\nimport com.zql.zqlplayer.opengl.NativeOpengl\n\n/**\n *    @author 番茄沙司 2020/3/29\n */\nclass EglTestSurfaceView : SurfaceView, SurfaceHolder.Callback {\n\n    var nativeOpengl: NativeOpengl? = null\n\n    constructor(context: Context) : super(context) {\n    }\n\n    constructor(context: Context, attributeSet: AttributeSet) : super(context, attributeSet) {\n    }\n\n    constructor(context: Context, attributeSet: AttributeSet, defStyleAttr: Int) : super(\n        context,\n        attributeSet,\n        defStyleAttr\n    ) {\n    }\n\n    init {\n        holder.addCallback(this)\n    }\n\n    override fun surfaceChanged(holder: SurfaceHolder?, format: Int, width: Int, height: Int) {\n\n    }\n\n    override fun surfaceDestroyed(holder: SurfaceHolder?) {\n        nativeOpengl?.surfaceDestory()\n    }\n\n    override fun surfaceCreated(holder: SurfaceHolder?) {\n        holder?.surface?.let {\n            nativeOpengl?.surfaceCreate(it)\n        }\n    }\n}\n```\n\n以及 Activity：\n\n```kotlin\npackage com.zql.zqlplayer.test\n\nimport android.os.Bundle\nimport android.support.v7.app.AppCompatActivity\nimport com.zql.zqlplayer.R\nimport com.zql.zqlplayer.opengl.NativeOpengl\n\nimport kotlinx.android.synthetic.main.activity_e_g_l_test.*\n\nclass EGLTestActivity : AppCompatActivity() {\n\n    private val nativeOpengl = NativeOpengl()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_e_g_l_test)\n        surface_view.nativeOpengl = nativeOpengl\n    }\n\n}\n\n```\n\n最后的运行效果如图：\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/Screenshot_2020-03-30-23-18-28-597_com.zql.zqlplayer.jpg)","slug":"android-opengl-02","published":1,"updated":"2024-08-21T03:16:19.781Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vq000k5p6t7gy91ff4","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-init-progress.PNG\" alt=\"\"></p>\n<p>在上一篇的基础上，我们开始进行EGL的初始化。</p>\n<p>在初始化之前先写一个工具类 <code>ZqlPlayerLog.h</code> 用户日志打印：</p>\n<span id=\"more\"></span>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by zqlxt on 2020/3/29.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ZQLPLAYER_ZQLPLAYERLOG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ZQLPLAYER_ZQLPLAYERLOG_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;android/log.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGD(FORMAT, ...) __android_log_print(ANDROID_LOG_DEBUG,<span class=\"string\">&quot;scott&quot;</span>,FORMAT, ##__VA_ARGS__);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,<span class=\"string\">&quot;scott&quot;</span>,FORMAT, ##__VA_ARGS__);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//ZQLPLAYER_ZQLPLAYERLOG_H</span></span></span><br></pre></td></tr></table></figure>\n\n\n<p>接着我们在 <code>cpp</code> 下新建一个名为 <code>egl</code> 的文件夹，用于存放 EGL 初始化相关类。</p>\n<p>首先定义头文件 <code>EGLHelper.h</code> :</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by zqlxt on 2020/3/29.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ZQLPLAYER_EGLHELPER_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ZQLPLAYER_EGLHELPER_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;EGL/egl.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EGLHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    EGLDisplay mEglDisplay;</span><br><span class=\"line\">    EGLSurface mEglSurface;</span><br><span class=\"line\">    EGLConfig mEglConfig;</span><br><span class=\"line\">    EGLContext mEglContext;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">EGLHelper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">EGLHelper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化 EGL</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">initEGL</span><span class=\"params\">(EGLNativeWindowType win)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//对 surface 缓存进行交换，用于在 display 上显示画面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">swapBuffers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//销毁 EGL</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destoryEgl</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//ZQLPLAYER_EGLHELPER_H</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接着是该头文件对应的实现 <code>EGLHelper.cpp</code> ：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by zqlxt on 2020/3/29.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;EGLHelper.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;../log/ZqlPlayerLog.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">EGLHelper::<span class=\"built_in\">EGLHelper</span>() &#123;</span><br><span class=\"line\">    mEglDisplay = EGL_NO_DISPLAY;</span><br><span class=\"line\">    mEglSurface = EGL_NO_SURFACE;</span><br><span class=\"line\">    mEglContext = EGL_NO_CONTEXT;</span><br><span class=\"line\">    mEglConfig = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EGLHelper::~<span class=\"built_in\">EGLHelper</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">EGLHelper::initEGL</span><span class=\"params\">(EGLNativeWindowType win)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 获取默认显示设备</span></span><br><span class=\"line\">    mEglDisplay = <span class=\"built_in\">eglGetDisplay</span>(EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay == EGL_NO_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglGetDisplay error&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 初始化默认显示设备</span></span><br><span class=\"line\">    EGLint *version = <span class=\"keyword\">new</span> EGLint[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglInitialize</span>(mEglDisplay, &amp;version[<span class=\"number\">0</span>], &amp;version[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglInitialize error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 设置显示设备属性</span></span><br><span class=\"line\">    <span class=\"type\">const</span> EGLint attribs[] = &#123;</span><br><span class=\"line\">            EGL_RED_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_GREEN_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_BLUE_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_ALPHA_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_DEPTH_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_STENCIL_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,</span><br><span class=\"line\">            EGL_NONE</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    EGLint num_config;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglChooseConfig</span>(mEglDisplay, attribs, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, &amp;num_config)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglChooseConfig error 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4. 从系统中获取对应属性的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglChooseConfig</span>(mEglDisplay, attribs, &amp;mEglConfig, num_config, &amp;num_config)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglChooseConfig error 2&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//5. 创建 EGLContext</span></span><br><span class=\"line\">    <span class=\"type\">int</span> attrib_list[] = &#123;</span><br><span class=\"line\">            EGL_CONTEXT_CLIENT_VERSION, <span class=\"number\">2</span>,</span><br><span class=\"line\">            EGL_NONE</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    mEglContext = <span class=\"built_in\">eglCreateContext</span>(mEglDisplay, mEglConfig, EGL_NO_CONTEXT, attrib_list);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglContext == EGL_NO_CONTEXT) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglCreateContext error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//6.创建渲染的surface</span></span><br><span class=\"line\">    mEglSurface = <span class=\"built_in\">eglCreateWindowSurface</span>(mEglDisplay, mEglConfig, win, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglSurface == EGL_NO_SURFACE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglCreateWindowSurface error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//7. 绑定 EGLContext 和 Surface 到设备显示中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglMakeCurrent</span>(mEglDisplay, mEglSurface, mEglSurface, mEglContext)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglMakeCurrent error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">LOGD</span>(<span class=\"string\">&quot;egl init success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">EGLHelper::swapBuffers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY &amp;&amp; mEglSurface != EGL_NO_SURFACE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">eglSwapBuffers</span>(mEglDisplay, mEglSurface)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EGLHelper::destoryEgl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglMakeCurrent</span>(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY &amp;&amp; mEglSurface != EGL_NO_SURFACE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglDestroySurface</span>(mEglDisplay, mEglSurface);</span><br><span class=\"line\">        mEglSurface = EGL_NO_SURFACE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY &amp;&amp; mEglContext != EGL_NO_CONTEXT) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglDestroyContext</span>(mEglDisplay, mEglContext);</span><br><span class=\"line\">        mEglContext = EGL_NO_CONTEXT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglTerminate</span>(mEglDisplay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加完以上c++方法后不要忘了在CMakeLists中添加相关路径，否则这些文件不会被编译进 lib。</p>\n</blockquote>\n<p>OK，到这一步 EGL 创建流程基本完成，接下来在 Activity 中测试下 EGL 是否可用。</p>\n<p>首先定义 <code>NativeOpengl</code> 类，用于与 c++ 层进行交互：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.zqlplayer.opengl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Surface</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *    <span class=\"doctag\">@author</span> 番茄沙司 2020/3/29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NativeOpengl</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">external</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceCreate</span><span class=\"params\">(surface: <span class=\"type\">Surface</span>)</span></span>: <span class=\"built_in\">Unit</span></span><br><span class=\"line\">    <span class=\"keyword\">external</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceDestory</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对应的 jni 中实现相关方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;jni.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;log/ZqlPlayerLog.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;egl/EGLHelper.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;android/native_window.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;android/native_window_jni.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;GLES2/gl2.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">EGLHelper *eglHelper = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">ANativeWindow *nativeWindow = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"type\">void</span> JNICALL</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Java_com_zql_zqlplayer_opengl_NativeOpengl_surfaceCreate</span><span class=\"params\">(JNIEnv *env, jobject thiz,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                         jobject surface)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//java 层 SurfaceView 创建完成后，将 surface 对象传入，用于创建 NativeWindow</span></span><br><span class=\"line\">    nativeWindow = <span class=\"built_in\">ANativeWindow_fromSurface</span>(env, surface);</span><br><span class=\"line\">    eglHelper = <span class=\"keyword\">new</span> <span class=\"built_in\">EGLHelper</span>();</span><br><span class=\"line\">    eglHelper-&gt;<span class=\"built_in\">initEGL</span>(nativeWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//opengl 绘制</span></span><br><span class=\"line\">    <span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">720</span>, <span class=\"number\">1280</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">    eglHelper-&gt;<span class=\"built_in\">swapBuffers</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"type\">void</span> JNICALL</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Java_com_zql_zqlplayer_opengl_NativeOpengl_surfaceDestory</span><span class=\"params\">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//java 层 SurfaceView 销毁时调用</span></span><br><span class=\"line\">    eglHelper-&gt;<span class=\"built_in\">destoryEgl</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>有了以上方法，剩下的就是自定义一个 SurfaceView：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.zqlplayer.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceHolder</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.zqlplayer.opengl.NativeOpengl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *    <span class=\"doctag\">@author</span> 番茄沙司 2020/3/29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EglTestSurfaceView</span> : <span class=\"type\">SurfaceView</span>, <span class=\"type\">SurfaceHolder.Callback</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nativeOpengl: NativeOpengl? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(context: Context) : <span class=\"keyword\">super</span>(context) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(context: Context, attributeSet: AttributeSet) : <span class=\"keyword\">super</span>(context, attributeSet) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(context: Context, attributeSet: AttributeSet, defStyleAttr: <span class=\"built_in\">Int</span>) : <span class=\"keyword\">super</span>(</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        attributeSet,</span><br><span class=\"line\">        defStyleAttr</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        holder.addCallback(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(holder: <span class=\"type\">SurfaceHolder</span>?, format: <span class=\"type\">Int</span>, width: <span class=\"type\">Int</span>, height: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(holder: <span class=\"type\">SurfaceHolder</span>?)</span></span> &#123;</span><br><span class=\"line\">        nativeOpengl?.surfaceDestory()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceCreated</span><span class=\"params\">(holder: <span class=\"type\">SurfaceHolder</span>?)</span></span> &#123;</span><br><span class=\"line\">        holder?.surface?.let &#123;</span><br><span class=\"line\">            nativeOpengl?.surfaceCreate(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及 Activity：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.zqlplayer.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.zqlplayer.R</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.zqlplayer.opengl.NativeOpengl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.android.synthetic.main.activity_e_g_l_test.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EGLTestActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> nativeOpengl = NativeOpengl()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_e_g_l_test)</span><br><span class=\"line\">        surface_view.nativeOpengl = nativeOpengl</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后的运行效果如图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/Screenshot_2020-03-30-23-18-28-597_com.zql.zqlplayer.jpg\" alt=\"\"></p>\n","excerpt":"<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-init-progress.PNG\" alt=\"\"></p>\n<p>在上一篇的基础上，我们开始进行EGL的初始化。</p>\n<p>在初始化之前先写一个工具类 <code>ZqlPlayerLog.h</code> 用户日志打印：</p>","more":"<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by zqlxt on 2020/3/29.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ZQLPLAYER_ZQLPLAYERLOG_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ZQLPLAYER_ZQLPLAYERLOG_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;android/log.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGD(FORMAT, ...) __android_log_print(ANDROID_LOG_DEBUG,<span class=\"string\">&quot;scott&quot;</span>,FORMAT, ##__VA_ARGS__);</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> LOGE(FORMAT, ...) __android_log_print(ANDROID_LOG_ERROR,<span class=\"string\">&quot;scott&quot;</span>,FORMAT, ##__VA_ARGS__);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//ZQLPLAYER_ZQLPLAYERLOG_H</span></span></span><br></pre></td></tr></table></figure>\n\n\n<p>接着我们在 <code>cpp</code> 下新建一个名为 <code>egl</code> 的文件夹，用于存放 EGL 初始化相关类。</p>\n<p>首先定义头文件 <code>EGLHelper.h</code> :</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by zqlxt on 2020/3/29.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ZQLPLAYER_EGLHELPER_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ZQLPLAYER_EGLHELPER_H</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;EGL/egl.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EGLHelper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    EGLDisplay mEglDisplay;</span><br><span class=\"line\">    EGLSurface mEglSurface;</span><br><span class=\"line\">    EGLConfig mEglConfig;</span><br><span class=\"line\">    EGLContext mEglContext;</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">EGLHelper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    ~<span class=\"built_in\">EGLHelper</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//初始化 EGL</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">initEGL</span><span class=\"params\">(EGLNativeWindowType win)</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//对 surface 缓存进行交换，用于在 display 上显示画面</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">swapBuffers</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">//销毁 EGL</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">destoryEgl</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span> <span class=\"comment\">//ZQLPLAYER_EGLHELPER_H</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接着是该头文件对应的实现 <code>EGLHelper.cpp</code> ：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">// Created by zqlxt on 2020/3/29.</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;EGLHelper.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;../log/ZqlPlayerLog.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">EGLHelper::<span class=\"built_in\">EGLHelper</span>() &#123;</span><br><span class=\"line\">    mEglDisplay = EGL_NO_DISPLAY;</span><br><span class=\"line\">    mEglSurface = EGL_NO_SURFACE;</span><br><span class=\"line\">    mEglContext = EGL_NO_CONTEXT;</span><br><span class=\"line\">    mEglConfig = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">EGLHelper::~<span class=\"built_in\">EGLHelper</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">EGLHelper::initEGL</span><span class=\"params\">(EGLNativeWindowType win)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//1. 获取默认显示设备</span></span><br><span class=\"line\">    mEglDisplay = <span class=\"built_in\">eglGetDisplay</span>(EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay == EGL_NO_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglGetDisplay error&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//2. 初始化默认显示设备</span></span><br><span class=\"line\">    EGLint *version = <span class=\"keyword\">new</span> EGLint[<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglInitialize</span>(mEglDisplay, &amp;version[<span class=\"number\">0</span>], &amp;version[<span class=\"number\">1</span>])) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglInitialize error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//3. 设置显示设备属性</span></span><br><span class=\"line\">    <span class=\"type\">const</span> EGLint attribs[] = &#123;</span><br><span class=\"line\">            EGL_RED_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_GREEN_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_BLUE_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_ALPHA_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_DEPTH_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_STENCIL_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">            EGL_RENDERABLE_TYPE, EGL_OPENGL_ES2_BIT,</span><br><span class=\"line\">            EGL_NONE</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    EGLint num_config;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglChooseConfig</span>(mEglDisplay, attribs, <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, &amp;num_config)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglChooseConfig error 1&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//4. 从系统中获取对应属性的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglChooseConfig</span>(mEglDisplay, attribs, &amp;mEglConfig, num_config, &amp;num_config)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglChooseConfig error 2&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//5. 创建 EGLContext</span></span><br><span class=\"line\">    <span class=\"type\">int</span> attrib_list[] = &#123;</span><br><span class=\"line\">            EGL_CONTEXT_CLIENT_VERSION, <span class=\"number\">2</span>,</span><br><span class=\"line\">            EGL_NONE</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    mEglContext = <span class=\"built_in\">eglCreateContext</span>(mEglDisplay, mEglConfig, EGL_NO_CONTEXT, attrib_list);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglContext == EGL_NO_CONTEXT) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglCreateContext error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//6.创建渲染的surface</span></span><br><span class=\"line\">    mEglSurface = <span class=\"built_in\">eglCreateWindowSurface</span>(mEglDisplay, mEglConfig, win, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglSurface == EGL_NO_SURFACE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglCreateWindowSurface error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//7. 绑定 EGLContext 和 Surface 到设备显示中</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">eglMakeCurrent</span>(mEglDisplay, mEglSurface, mEglSurface, mEglContext)) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">LOGE</span>(<span class=\"string\">&quot;eglMakeCurrent error&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">LOGD</span>(<span class=\"string\">&quot;egl init success&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">EGLHelper::swapBuffers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY &amp;&amp; mEglSurface != EGL_NO_SURFACE) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">eglSwapBuffers</span>(mEglDisplay, mEglSurface)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">EGLHelper::destoryEgl</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglMakeCurrent</span>(mEglDisplay, EGL_NO_SURFACE, EGL_NO_SURFACE, EGL_NO_CONTEXT);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY &amp;&amp; mEglSurface != EGL_NO_SURFACE) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglDestroySurface</span>(mEglDisplay, mEglSurface);</span><br><span class=\"line\">        mEglSurface = EGL_NO_SURFACE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY &amp;&amp; mEglContext != EGL_NO_CONTEXT) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglDestroyContext</span>(mEglDisplay, mEglContext);</span><br><span class=\"line\">        mEglContext = EGL_NO_CONTEXT;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (mEglDisplay != EGL_NO_DISPLAY) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">eglTerminate</span>(mEglDisplay);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>添加完以上c++方法后不要忘了在CMakeLists中添加相关路径，否则这些文件不会被编译进 lib。</p>\n</blockquote>\n<p>OK，到这一步 EGL 创建流程基本完成，接下来在 Activity 中测试下 EGL 是否可用。</p>\n<p>首先定义 <code>NativeOpengl</code> 类，用于与 c++ 层进行交互：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.zqlplayer.opengl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.Surface</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *    <span class=\"doctag\">@author</span> 番茄沙司 2020/3/29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">NativeOpengl</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">external</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceCreate</span><span class=\"params\">(surface: <span class=\"type\">Surface</span>)</span></span>: <span class=\"built_in\">Unit</span></span><br><span class=\"line\">    <span class=\"keyword\">external</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceDestory</span><span class=\"params\">()</span></span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在对应的 jni 中实现相关方法：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;jni.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;log/ZqlPlayerLog.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;egl/EGLHelper.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;android/native_window.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;android/native_window_jni.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;GLES2/gl2.h&quot;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">EGLHelper *eglHelper = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">ANativeWindow *nativeWindow = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"type\">void</span> JNICALL</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Java_com_zql_zqlplayer_opengl_NativeOpengl_surfaceCreate</span><span class=\"params\">(JNIEnv *env, jobject thiz,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                                                         jobject surface)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//java 层 SurfaceView 创建完成后，将 surface 对象传入，用于创建 NativeWindow</span></span><br><span class=\"line\">    nativeWindow = <span class=\"built_in\">ANativeWindow_fromSurface</span>(env, surface);</span><br><span class=\"line\">    eglHelper = <span class=\"keyword\">new</span> <span class=\"built_in\">EGLHelper</span>();</span><br><span class=\"line\">    eglHelper-&gt;<span class=\"built_in\">initEGL</span>(nativeWindow);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//opengl 绘制</span></span><br><span class=\"line\">    <span class=\"built_in\">glViewport</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">720</span>, <span class=\"number\">1280</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glClearColor</span>(<span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>, <span class=\"number\">0.0F</span>, <span class=\"number\">1.0F</span>);</span><br><span class=\"line\">    <span class=\"built_in\">glClear</span>(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\"></span><br><span class=\"line\">    eglHelper-&gt;<span class=\"built_in\">swapBuffers</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">&quot;C&quot;</span></span><br><span class=\"line\"><span class=\"function\">JNIEXPORT <span class=\"type\">void</span> JNICALL</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">Java_com_zql_zqlplayer_opengl_NativeOpengl_surfaceDestory</span><span class=\"params\">(JNIEnv *env, jobject thiz)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//java 层 SurfaceView 销毁时调用</span></span><br><span class=\"line\">    eglHelper-&gt;<span class=\"built_in\">destoryEgl</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>有了以上方法，剩下的就是自定义一个 SurfaceView：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.zqlplayer.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceHolder</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.zqlplayer.opengl.NativeOpengl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> *    <span class=\"doctag\">@author</span> 番茄沙司 2020/3/29</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EglTestSurfaceView</span> : <span class=\"type\">SurfaceView</span>, <span class=\"type\">SurfaceHolder.Callback</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> nativeOpengl: NativeOpengl? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(context: Context) : <span class=\"keyword\">super</span>(context) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(context: Context, attributeSet: AttributeSet) : <span class=\"keyword\">super</span>(context, attributeSet) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">constructor</span>(context: Context, attributeSet: AttributeSet, defStyleAttr: <span class=\"built_in\">Int</span>) : <span class=\"keyword\">super</span>(</span><br><span class=\"line\">        context,</span><br><span class=\"line\">        attributeSet,</span><br><span class=\"line\">        defStyleAttr</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">init</span> &#123;</span><br><span class=\"line\">        holder.addCallback(<span class=\"keyword\">this</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceChanged</span><span class=\"params\">(holder: <span class=\"type\">SurfaceHolder</span>?, format: <span class=\"type\">Int</span>, width: <span class=\"type\">Int</span>, height: <span class=\"type\">Int</span>)</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceDestroyed</span><span class=\"params\">(holder: <span class=\"type\">SurfaceHolder</span>?)</span></span> &#123;</span><br><span class=\"line\">        nativeOpengl?.surfaceDestory()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">surfaceCreated</span><span class=\"params\">(holder: <span class=\"type\">SurfaceHolder</span>?)</span></span> &#123;</span><br><span class=\"line\">        holder?.surface?.let &#123;</span><br><span class=\"line\">            nativeOpengl?.surfaceCreate(it)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>以及 Activity：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.zqlplayer.test</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.zqlplayer.R</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.zqlplayer.opengl.NativeOpengl</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> kotlinx.android.synthetic.main.activity_e_g_l_test.*</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EGLTestActivity</span> : <span class=\"type\">AppCompatActivity</span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">val</span> nativeOpengl = NativeOpengl()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onCreate</span><span class=\"params\">(savedInstanceState: <span class=\"type\">Bundle</span>?)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState)</span><br><span class=\"line\">        setContentView(R.layout.activity_e_g_l_test)</span><br><span class=\"line\">        surface_view.nativeOpengl = nativeOpengl</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>最后的运行效果如图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/Screenshot_2020-03-30-23-18-28-597_com.zql.zqlplayer.jpg\" alt=\"\"></p>"},{"title":"Android OpenGL ES 入门 2 - Android 中使用 EGL 和 OpenGL ES 进行渲染","date":"2021-01-21T14:01:20.000Z","_content":"# 什么是 EGL？\n\n在 [EGL](https://www.khronos.org/egl) 官网是这么介绍 EGL 的：\n\n> EGL™ is an interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system. It handles graphics context management, surface/buffer binding, and rendering synchronization and enables high-performance, accelerated, mixed-mode 2D and 3D rendering using other Khronos APIs. EGL also provides interop capability between Khronos to enable efficient transfer of data between APIs – for example between a video subsystem running OpenMAX AL and a GPU running OpenGL ES.\n\n这段介绍很长，但意思可以总结为 EGL 是设备显示与渲染引擎之间的。展开讲就是说设备上的渲染引擎比如 OpenGL ES，它只负责如何将用户输入的模型数据渲染成图形数据，但它却不知道怎么将图像显示在设备显示器上。而 EGL 专门就是做这个的，OpenGL ES 把数据给 EGL，EGL 负责将图形数据显示在设备屏幕上。\n\n那么如果我们想要使用 OpenGL ES 进行渲染，前提就是要有 EGL 环境。那 EGL 环境该如何初始化呢？\n\n<!-- more -->\n\n# EGL 环境初始化\n\n[EGL 参考文档](https://www.khronos.org/registry/EGL/sdk/docs/man/)给出了下面这个 c 的代码片段，展示了如何创建 EGL 环境。\n\n```c\n#include <stdlib.h>\n#include <unistd.h>\n#include <EGL/egl.h>\n#include <GLES/gl.h>\ntypedef ... NativeWindowType;\nextern NativeWindowType createNativeWindow(void);\nstatic EGLint const attribute_list[] = {\n        EGL_RED_SIZE, 1,\n        EGL_GREEN_SIZE, 1,\n        EGL_BLUE_SIZE, 1,\n        EGL_NONE\n};\nint main(int argc, char ** argv)\n{\n        EGLDisplay display;\n        EGLConfig config;\n        EGLContext context;\n        EGLSurface surface;\n        NativeWindowType native_window;\n        EGLint num_config;\n\n        /* get an EGL display connection */\n        display = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n\n        /* initialize the EGL display connection */\n        eglInitialize(display, NULL, NULL);\n\n        /* get an appropriate EGL frame buffer configuration */\n        eglChooseConfig(display, attribute_list, &config, 1, &num_config);\n\n        /* create an EGL rendering context */\n        context = eglCreateContext(display, config, EGL_NO_CONTEXT, NULL);\n\n        /* create a native window */\n        native_window = createNativeWindow();\n\n        /* create an EGL window surface */\n        surface = eglCreateWindowSurface(display, config, native_window, NULL);\n\n        /* connect the context to the surface */\n        eglMakeCurrent(display, surface, surface, context);\n\n        /* clear the color buffer */\n        glClearColor(1.0, 1.0, 0.0, 1.0);\n        glClear(GL_COLOR_BUFFER_BIT);\n        glFlush();\n\n        eglSwapBuffers(display, surface);\n\n        sleep(10);\n        return EXIT_SUCCESS;\n}\n```\n\n在 Android 的 NDK 中是提供了 EGL 库的，所以我们是可以通过 Android NDK 来验证上述代码，但目前我并不准备深入到 NDK 层，应为 Android 也为我们提供了 EGL 的 java 层封装。我们可以按照 C 语言中的步骤，通过 java 层的 EGL 接口来初始化 EGL 环境。\n\n首先要准备 SurfaceView，代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".opengl.OpenGLES_EGLActivity\">\n    <SurfaceView\n        android:id=\"@+id/surface_view\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n```java\npublic class OpenGLES_EGLActivity extends AppCompatActivity implements SurfaceHolder.Callback {\n\n    private EGLDisplay mEGLDisplay;\n    private EGLContext mEGLContext;\n    private EGLSurface mEGLSurface;\n    private EGLConfig mEGLConfig;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_open_g_l_e_s__e_g_l);\n        SurfaceView sv = findViewById(R.id.surface_view);\n        sv.getHolder().addCallback(this);\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {}\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {}\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {}\n}\n\n```\n\n上面的代码做的工作就是在布局文件中添加 SurfaceView，然后给 SurfaceView 的 SurfaceHolder 添加回调。\n\n接着我们来写 EGL 的初始化方法。\n\n```java\n private void initEGL(SurfaceHolder holder) {\n        //1. get an EGL display connection\n        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n\n        int[] version = new int[2];\n        //2. initialize EGL display connection\n        EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1);\n        \n        int[] attribList = {\n                EGL14.EGL_RED_SIZE, 8,\n                EGL14.EGL_GREEN_SIZE, 8,\n                EGL14.EGL_BLUE_SIZE, 8,\n                EGL14.EGL_ALPHA_SIZE, 8,\n                EGL14.EGL_NONE\n        };\n        EGLConfig[] configs = new EGLConfig[1];\n        int[] numConfigs = new int[1];\n        //3. get appropriate EGL frame buffer configuration\n        EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0, configs.length,\n                numConfigs, 0);\n        mEGLConfig = configs[0];\n\n        int[] attrib3_list = {\n                EGL14.EGL_CONTEXT_CLIENT_VERSION, 3,\n                EGL14.EGL_NONE\n        };\n\n        //4. create an EGL rendering context\n        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,\n                attrib3_list, 0);\n\n        //5. create an EGL window surface\n        int[] surfaceAttribs = {\n                EGL14.EGL_NONE\n        };\n        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),\n                surfaceAttribs, 0);\n\n        //6. connect the context to the surface\n        EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);\n    }\n```\n\n初始化 EGL 环境大概分了 6 个步骤，在代码中都标记出来了。我们一个个来看。\n1. 获得 EGLDisplay 对象，官网解释说是一个 `display connection`。可能其内部封装了连接设备显示器，获取显示器信息的方法。\n2. 初始化 1 中获得的 `display connection`。这一步传入了 version 数组，作用是用来存放调用 `eglInitialize` 方法后获取的 EGL 的主版本和次版本。因为在 c 语言中一般是通过入参来传递返回值的，所以这里也是类似。\n3. 获得显示器支持的图像缓冲配置，这里主要指定了各个颜色的深度和 alpha 通道的深度。然后调用 `eglChooseConfig` 方法后会返回多个支持我们指定配置的配置。这些配置会按匹配程度排序，数组第一个是最接近我们需要的配置。\n4. 拿到配置后就可以创建 EGLContext，它为后续 OpenGL ES 渲染提供了上下文。\n5. 创建 EGLSurface，已经有了 SurfaceView 了，这里为什么又来了一个 EGLSurface？其实 EGL 并不认识 SurfaceView，他只认识 EGLSurface，所以就用 EGLSurface 对 SurfaceView 中的 Surface 做了一层代理，实际上绘制还是绘制在 SurfaceView 中的 BufferQueue 中然后给屏幕进行显示的。\n6. 最后一步即将 EGL 绑定到当前的 EGLSurface 上来，并指定了 OpenGL ES 的渲染上下文。\n\n经过以上这 6 步，我们已经具备使用 OpenGL ES 进行渲染的能力了，下面来看下该怎么做。\n\n首先在 SurfaceHolder 的 `surfaceCreated` 方法中调用上面的 `initEGL`，然后指定 OpenGL ES 的清屏颜色。\n\n```java\n@Override\n    public void surfaceCreated(SurfaceHolder holder) {\n        initEGL(holder);\n        GLES32.glClearColor(1.0F, 0F, 0F, 1F);\n    }\n```\n\n接着在 `surfaceChanged` 回调中设置 OpenGL ES 中的视窗大小，并进行清屏操作。但仅仅这两步是无法将清屏颜色渲染到屏幕上的，因为此时只是将颜色渲染在了 EGLSurface 中的缓存中，另外还需要调用 `EGL14.eglSwapBuffers` 将缓存中的数据给到显示设备，这样才能渲染成功。\n```java\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n        GLES32.glViewport(0, 0, width, height);\n        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);\n        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);\n    }\n```\n\n最终显示效果如下图：\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg)\n\n本文主要笼统介绍了 EGL 是什么，以及如何在 Android Java 层使用 EGL 和 OpenGL ES 进行渲染。","source":"_posts/android-opengl-es-and-EGL.md","raw":"---\ntitle: Android OpenGL ES 入门 2 - Android 中使用 EGL 和 OpenGL ES 进行渲染\ndate: 2021-01-21 22:01:20\ntags:\n  - android\n  - OpenGL ES\n  - EGL \n---\n# 什么是 EGL？\n\n在 [EGL](https://www.khronos.org/egl) 官网是这么介绍 EGL 的：\n\n> EGL™ is an interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system. It handles graphics context management, surface/buffer binding, and rendering synchronization and enables high-performance, accelerated, mixed-mode 2D and 3D rendering using other Khronos APIs. EGL also provides interop capability between Khronos to enable efficient transfer of data between APIs – for example between a video subsystem running OpenMAX AL and a GPU running OpenGL ES.\n\n这段介绍很长，但意思可以总结为 EGL 是设备显示与渲染引擎之间的。展开讲就是说设备上的渲染引擎比如 OpenGL ES，它只负责如何将用户输入的模型数据渲染成图形数据，但它却不知道怎么将图像显示在设备显示器上。而 EGL 专门就是做这个的，OpenGL ES 把数据给 EGL，EGL 负责将图形数据显示在设备屏幕上。\n\n那么如果我们想要使用 OpenGL ES 进行渲染，前提就是要有 EGL 环境。那 EGL 环境该如何初始化呢？\n\n<!-- more -->\n\n# EGL 环境初始化\n\n[EGL 参考文档](https://www.khronos.org/registry/EGL/sdk/docs/man/)给出了下面这个 c 的代码片段，展示了如何创建 EGL 环境。\n\n```c\n#include <stdlib.h>\n#include <unistd.h>\n#include <EGL/egl.h>\n#include <GLES/gl.h>\ntypedef ... NativeWindowType;\nextern NativeWindowType createNativeWindow(void);\nstatic EGLint const attribute_list[] = {\n        EGL_RED_SIZE, 1,\n        EGL_GREEN_SIZE, 1,\n        EGL_BLUE_SIZE, 1,\n        EGL_NONE\n};\nint main(int argc, char ** argv)\n{\n        EGLDisplay display;\n        EGLConfig config;\n        EGLContext context;\n        EGLSurface surface;\n        NativeWindowType native_window;\n        EGLint num_config;\n\n        /* get an EGL display connection */\n        display = eglGetDisplay(EGL_DEFAULT_DISPLAY);\n\n        /* initialize the EGL display connection */\n        eglInitialize(display, NULL, NULL);\n\n        /* get an appropriate EGL frame buffer configuration */\n        eglChooseConfig(display, attribute_list, &config, 1, &num_config);\n\n        /* create an EGL rendering context */\n        context = eglCreateContext(display, config, EGL_NO_CONTEXT, NULL);\n\n        /* create a native window */\n        native_window = createNativeWindow();\n\n        /* create an EGL window surface */\n        surface = eglCreateWindowSurface(display, config, native_window, NULL);\n\n        /* connect the context to the surface */\n        eglMakeCurrent(display, surface, surface, context);\n\n        /* clear the color buffer */\n        glClearColor(1.0, 1.0, 0.0, 1.0);\n        glClear(GL_COLOR_BUFFER_BIT);\n        glFlush();\n\n        eglSwapBuffers(display, surface);\n\n        sleep(10);\n        return EXIT_SUCCESS;\n}\n```\n\n在 Android 的 NDK 中是提供了 EGL 库的，所以我们是可以通过 Android NDK 来验证上述代码，但目前我并不准备深入到 NDK 层，应为 Android 也为我们提供了 EGL 的 java 层封装。我们可以按照 C 语言中的步骤，通过 java 层的 EGL 接口来初始化 EGL 环境。\n\n首先要准备 SurfaceView，代码如下：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    tools:context=\".opengl.OpenGLES_EGLActivity\">\n    <SurfaceView\n        android:id=\"@+id/surface_view\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"0dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\n```java\npublic class OpenGLES_EGLActivity extends AppCompatActivity implements SurfaceHolder.Callback {\n\n    private EGLDisplay mEGLDisplay;\n    private EGLContext mEGLContext;\n    private EGLSurface mEGLSurface;\n    private EGLConfig mEGLConfig;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_open_g_l_e_s__e_g_l);\n        SurfaceView sv = findViewById(R.id.surface_view);\n        sv.getHolder().addCallback(this);\n    }\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {}\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {}\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {}\n}\n\n```\n\n上面的代码做的工作就是在布局文件中添加 SurfaceView，然后给 SurfaceView 的 SurfaceHolder 添加回调。\n\n接着我们来写 EGL 的初始化方法。\n\n```java\n private void initEGL(SurfaceHolder holder) {\n        //1. get an EGL display connection\n        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n\n        int[] version = new int[2];\n        //2. initialize EGL display connection\n        EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1);\n        \n        int[] attribList = {\n                EGL14.EGL_RED_SIZE, 8,\n                EGL14.EGL_GREEN_SIZE, 8,\n                EGL14.EGL_BLUE_SIZE, 8,\n                EGL14.EGL_ALPHA_SIZE, 8,\n                EGL14.EGL_NONE\n        };\n        EGLConfig[] configs = new EGLConfig[1];\n        int[] numConfigs = new int[1];\n        //3. get appropriate EGL frame buffer configuration\n        EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0, configs.length,\n                numConfigs, 0);\n        mEGLConfig = configs[0];\n\n        int[] attrib3_list = {\n                EGL14.EGL_CONTEXT_CLIENT_VERSION, 3,\n                EGL14.EGL_NONE\n        };\n\n        //4. create an EGL rendering context\n        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,\n                attrib3_list, 0);\n\n        //5. create an EGL window surface\n        int[] surfaceAttribs = {\n                EGL14.EGL_NONE\n        };\n        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),\n                surfaceAttribs, 0);\n\n        //6. connect the context to the surface\n        EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);\n    }\n```\n\n初始化 EGL 环境大概分了 6 个步骤，在代码中都标记出来了。我们一个个来看。\n1. 获得 EGLDisplay 对象，官网解释说是一个 `display connection`。可能其内部封装了连接设备显示器，获取显示器信息的方法。\n2. 初始化 1 中获得的 `display connection`。这一步传入了 version 数组，作用是用来存放调用 `eglInitialize` 方法后获取的 EGL 的主版本和次版本。因为在 c 语言中一般是通过入参来传递返回值的，所以这里也是类似。\n3. 获得显示器支持的图像缓冲配置，这里主要指定了各个颜色的深度和 alpha 通道的深度。然后调用 `eglChooseConfig` 方法后会返回多个支持我们指定配置的配置。这些配置会按匹配程度排序，数组第一个是最接近我们需要的配置。\n4. 拿到配置后就可以创建 EGLContext，它为后续 OpenGL ES 渲染提供了上下文。\n5. 创建 EGLSurface，已经有了 SurfaceView 了，这里为什么又来了一个 EGLSurface？其实 EGL 并不认识 SurfaceView，他只认识 EGLSurface，所以就用 EGLSurface 对 SurfaceView 中的 Surface 做了一层代理，实际上绘制还是绘制在 SurfaceView 中的 BufferQueue 中然后给屏幕进行显示的。\n6. 最后一步即将 EGL 绑定到当前的 EGLSurface 上来，并指定了 OpenGL ES 的渲染上下文。\n\n经过以上这 6 步，我们已经具备使用 OpenGL ES 进行渲染的能力了，下面来看下该怎么做。\n\n首先在 SurfaceHolder 的 `surfaceCreated` 方法中调用上面的 `initEGL`，然后指定 OpenGL ES 的清屏颜色。\n\n```java\n@Override\n    public void surfaceCreated(SurfaceHolder holder) {\n        initEGL(holder);\n        GLES32.glClearColor(1.0F, 0F, 0F, 1F);\n    }\n```\n\n接着在 `surfaceChanged` 回调中设置 OpenGL ES 中的视窗大小，并进行清屏操作。但仅仅这两步是无法将清屏颜色渲染到屏幕上的，因为此时只是将颜色渲染在了 EGLSurface 中的缓存中，另外还需要调用 `EGL14.eglSwapBuffers` 将缓存中的数据给到显示设备，这样才能渲染成功。\n```java\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n        GLES32.glViewport(0, 0, width, height);\n        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);\n        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);\n    }\n```\n\n最终显示效果如下图：\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg)\n\n本文主要笼统介绍了 EGL 是什么，以及如何在 Android Java 层使用 EGL 和 OpenGL ES 进行渲染。","slug":"android-opengl-es-and-EGL","published":1,"updated":"2024-08-21T03:16:19.782Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vq000m5p6t0dgcfd9f","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"什么是-EGL？\"><a href=\"#什么是-EGL？\" class=\"headerlink\" title=\"什么是 EGL？\"></a>什么是 EGL？</h1><p>在 <a href=\"https://www.khronos.org/egl\">EGL</a> 官网是这么介绍 EGL 的：</p>\n<blockquote>\n<p>EGL™ is an interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system. It handles graphics context management, surface/buffer binding, and rendering synchronization and enables high-performance, accelerated, mixed-mode 2D and 3D rendering using other Khronos APIs. EGL also provides interop capability between Khronos to enable efficient transfer of data between APIs – for example between a video subsystem running OpenMAX AL and a GPU running OpenGL ES.</p>\n</blockquote>\n<p>这段介绍很长，但意思可以总结为 EGL 是设备显示与渲染引擎之间的。展开讲就是说设备上的渲染引擎比如 OpenGL ES，它只负责如何将用户输入的模型数据渲染成图形数据，但它却不知道怎么将图像显示在设备显示器上。而 EGL 专门就是做这个的，OpenGL ES 把数据给 EGL，EGL 负责将图形数据显示在设备屏幕上。</p>\n<p>那么如果我们想要使用 OpenGL ES 进行渲染，前提就是要有 EGL 环境。那 EGL 环境该如何初始化呢？</p>\n<span id=\"more\"></span>\n\n<h1 id=\"EGL-环境初始化\"><a href=\"#EGL-环境初始化\" class=\"headerlink\" title=\"EGL 环境初始化\"></a>EGL 环境初始化</h1><p><a href=\"https://www.khronos.org/registry/EGL/sdk/docs/man/\">EGL 参考文档</a>给出了下面这个 c 的代码片段，展示了如何创建 EGL 环境。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;EGL/egl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLES/gl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> ... NativeWindowType;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> NativeWindowType <span class=\"title function_\">createNativeWindow</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> EGLint <span class=\"type\">const</span> attribute_list[] = &#123;</span><br><span class=\"line\">        EGL_RED_SIZE, <span class=\"number\">1</span>,</span><br><span class=\"line\">        EGL_GREEN_SIZE, <span class=\"number\">1</span>,</span><br><span class=\"line\">        EGL_BLUE_SIZE, <span class=\"number\">1</span>,</span><br><span class=\"line\">        EGL_NONE</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> ** argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        EGLDisplay display;</span><br><span class=\"line\">        EGLConfig config;</span><br><span class=\"line\">        EGLContext context;</span><br><span class=\"line\">        EGLSurface surface;</span><br><span class=\"line\">        NativeWindowType native_window;</span><br><span class=\"line\">        EGLint num_config;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* get an EGL display connection */</span></span><br><span class=\"line\">        display = eglGetDisplay(EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* initialize the EGL display connection */</span></span><br><span class=\"line\">        eglInitialize(display, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* get an appropriate EGL frame buffer configuration */</span></span><br><span class=\"line\">        eglChooseConfig(display, attribute_list, &amp;config, <span class=\"number\">1</span>, &amp;num_config);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* create an EGL rendering context */</span></span><br><span class=\"line\">        context = eglCreateContext(display, config, EGL_NO_CONTEXT, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* create a native window */</span></span><br><span class=\"line\">        native_window = createNativeWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* create an EGL window surface */</span></span><br><span class=\"line\">        surface = eglCreateWindowSurface(display, config, native_window, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* connect the context to the surface */</span></span><br><span class=\"line\">        eglMakeCurrent(display, surface, surface, context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* clear the color buffer */</span></span><br><span class=\"line\">        glClearColor(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">        glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">        glFlush();</span><br><span class=\"line\"></span><br><span class=\"line\">        eglSwapBuffers(display, surface);</span><br><span class=\"line\"></span><br><span class=\"line\">        sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Android 的 NDK 中是提供了 EGL 库的，所以我们是可以通过 Android NDK 来验证上述代码，但目前我并不准备深入到 NDK 层，应为 Android 也为我们提供了 EGL 的 java 层封装。我们可以按照 C 语言中的步骤，通过 java 层的 EGL 接口来初始化 EGL 环境。</p>\n<p>首先要准备 SurfaceView，代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.opengl.OpenGLES_EGLActivity&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SurfaceView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/surface_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenGLES_EGLActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SurfaceHolder</span>.Callback &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLDisplay mEGLDisplay;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLContext mEGLContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLSurface mEGLSurface;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLConfig mEGLConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_open_g_l_e_s__e_g_l);</span><br><span class=\"line\">        <span class=\"type\">SurfaceView</span> <span class=\"variable\">sv</span> <span class=\"operator\">=</span> findViewById(R.id.surface_view);</span><br><span class=\"line\">        sv.getHolder().addCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"type\">int</span> format, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码做的工作就是在布局文件中添加 SurfaceView，然后给 SurfaceView 的 SurfaceHolder 添加回调。</p>\n<p>接着我们来写 EGL 的初始化方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initEGL</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//1. get an EGL display connection</span></span><br><span class=\"line\">       mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span>[] version = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">       <span class=\"comment\">//2. initialize EGL display connection</span></span><br><span class=\"line\">       EGL14.eglInitialize(mEGLDisplay, version, <span class=\"number\">0</span>, version, <span class=\"number\">1</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"type\">int</span>[] attribList = &#123;</span><br><span class=\"line\">               EGL14.EGL_RED_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_GREEN_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_BLUE_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_ALPHA_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_NONE</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       EGLConfig[] configs = <span class=\"keyword\">new</span> <span class=\"title class_\">EGLConfig</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       <span class=\"type\">int</span>[] numConfigs = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       <span class=\"comment\">//3. get appropriate EGL frame buffer configuration</span></span><br><span class=\"line\">       EGL14.eglChooseConfig(mEGLDisplay, attribList, <span class=\"number\">0</span>, configs, <span class=\"number\">0</span>, configs.length,</span><br><span class=\"line\">               numConfigs, <span class=\"number\">0</span>);</span><br><span class=\"line\">       mEGLConfig = configs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span>[] attrib3_list = &#123;</span><br><span class=\"line\">               EGL14.EGL_CONTEXT_CLIENT_VERSION, <span class=\"number\">3</span>,</span><br><span class=\"line\">               EGL14.EGL_NONE</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//4. create an EGL rendering context</span></span><br><span class=\"line\">       mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,</span><br><span class=\"line\">               attrib3_list, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//5. create an EGL window surface</span></span><br><span class=\"line\">       <span class=\"type\">int</span>[] surfaceAttribs = &#123;</span><br><span class=\"line\">               EGL14.EGL_NONE</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),</span><br><span class=\"line\">               surfaceAttribs, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//6. connect the context to the surface</span></span><br><span class=\"line\">       EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化 EGL 环境大概分了 6 个步骤，在代码中都标记出来了。我们一个个来看。</p>\n<ol>\n<li>获得 EGLDisplay 对象，官网解释说是一个 <code>display connection</code>。可能其内部封装了连接设备显示器，获取显示器信息的方法。</li>\n<li>初始化 1 中获得的 <code>display connection</code>。这一步传入了 version 数组，作用是用来存放调用 <code>eglInitialize</code> 方法后获取的 EGL 的主版本和次版本。因为在 c 语言中一般是通过入参来传递返回值的，所以这里也是类似。</li>\n<li>获得显示器支持的图像缓冲配置，这里主要指定了各个颜色的深度和 alpha 通道的深度。然后调用 <code>eglChooseConfig</code> 方法后会返回多个支持我们指定配置的配置。这些配置会按匹配程度排序，数组第一个是最接近我们需要的配置。</li>\n<li>拿到配置后就可以创建 EGLContext，它为后续 OpenGL ES 渲染提供了上下文。</li>\n<li>创建 EGLSurface，已经有了 SurfaceView 了，这里为什么又来了一个 EGLSurface？其实 EGL 并不认识 SurfaceView，他只认识 EGLSurface，所以就用 EGLSurface 对 SurfaceView 中的 Surface 做了一层代理，实际上绘制还是绘制在 SurfaceView 中的 BufferQueue 中然后给屏幕进行显示的。</li>\n<li>最后一步即将 EGL 绑定到当前的 EGLSurface 上来，并指定了 OpenGL ES 的渲染上下文。</li>\n</ol>\n<p>经过以上这 6 步，我们已经具备使用 OpenGL ES 进行渲染的能力了，下面来看下该怎么做。</p>\n<p>首先在 SurfaceHolder 的 <code>surfaceCreated</code> 方法中调用上面的 <code>initEGL</code>，然后指定 OpenGL ES 的清屏颜色。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">        initEGL(holder);</span><br><span class=\"line\">        GLES32.glClearColor(<span class=\"number\">1.0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">1F</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在 <code>surfaceChanged</code> 回调中设置 OpenGL ES 中的视窗大小，并进行清屏操作。但仅仅这两步是无法将清屏颜色渲染到屏幕上的，因为此时只是将颜色渲染在了 EGLSurface 中的缓存中，另外还需要调用 <code>EGL14.eglSwapBuffers</code> 将缓存中的数据给到显示设备，这样才能渲染成功。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"type\">int</span> format, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;</span><br><span class=\"line\">    GLES32.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">    GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">    EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终显示效果如下图：<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg\" alt=\"\"></p>\n<p>本文主要笼统介绍了 EGL 是什么，以及如何在 Android Java 层使用 EGL 和 OpenGL ES 进行渲染。</p>\n","excerpt":"<h1 id=\"什么是-EGL？\"><a href=\"#什么是-EGL？\" class=\"headerlink\" title=\"什么是 EGL？\"></a>什么是 EGL？</h1><p>在 <a href=\"https://www.khronos.org/egl\">EGL</a> 官网是这么介绍 EGL 的：</p>\n<blockquote>\n<p>EGL™ is an interface between Khronos rendering APIs such as OpenGL ES or OpenVG and the underlying native platform window system. It handles graphics context management, surface/buffer binding, and rendering synchronization and enables high-performance, accelerated, mixed-mode 2D and 3D rendering using other Khronos APIs. EGL also provides interop capability between Khronos to enable efficient transfer of data between APIs – for example between a video subsystem running OpenMAX AL and a GPU running OpenGL ES.</p>\n</blockquote>\n<p>这段介绍很长，但意思可以总结为 EGL 是设备显示与渲染引擎之间的。展开讲就是说设备上的渲染引擎比如 OpenGL ES，它只负责如何将用户输入的模型数据渲染成图形数据，但它却不知道怎么将图像显示在设备显示器上。而 EGL 专门就是做这个的，OpenGL ES 把数据给 EGL，EGL 负责将图形数据显示在设备屏幕上。</p>\n<p>那么如果我们想要使用 OpenGL ES 进行渲染，前提就是要有 EGL 环境。那 EGL 环境该如何初始化呢？</p>","more":"<h1 id=\"EGL-环境初始化\"><a href=\"#EGL-环境初始化\" class=\"headerlink\" title=\"EGL 环境初始化\"></a>EGL 环境初始化</h1><p><a href=\"https://www.khronos.org/registry/EGL/sdk/docs/man/\">EGL 参考文档</a>给出了下面这个 c 的代码片段，展示了如何创建 EGL 环境。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;EGL/egl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;GLES/gl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> ... NativeWindowType;</span><br><span class=\"line\"><span class=\"keyword\">extern</span> NativeWindowType <span class=\"title function_\">createNativeWindow</span><span class=\"params\">(<span class=\"type\">void</span>)</span>;</span><br><span class=\"line\"><span class=\"type\">static</span> EGLint <span class=\"type\">const</span> attribute_list[] = &#123;</span><br><span class=\"line\">        EGL_RED_SIZE, <span class=\"number\">1</span>,</span><br><span class=\"line\">        EGL_GREEN_SIZE, <span class=\"number\">1</span>,</span><br><span class=\"line\">        EGL_BLUE_SIZE, <span class=\"number\">1</span>,</span><br><span class=\"line\">        EGL_NONE</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> ** argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">        EGLDisplay display;</span><br><span class=\"line\">        EGLConfig config;</span><br><span class=\"line\">        EGLContext context;</span><br><span class=\"line\">        EGLSurface surface;</span><br><span class=\"line\">        NativeWindowType native_window;</span><br><span class=\"line\">        EGLint num_config;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* get an EGL display connection */</span></span><br><span class=\"line\">        display = eglGetDisplay(EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* initialize the EGL display connection */</span></span><br><span class=\"line\">        eglInitialize(display, <span class=\"literal\">NULL</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* get an appropriate EGL frame buffer configuration */</span></span><br><span class=\"line\">        eglChooseConfig(display, attribute_list, &amp;config, <span class=\"number\">1</span>, &amp;num_config);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* create an EGL rendering context */</span></span><br><span class=\"line\">        context = eglCreateContext(display, config, EGL_NO_CONTEXT, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* create a native window */</span></span><br><span class=\"line\">        native_window = createNativeWindow();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* create an EGL window surface */</span></span><br><span class=\"line\">        surface = eglCreateWindowSurface(display, config, native_window, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* connect the context to the surface */</span></span><br><span class=\"line\">        eglMakeCurrent(display, surface, surface, context);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* clear the color buffer */</span></span><br><span class=\"line\">        glClearColor(<span class=\"number\">1.0</span>, <span class=\"number\">1.0</span>, <span class=\"number\">0.0</span>, <span class=\"number\">1.0</span>);</span><br><span class=\"line\">        glClear(GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">        glFlush();</span><br><span class=\"line\"></span><br><span class=\"line\">        eglSwapBuffers(display, surface);</span><br><span class=\"line\"></span><br><span class=\"line\">        sleep(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 Android 的 NDK 中是提供了 EGL 库的，所以我们是可以通过 Android NDK 来验证上述代码，但目前我并不准备深入到 NDK 层，应为 Android 也为我们提供了 EGL 的 java 层封装。我们可以按照 C 语言中的步骤，通过 java 层的 EGL 接口来初始化 EGL 环境。</p>\n<p>首先要准备 SurfaceView，代码如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:app</span>=<span class=\"string\">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">xmlns:tools</span>=<span class=\"string\">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;match_parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">tools:context</span>=<span class=\"string\">&quot;.opengl.OpenGLES_EGLActivity&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SurfaceView</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:id</span>=<span class=\"string\">&quot;@+id/surface_view&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_width</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:layout_height</span>=<span class=\"string\">&quot;0dp&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintBottom_toBottomOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintEnd_toEndOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintStart_toStartOf</span>=<span class=\"string\">&quot;parent&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">app:layout_constraintTop_toTopOf</span>=<span class=\"string\">&quot;parent&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenGLES_EGLActivity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SurfaceHolder</span>.Callback &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLDisplay mEGLDisplay;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLContext mEGLContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLSurface mEGLSurface;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLConfig mEGLConfig;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_open_g_l_e_s__e_g_l);</span><br><span class=\"line\">        <span class=\"type\">SurfaceView</span> <span class=\"variable\">sv</span> <span class=\"operator\">=</span> findViewById(R.id.surface_view);</span><br><span class=\"line\">        sv.getHolder().addCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"type\">int</span> format, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>上面的代码做的工作就是在布局文件中添加 SurfaceView，然后给 SurfaceView 的 SurfaceHolder 添加回调。</p>\n<p>接着我们来写 EGL 的初始化方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initEGL</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">       <span class=\"comment\">//1. get an EGL display connection</span></span><br><span class=\"line\">       mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span>[] version = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">       <span class=\"comment\">//2. initialize EGL display connection</span></span><br><span class=\"line\">       EGL14.eglInitialize(mEGLDisplay, version, <span class=\"number\">0</span>, version, <span class=\"number\">1</span>);</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"type\">int</span>[] attribList = &#123;</span><br><span class=\"line\">               EGL14.EGL_RED_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_GREEN_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_BLUE_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_ALPHA_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">               EGL14.EGL_NONE</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       EGLConfig[] configs = <span class=\"keyword\">new</span> <span class=\"title class_\">EGLConfig</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       <span class=\"type\">int</span>[] numConfigs = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       <span class=\"comment\">//3. get appropriate EGL frame buffer configuration</span></span><br><span class=\"line\">       EGL14.eglChooseConfig(mEGLDisplay, attribList, <span class=\"number\">0</span>, configs, <span class=\"number\">0</span>, configs.length,</span><br><span class=\"line\">               numConfigs, <span class=\"number\">0</span>);</span><br><span class=\"line\">       mEGLConfig = configs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span>[] attrib3_list = &#123;</span><br><span class=\"line\">               EGL14.EGL_CONTEXT_CLIENT_VERSION, <span class=\"number\">3</span>,</span><br><span class=\"line\">               EGL14.EGL_NONE</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//4. create an EGL rendering context</span></span><br><span class=\"line\">       mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,</span><br><span class=\"line\">               attrib3_list, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//5. create an EGL window surface</span></span><br><span class=\"line\">       <span class=\"type\">int</span>[] surfaceAttribs = &#123;</span><br><span class=\"line\">               EGL14.EGL_NONE</span><br><span class=\"line\">       &#125;;</span><br><span class=\"line\">       mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),</span><br><span class=\"line\">               surfaceAttribs, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//6. connect the context to the surface</span></span><br><span class=\"line\">       EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>初始化 EGL 环境大概分了 6 个步骤，在代码中都标记出来了。我们一个个来看。</p>\n<ol>\n<li>获得 EGLDisplay 对象，官网解释说是一个 <code>display connection</code>。可能其内部封装了连接设备显示器，获取显示器信息的方法。</li>\n<li>初始化 1 中获得的 <code>display connection</code>。这一步传入了 version 数组，作用是用来存放调用 <code>eglInitialize</code> 方法后获取的 EGL 的主版本和次版本。因为在 c 语言中一般是通过入参来传递返回值的，所以这里也是类似。</li>\n<li>获得显示器支持的图像缓冲配置，这里主要指定了各个颜色的深度和 alpha 通道的深度。然后调用 <code>eglChooseConfig</code> 方法后会返回多个支持我们指定配置的配置。这些配置会按匹配程度排序，数组第一个是最接近我们需要的配置。</li>\n<li>拿到配置后就可以创建 EGLContext，它为后续 OpenGL ES 渲染提供了上下文。</li>\n<li>创建 EGLSurface，已经有了 SurfaceView 了，这里为什么又来了一个 EGLSurface？其实 EGL 并不认识 SurfaceView，他只认识 EGLSurface，所以就用 EGLSurface 对 SurfaceView 中的 Surface 做了一层代理，实际上绘制还是绘制在 SurfaceView 中的 BufferQueue 中然后给屏幕进行显示的。</li>\n<li>最后一步即将 EGL 绑定到当前的 EGLSurface 上来，并指定了 OpenGL ES 的渲染上下文。</li>\n</ol>\n<p>经过以上这 6 步，我们已经具备使用 OpenGL ES 进行渲染的能力了，下面来看下该怎么做。</p>\n<p>首先在 SurfaceHolder 的 <code>surfaceCreated</code> 方法中调用上面的 <code>initEGL</code>，然后指定 OpenGL ES 的清屏颜色。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">        initEGL(holder);</span><br><span class=\"line\">        GLES32.glClearColor(<span class=\"number\">1.0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">1F</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<p>接着在 <code>surfaceChanged</code> 回调中设置 OpenGL ES 中的视窗大小，并进行清屏操作。但仅仅这两步是无法将清屏颜色渲染到屏幕上的，因为此时只是将颜色渲染在了 EGLSurface 中的缓存中，另外还需要调用 <code>EGL14.eglSwapBuffers</code> 将缓存中的数据给到显示设备，这样才能渲染成功。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"type\">int</span> format, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;</span><br><span class=\"line\">    GLES32.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">    GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">    EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终显示效果如下图：<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/glsurfaceview01.jpeg\" alt=\"\"></p>\n<p>本文主要笼统介绍了 EGL 是什么，以及如何在 Android Java 层使用 EGL 和 OpenGL ES 进行渲染。</p>"},{"title":"Android OpenGL ES 入门 3 - OpenGL ES 绘制三角形","date":"2021-01-27T14:32:51.000Z","_content":"在前面几篇文章中我们已经初始化了GLSurfaceView 和 EGL，并且使用 OpenGLES（下文简称GLES）渲染出了红色画面。\n\n这一节中我们将在红色上继续画上三角形。\n\n在着手画三角形之前，我们先要学习一点点关于 GLES 的预备知识，非常简单。\n1. GLES 底层是由 c 语言实现，所以没有面向对象特性，它的接口及工作原理更接近面向过程，且其内部就是一个巨大的状态机。例如前面画的红色我们做了两步操作，第一步`GLES32.glClearColor`，设置清屏颜色，第二步`GLES32.glClear`进行清屏。\n总结一下就是 **GLES 的渲染一般经历两步：1. 状态设置，2. 状态使用。** 牢记这一点，对后面的学习会有很大的帮助。\n\n2. GLES 的渲染工作是在 GPU 中完成，所以我们的模型数据都需要由 CPU 转交给 GPU。\n    \n3. GLES 中的坐标是标准化设备坐标（Normalized Device Coordinates, NDC），标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。如下图：\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/ndc.png)\n所以如果我们在手机上直接画（0,0.5）、（0.5,0.5）和（-0.5,0.5）这三个点的时候，得到的就未必是上图中的等边三角形了，因为我们屏幕并不是一个正方形，某个方向是会被拉伸的。具体怎么解决这个问题，在以后的章节中会讲到。\n\n差不多就是以上三点，把他们都牢记在心，对入门 GLES 很重要。\n\n<!--more-->\n# 绘制三角形\n基于上面说道的三点，我们来考虑下如果要绘制三角形，需要做哪些事情？\n1. 需要有三角形三个点坐标。\n2. 需要知道三角形的颜色。\n3. 需要把三角形的坐标和颜色告诉 GPU。\n4. 让 GPU 绘制三角形。\n\n差不多就是这么多了，下面我们开始写代码。\n\n## 准备三角形坐标和颜色\n这个很简单，直接看代码：\n```java\n    private static final float TRIANGLE_COORDS[] = {\n            0.5f, 0.5f,   // 0 top\n            -0.5f, 0.5f,   // 1 bottom left\n            0f, -0.5f    // 2 bottom right\n    };\n\n    private static final float TRIANGLE_COLOR[] = {0.1F, 0.9F, 0.4F, 1.0F};\n```\n将数组坐标和颜色值放入数组中。\n\n## 把三角形坐标和颜色告诉GPU\n把三角形坐标和颜色告诉GPU就没那么简单了，需要使用到 GLSL（着色器语言）。\n在介绍GLSL前首先介绍下GLES的渲染流程，俗称渲染管线。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/pipeline.png)\n\n如上图所示，GLES的渲染大致分这六个步骤，其中将三角形坐标和颜色传递给GPU的是在 Vertex Shader 或者 Fragment Shader 中。而这两个 Shader 在高版本的 GLES中是支持可编程的，编程使用的语言就是上面说的 GLSL。\n大概先说这么多，你暂时也不用深究其中的原理。目前你只要知道如何把数据给到GPU即可。\n\n下面给出 Vertex Shader 和 Fragment Shader 的代码片段：\n```java\n    private static final String VERTEX_SHADER =\n            \"attribute vec4 aPosition;\" +\n                    \"void main() {\" +\n                    \"    gl_Position = aPosition;\" +\n                    \"}\";\n\n    private static final String FRAGMENT_SHADER =\n            \"precision mediump float;\" +\n                    \"uniform vec4 uColor;\" +\n                    \"void main() {\" +\n                    \"   gl_FragColor = uColor;\" +\n                    \"}\";\n```\n我们将这两个shader放入字符串中保存，其中 Vertex Shader 中的 aPostion 就是我们要存放三角形坐标的属性。而Fragment Shader 中的 uColor 则是存储三角形颜色的属性。\n\nGLSL 的语言其实和 c 语言是很像的，要运行也是类似，需要经历编译链接。而经过编译链接后的产物则是 GLE S中的 Program 对象。下面看下代码：\n```java\n public int createProgram(String vertexSource, String fragmentSource) {\n        int vertexShader = loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);\n        if (vertexShader == 0) {\n            return 0;\n        }\n        int pixelShader = loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);\n        if (pixelShader == 0) {\n            return 0;\n        }\n\n        int program = GLES32.glCreateProgram();\n        GLES32.glAttachShader(program, vertexShader);\n        GLES32.glAttachShader(program, pixelShader);\n        GLES32.glLinkProgram(program);\n        int[] linkStatus = new int[1];\n        GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, 0);\n        if (linkStatus[0] != GLES32.GL_TRUE) {\n            GLES32.glDeleteProgram(program);\n            program = 0;\n        }\n        return program;\n    }\n\n\n    public int loadShader(int shaderType, String source) {\n        int shader = GLES32.glCreateShader(shaderType);\n        GLES32.glShaderSource(shader, source);\n        GLES32.glCompileShader(shader);\n        int[] compiled = new int[1];\n        GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, 0);\n        if (compiled[0] == 0) {\n            GLES32.glDeleteShader(shader);\n            GLES32.glGetShaderInfoLog(shader);\n            shader = 0;\n        }\n        return shader;\n    }\n```\n上面方法的作用是加载shader，编译shader，创建 Program，最后进行链接。\n\n一旦Program被成功链接，那么我们就可以把三角形坐标和颜色赋值给程序里的 aPosition 和 uColor 了。具体怎么做呢？看如下代码：\n```java\n        GLES32.glUseProgram(program);                                                                                        //1\n        int triangleColorLocation = GLES32.glGetUniformLocation(program, \"uColor\");                             //2\n        GLES32.glUniform4fv(triangleColorLocation, 1, createFloatBuffer(TRIANGLE_COLOR));                     //3\n        int aPositionLocation = GLES32.glGetAttribLocation(program, \"aPosition\");                                  //4\n        GLES32.glEnableVertexAttribArray(aPositionLocation);                                                             //5\n        FloatBuffer vertexBuffer = createFloatBuffer(TRIANGLE_COORDS);                                             //6\n        GLES32.glVertexAttribPointer(aPositionLocation, 2, GLES32.GL_FLOAT, false, 2 * 4, vertexBuffer);      //7\n```\n这里一行一行解释：\n1. 当 Program 链接成功后，如果要使用，需要调用 `glUseProgram`方法。\n2. 我们可以看到 uColor 是被 uniform 修饰的，uniform 在 GLSL 中表示常量，我们可以过 `glGetUniformLocation`方法获取 uColor 在 GPU 常量区的位置。\n3. 拿到 uColor 的位置后，使用 `glUniform4fv`即可对其进行赋值。\n4. aPosition 被 `attribute`修饰，attribute 表示vertex shader 中的顶点属性，属于变量，用来存放顶点相关数据，这里我们用它存放三角形坐标。通过 `glGetAttribLocation` 方法，拿到了 aPostion 的位置。\n5. 这里和 uniform 做法不同，首先我们要激活这个 attribute，然后才能给它赋值，激活方法是 `glEnableVertexAttribArray`，一旦激活后，就可以对他进行赋值了。\n6. 这一步是对 aPosition 对应的顶点属性进行赋值，但由于这是一个坐标数组，我们需要确切告诉它我们坐标数组的大小和格式，只有这样GPU在运行时才能确切的拿到我们传入的三个坐标。这里使用了`glVertexAttribPointer`方法，其参数列表如下：\n```\nvoid glVertexAttribPointer(\n    GLuint  \tindex,\n \tGLint  \tsize,\n \tGLenum  \ttype,\n \tGLboolean  \tnormalized,\n \tGLsizei  \tstride,\n \tconst GLvoid *  \tpointer);\n```\n上面这个是c语言的参数列表，其中 index 即 attribute 的 location，这里传 aPositionLocation。\nsize 表示每一个attribute 中每一个顶点的数据量，根据上面的坐标，每个顶点只有 x和y，即这里传 2。\ntype表示传入数据的类型，我们传的是float，所以这里传入 GLES32.GL_FLOAT 。\nnormallzed 表示要不要给我们传输的数据做归一化（转换到 -1~1之间），我们传入的已经是归一化后的数据，所以这里传 false 即可。\nstride 表示 aPosition 这个顶点属性中，每两个顶点相隔的多少个字节，这里是两个 float，所以传入 4*2（float 占 4 个字节）。\npointer 表示 aPosition 要读取数据的地址或偏移。我们这里属于数据地址，所以传入 vertexBuffer 即可。属于偏移的在后面的章节中介绍。\n\n调用完以上方法后，数据就被载入到 GPU 中了，接下来调用：\n```java\n        GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, 0, 3);\n        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);\n```\n即可将三角形绘制出来。效果如下：\n![https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png)\n\n本章节完整代码如下：\n```java\npackage com.zql.mobile.graphics.opengl;\n\nimport android.opengl.EGL14;\nimport android.opengl.EGLConfig;\nimport android.opengl.EGLContext;\nimport android.opengl.EGLDisplay;\nimport android.opengl.EGLSurface;\nimport android.opengl.GLES32;\nimport android.os.Bundle;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.zql.mobile.graphics.R;\n\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.FloatBuffer;\n\npublic class OpenGLES_VertexAttributePointer_Activity extends AppCompatActivity implements SurfaceHolder.Callback {\n\n    private EGLDisplay mEGLDisplay;\n    private EGLContext mEGLContext;\n    private EGLSurface mEGLSurface;\n    private EGLConfig mEGLConfig;\n    private static final String VERTEX_SHADER =\n            \"attribute vec4 aPosition;\" +\n                    \"void main() {\" +\n                    \"    gl_Position = aPosition;\" +\n                    \"}\";\n\n    private static final String FRAGMENT_SHADER =\n            \"precision mediump float;\" +\n                    \"uniform vec4 uColor;\" +\n                    \"void main() {\" +\n                    \"   gl_FragColor = uColor;\" +\n                    \"}\";\n\n    private static final float TRIANGLE_COORDS[] = {\n            0.5f, 0.5f,   // 0 top\n            -0.5f, 0.5f,   // 1 bottom left\n            0f, -0.5f    // 2 bottom right\n    };\n\n    private static final float TRIANGLE_COLOR[] = {0.1F, 0.9F, 0.4F, 1.0F};\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_open_g_l_vertex_attribute_pointer);\n        SurfaceView sv = findViewById(R.id.surface_view);\n        sv.getHolder().addCallback(this);\n    }\n\n    private void initEGL(SurfaceHolder holder) {\n        // get an EGL display connection\n        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n\n        int[] version = new int[2];\n        // initialize EGL display connection\n        EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1);\n\n        // target attribute list\n        int[] attribList = {\n                EGL14.EGL_RED_SIZE, 8,\n                EGL14.EGL_GREEN_SIZE, 8,\n                EGL14.EGL_BLUE_SIZE, 8,\n                EGL14.EGL_ALPHA_SIZE, 8,\n                EGL14.EGL_NONE\n        };\n        EGLConfig[] configs = new EGLConfig[1];\n        int[] numConfigs = new int[1];\n        //get appropriate EGL frame buffer configuration\n        EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0, configs.length,\n                numConfigs, 0);\n        mEGLConfig = configs[0];\n\n        int[] attrib3_list = {\n                EGL14.EGL_CONTEXT_CLIENT_VERSION, 3,\n                EGL14.EGL_NONE\n        };\n\n        //create an EGL rendering context\n        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,\n                attrib3_list, 0);\n\n        // create an EGL window surface\n        int[] surfaceAttribs = {\n                EGL14.EGL_NONE\n        };\n        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),\n                surfaceAttribs, 0);\n\n        // connect the context to the surface\n        EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);\n    }\n\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {\n        initEGL(holder);\n        GLES32.glClearColor(1.0F, 0F, 0F, 1F);\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n        GLES32.glViewport(0, 0, width, height);\n        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);\n        int program = createProgram(VERTEX_SHADER, FRAGMENT_SHADER);\n        GLES32.glUseProgram(program);\n        int triangleColorLocation = GLES32.glGetUniformLocation(program, \"uColor\");\n        GLES32.glUniform4fv(triangleColorLocation, 1, createFloatBuffer(TRIANGLE_COLOR));\n        int aPositionLocation = GLES32.glGetAttribLocation(program, \"aPosition\");\n        GLES32.glEnableVertexAttribArray(aPositionLocation);\n        FloatBuffer vertexBuffer = createFloatBuffer(TRIANGLE_COORDS);\n        GLES32.glVertexAttribPointer(aPositionLocation, 2, GLES32.GL_FLOAT, false, 2 * 4, vertexBuffer);\n        GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, 0, 3);\n        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n\n    }\n\n    public int createProgram(String vertexSource, String fragmentSource) {\n        int vertexShader = loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);\n        if (vertexShader == 0) {\n            return 0;\n        }\n        int pixelShader = loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);\n        if (pixelShader == 0) {\n            return 0;\n        }\n\n        int program = GLES32.glCreateProgram();\n        GLES32.glAttachShader(program, vertexShader);\n        GLES32.glAttachShader(program, pixelShader);\n        GLES32.glLinkProgram(program);\n        int[] linkStatus = new int[1];\n        GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, 0);\n        if (linkStatus[0] != GLES32.GL_TRUE) {\n            GLES32.glDeleteProgram(program);\n            program = 0;\n        }\n        return program;\n    }\n\n\n    public int loadShader(int shaderType, String source) {\n        int shader = GLES32.glCreateShader(shaderType);\n        GLES32.glShaderSource(shader, source);\n        GLES32.glCompileShader(shader);\n        int[] compiled = new int[1];\n        GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, 0);\n        if (compiled[0] == 0) {\n            GLES32.glDeleteShader(shader);\n            GLES32.glGetShaderInfoLog(shader);\n            shader = 0;\n        }\n        return shader;\n    }\n\n    public FloatBuffer createFloatBuffer(float[] coords) {\n        ByteBuffer bb = ByteBuffer.allocateDirect(coords.length * 4);\n        bb.order(ByteOrder.nativeOrder());\n        FloatBuffer fb = bb.asFloatBuffer();\n        fb.put(coords);\n        fb.position(0);\n        return fb;\n    }\n}\n\n```\n\n# 参考\n[https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3](https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3)\n[https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml](https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml)","source":"_posts/android-opengl-es-triangle.md","raw":"---\ntitle: Android OpenGL ES 入门 3 - OpenGL ES 绘制三角形\ndate: 2021-01-27 22:32:51\ntags:\n  - android\n  - opengl\n---\n在前面几篇文章中我们已经初始化了GLSurfaceView 和 EGL，并且使用 OpenGLES（下文简称GLES）渲染出了红色画面。\n\n这一节中我们将在红色上继续画上三角形。\n\n在着手画三角形之前，我们先要学习一点点关于 GLES 的预备知识，非常简单。\n1. GLES 底层是由 c 语言实现，所以没有面向对象特性，它的接口及工作原理更接近面向过程，且其内部就是一个巨大的状态机。例如前面画的红色我们做了两步操作，第一步`GLES32.glClearColor`，设置清屏颜色，第二步`GLES32.glClear`进行清屏。\n总结一下就是 **GLES 的渲染一般经历两步：1. 状态设置，2. 状态使用。** 牢记这一点，对后面的学习会有很大的帮助。\n\n2. GLES 的渲染工作是在 GPU 中完成，所以我们的模型数据都需要由 CPU 转交给 GPU。\n    \n3. GLES 中的坐标是标准化设备坐标（Normalized Device Coordinates, NDC），标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。如下图：\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/ndc.png)\n所以如果我们在手机上直接画（0,0.5）、（0.5,0.5）和（-0.5,0.5）这三个点的时候，得到的就未必是上图中的等边三角形了，因为我们屏幕并不是一个正方形，某个方向是会被拉伸的。具体怎么解决这个问题，在以后的章节中会讲到。\n\n差不多就是以上三点，把他们都牢记在心，对入门 GLES 很重要。\n\n<!--more-->\n# 绘制三角形\n基于上面说道的三点，我们来考虑下如果要绘制三角形，需要做哪些事情？\n1. 需要有三角形三个点坐标。\n2. 需要知道三角形的颜色。\n3. 需要把三角形的坐标和颜色告诉 GPU。\n4. 让 GPU 绘制三角形。\n\n差不多就是这么多了，下面我们开始写代码。\n\n## 准备三角形坐标和颜色\n这个很简单，直接看代码：\n```java\n    private static final float TRIANGLE_COORDS[] = {\n            0.5f, 0.5f,   // 0 top\n            -0.5f, 0.5f,   // 1 bottom left\n            0f, -0.5f    // 2 bottom right\n    };\n\n    private static final float TRIANGLE_COLOR[] = {0.1F, 0.9F, 0.4F, 1.0F};\n```\n将数组坐标和颜色值放入数组中。\n\n## 把三角形坐标和颜色告诉GPU\n把三角形坐标和颜色告诉GPU就没那么简单了，需要使用到 GLSL（着色器语言）。\n在介绍GLSL前首先介绍下GLES的渲染流程，俗称渲染管线。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/pipeline.png)\n\n如上图所示，GLES的渲染大致分这六个步骤，其中将三角形坐标和颜色传递给GPU的是在 Vertex Shader 或者 Fragment Shader 中。而这两个 Shader 在高版本的 GLES中是支持可编程的，编程使用的语言就是上面说的 GLSL。\n大概先说这么多，你暂时也不用深究其中的原理。目前你只要知道如何把数据给到GPU即可。\n\n下面给出 Vertex Shader 和 Fragment Shader 的代码片段：\n```java\n    private static final String VERTEX_SHADER =\n            \"attribute vec4 aPosition;\" +\n                    \"void main() {\" +\n                    \"    gl_Position = aPosition;\" +\n                    \"}\";\n\n    private static final String FRAGMENT_SHADER =\n            \"precision mediump float;\" +\n                    \"uniform vec4 uColor;\" +\n                    \"void main() {\" +\n                    \"   gl_FragColor = uColor;\" +\n                    \"}\";\n```\n我们将这两个shader放入字符串中保存，其中 Vertex Shader 中的 aPostion 就是我们要存放三角形坐标的属性。而Fragment Shader 中的 uColor 则是存储三角形颜色的属性。\n\nGLSL 的语言其实和 c 语言是很像的，要运行也是类似，需要经历编译链接。而经过编译链接后的产物则是 GLE S中的 Program 对象。下面看下代码：\n```java\n public int createProgram(String vertexSource, String fragmentSource) {\n        int vertexShader = loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);\n        if (vertexShader == 0) {\n            return 0;\n        }\n        int pixelShader = loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);\n        if (pixelShader == 0) {\n            return 0;\n        }\n\n        int program = GLES32.glCreateProgram();\n        GLES32.glAttachShader(program, vertexShader);\n        GLES32.glAttachShader(program, pixelShader);\n        GLES32.glLinkProgram(program);\n        int[] linkStatus = new int[1];\n        GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, 0);\n        if (linkStatus[0] != GLES32.GL_TRUE) {\n            GLES32.glDeleteProgram(program);\n            program = 0;\n        }\n        return program;\n    }\n\n\n    public int loadShader(int shaderType, String source) {\n        int shader = GLES32.glCreateShader(shaderType);\n        GLES32.glShaderSource(shader, source);\n        GLES32.glCompileShader(shader);\n        int[] compiled = new int[1];\n        GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, 0);\n        if (compiled[0] == 0) {\n            GLES32.glDeleteShader(shader);\n            GLES32.glGetShaderInfoLog(shader);\n            shader = 0;\n        }\n        return shader;\n    }\n```\n上面方法的作用是加载shader，编译shader，创建 Program，最后进行链接。\n\n一旦Program被成功链接，那么我们就可以把三角形坐标和颜色赋值给程序里的 aPosition 和 uColor 了。具体怎么做呢？看如下代码：\n```java\n        GLES32.glUseProgram(program);                                                                                        //1\n        int triangleColorLocation = GLES32.glGetUniformLocation(program, \"uColor\");                             //2\n        GLES32.glUniform4fv(triangleColorLocation, 1, createFloatBuffer(TRIANGLE_COLOR));                     //3\n        int aPositionLocation = GLES32.glGetAttribLocation(program, \"aPosition\");                                  //4\n        GLES32.glEnableVertexAttribArray(aPositionLocation);                                                             //5\n        FloatBuffer vertexBuffer = createFloatBuffer(TRIANGLE_COORDS);                                             //6\n        GLES32.glVertexAttribPointer(aPositionLocation, 2, GLES32.GL_FLOAT, false, 2 * 4, vertexBuffer);      //7\n```\n这里一行一行解释：\n1. 当 Program 链接成功后，如果要使用，需要调用 `glUseProgram`方法。\n2. 我们可以看到 uColor 是被 uniform 修饰的，uniform 在 GLSL 中表示常量，我们可以过 `glGetUniformLocation`方法获取 uColor 在 GPU 常量区的位置。\n3. 拿到 uColor 的位置后，使用 `glUniform4fv`即可对其进行赋值。\n4. aPosition 被 `attribute`修饰，attribute 表示vertex shader 中的顶点属性，属于变量，用来存放顶点相关数据，这里我们用它存放三角形坐标。通过 `glGetAttribLocation` 方法，拿到了 aPostion 的位置。\n5. 这里和 uniform 做法不同，首先我们要激活这个 attribute，然后才能给它赋值，激活方法是 `glEnableVertexAttribArray`，一旦激活后，就可以对他进行赋值了。\n6. 这一步是对 aPosition 对应的顶点属性进行赋值，但由于这是一个坐标数组，我们需要确切告诉它我们坐标数组的大小和格式，只有这样GPU在运行时才能确切的拿到我们传入的三个坐标。这里使用了`glVertexAttribPointer`方法，其参数列表如下：\n```\nvoid glVertexAttribPointer(\n    GLuint  \tindex,\n \tGLint  \tsize,\n \tGLenum  \ttype,\n \tGLboolean  \tnormalized,\n \tGLsizei  \tstride,\n \tconst GLvoid *  \tpointer);\n```\n上面这个是c语言的参数列表，其中 index 即 attribute 的 location，这里传 aPositionLocation。\nsize 表示每一个attribute 中每一个顶点的数据量，根据上面的坐标，每个顶点只有 x和y，即这里传 2。\ntype表示传入数据的类型，我们传的是float，所以这里传入 GLES32.GL_FLOAT 。\nnormallzed 表示要不要给我们传输的数据做归一化（转换到 -1~1之间），我们传入的已经是归一化后的数据，所以这里传 false 即可。\nstride 表示 aPosition 这个顶点属性中，每两个顶点相隔的多少个字节，这里是两个 float，所以传入 4*2（float 占 4 个字节）。\npointer 表示 aPosition 要读取数据的地址或偏移。我们这里属于数据地址，所以传入 vertexBuffer 即可。属于偏移的在后面的章节中介绍。\n\n调用完以上方法后，数据就被载入到 GPU 中了，接下来调用：\n```java\n        GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, 0, 3);\n        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);\n```\n即可将三角形绘制出来。效果如下：\n![https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png)\n\n本章节完整代码如下：\n```java\npackage com.zql.mobile.graphics.opengl;\n\nimport android.opengl.EGL14;\nimport android.opengl.EGLConfig;\nimport android.opengl.EGLContext;\nimport android.opengl.EGLDisplay;\nimport android.opengl.EGLSurface;\nimport android.opengl.GLES32;\nimport android.os.Bundle;\nimport android.view.SurfaceHolder;\nimport android.view.SurfaceView;\n\nimport androidx.appcompat.app.AppCompatActivity;\n\nimport com.zql.mobile.graphics.R;\n\nimport java.nio.ByteBuffer;\nimport java.nio.ByteOrder;\nimport java.nio.FloatBuffer;\n\npublic class OpenGLES_VertexAttributePointer_Activity extends AppCompatActivity implements SurfaceHolder.Callback {\n\n    private EGLDisplay mEGLDisplay;\n    private EGLContext mEGLContext;\n    private EGLSurface mEGLSurface;\n    private EGLConfig mEGLConfig;\n    private static final String VERTEX_SHADER =\n            \"attribute vec4 aPosition;\" +\n                    \"void main() {\" +\n                    \"    gl_Position = aPosition;\" +\n                    \"}\";\n\n    private static final String FRAGMENT_SHADER =\n            \"precision mediump float;\" +\n                    \"uniform vec4 uColor;\" +\n                    \"void main() {\" +\n                    \"   gl_FragColor = uColor;\" +\n                    \"}\";\n\n    private static final float TRIANGLE_COORDS[] = {\n            0.5f, 0.5f,   // 0 top\n            -0.5f, 0.5f,   // 1 bottom left\n            0f, -0.5f    // 2 bottom right\n    };\n\n    private static final float TRIANGLE_COLOR[] = {0.1F, 0.9F, 0.4F, 1.0F};\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_open_g_l_vertex_attribute_pointer);\n        SurfaceView sv = findViewById(R.id.surface_view);\n        sv.getHolder().addCallback(this);\n    }\n\n    private void initEGL(SurfaceHolder holder) {\n        // get an EGL display connection\n        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);\n\n        int[] version = new int[2];\n        // initialize EGL display connection\n        EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1);\n\n        // target attribute list\n        int[] attribList = {\n                EGL14.EGL_RED_SIZE, 8,\n                EGL14.EGL_GREEN_SIZE, 8,\n                EGL14.EGL_BLUE_SIZE, 8,\n                EGL14.EGL_ALPHA_SIZE, 8,\n                EGL14.EGL_NONE\n        };\n        EGLConfig[] configs = new EGLConfig[1];\n        int[] numConfigs = new int[1];\n        //get appropriate EGL frame buffer configuration\n        EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0, configs.length,\n                numConfigs, 0);\n        mEGLConfig = configs[0];\n\n        int[] attrib3_list = {\n                EGL14.EGL_CONTEXT_CLIENT_VERSION, 3,\n                EGL14.EGL_NONE\n        };\n\n        //create an EGL rendering context\n        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,\n                attrib3_list, 0);\n\n        // create an EGL window surface\n        int[] surfaceAttribs = {\n                EGL14.EGL_NONE\n        };\n        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),\n                surfaceAttribs, 0);\n\n        // connect the context to the surface\n        EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);\n    }\n\n\n    @Override\n    public void surfaceCreated(SurfaceHolder holder) {\n        initEGL(holder);\n        GLES32.glClearColor(1.0F, 0F, 0F, 1F);\n    }\n\n    @Override\n    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) {\n        GLES32.glViewport(0, 0, width, height);\n        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);\n        int program = createProgram(VERTEX_SHADER, FRAGMENT_SHADER);\n        GLES32.glUseProgram(program);\n        int triangleColorLocation = GLES32.glGetUniformLocation(program, \"uColor\");\n        GLES32.glUniform4fv(triangleColorLocation, 1, createFloatBuffer(TRIANGLE_COLOR));\n        int aPositionLocation = GLES32.glGetAttribLocation(program, \"aPosition\");\n        GLES32.glEnableVertexAttribArray(aPositionLocation);\n        FloatBuffer vertexBuffer = createFloatBuffer(TRIANGLE_COORDS);\n        GLES32.glVertexAttribPointer(aPositionLocation, 2, GLES32.GL_FLOAT, false, 2 * 4, vertexBuffer);\n        GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, 0, 3);\n        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);\n    }\n\n    @Override\n    public void surfaceDestroyed(SurfaceHolder holder) {\n\n    }\n\n    public int createProgram(String vertexSource, String fragmentSource) {\n        int vertexShader = loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);\n        if (vertexShader == 0) {\n            return 0;\n        }\n        int pixelShader = loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);\n        if (pixelShader == 0) {\n            return 0;\n        }\n\n        int program = GLES32.glCreateProgram();\n        GLES32.glAttachShader(program, vertexShader);\n        GLES32.glAttachShader(program, pixelShader);\n        GLES32.glLinkProgram(program);\n        int[] linkStatus = new int[1];\n        GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, 0);\n        if (linkStatus[0] != GLES32.GL_TRUE) {\n            GLES32.glDeleteProgram(program);\n            program = 0;\n        }\n        return program;\n    }\n\n\n    public int loadShader(int shaderType, String source) {\n        int shader = GLES32.glCreateShader(shaderType);\n        GLES32.glShaderSource(shader, source);\n        GLES32.glCompileShader(shader);\n        int[] compiled = new int[1];\n        GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, 0);\n        if (compiled[0] == 0) {\n            GLES32.glDeleteShader(shader);\n            GLES32.glGetShaderInfoLog(shader);\n            shader = 0;\n        }\n        return shader;\n    }\n\n    public FloatBuffer createFloatBuffer(float[] coords) {\n        ByteBuffer bb = ByteBuffer.allocateDirect(coords.length * 4);\n        bb.order(ByteOrder.nativeOrder());\n        FloatBuffer fb = bb.asFloatBuffer();\n        fb.put(coords);\n        fb.position(0);\n        return fb;\n    }\n}\n\n```\n\n# 参考\n[https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3](https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3)\n[https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml](https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml)","slug":"android-opengl-es-triangle","published":1,"updated":"2024-08-21T03:16:19.782Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vr000o5p6te6j87r4c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>在前面几篇文章中我们已经初始化了GLSurfaceView 和 EGL，并且使用 OpenGLES（下文简称GLES）渲染出了红色画面。</p>\n<p>这一节中我们将在红色上继续画上三角形。</p>\n<p>在着手画三角形之前，我们先要学习一点点关于 GLES 的预备知识，非常简单。</p>\n<ol>\n<li><p>GLES 底层是由 c 语言实现，所以没有面向对象特性，它的接口及工作原理更接近面向过程，且其内部就是一个巨大的状态机。例如前面画的红色我们做了两步操作，第一步<code>GLES32.glClearColor</code>，设置清屏颜色，第二步<code>GLES32.glClear</code>进行清屏。<br>总结一下就是 <strong>GLES 的渲染一般经历两步：1. 状态设置，2. 状态使用。</strong> 牢记这一点，对后面的学习会有很大的帮助。</p>\n</li>\n<li><p>GLES 的渲染工作是在 GPU 中完成，所以我们的模型数据都需要由 CPU 转交给 GPU。</p>\n</li>\n<li><p>GLES 中的坐标是标准化设备坐标（Normalized Device Coordinates, NDC），标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。如下图：<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/ndc.png\" alt=\"\"><br>所以如果我们在手机上直接画（0,0.5）、（0.5,0.5）和（-0.5,0.5）这三个点的时候，得到的就未必是上图中的等边三角形了，因为我们屏幕并不是一个正方形，某个方向是会被拉伸的。具体怎么解决这个问题，在以后的章节中会讲到。</p>\n</li>\n</ol>\n<p>差不多就是以上三点，把他们都牢记在心，对入门 GLES 很重要。</p>\n<span id=\"more\"></span>\n<h1 id=\"绘制三角形\"><a href=\"#绘制三角形\" class=\"headerlink\" title=\"绘制三角形\"></a>绘制三角形</h1><p>基于上面说道的三点，我们来考虑下如果要绘制三角形，需要做哪些事情？</p>\n<ol>\n<li>需要有三角形三个点坐标。</li>\n<li>需要知道三角形的颜色。</li>\n<li>需要把三角形的坐标和颜色告诉 GPU。</li>\n<li>让 GPU 绘制三角形。</li>\n</ol>\n<p>差不多就是这么多了，下面我们开始写代码。</p>\n<h2 id=\"准备三角形坐标和颜色\"><a href=\"#准备三角形坐标和颜色\" class=\"headerlink\" title=\"准备三角形坐标和颜色\"></a>准备三角形坐标和颜色</h2><p>这个很简单，直接看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COORDS[] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 0 top</span></span><br><span class=\"line\">        -<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 1 bottom left</span></span><br><span class=\"line\">        <span class=\"number\">0f</span>, -<span class=\"number\">0.5f</span>    <span class=\"comment\">// 2 bottom right</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COLOR[] = &#123;<span class=\"number\">0.1F</span>, <span class=\"number\">0.9F</span>, <span class=\"number\">0.4F</span>, <span class=\"number\">1.0F</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>将数组坐标和颜色值放入数组中。</p>\n<h2 id=\"把三角形坐标和颜色告诉GPU\"><a href=\"#把三角形坐标和颜色告诉GPU\" class=\"headerlink\" title=\"把三角形坐标和颜色告诉GPU\"></a>把三角形坐标和颜色告诉GPU</h2><p>把三角形坐标和颜色告诉GPU就没那么简单了，需要使用到 GLSL（着色器语言）。<br>在介绍GLSL前首先介绍下GLES的渲染流程，俗称渲染管线。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/pipeline.png\" alt=\"\"></p>\n<p>如上图所示，GLES的渲染大致分这六个步骤，其中将三角形坐标和颜色传递给GPU的是在 Vertex Shader 或者 Fragment Shader 中。而这两个 Shader 在高版本的 GLES中是支持可编程的，编程使用的语言就是上面说的 GLSL。<br>大概先说这么多，你暂时也不用深究其中的原理。目前你只要知道如何把数据给到GPU即可。</p>\n<p>下面给出 Vertex Shader 和 Fragment Shader 的代码片段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">VERTEX_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">        <span class=\"string\">&quot;attribute vec4 aPosition;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    gl_Position = aPosition;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FRAGMENT_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">        <span class=\"string\">&quot;precision mediump float;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;uniform vec4 uColor;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;   gl_FragColor = uColor;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>我们将这两个shader放入字符串中保存，其中 Vertex Shader 中的 aPostion 就是我们要存放三角形坐标的属性。而Fragment Shader 中的 uColor 则是存储三角形颜色的属性。</p>\n<p>GLSL 的语言其实和 c 语言是很像的，要运行也是类似，需要经历编译链接。而经过编译链接后的产物则是 GLE S中的 Program 对象。下面看下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createProgram</span><span class=\"params\">(String vertexSource, String fragmentSource)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">vertexShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (vertexShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">pixelShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (pixelShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">program</span> <span class=\"operator\">=</span> GLES32.glCreateProgram();</span><br><span class=\"line\">       GLES32.glAttachShader(program, vertexShader);</span><br><span class=\"line\">       GLES32.glAttachShader(program, pixelShader);</span><br><span class=\"line\">       GLES32.glLinkProgram(program);</span><br><span class=\"line\">       <span class=\"type\">int</span>[] linkStatus = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (linkStatus[<span class=\"number\">0</span>] != GLES32.GL_TRUE) &#123;</span><br><span class=\"line\">           GLES32.glDeleteProgram(program);</span><br><span class=\"line\">           program = <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> program;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">loadShader</span><span class=\"params\">(<span class=\"type\">int</span> shaderType, String source)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">shader</span> <span class=\"operator\">=</span> GLES32.glCreateShader(shaderType);</span><br><span class=\"line\">       GLES32.glShaderSource(shader, source);</span><br><span class=\"line\">       GLES32.glCompileShader(shader);</span><br><span class=\"line\">       <span class=\"type\">int</span>[] compiled = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (compiled[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           GLES32.glDeleteShader(shader);</span><br><span class=\"line\">           GLES32.glGetShaderInfoLog(shader);</span><br><span class=\"line\">           shader = <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> shader;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>上面方法的作用是加载shader，编译shader，创建 Program，最后进行链接。</p>\n<p>一旦Program被成功链接，那么我们就可以把三角形坐标和颜色赋值给程序里的 aPosition 和 uColor 了。具体怎么做呢？看如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLES32.glUseProgram(program);                                                                                        <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">triangleColorLocation</span> <span class=\"operator\">=</span> GLES32.glGetUniformLocation(program, <span class=\"string\">&quot;uColor&quot;</span>);                             <span class=\"comment\">//2</span></span><br><span class=\"line\">GLES32.glUniform4fv(triangleColorLocation, <span class=\"number\">1</span>, createFloatBuffer(TRIANGLE_COLOR));                     <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">aPositionLocation</span> <span class=\"operator\">=</span> GLES32.glGetAttribLocation(program, <span class=\"string\">&quot;aPosition&quot;</span>);                                  <span class=\"comment\">//4</span></span><br><span class=\"line\">GLES32.glEnableVertexAttribArray(aPositionLocation);                                                             <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"type\">FloatBuffer</span> <span class=\"variable\">vertexBuffer</span> <span class=\"operator\">=</span> createFloatBuffer(TRIANGLE_COORDS);                                             <span class=\"comment\">//6</span></span><br><span class=\"line\">GLES32.glVertexAttribPointer(aPositionLocation, <span class=\"number\">2</span>, GLES32.GL_FLOAT, <span class=\"literal\">false</span>, <span class=\"number\">2</span> * <span class=\"number\">4</span>, vertexBuffer);      <span class=\"comment\">//7</span></span><br></pre></td></tr></table></figure>\n<p>这里一行一行解释：</p>\n<ol>\n<li>当 Program 链接成功后，如果要使用，需要调用 <code>glUseProgram</code>方法。</li>\n<li>我们可以看到 uColor 是被 uniform 修饰的，uniform 在 GLSL 中表示常量，我们可以过 <code>glGetUniformLocation</code>方法获取 uColor 在 GPU 常量区的位置。</li>\n<li>拿到 uColor 的位置后，使用 <code>glUniform4fv</code>即可对其进行赋值。</li>\n<li>aPosition 被 <code>attribute</code>修饰，attribute 表示vertex shader 中的顶点属性，属于变量，用来存放顶点相关数据，这里我们用它存放三角形坐标。通过 <code>glGetAttribLocation</code> 方法，拿到了 aPostion 的位置。</li>\n<li>这里和 uniform 做法不同，首先我们要激活这个 attribute，然后才能给它赋值，激活方法是 <code>glEnableVertexAttribArray</code>，一旦激活后，就可以对他进行赋值了。</li>\n<li>这一步是对 aPosition 对应的顶点属性进行赋值，但由于这是一个坐标数组，我们需要确切告诉它我们坐标数组的大小和格式，只有这样GPU在运行时才能确切的拿到我们传入的三个坐标。这里使用了<code>glVertexAttribPointer</code>方法，其参数列表如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void glVertexAttribPointer(</span><br><span class=\"line\">    GLuint  \tindex,</span><br><span class=\"line\"> \tGLint  \tsize,</span><br><span class=\"line\"> \tGLenum  \ttype,</span><br><span class=\"line\"> \tGLboolean  \tnormalized,</span><br><span class=\"line\"> \tGLsizei  \tstride,</span><br><span class=\"line\"> \tconst GLvoid *  \tpointer);</span><br></pre></td></tr></table></figure>\n上面这个是c语言的参数列表，其中 index 即 attribute 的 location，这里传 aPositionLocation。<br>size 表示每一个attribute 中每一个顶点的数据量，根据上面的坐标，每个顶点只有 x和y，即这里传 2。<br>type表示传入数据的类型，我们传的是float，所以这里传入 GLES32.GL_FLOAT 。<br>normallzed 表示要不要给我们传输的数据做归一化（转换到 -1~1之间），我们传入的已经是归一化后的数据，所以这里传 false 即可。<br>stride 表示 aPosition 这个顶点属性中，每两个顶点相隔的多少个字节，这里是两个 float，所以传入 4*2（float 占 4 个字节）。<br>pointer 表示 aPosition 要读取数据的地址或偏移。我们这里属于数据地址，所以传入 vertexBuffer 即可。属于偏移的在后面的章节中介绍。</li>\n</ol>\n<p>调用完以上方法后，数据就被载入到 GPU 中了，接下来调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);</span><br></pre></td></tr></table></figure>\n<p>即可将三角形绘制出来。效果如下：<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png\" alt=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png\"></p>\n<p>本章节完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.mobile.graphics.opengl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGL14;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLDisplay;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLSurface;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.GLES32;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.mobile.graphics.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteOrder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.FloatBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenGLES_VertexAttributePointer_Activity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SurfaceHolder</span>.Callback &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLDisplay mEGLDisplay;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLContext mEGLContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLSurface mEGLSurface;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLConfig mEGLConfig;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">VERTEX_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            <span class=\"string\">&quot;attribute vec4 aPosition;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;    gl_Position = aPosition;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FRAGMENT_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            <span class=\"string\">&quot;precision mediump float;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;uniform vec4 uColor;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;   gl_FragColor = uColor;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COORDS[] = &#123;</span><br><span class=\"line\">            <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 0 top</span></span><br><span class=\"line\">            -<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 1 bottom left</span></span><br><span class=\"line\">            <span class=\"number\">0f</span>, -<span class=\"number\">0.5f</span>    <span class=\"comment\">// 2 bottom right</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COLOR[] = &#123;<span class=\"number\">0.1F</span>, <span class=\"number\">0.9F</span>, <span class=\"number\">0.4F</span>, <span class=\"number\">1.0F</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_open_g_l_vertex_attribute_pointer);</span><br><span class=\"line\">        <span class=\"type\">SurfaceView</span> <span class=\"variable\">sv</span> <span class=\"operator\">=</span> findViewById(R.id.surface_view);</span><br><span class=\"line\">        sv.getHolder().addCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initEGL</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get an EGL display connection</span></span><br><span class=\"line\">        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] version = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"comment\">// initialize EGL display connection</span></span><br><span class=\"line\">        EGL14.eglInitialize(mEGLDisplay, version, <span class=\"number\">0</span>, version, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// target attribute list</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] attribList = &#123;</span><br><span class=\"line\">                EGL14.EGL_RED_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_GREEN_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_BLUE_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_ALPHA_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_NONE</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        EGLConfig[] configs = <span class=\"keyword\">new</span> <span class=\"title class_\">EGLConfig</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] numConfigs = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">//get appropriate EGL frame buffer configuration</span></span><br><span class=\"line\">        EGL14.eglChooseConfig(mEGLDisplay, attribList, <span class=\"number\">0</span>, configs, <span class=\"number\">0</span>, configs.length,</span><br><span class=\"line\">                numConfigs, <span class=\"number\">0</span>);</span><br><span class=\"line\">        mEGLConfig = configs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] attrib3_list = &#123;</span><br><span class=\"line\">                EGL14.EGL_CONTEXT_CLIENT_VERSION, <span class=\"number\">3</span>,</span><br><span class=\"line\">                EGL14.EGL_NONE</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//create an EGL rendering context</span></span><br><span class=\"line\">        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,</span><br><span class=\"line\">                attrib3_list, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// create an EGL window surface</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] surfaceAttribs = &#123;</span><br><span class=\"line\">                EGL14.EGL_NONE</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),</span><br><span class=\"line\">                surfaceAttribs, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// connect the context to the surface</span></span><br><span class=\"line\">        EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">        initEGL(holder);</span><br><span class=\"line\">        GLES32.glClearColor(<span class=\"number\">1.0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">1F</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"type\">int</span> format, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;</span><br><span class=\"line\">        GLES32.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">program</span> <span class=\"operator\">=</span> createProgram(VERTEX_SHADER, FRAGMENT_SHADER);</span><br><span class=\"line\">        GLES32.glUseProgram(program);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">triangleColorLocation</span> <span class=\"operator\">=</span> GLES32.glGetUniformLocation(program, <span class=\"string\">&quot;uColor&quot;</span>);</span><br><span class=\"line\">        GLES32.glUniform4fv(triangleColorLocation, <span class=\"number\">1</span>, createFloatBuffer(TRIANGLE_COLOR));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">aPositionLocation</span> <span class=\"operator\">=</span> GLES32.glGetAttribLocation(program, <span class=\"string\">&quot;aPosition&quot;</span>);</span><br><span class=\"line\">        GLES32.glEnableVertexAttribArray(aPositionLocation);</span><br><span class=\"line\">        <span class=\"type\">FloatBuffer</span> <span class=\"variable\">vertexBuffer</span> <span class=\"operator\">=</span> createFloatBuffer(TRIANGLE_COORDS);</span><br><span class=\"line\">        GLES32.glVertexAttribPointer(aPositionLocation, <span class=\"number\">2</span>, GLES32.GL_FLOAT, <span class=\"literal\">false</span>, <span class=\"number\">2</span> * <span class=\"number\">4</span>, vertexBuffer);</span><br><span class=\"line\">        GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createProgram</span><span class=\"params\">(String vertexSource, String fragmentSource)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">vertexShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vertexShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pixelShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pixelShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">program</span> <span class=\"operator\">=</span> GLES32.glCreateProgram();</span><br><span class=\"line\">        GLES32.glAttachShader(program, vertexShader);</span><br><span class=\"line\">        GLES32.glAttachShader(program, pixelShader);</span><br><span class=\"line\">        GLES32.glLinkProgram(program);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] linkStatus = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (linkStatus[<span class=\"number\">0</span>] != GLES32.GL_TRUE) &#123;</span><br><span class=\"line\">            GLES32.glDeleteProgram(program);</span><br><span class=\"line\">            program = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> program;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">loadShader</span><span class=\"params\">(<span class=\"type\">int</span> shaderType, String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">shader</span> <span class=\"operator\">=</span> GLES32.glCreateShader(shaderType);</span><br><span class=\"line\">        GLES32.glShaderSource(shader, source);</span><br><span class=\"line\">        GLES32.glCompileShader(shader);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] compiled = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compiled[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            GLES32.glDeleteShader(shader);</span><br><span class=\"line\">            GLES32.glGetShaderInfoLog(shader);</span><br><span class=\"line\">            shader = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FloatBuffer <span class=\"title function_\">createFloatBuffer</span><span class=\"params\">(<span class=\"type\">float</span>[] coords)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocateDirect(coords.length * <span class=\"number\">4</span>);</span><br><span class=\"line\">        bb.order(ByteOrder.nativeOrder());</span><br><span class=\"line\">        <span class=\"type\">FloatBuffer</span> <span class=\"variable\">fb</span> <span class=\"operator\">=</span> bb.asFloatBuffer();</span><br><span class=\"line\">        fb.put(coords);</span><br><span class=\"line\">        fb.position(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3\">https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3</a><br><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml\">https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml</a></p>\n","excerpt":"<p>在前面几篇文章中我们已经初始化了GLSurfaceView 和 EGL，并且使用 OpenGLES（下文简称GLES）渲染出了红色画面。</p>\n<p>这一节中我们将在红色上继续画上三角形。</p>\n<p>在着手画三角形之前，我们先要学习一点点关于 GLES 的预备知识，非常简单。</p>\n<ol>\n<li><p>GLES 底层是由 c 语言实现，所以没有面向对象特性，它的接口及工作原理更接近面向过程，且其内部就是一个巨大的状态机。例如前面画的红色我们做了两步操作，第一步<code>GLES32.glClearColor</code>，设置清屏颜色，第二步<code>GLES32.glClear</code>进行清屏。<br>总结一下就是 <strong>GLES 的渲染一般经历两步：1. 状态设置，2. 状态使用。</strong> 牢记这一点，对后面的学习会有很大的帮助。</p>\n</li>\n<li><p>GLES 的渲染工作是在 GPU 中完成，所以我们的模型数据都需要由 CPU 转交给 GPU。</p>\n</li>\n<li><p>GLES 中的坐标是标准化设备坐标（Normalized Device Coordinates, NDC），标准化设备坐标是一个x、y和z值在-1.0到1.0的一小段空间。任何落在范围外的坐标都会被丢弃/裁剪，不会显示在你的屏幕上。如下图：<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/ndc.png\" alt=\"\"><br>所以如果我们在手机上直接画（0,0.5）、（0.5,0.5）和（-0.5,0.5）这三个点的时候，得到的就未必是上图中的等边三角形了，因为我们屏幕并不是一个正方形，某个方向是会被拉伸的。具体怎么解决这个问题，在以后的章节中会讲到。</p>\n</li>\n</ol>\n<p>差不多就是以上三点，把他们都牢记在心，对入门 GLES 很重要。</p>","more":"<h1 id=\"绘制三角形\"><a href=\"#绘制三角形\" class=\"headerlink\" title=\"绘制三角形\"></a>绘制三角形</h1><p>基于上面说道的三点，我们来考虑下如果要绘制三角形，需要做哪些事情？</p>\n<ol>\n<li>需要有三角形三个点坐标。</li>\n<li>需要知道三角形的颜色。</li>\n<li>需要把三角形的坐标和颜色告诉 GPU。</li>\n<li>让 GPU 绘制三角形。</li>\n</ol>\n<p>差不多就是这么多了，下面我们开始写代码。</p>\n<h2 id=\"准备三角形坐标和颜色\"><a href=\"#准备三角形坐标和颜色\" class=\"headerlink\" title=\"准备三角形坐标和颜色\"></a>准备三角形坐标和颜色</h2><p>这个很简单，直接看代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COORDS[] = &#123;</span><br><span class=\"line\">        <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 0 top</span></span><br><span class=\"line\">        -<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 1 bottom left</span></span><br><span class=\"line\">        <span class=\"number\">0f</span>, -<span class=\"number\">0.5f</span>    <span class=\"comment\">// 2 bottom right</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COLOR[] = &#123;<span class=\"number\">0.1F</span>, <span class=\"number\">0.9F</span>, <span class=\"number\">0.4F</span>, <span class=\"number\">1.0F</span>&#125;;</span><br></pre></td></tr></table></figure>\n<p>将数组坐标和颜色值放入数组中。</p>\n<h2 id=\"把三角形坐标和颜色告诉GPU\"><a href=\"#把三角形坐标和颜色告诉GPU\" class=\"headerlink\" title=\"把三角形坐标和颜色告诉GPU\"></a>把三角形坐标和颜色告诉GPU</h2><p>把三角形坐标和颜色告诉GPU就没那么简单了，需要使用到 GLSL（着色器语言）。<br>在介绍GLSL前首先介绍下GLES的渲染流程，俗称渲染管线。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/pipeline.png\" alt=\"\"></p>\n<p>如上图所示，GLES的渲染大致分这六个步骤，其中将三角形坐标和颜色传递给GPU的是在 Vertex Shader 或者 Fragment Shader 中。而这两个 Shader 在高版本的 GLES中是支持可编程的，编程使用的语言就是上面说的 GLSL。<br>大概先说这么多，你暂时也不用深究其中的原理。目前你只要知道如何把数据给到GPU即可。</p>\n<p>下面给出 Vertex Shader 和 Fragment Shader 的代码片段：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">VERTEX_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">        <span class=\"string\">&quot;attribute vec4 aPosition;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    gl_Position = aPosition;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FRAGMENT_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">        <span class=\"string\">&quot;precision mediump float;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;uniform vec4 uColor;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;   gl_FragColor = uColor;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#125;&quot;</span>;</span><br></pre></td></tr></table></figure>\n<p>我们将这两个shader放入字符串中保存，其中 Vertex Shader 中的 aPostion 就是我们要存放三角形坐标的属性。而Fragment Shader 中的 uColor 则是存储三角形颜色的属性。</p>\n<p>GLSL 的语言其实和 c 语言是很像的，要运行也是类似，需要经历编译链接。而经过编译链接后的产物则是 GLE S中的 Program 对象。下面看下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createProgram</span><span class=\"params\">(String vertexSource, String fragmentSource)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">vertexShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (vertexShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">pixelShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (pixelShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">program</span> <span class=\"operator\">=</span> GLES32.glCreateProgram();</span><br><span class=\"line\">       GLES32.glAttachShader(program, vertexShader);</span><br><span class=\"line\">       GLES32.glAttachShader(program, pixelShader);</span><br><span class=\"line\">       GLES32.glLinkProgram(program);</span><br><span class=\"line\">       <span class=\"type\">int</span>[] linkStatus = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (linkStatus[<span class=\"number\">0</span>] != GLES32.GL_TRUE) &#123;</span><br><span class=\"line\">           GLES32.glDeleteProgram(program);</span><br><span class=\"line\">           program = <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> program;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">loadShader</span><span class=\"params\">(<span class=\"type\">int</span> shaderType, String source)</span> &#123;</span><br><span class=\"line\">       <span class=\"type\">int</span> <span class=\"variable\">shader</span> <span class=\"operator\">=</span> GLES32.glCreateShader(shaderType);</span><br><span class=\"line\">       GLES32.glShaderSource(shader, source);</span><br><span class=\"line\">       GLES32.glCompileShader(shader);</span><br><span class=\"line\">       <span class=\"type\">int</span>[] compiled = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">       GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, <span class=\"number\">0</span>);</span><br><span class=\"line\">       <span class=\"keyword\">if</span> (compiled[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">           GLES32.glDeleteShader(shader);</span><br><span class=\"line\">           GLES32.glGetShaderInfoLog(shader);</span><br><span class=\"line\">           shader = <span class=\"number\">0</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> shader;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>上面方法的作用是加载shader，编译shader，创建 Program，最后进行链接。</p>\n<p>一旦Program被成功链接，那么我们就可以把三角形坐标和颜色赋值给程序里的 aPosition 和 uColor 了。具体怎么做呢？看如下代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLES32.glUseProgram(program);                                                                                        <span class=\"comment\">//1</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">triangleColorLocation</span> <span class=\"operator\">=</span> GLES32.glGetUniformLocation(program, <span class=\"string\">&quot;uColor&quot;</span>);                             <span class=\"comment\">//2</span></span><br><span class=\"line\">GLES32.glUniform4fv(triangleColorLocation, <span class=\"number\">1</span>, createFloatBuffer(TRIANGLE_COLOR));                     <span class=\"comment\">//3</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">aPositionLocation</span> <span class=\"operator\">=</span> GLES32.glGetAttribLocation(program, <span class=\"string\">&quot;aPosition&quot;</span>);                                  <span class=\"comment\">//4</span></span><br><span class=\"line\">GLES32.glEnableVertexAttribArray(aPositionLocation);                                                             <span class=\"comment\">//5</span></span><br><span class=\"line\"><span class=\"type\">FloatBuffer</span> <span class=\"variable\">vertexBuffer</span> <span class=\"operator\">=</span> createFloatBuffer(TRIANGLE_COORDS);                                             <span class=\"comment\">//6</span></span><br><span class=\"line\">GLES32.glVertexAttribPointer(aPositionLocation, <span class=\"number\">2</span>, GLES32.GL_FLOAT, <span class=\"literal\">false</span>, <span class=\"number\">2</span> * <span class=\"number\">4</span>, vertexBuffer);      <span class=\"comment\">//7</span></span><br></pre></td></tr></table></figure>\n<p>这里一行一行解释：</p>\n<ol>\n<li>当 Program 链接成功后，如果要使用，需要调用 <code>glUseProgram</code>方法。</li>\n<li>我们可以看到 uColor 是被 uniform 修饰的，uniform 在 GLSL 中表示常量，我们可以过 <code>glGetUniformLocation</code>方法获取 uColor 在 GPU 常量区的位置。</li>\n<li>拿到 uColor 的位置后，使用 <code>glUniform4fv</code>即可对其进行赋值。</li>\n<li>aPosition 被 <code>attribute</code>修饰，attribute 表示vertex shader 中的顶点属性，属于变量，用来存放顶点相关数据，这里我们用它存放三角形坐标。通过 <code>glGetAttribLocation</code> 方法，拿到了 aPostion 的位置。</li>\n<li>这里和 uniform 做法不同，首先我们要激活这个 attribute，然后才能给它赋值，激活方法是 <code>glEnableVertexAttribArray</code>，一旦激活后，就可以对他进行赋值了。</li>\n<li>这一步是对 aPosition 对应的顶点属性进行赋值，但由于这是一个坐标数组，我们需要确切告诉它我们坐标数组的大小和格式，只有这样GPU在运行时才能确切的拿到我们传入的三个坐标。这里使用了<code>glVertexAttribPointer</code>方法，其参数列表如下：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void glVertexAttribPointer(</span><br><span class=\"line\">    GLuint  \tindex,</span><br><span class=\"line\"> \tGLint  \tsize,</span><br><span class=\"line\"> \tGLenum  \ttype,</span><br><span class=\"line\"> \tGLboolean  \tnormalized,</span><br><span class=\"line\"> \tGLsizei  \tstride,</span><br><span class=\"line\"> \tconst GLvoid *  \tpointer);</span><br></pre></td></tr></table></figure>\n上面这个是c语言的参数列表，其中 index 即 attribute 的 location，这里传 aPositionLocation。<br>size 表示每一个attribute 中每一个顶点的数据量，根据上面的坐标，每个顶点只有 x和y，即这里传 2。<br>type表示传入数据的类型，我们传的是float，所以这里传入 GLES32.GL_FLOAT 。<br>normallzed 表示要不要给我们传输的数据做归一化（转换到 -1~1之间），我们传入的已经是归一化后的数据，所以这里传 false 即可。<br>stride 表示 aPosition 这个顶点属性中，每两个顶点相隔的多少个字节，这里是两个 float，所以传入 4*2（float 占 4 个字节）。<br>pointer 表示 aPosition 要读取数据的地址或偏移。我们这里属于数据地址，所以传入 vertexBuffer 即可。属于偏移的在后面的章节中介绍。</li>\n</ol>\n<p>调用完以上方法后，数据就被载入到 GPU 中了，接下来调用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);</span><br></pre></td></tr></table></figure>\n<p>即可将三角形绘制出来。效果如下：<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png\" alt=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/gles_triangle.png\"></p>\n<p>本章节完整代码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zql.mobile.graphics.opengl;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGL14;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLConfig;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLContext;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLDisplay;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.EGLSurface;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.opengl.GLES32;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceHolder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.SurfaceView;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> androidx.appcompat.app.AppCompatActivity;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.zql.mobile.graphics.R;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteBuffer;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.ByteOrder;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.nio.FloatBuffer;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OpenGLES_VertexAttributePointer_Activity</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AppCompatActivity</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">SurfaceHolder</span>.Callback &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLDisplay mEGLDisplay;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLContext mEGLContext;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLSurface mEGLSurface;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> EGLConfig mEGLConfig;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">VERTEX_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            <span class=\"string\">&quot;attribute vec4 aPosition;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;    gl_Position = aPosition;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">FRAGMENT_SHADER</span> <span class=\"operator\">=</span></span><br><span class=\"line\">            <span class=\"string\">&quot;precision mediump float;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;uniform vec4 uColor;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;void main() &#123;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;   gl_FragColor = uColor;&quot;</span> +</span><br><span class=\"line\">                    <span class=\"string\">&quot;&#125;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COORDS[] = &#123;</span><br><span class=\"line\">            <span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 0 top</span></span><br><span class=\"line\">            -<span class=\"number\">0.5f</span>, <span class=\"number\">0.5f</span>,   <span class=\"comment\">// 1 bottom left</span></span><br><span class=\"line\">            <span class=\"number\">0f</span>, -<span class=\"number\">0.5f</span>    <span class=\"comment\">// 2 bottom right</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">float</span> TRIANGLE_COLOR[] = &#123;<span class=\"number\">0.1F</span>, <span class=\"number\">0.9F</span>, <span class=\"number\">0.4F</span>, <span class=\"number\">1.0F</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_open_g_l_vertex_attribute_pointer);</span><br><span class=\"line\">        <span class=\"type\">SurfaceView</span> <span class=\"variable\">sv</span> <span class=\"operator\">=</span> findViewById(R.id.surface_view);</span><br><span class=\"line\">        sv.getHolder().addCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">initEGL</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// get an EGL display connection</span></span><br><span class=\"line\">        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] version = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"comment\">// initialize EGL display connection</span></span><br><span class=\"line\">        EGL14.eglInitialize(mEGLDisplay, version, <span class=\"number\">0</span>, version, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// target attribute list</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] attribList = &#123;</span><br><span class=\"line\">                EGL14.EGL_RED_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_GREEN_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_BLUE_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_ALPHA_SIZE, <span class=\"number\">8</span>,</span><br><span class=\"line\">                EGL14.EGL_NONE</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        EGLConfig[] configs = <span class=\"keyword\">new</span> <span class=\"title class_\">EGLConfig</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"type\">int</span>[] numConfigs = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"comment\">//get appropriate EGL frame buffer configuration</span></span><br><span class=\"line\">        EGL14.eglChooseConfig(mEGLDisplay, attribList, <span class=\"number\">0</span>, configs, <span class=\"number\">0</span>, configs.length,</span><br><span class=\"line\">                numConfigs, <span class=\"number\">0</span>);</span><br><span class=\"line\">        mEGLConfig = configs[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span>[] attrib3_list = &#123;</span><br><span class=\"line\">                EGL14.EGL_CONTEXT_CLIENT_VERSION, <span class=\"number\">3</span>,</span><br><span class=\"line\">                EGL14.EGL_NONE</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//create an EGL rendering context</span></span><br><span class=\"line\">        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, mEGLConfig, EGL14.EGL_NO_CONTEXT,</span><br><span class=\"line\">                attrib3_list, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// create an EGL window surface</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] surfaceAttribs = &#123;</span><br><span class=\"line\">                EGL14.EGL_NONE</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        mEGLSurface = EGL14.eglCreateWindowSurface(mEGLDisplay, mEGLConfig, holder.getSurface(),</span><br><span class=\"line\">                surfaceAttribs, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// connect the context to the surface</span></span><br><span class=\"line\">        EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface, mEGLContext);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceCreated</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\">        initEGL(holder);</span><br><span class=\"line\">        GLES32.glClearColor(<span class=\"number\">1.0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">0F</span>, <span class=\"number\">1F</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceChanged</span><span class=\"params\">(SurfaceHolder holder, <span class=\"type\">int</span> format, <span class=\"type\">int</span> width, <span class=\"type\">int</span> height)</span> &#123;</span><br><span class=\"line\">        GLES32.glViewport(<span class=\"number\">0</span>, <span class=\"number\">0</span>, width, height);</span><br><span class=\"line\">        GLES32.glClear(GLES32.GL_COLOR_BUFFER_BIT);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">program</span> <span class=\"operator\">=</span> createProgram(VERTEX_SHADER, FRAGMENT_SHADER);</span><br><span class=\"line\">        GLES32.glUseProgram(program);</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">triangleColorLocation</span> <span class=\"operator\">=</span> GLES32.glGetUniformLocation(program, <span class=\"string\">&quot;uColor&quot;</span>);</span><br><span class=\"line\">        GLES32.glUniform4fv(triangleColorLocation, <span class=\"number\">1</span>, createFloatBuffer(TRIANGLE_COLOR));</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">aPositionLocation</span> <span class=\"operator\">=</span> GLES32.glGetAttribLocation(program, <span class=\"string\">&quot;aPosition&quot;</span>);</span><br><span class=\"line\">        GLES32.glEnableVertexAttribArray(aPositionLocation);</span><br><span class=\"line\">        <span class=\"type\">FloatBuffer</span> <span class=\"variable\">vertexBuffer</span> <span class=\"operator\">=</span> createFloatBuffer(TRIANGLE_COORDS);</span><br><span class=\"line\">        GLES32.glVertexAttribPointer(aPositionLocation, <span class=\"number\">2</span>, GLES32.GL_FLOAT, <span class=\"literal\">false</span>, <span class=\"number\">2</span> * <span class=\"number\">4</span>, vertexBuffer);</span><br><span class=\"line\">        GLES32.glDrawArrays(GLES32.GL_TRIANGLE_STRIP, <span class=\"number\">0</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">        EGL14.eglSwapBuffers(mEGLDisplay, mEGLSurface);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">surfaceDestroyed</span><span class=\"params\">(SurfaceHolder holder)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">createProgram</span><span class=\"params\">(String vertexSource, String fragmentSource)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">vertexShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_VERTEX_SHADER, vertexSource);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (vertexShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">pixelShader</span> <span class=\"operator\">=</span> loadShader(GLES32.GL_FRAGMENT_SHADER, fragmentSource);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (pixelShader == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">program</span> <span class=\"operator\">=</span> GLES32.glCreateProgram();</span><br><span class=\"line\">        GLES32.glAttachShader(program, vertexShader);</span><br><span class=\"line\">        GLES32.glAttachShader(program, pixelShader);</span><br><span class=\"line\">        GLES32.glLinkProgram(program);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] linkStatus = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        GLES32.glGetProgramiv(program, GLES32.GL_LINK_STATUS, linkStatus, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (linkStatus[<span class=\"number\">0</span>] != GLES32.GL_TRUE) &#123;</span><br><span class=\"line\">            GLES32.glDeleteProgram(program);</span><br><span class=\"line\">            program = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> program;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">loadShader</span><span class=\"params\">(<span class=\"type\">int</span> shaderType, String source)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">shader</span> <span class=\"operator\">=</span> GLES32.glCreateShader(shaderType);</span><br><span class=\"line\">        GLES32.glShaderSource(shader, source);</span><br><span class=\"line\">        GLES32.glCompileShader(shader);</span><br><span class=\"line\">        <span class=\"type\">int</span>[] compiled = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">1</span>];</span><br><span class=\"line\">        GLES32.glGetShaderiv(shader, GLES32.GL_COMPILE_STATUS, compiled, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compiled[<span class=\"number\">0</span>] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            GLES32.glDeleteShader(shader);</span><br><span class=\"line\">            GLES32.glGetShaderInfoLog(shader);</span><br><span class=\"line\">            shader = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> shader;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FloatBuffer <span class=\"title function_\">createFloatBuffer</span><span class=\"params\">(<span class=\"type\">float</span>[] coords)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ByteBuffer</span> <span class=\"variable\">bb</span> <span class=\"operator\">=</span> ByteBuffer.allocateDirect(coords.length * <span class=\"number\">4</span>);</span><br><span class=\"line\">        bb.order(ByteOrder.nativeOrder());</span><br><span class=\"line\">        <span class=\"type\">FloatBuffer</span> <span class=\"variable\">fb</span> <span class=\"operator\">=</span> bb.asFloatBuffer();</span><br><span class=\"line\">        fb.put(coords);</span><br><span class=\"line\">        fb.position(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fb;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h1><p><a href=\"https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3\">https://learnopengl-cn.github.io/01%20Getting%20started/04%20Hello%20Triangle/#_3</a><br><a href=\"https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml\">https://www.khronos.org/registry/OpenGL-Refpages/es3.0/html/glVertexAttribPointer.xhtml</a></p>"},{"title":"Android OpenGL - 01.OpenGL介绍及项目搭建","date":"2020-03-26T16:48:45.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_banner.jpg","_content":"\n> 从今天开始，我会学习Android OpenGL相关知识，也会将学习到的知识进行总结并整理到这里。\n\n# OpenGL介绍及开发环境搭建\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/OpenGL%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.PNG)\n<!-- more -->\n\n## OpenGL 简单介绍\n\nOpenGL（OpenGraphicsLibrary）定义了一个跨编程语言、跨平台编程的专业图形程序接口。可用于二维或三维图像的处理与渲染，它是一个功能强大、调用方便的底层图形库。对于嵌入式的设备，其提供了OpenGLES（OpenGLforEmbeddedSystems）版本，该版本是针对手机、Pad等嵌入式设备而设计   的，是OpenGL的一个子集。到目前为止，OpenGL已经经历过很多版本的迭代与更新，最新版本为3.0，而使用最广泛的还是OpenGLES2.0版本。\n\n## EGL\n\nEGL 是在不同平台上提供 OpenGL 上下文及窗口管理能力的具体实现，在 Android 中使用的是 EGL 在 iOS 是使用的是EAGL。\n\n## EGL 线程？\n\nOpenGLES 的渲染工作都是需要在指定线程中完成，在该线程中，需要绑定OpenGLES 的上下文及 Surface。绑定完成后即可以进行 OpenGLES 的渲染工作。此时的线程就叫做 EGL 线程。\n\n## EGL、EGL 线程和 Surface之间的关系\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_es_surface.png)\n\n\n# 创建c++项目并导入OpenGL\n\n## 编译环境\n\n需要创建支持 c++ 的 Android 项目，并且下载LLDB、CMAKE 和 NDK。\n如果编译后提示找不到cmake，需要在项目根目录的local.properties中添加如下路径：\n\n```gradle\ncmake.dir=C\\:\\\\Users\\\\zqlxt\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\cmake\\\\3.10.2.4988404\n```\n\n## 导入OpenGL相关库\n\n在 CMakeLists.txt 中添加如下依赖：\n\n```\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log\n              EGL  # egl依赖\n              GLESv2  # opengles 依赖\n              android)  # android ndk依赖\n```","source":"_posts/android-opengl-01.md","raw":"---\ntitle: Android OpenGL - 01.OpenGL介绍及项目搭建\ndate: 2020-03-27 00:48:45\ntags: \n- android\n- opengl\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_banner.jpg\n---\n\n> 从今天开始，我会学习Android OpenGL相关知识，也会将学习到的知识进行总结并整理到这里。\n\n# OpenGL介绍及开发环境搭建\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/OpenGL%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.PNG)\n<!-- more -->\n\n## OpenGL 简单介绍\n\nOpenGL（OpenGraphicsLibrary）定义了一个跨编程语言、跨平台编程的专业图形程序接口。可用于二维或三维图像的处理与渲染，它是一个功能强大、调用方便的底层图形库。对于嵌入式的设备，其提供了OpenGLES（OpenGLforEmbeddedSystems）版本，该版本是针对手机、Pad等嵌入式设备而设计   的，是OpenGL的一个子集。到目前为止，OpenGL已经经历过很多版本的迭代与更新，最新版本为3.0，而使用最广泛的还是OpenGLES2.0版本。\n\n## EGL\n\nEGL 是在不同平台上提供 OpenGL 上下文及窗口管理能力的具体实现，在 Android 中使用的是 EGL 在 iOS 是使用的是EAGL。\n\n## EGL 线程？\n\nOpenGLES 的渲染工作都是需要在指定线程中完成，在该线程中，需要绑定OpenGLES 的上下文及 Surface。绑定完成后即可以进行 OpenGLES 的渲染工作。此时的线程就叫做 EGL 线程。\n\n## EGL、EGL 线程和 Surface之间的关系\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_es_surface.png)\n\n\n# 创建c++项目并导入OpenGL\n\n## 编译环境\n\n需要创建支持 c++ 的 Android 项目，并且下载LLDB、CMAKE 和 NDK。\n如果编译后提示找不到cmake，需要在项目根目录的local.properties中添加如下路径：\n\n```gradle\ncmake.dir=C\\:\\\\Users\\\\zqlxt\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\cmake\\\\3.10.2.4988404\n```\n\n## 导入OpenGL相关库\n\n在 CMakeLists.txt 中添加如下依赖：\n\n```\nfind_library( # Sets the name of the path variable.\n              log-lib\n\n              # Specifies the name of the NDK library that\n              # you want CMake to locate.\n              log\n              EGL  # egl依赖\n              GLESv2  # opengles 依赖\n              android)  # android ndk依赖\n```","slug":"android-opengl-01","published":1,"updated":"2024-08-21T03:16:19.781Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vr000q5p6tgcre352i","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><blockquote>\n<p>从今天开始，我会学习Android OpenGL相关知识，也会将学习到的知识进行总结并整理到这里。</p>\n</blockquote>\n<h1 id=\"OpenGL介绍及开发环境搭建\"><a href=\"#OpenGL介绍及开发环境搭建\" class=\"headerlink\" title=\"OpenGL介绍及开发环境搭建\"></a>OpenGL介绍及开发环境搭建</h1><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/OpenGL%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.PNG\" alt=\"\"></p>\n<span id=\"more\"></span>\n\n<h2 id=\"OpenGL-简单介绍\"><a href=\"#OpenGL-简单介绍\" class=\"headerlink\" title=\"OpenGL 简单介绍\"></a>OpenGL 简单介绍</h2><p>OpenGL（OpenGraphicsLibrary）定义了一个跨编程语言、跨平台编程的专业图形程序接口。可用于二维或三维图像的处理与渲染，它是一个功能强大、调用方便的底层图形库。对于嵌入式的设备，其提供了OpenGLES（OpenGLforEmbeddedSystems）版本，该版本是针对手机、Pad等嵌入式设备而设计   的，是OpenGL的一个子集。到目前为止，OpenGL已经经历过很多版本的迭代与更新，最新版本为3.0，而使用最广泛的还是OpenGLES2.0版本。</p>\n<h2 id=\"EGL\"><a href=\"#EGL\" class=\"headerlink\" title=\"EGL\"></a>EGL</h2><p>EGL 是在不同平台上提供 OpenGL 上下文及窗口管理能力的具体实现，在 Android 中使用的是 EGL 在 iOS 是使用的是EAGL。</p>\n<h2 id=\"EGL-线程？\"><a href=\"#EGL-线程？\" class=\"headerlink\" title=\"EGL 线程？\"></a>EGL 线程？</h2><p>OpenGLES 的渲染工作都是需要在指定线程中完成，在该线程中，需要绑定OpenGLES 的上下文及 Surface。绑定完成后即可以进行 OpenGLES 的渲染工作。此时的线程就叫做 EGL 线程。</p>\n<h2 id=\"EGL、EGL-线程和-Surface之间的关系\"><a href=\"#EGL、EGL-线程和-Surface之间的关系\" class=\"headerlink\" title=\"EGL、EGL 线程和 Surface之间的关系\"></a>EGL、EGL 线程和 Surface之间的关系</h2><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_es_surface.png\" alt=\"\"></p>\n<h1 id=\"创建c-项目并导入OpenGL\"><a href=\"#创建c-项目并导入OpenGL\" class=\"headerlink\" title=\"创建c++项目并导入OpenGL\"></a>创建c++项目并导入OpenGL</h1><h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><p>需要创建支持 c++ 的 Android 项目，并且下载LLDB、CMAKE 和 NDK。<br>如果编译后提示找不到cmake，需要在项目根目录的local.properties中添加如下路径：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake.dir=C\\:\\\\Users\\\\zqlxt\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\cmake\\\\<span class=\"number\">3.10</span>.<span class=\"number\">2.4988404</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入OpenGL相关库\"><a href=\"#导入OpenGL相关库\" class=\"headerlink\" title=\"导入OpenGL相关库\"></a>导入OpenGL相关库</h2><p>在 CMakeLists.txt 中添加如下依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_library( # Sets the name of the path variable.</span><br><span class=\"line\">              log-lib</span><br><span class=\"line\"></span><br><span class=\"line\">              # Specifies the name of the NDK library that</span><br><span class=\"line\">              # you want CMake to locate.</span><br><span class=\"line\">              log</span><br><span class=\"line\">              EGL  # egl依赖</span><br><span class=\"line\">              GLESv2  # opengles 依赖</span><br><span class=\"line\">              android)  # android ndk依赖</span><br></pre></td></tr></table></figure>","excerpt":"<blockquote>\n<p>从今天开始，我会学习Android OpenGL相关知识，也会将学习到的知识进行总结并整理到这里。</p>\n</blockquote>\n<h1 id=\"OpenGL介绍及开发环境搭建\"><a href=\"#OpenGL介绍及开发环境搭建\" class=\"headerlink\" title=\"OpenGL介绍及开发环境搭建\"></a>OpenGL介绍及开发环境搭建</h1><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/OpenGL%E4%BB%8B%E7%BB%8D%E5%8F%8A%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA.PNG\" alt=\"\"></p>","more":"<h2 id=\"OpenGL-简单介绍\"><a href=\"#OpenGL-简单介绍\" class=\"headerlink\" title=\"OpenGL 简单介绍\"></a>OpenGL 简单介绍</h2><p>OpenGL（OpenGraphicsLibrary）定义了一个跨编程语言、跨平台编程的专业图形程序接口。可用于二维或三维图像的处理与渲染，它是一个功能强大、调用方便的底层图形库。对于嵌入式的设备，其提供了OpenGLES（OpenGLforEmbeddedSystems）版本，该版本是针对手机、Pad等嵌入式设备而设计   的，是OpenGL的一个子集。到目前为止，OpenGL已经经历过很多版本的迭代与更新，最新版本为3.0，而使用最广泛的还是OpenGLES2.0版本。</p>\n<h2 id=\"EGL\"><a href=\"#EGL\" class=\"headerlink\" title=\"EGL\"></a>EGL</h2><p>EGL 是在不同平台上提供 OpenGL 上下文及窗口管理能力的具体实现，在 Android 中使用的是 EGL 在 iOS 是使用的是EAGL。</p>\n<h2 id=\"EGL-线程？\"><a href=\"#EGL-线程？\" class=\"headerlink\" title=\"EGL 线程？\"></a>EGL 线程？</h2><p>OpenGLES 的渲染工作都是需要在指定线程中完成，在该线程中，需要绑定OpenGLES 的上下文及 Surface。绑定完成后即可以进行 OpenGLES 的渲染工作。此时的线程就叫做 EGL 线程。</p>\n<h2 id=\"EGL、EGL-线程和-Surface之间的关系\"><a href=\"#EGL、EGL-线程和-Surface之间的关系\" class=\"headerlink\" title=\"EGL、EGL 线程和 Surface之间的关系\"></a>EGL、EGL 线程和 Surface之间的关系</h2><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/opengl_es_surface.png\" alt=\"\"></p>\n<h1 id=\"创建c-项目并导入OpenGL\"><a href=\"#创建c-项目并导入OpenGL\" class=\"headerlink\" title=\"创建c++项目并导入OpenGL\"></a>创建c++项目并导入OpenGL</h1><h2 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h2><p>需要创建支持 c++ 的 Android 项目，并且下载LLDB、CMAKE 和 NDK。<br>如果编译后提示找不到cmake，需要在项目根目录的local.properties中添加如下路径：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cmake.dir=C\\:\\\\Users\\\\zqlxt\\\\AppData\\\\Local\\\\Android\\\\Sdk\\\\cmake\\\\<span class=\"number\">3.10</span>.<span class=\"number\">2.4988404</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"导入OpenGL相关库\"><a href=\"#导入OpenGL相关库\" class=\"headerlink\" title=\"导入OpenGL相关库\"></a>导入OpenGL相关库</h2><p>在 CMakeLists.txt 中添加如下依赖：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find_library( # Sets the name of the path variable.</span><br><span class=\"line\">              log-lib</span><br><span class=\"line\"></span><br><span class=\"line\">              # Specifies the name of the NDK library that</span><br><span class=\"line\">              # you want CMake to locate.</span><br><span class=\"line\">              log</span><br><span class=\"line\">              EGL  # egl依赖</span><br><span class=\"line\">              GLESv2  # opengles 依赖</span><br><span class=\"line\">              android)  # android ndk依赖</span><br></pre></td></tr></table></figure>"},{"title":"开个关于 Android 播放器的坑","date":"2022-04-16T13:49:25.000Z","_content":"\n本人从事音视频相关工作已经有三年有余，主要涉及点播与直播的播放器相关业务与体验优化。最开始接触这份工作的时候，我对播放器的看法可能和不熟悉这块的同学一样，觉得播放器就是在给定的一个 View 进行视频播放或者音频播放，一点也不复杂（多么的 naive）。但随着工作的展开，我发现播放器里面门道多，涉及的计算机领域的知识面也广，所以我准备为 Android 上的播放器相关内容写一个系列文章，用来讲解和实际应用的的播放器是 Google 开源的 [ExoPlayer](https://github.com/google/ExoPlayer)，之所以用它是主要有两点原因：\n\n1. 其核心播放逻辑皆是 java 所写，便于多数人看懂和修改。\n2. 由于是开源项目，可以任意修改源码，已实现我们特定的需求。\n\n这个系列我准备主要做三件事：\n1. 通过对 ExoPlayer 的源码分析，帮助大家深入理解播放器的底层实现原理。\n2. 使用 ExoPlayer 实现一个音视频播放器（最终上架Google Play）。\n3. 详细介绍在短视频和直播中的播放体验优化。\n\n系列名称暂定《详解 ExoPlayer 与播放器应用实战》。","source":"_posts/android-player.md","raw":"---\ntitle: 开个关于 Android 播放器的坑\ndate: 2022-04-16 21:49:25\ntags: \n    - player\n    - android\n---\n\n本人从事音视频相关工作已经有三年有余，主要涉及点播与直播的播放器相关业务与体验优化。最开始接触这份工作的时候，我对播放器的看法可能和不熟悉这块的同学一样，觉得播放器就是在给定的一个 View 进行视频播放或者音频播放，一点也不复杂（多么的 naive）。但随着工作的展开，我发现播放器里面门道多，涉及的计算机领域的知识面也广，所以我准备为 Android 上的播放器相关内容写一个系列文章，用来讲解和实际应用的的播放器是 Google 开源的 [ExoPlayer](https://github.com/google/ExoPlayer)，之所以用它是主要有两点原因：\n\n1. 其核心播放逻辑皆是 java 所写，便于多数人看懂和修改。\n2. 由于是开源项目，可以任意修改源码，已实现我们特定的需求。\n\n这个系列我准备主要做三件事：\n1. 通过对 ExoPlayer 的源码分析，帮助大家深入理解播放器的底层实现原理。\n2. 使用 ExoPlayer 实现一个音视频播放器（最终上架Google Play）。\n3. 详细介绍在短视频和直播中的播放体验优化。\n\n系列名称暂定《详解 ExoPlayer 与播放器应用实战》。","slug":"android-player","published":1,"updated":"2024-08-21T03:16:19.782Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vs000s5p6tapel2y81","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>本人从事音视频相关工作已经有三年有余，主要涉及点播与直播的播放器相关业务与体验优化。最开始接触这份工作的时候，我对播放器的看法可能和不熟悉这块的同学一样，觉得播放器就是在给定的一个 View 进行视频播放或者音频播放，一点也不复杂（多么的 naive）。但随着工作的展开，我发现播放器里面门道多，涉及的计算机领域的知识面也广，所以我准备为 Android 上的播放器相关内容写一个系列文章，用来讲解和实际应用的的播放器是 Google 开源的 <a href=\"https://github.com/google/ExoPlayer\">ExoPlayer</a>，之所以用它是主要有两点原因：</p>\n<ol>\n<li>其核心播放逻辑皆是 java 所写，便于多数人看懂和修改。</li>\n<li>由于是开源项目，可以任意修改源码，已实现我们特定的需求。</li>\n</ol>\n<p>这个系列我准备主要做三件事：</p>\n<ol>\n<li>通过对 ExoPlayer 的源码分析，帮助大家深入理解播放器的底层实现原理。</li>\n<li>使用 ExoPlayer 实现一个音视频播放器（最终上架Google Play）。</li>\n<li>详细介绍在短视频和直播中的播放体验优化。</li>\n</ol>\n<p>系列名称暂定《详解 ExoPlayer 与播放器应用实战》。</p>\n","excerpt":"","more":"<p>本人从事音视频相关工作已经有三年有余，主要涉及点播与直播的播放器相关业务与体验优化。最开始接触这份工作的时候，我对播放器的看法可能和不熟悉这块的同学一样，觉得播放器就是在给定的一个 View 进行视频播放或者音频播放，一点也不复杂（多么的 naive）。但随着工作的展开，我发现播放器里面门道多，涉及的计算机领域的知识面也广，所以我准备为 Android 上的播放器相关内容写一个系列文章，用来讲解和实际应用的的播放器是 Google 开源的 <a href=\"https://github.com/google/ExoPlayer\">ExoPlayer</a>，之所以用它是主要有两点原因：</p>\n<ol>\n<li>其核心播放逻辑皆是 java 所写，便于多数人看懂和修改。</li>\n<li>由于是开源项目，可以任意修改源码，已实现我们特定的需求。</li>\n</ol>\n<p>这个系列我准备主要做三件事：</p>\n<ol>\n<li>通过对 ExoPlayer 的源码分析，帮助大家深入理解播放器的底层实现原理。</li>\n<li>使用 ExoPlayer 实现一个音视频播放器（最终上架Google Play）。</li>\n<li>详细介绍在短视频和直播中的播放体验优化。</li>\n</ol>\n<p>系列名称暂定《详解 ExoPlayer 与播放器应用实战》。</p>\n"},{"title":"在 C 语言中实现 ArrayList","date":"2022-01-20T12:56:53.000Z","_content":"\n最近在读[《妙趣横生的算法(C语言实现)》](https://book.douban.com/subject/4710825/)中关于有序序列的章节，其中有List 相关内容的实现。\n我在此基础上实现了 `IntList`，并且使用面向对象的思想增加了相关对列表操作的接口。下面是其实现及测试代码。\n\n<!--more-->\n\n```c\n#ifndef ARRAY_LIST_H\n#define ARRAY_LIST_H\n#include <limits.h>\n#include <stdlib.h>\n#define MaxSize 10\n\ntypedef struct\n{\n  int *elem;\n  int length;\n  int capacity;\n  void (*toString) (void *);\n  void (*add)(void*,int data);\n  void (*insertAt) (void *, int position, int data);\n  void (*deleteAt) (void *, int position);\n} IntList;\n\nvoid printArrayList (void *data);\nvoid insertAt (void *list, int i, int data);\nvoid add(void *list,int data);\nvoid deleteAt (void *list, int i);\nvoid\ninitIntList (IntList * arrayList)\n{\n  arrayList->elem = malloc (MaxSize * sizeof (int));\n  if (!arrayList->elem)\n    {\n      exit (0);\n    }\n  arrayList->length = 0;\n  arrayList->capacity = MaxSize;\n  arrayList->toString = printArrayList;\n  arrayList->insertAt = insertAt;\n  arrayList->add = add;\n  arrayList->deleteAt = deleteAt;\n}\n\nIntList *\nobtainIntList ()\n{\n  IntList *list = (IntList *) malloc (sizeof (IntList));\n  initIntList (list);\n  return list;\n}\n\nvoid add(void *out,int data){\n    IntList *list = (IntList*)out;\n    list->insertAt(out,list->length,data);\n}\n\nvoid\ninsertAt (void *out, int i, int data)\n{\n  IntList *list = (IntList *) out;\n  int *base, *insertPtr, *p;\n  if (i < 0 || i > list->length)\n    {\n      exit (0);\n    }\n  if (list->length >= list->capacity)\n    {\n      base = realloc (list->elem, (list->capacity + 10) * sizeof (int));\n      list->elem = base;\n      list->capacity = list->capacity + 10;\n    }\n  insertPtr = &(list->elem[i]);\n  for (p = &(list->elem[list->length - 1]); p >= insertPtr; p--)\n    {\n      *(p + 1) = *p;\n    }\n  *insertPtr = data;\n  list->length++;\n}\n\nvoid\ndeleteAt (void *out, int position)\n{\n  IntList *list = (IntList *) out;\n  int *deleteItem,*q;\n  if (position < 0 || position > list->length - 1)\n    {\n      exit (0);\n    }\n  deleteItem = &(list->elem[position]);\n  q = list->elem + list->length - 1;\n  for (deleteItem; deleteItem < q; ++deleteItem)\n    {\n      *(deleteItem) = *(deleteItem + 1);\n    }\n  list->length--;\n}\n\nvoid\nprintArrayList (void *data)\n{\n  IntList *list = (IntList *) data;\n  printf (\"[\");\n  for (int i = 0; i < list->length; i++)\n    {\n      if (i != list->length - 1)\n  {\n    printf (\"%d,\", list->elem[i]);\n  }\n      else\n  {\n    printf (\"%d\", list->elem[i]);\n  }\n\n    }\n  printf (\"]\\n\");\n}\n\n#endif\n\n```\n\n```c\n#include <stdio.h>\n#include \"IntList.h\"\nint\nmain ()\n{\n  IntList *list = obtainIntList ();\n  printf (\"init an empty int list\\n\");\n  list->toString (list);\n  for (int i = 0; i < 5; i++)\n    {\n      list->insertAt (list, i, i);\n    }\n  printf (\"add 5 item to list\\n\");\n  list->toString (list);\n  for (int i = 5; i < 10; i++)\n    {\n      list->add (list, i);\n    }\n  printf (\"add 5 item to list\\n\");\n  list->toString (list);\n  printf (\"delete the item at index of 2\\n\");\n  list->deleteAt (list, 2);\n  list->toString (list);\n  free (list);\n  return 0;\n}\n\n```\n\n一下是运行结果：\n```\ninit an empty int list\n[]\nadd 5 item to list\n[0,1,2,3,4]\nadd 5 item to list\n[0,1,2,3,4,5,6,7,8,9]\ndelete the item at index of 2\n[0,1,3,4,5,6,7,8,9]\n```","source":"_posts/array-list-in-c.md","raw":"---\ntitle: 在 C 语言中实现 ArrayList\ndate: 2022-01-20 20:56:53\ntags: C\n---\n\n最近在读[《妙趣横生的算法(C语言实现)》](https://book.douban.com/subject/4710825/)中关于有序序列的章节，其中有List 相关内容的实现。\n我在此基础上实现了 `IntList`，并且使用面向对象的思想增加了相关对列表操作的接口。下面是其实现及测试代码。\n\n<!--more-->\n\n```c\n#ifndef ARRAY_LIST_H\n#define ARRAY_LIST_H\n#include <limits.h>\n#include <stdlib.h>\n#define MaxSize 10\n\ntypedef struct\n{\n  int *elem;\n  int length;\n  int capacity;\n  void (*toString) (void *);\n  void (*add)(void*,int data);\n  void (*insertAt) (void *, int position, int data);\n  void (*deleteAt) (void *, int position);\n} IntList;\n\nvoid printArrayList (void *data);\nvoid insertAt (void *list, int i, int data);\nvoid add(void *list,int data);\nvoid deleteAt (void *list, int i);\nvoid\ninitIntList (IntList * arrayList)\n{\n  arrayList->elem = malloc (MaxSize * sizeof (int));\n  if (!arrayList->elem)\n    {\n      exit (0);\n    }\n  arrayList->length = 0;\n  arrayList->capacity = MaxSize;\n  arrayList->toString = printArrayList;\n  arrayList->insertAt = insertAt;\n  arrayList->add = add;\n  arrayList->deleteAt = deleteAt;\n}\n\nIntList *\nobtainIntList ()\n{\n  IntList *list = (IntList *) malloc (sizeof (IntList));\n  initIntList (list);\n  return list;\n}\n\nvoid add(void *out,int data){\n    IntList *list = (IntList*)out;\n    list->insertAt(out,list->length,data);\n}\n\nvoid\ninsertAt (void *out, int i, int data)\n{\n  IntList *list = (IntList *) out;\n  int *base, *insertPtr, *p;\n  if (i < 0 || i > list->length)\n    {\n      exit (0);\n    }\n  if (list->length >= list->capacity)\n    {\n      base = realloc (list->elem, (list->capacity + 10) * sizeof (int));\n      list->elem = base;\n      list->capacity = list->capacity + 10;\n    }\n  insertPtr = &(list->elem[i]);\n  for (p = &(list->elem[list->length - 1]); p >= insertPtr; p--)\n    {\n      *(p + 1) = *p;\n    }\n  *insertPtr = data;\n  list->length++;\n}\n\nvoid\ndeleteAt (void *out, int position)\n{\n  IntList *list = (IntList *) out;\n  int *deleteItem,*q;\n  if (position < 0 || position > list->length - 1)\n    {\n      exit (0);\n    }\n  deleteItem = &(list->elem[position]);\n  q = list->elem + list->length - 1;\n  for (deleteItem; deleteItem < q; ++deleteItem)\n    {\n      *(deleteItem) = *(deleteItem + 1);\n    }\n  list->length--;\n}\n\nvoid\nprintArrayList (void *data)\n{\n  IntList *list = (IntList *) data;\n  printf (\"[\");\n  for (int i = 0; i < list->length; i++)\n    {\n      if (i != list->length - 1)\n  {\n    printf (\"%d,\", list->elem[i]);\n  }\n      else\n  {\n    printf (\"%d\", list->elem[i]);\n  }\n\n    }\n  printf (\"]\\n\");\n}\n\n#endif\n\n```\n\n```c\n#include <stdio.h>\n#include \"IntList.h\"\nint\nmain ()\n{\n  IntList *list = obtainIntList ();\n  printf (\"init an empty int list\\n\");\n  list->toString (list);\n  for (int i = 0; i < 5; i++)\n    {\n      list->insertAt (list, i, i);\n    }\n  printf (\"add 5 item to list\\n\");\n  list->toString (list);\n  for (int i = 5; i < 10; i++)\n    {\n      list->add (list, i);\n    }\n  printf (\"add 5 item to list\\n\");\n  list->toString (list);\n  printf (\"delete the item at index of 2\\n\");\n  list->deleteAt (list, 2);\n  list->toString (list);\n  free (list);\n  return 0;\n}\n\n```\n\n一下是运行结果：\n```\ninit an empty int list\n[]\nadd 5 item to list\n[0,1,2,3,4]\nadd 5 item to list\n[0,1,2,3,4,5,6,7,8,9]\ndelete the item at index of 2\n[0,1,3,4,5,6,7,8,9]\n```","slug":"array-list-in-c","published":1,"updated":"2024-08-21T03:16:19.782Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vs000u5p6tdyukg30q","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>最近在读<a href=\"https://book.douban.com/subject/4710825/\">《妙趣横生的算法(C语言实现)》</a>中关于有序序列的章节，其中有List 相关内容的实现。<br>我在此基础上实现了 <code>IntList</code>，并且使用面向对象的思想增加了相关对列表操作的接口。下面是其实现及测试代码。</p>\n<span id=\"more\"></span>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ARRAY_LIST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_LIST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> *elem;</span><br><span class=\"line\">  <span class=\"type\">int</span> length;</span><br><span class=\"line\">  <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">  <span class=\"type\">void</span> (*toString) (<span class=\"type\">void</span> *);</span><br><span class=\"line\">  <span class=\"type\">void</span> (*add)(<span class=\"type\">void</span>*,<span class=\"type\">int</span> data);</span><br><span class=\"line\">  <span class=\"type\">void</span> (*insertAt) (<span class=\"type\">void</span> *, <span class=\"type\">int</span> position, <span class=\"type\">int</span> data);</span><br><span class=\"line\">  <span class=\"type\">void</span> (*deleteAt) (<span class=\"type\">void</span> *, <span class=\"type\">int</span> position);</span><br><span class=\"line\">&#125; IntList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printArrayList</span> <span class=\"params\">(<span class=\"type\">void</span> *data)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">insertAt</span> <span class=\"params\">(<span class=\"type\">void</span> *<span class=\"built_in\">list</span>, <span class=\"type\">int</span> i, <span class=\"type\">int</span> data)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">void</span> *<span class=\"built_in\">list</span>,<span class=\"type\">int</span> data)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">deleteAt</span> <span class=\"params\">(<span class=\"type\">void</span> *<span class=\"built_in\">list</span>, <span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">initIntList</span> <span class=\"params\">(IntList * arrayList)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  arrayList-&gt;elem = <span class=\"built_in\">malloc</span> (MaxSize * <span class=\"keyword\">sizeof</span> (<span class=\"type\">int</span>));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arrayList-&gt;elem)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  arrayList-&gt;length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  arrayList-&gt;capacity = MaxSize;</span><br><span class=\"line\">  arrayList-&gt;toString = printArrayList;</span><br><span class=\"line\">  arrayList-&gt;insertAt = insertAt;</span><br><span class=\"line\">  arrayList-&gt;add = add;</span><br><span class=\"line\">  arrayList-&gt;deleteAt = deleteAt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">IntList *</span><br><span class=\"line\"><span class=\"title function_\">obtainIntList</span> <span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) <span class=\"built_in\">malloc</span> (<span class=\"keyword\">sizeof</span> (IntList));</span><br><span class=\"line\">  initIntList (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">void</span> *out,<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    IntList *<span class=\"built_in\">list</span> = (IntList*)out;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;insertAt(out,<span class=\"built_in\">list</span>-&gt;length,data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">insertAt</span> <span class=\"params\">(<span class=\"type\">void</span> *out, <span class=\"type\">int</span> i, <span class=\"type\">int</span> data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) out;</span><br><span class=\"line\">  <span class=\"type\">int</span> *base, *insertPtr, *p;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">list</span>-&gt;length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;length &gt;= <span class=\"built_in\">list</span>-&gt;capacity)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      base = <span class=\"built_in\">realloc</span> (<span class=\"built_in\">list</span>-&gt;elem, (<span class=\"built_in\">list</span>-&gt;capacity + <span class=\"number\">10</span>) * <span class=\"keyword\">sizeof</span> (<span class=\"type\">int</span>));</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;elem = base;</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;capacity = <span class=\"built_in\">list</span>-&gt;capacity + <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  insertPtr = &amp;(<span class=\"built_in\">list</span>-&gt;elem[i]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (p = &amp;(<span class=\"built_in\">list</span>-&gt;elem[<span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>]); p &gt;= insertPtr; p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(p + <span class=\"number\">1</span>) = *p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  *insertPtr = data;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;length++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">deleteAt</span> <span class=\"params\">(<span class=\"type\">void</span> *out, <span class=\"type\">int</span> position)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) out;</span><br><span class=\"line\">  <span class=\"type\">int</span> *deleteItem,*q;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt; <span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  deleteItem = &amp;(<span class=\"built_in\">list</span>-&gt;elem[position]);</span><br><span class=\"line\">  q = <span class=\"built_in\">list</span>-&gt;elem + <span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (deleteItem; deleteItem &lt; q; ++deleteItem)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(deleteItem) = *(deleteItem + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;length--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">printArrayList</span> <span class=\"params\">(<span class=\"type\">void</span> *data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) data;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>-&gt;length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i != <span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;%d,&quot;</span>, <span class=\"built_in\">list</span>-&gt;elem[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;%d&quot;</span>, <span class=\"built_in\">list</span>-&gt;elem[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;]\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;IntList.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">main</span> <span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = obtainIntList ();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;init an empty int list\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;insertAt (<span class=\"built_in\">list</span>, i, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;add 5 item to list\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">5</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;add (<span class=\"built_in\">list</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;add 5 item to list\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;delete the item at index of 2\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;deleteAt (<span class=\"built_in\">list</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"built_in\">free</span> (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一下是运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init an empty int list</span><br><span class=\"line\">[]</span><br><span class=\"line\">add 5 item to list</span><br><span class=\"line\">[0,1,2,3,4]</span><br><span class=\"line\">add 5 item to list</span><br><span class=\"line\">[0,1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">delete the item at index of 2</span><br><span class=\"line\">[0,1,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>","excerpt":"<p>最近在读<a href=\"https://book.douban.com/subject/4710825/\">《妙趣横生的算法(C语言实现)》</a>中关于有序序列的章节，其中有List 相关内容的实现。<br>我在此基础上实现了 <code>IntList</code>，并且使用面向对象的思想增加了相关对列表操作的接口。下面是其实现及测试代码。</p>","more":"<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> ARRAY_LIST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_LIST_H</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MaxSize 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">  <span class=\"type\">int</span> *elem;</span><br><span class=\"line\">  <span class=\"type\">int</span> length;</span><br><span class=\"line\">  <span class=\"type\">int</span> capacity;</span><br><span class=\"line\">  <span class=\"type\">void</span> (*toString) (<span class=\"type\">void</span> *);</span><br><span class=\"line\">  <span class=\"type\">void</span> (*add)(<span class=\"type\">void</span>*,<span class=\"type\">int</span> data);</span><br><span class=\"line\">  <span class=\"type\">void</span> (*insertAt) (<span class=\"type\">void</span> *, <span class=\"type\">int</span> position, <span class=\"type\">int</span> data);</span><br><span class=\"line\">  <span class=\"type\">void</span> (*deleteAt) (<span class=\"type\">void</span> *, <span class=\"type\">int</span> position);</span><br><span class=\"line\">&#125; IntList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">printArrayList</span> <span class=\"params\">(<span class=\"type\">void</span> *data)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">insertAt</span> <span class=\"params\">(<span class=\"type\">void</span> *<span class=\"built_in\">list</span>, <span class=\"type\">int</span> i, <span class=\"type\">int</span> data)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">void</span> *<span class=\"built_in\">list</span>,<span class=\"type\">int</span> data)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">deleteAt</span> <span class=\"params\">(<span class=\"type\">void</span> *<span class=\"built_in\">list</span>, <span class=\"type\">int</span> i)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">initIntList</span> <span class=\"params\">(IntList * arrayList)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  arrayList-&gt;elem = <span class=\"built_in\">malloc</span> (MaxSize * <span class=\"keyword\">sizeof</span> (<span class=\"type\">int</span>));</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!arrayList-&gt;elem)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  arrayList-&gt;length = <span class=\"number\">0</span>;</span><br><span class=\"line\">  arrayList-&gt;capacity = MaxSize;</span><br><span class=\"line\">  arrayList-&gt;toString = printArrayList;</span><br><span class=\"line\">  arrayList-&gt;insertAt = insertAt;</span><br><span class=\"line\">  arrayList-&gt;add = add;</span><br><span class=\"line\">  arrayList-&gt;deleteAt = deleteAt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">IntList *</span><br><span class=\"line\"><span class=\"title function_\">obtainIntList</span> <span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) <span class=\"built_in\">malloc</span> (<span class=\"keyword\">sizeof</span> (IntList));</span><br><span class=\"line\">  initIntList (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">list</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">void</span> *out,<span class=\"type\">int</span> data)</span>&#123;</span><br><span class=\"line\">    IntList *<span class=\"built_in\">list</span> = (IntList*)out;</span><br><span class=\"line\">    <span class=\"built_in\">list</span>-&gt;insertAt(out,<span class=\"built_in\">list</span>-&gt;length,data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">insertAt</span> <span class=\"params\">(<span class=\"type\">void</span> *out, <span class=\"type\">int</span> i, <span class=\"type\">int</span> data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) out;</span><br><span class=\"line\">  <span class=\"type\">int</span> *base, *insertPtr, *p;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i &lt; <span class=\"number\">0</span> || i &gt; <span class=\"built_in\">list</span>-&gt;length)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">list</span>-&gt;length &gt;= <span class=\"built_in\">list</span>-&gt;capacity)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      base = <span class=\"built_in\">realloc</span> (<span class=\"built_in\">list</span>-&gt;elem, (<span class=\"built_in\">list</span>-&gt;capacity + <span class=\"number\">10</span>) * <span class=\"keyword\">sizeof</span> (<span class=\"type\">int</span>));</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;elem = base;</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;capacity = <span class=\"built_in\">list</span>-&gt;capacity + <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  insertPtr = &amp;(<span class=\"built_in\">list</span>-&gt;elem[i]);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (p = &amp;(<span class=\"built_in\">list</span>-&gt;elem[<span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>]); p &gt;= insertPtr; p--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(p + <span class=\"number\">1</span>) = *p;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  *insertPtr = data;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;length++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">deleteAt</span> <span class=\"params\">(<span class=\"type\">void</span> *out, <span class=\"type\">int</span> position)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) out;</span><br><span class=\"line\">  <span class=\"type\">int</span> *deleteItem,*q;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (position &lt; <span class=\"number\">0</span> || position &gt; <span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">exit</span> (<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  deleteItem = &amp;(<span class=\"built_in\">list</span>-&gt;elem[position]);</span><br><span class=\"line\">  q = <span class=\"built_in\">list</span>-&gt;elem + <span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (deleteItem; deleteItem &lt; q; ++deleteItem)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      *(deleteItem) = *(deleteItem + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;length--;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\"><span class=\"title function_\">printArrayList</span> <span class=\"params\">(<span class=\"type\">void</span> *data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = (IntList *) data;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;[&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">list</span>-&gt;length; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (i != <span class=\"built_in\">list</span>-&gt;length - <span class=\"number\">1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;%d,&quot;</span>, <span class=\"built_in\">list</span>-&gt;elem[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;%d&quot;</span>, <span class=\"built_in\">list</span>-&gt;elem[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;]\\n&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;IntList.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span></span><br><span class=\"line\"><span class=\"title function_\">main</span> <span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  IntList *<span class=\"built_in\">list</span> = obtainIntList ();</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;init an empty int list\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;insertAt (<span class=\"built_in\">list</span>, i, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;add 5 item to list\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">5</span>; i &lt; <span class=\"number\">10</span>; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">list</span>-&gt;add (<span class=\"built_in\">list</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;add 5 item to list\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"built_in\">printf</span> (<span class=\"string\">&quot;delete the item at index of 2\\n&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;deleteAt (<span class=\"built_in\">list</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\">  <span class=\"built_in\">list</span>-&gt;toString (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"built_in\">free</span> (<span class=\"built_in\">list</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一下是运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init an empty int list</span><br><span class=\"line\">[]</span><br><span class=\"line\">add 5 item to list</span><br><span class=\"line\">[0,1,2,3,4]</span><br><span class=\"line\">add 5 item to list</span><br><span class=\"line\">[0,1,2,3,4,5,6,7,8,9]</span><br><span class=\"line\">delete the item at index of 2</span><br><span class=\"line\">[0,1,3,4,5,6,7,8,9]</span><br></pre></td></tr></table></figure>"},{"title":"Dart异步任务与消息循环机制","date":"2016-04-26T11:02:53.000Z","cover":"http://cdn.zqlxtt.cn/both-queues.png","top":6,"_content":"# Dart与消息循环机制\n\n_翻译自[https://www.dartlang.org/articles/event-loop/](https://www.dartlang.org/articles/event-loop/)_\n\n异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。\n\n这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。\n\n在阅读这篇文章之前，你最好先要了解一下基本的[Future用法](https://www.dartlang.org/articles/using-future-based-apis/)。\n<!-- more -->\n\n## 基本概念\n\n如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。\n\n\n### 消息循环和消息队列\n一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。\n![](http://cdn.zqlxtt.cn/event-loop.png)\n\n消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。\n![](http://cdn.zqlxtt.cn/event-loop-example.png)\n\n上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？\n\n### Dart的单线程执行\n当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。\n\n> Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\n\n正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。\n![](http://cdn.zqlxtt.cn/event-loop-and-main.png)\n\n事实上，上图是经过简化的流程。\n\n### Dart的消息循环和消息队列\n\n一个Dart应用有一个消息循环和两个消息队列-- *event队列*和*microtask队列*。\n\n**event队列**包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。\n\n**microtask 队列**在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。\n\nevent队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。\n\n正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。\n![](http://cdn.zqlxtt.cn/both-queues.png)\n\n> **注意：**当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件\n\n虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。\n\n\n##  通过链接的方式指定任务顺序\n\n如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。\n\n先来看看下面这段错误代码：\n```dart\n// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系\nfuture.then(...set an important variable...);\nTimer.run(() {...use the important variable...});\n```\n正确的写法应该是：\n```dart\n// 明确表现出了后者依赖前者设置的变量值\nfuture.then(...set an important variable...)\n  .then((_) {...use the important variable...});\n```\n为了表示明确的前后依赖关系，我们可以使用**then()()**来表明要使用变量就必须要等设置完这个变量。这里可以使用**whenComplete()**来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。\n\n如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：\n```dart\nfuture.then(...set an important variable...)\n  .then((_) {new Future(() {...use the important variable...})});\n```\n使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。\n\n## 怎么安排一个任务\n当你需要指定一些代码稍后运行的时候，你可以使用**dart:async**提供的两种方式：\n\n    1.Future类，它可以向event队列的尾部添加一个事件。\n    2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。\n\n### 使用合理的队列\n有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。\n如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。\n![](http://backup.flutter-dev.cn/scheduling-tasks.png)\n\n### Event队列\n使用`new Future`或者`new Future.delayed()`来向event队列中添加事件。\n\n> **注意:**你也可以使用`Timer`来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。\n\n立刻需要将任务加入event队列可以使用new Future\n```dart\n//向event队列中添加一个任务\nnew Future(() {\n  //任务具体代码\n});\n```\n你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：\n```dart\nnew Future(() => 21)\n    .then((v) => v*2)\n    .then((v) => print(v));\n```\n\n如果要在一段时间后添加一个任务，可以使用new Future.delayed():\n```dart\n// 一秒以后将任务添加至event队列\nnew Future.delayed(const Duration(seconds:1), () {\n  //任务具体代码\n});\n```\n\n虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：\n1. main方法执行完毕\n2. microtask队列为空\n3. 该任务前的任务全部执行完毕\n所以该任务真正被执行可能是大于1秒后。\n\n关于Future的有趣事实：\n1. 被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。\n2. 如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。\n3. Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。\n 4. Future.value()构造方法会在一个microtask中完成。\n 5. Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。\n\n### Microtask队列：  scheduleMicrotask()\n**dart:async**定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：\n```dart\nscheduleMicrotask(() {\n  // ...code goes here...\n});\n```\n### 如果有必要可以使用isolate或worker\n如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。\n\n那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。\n\n但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。\n\n## 测试一下你的理解程度\n目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。\n\n### 问题1\n下面这段代码的输出是什么？\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 2'));\n\n  new Future.delayed(new Duration(seconds:1),\n                     () => print('future #1 (delayed)'));\n  new Future(() => print('future #2 of 3'));\n  new Future(() => print('future #3 of 3'));\n\n  scheduleMicrotask(() => print('microtask #2 of 2'));\n\n  print('main #2 of 2');\n}\n```\n别急着看答案，自己在纸上写写答案呢？\n\n\n\n\n\n\n\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 2\nmicrotask #2 of 2\nfuture #2 of 3\nfuture #3 of 3\nfuture #1 (delayed)\n```\n上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：\n1. main()方法\n2. microtask队列\n3. event队列（先new Future后new Future.delayed）\n\nmain方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。\n\n### 问题2\n下面这个问题相对有些复杂：\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 3'));\n\n  new Future.delayed(new Duration(seconds:1),\n      () => print('future #1 (delayed)'));\n\n  new Future(() => print('future #2 of 4'))\n      .then((_) => print('future #2a'))\n      .then((_) {\n        print('future #2b');\n        scheduleMicrotask(() => print('microtask #0 (from future #2b)'));\n      })\n      .then((_) => print('future #2c'));\n\n  scheduleMicrotask(() => print('microtask #2 of 3'));\n\n  new Future(() => print('future #3 of 4'))\n      .then((_) => new Future(\n                   () => print('future #3a (a new future)')))\n      .then((_) => print('future #3b'));\n\n  new Future(() => print('future #4 of 4'));\n  scheduleMicrotask(() => print('microtask #3 of 3'));\n  print('main #2 of 2');\n}\n```\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 3\nmicrotask #2 of 3\nmicrotask #3 of 3\nfuture #2 of 4\nfuture #2a\nfuture #2b\nfuture #2c\nmicrotask #0 (from future #2b)\nfuture #3 of 4\nfuture #4 of 4\nfuture #3a (a new future)\nfuture #3b\nfuture #1 (delayed)\n```\n\n# 总结\n以下有几点关于dart的事件循环机制需要牢记于心：\n- Dart事件循环执行两个队列里的事件：event队列和microtask队列。\n- event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。\n- 目前为止，microtask队列的事件只来自dart。\n- 事件循环会优先清空microtask队列，然后才会去处理event队列。\n- 当两个队列都清空后，dart就会退出。\n- main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。\n\n当你要安排一个任务时，请遵守以下规则：\n- 如果可以，尽量将任务放入event队列中。\n - 使用Future的then方法或whenComplete方法来指定任务顺序。\n - 为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。\n - 大计算量的任务放入额外的isolate中。\n","source":"_posts/dart-event-loop.md","raw":"---\ntitle: Dart异步任务与消息循环机制\ndate: 2016-04-26 19:02:53\ntags: Dart\ncover: http://cdn.zqlxtt.cn/both-queues.png\ntop: 6\n---\n# Dart与消息循环机制\n\n_翻译自[https://www.dartlang.org/articles/event-loop/](https://www.dartlang.org/articles/event-loop/)_\n\n异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。\n\n这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。\n\n在阅读这篇文章之前，你最好先要了解一下基本的[Future用法](https://www.dartlang.org/articles/using-future-based-apis/)。\n<!-- more -->\n\n## 基本概念\n\n如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。\n\n\n### 消息循环和消息队列\n一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。\n![](http://cdn.zqlxtt.cn/event-loop.png)\n\n消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。\n![](http://cdn.zqlxtt.cn/event-loop-example.png)\n\n上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？\n\n### Dart的单线程执行\n当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。\n\n> Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\n\n正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。\n![](http://cdn.zqlxtt.cn/event-loop-and-main.png)\n\n事实上，上图是经过简化的流程。\n\n### Dart的消息循环和消息队列\n\n一个Dart应用有一个消息循环和两个消息队列-- *event队列*和*microtask队列*。\n\n**event队列**包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。\n\n**microtask 队列**在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。\n\nevent队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。\n\n正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。\n![](http://cdn.zqlxtt.cn/both-queues.png)\n\n> **注意：**当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件\n\n虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。\n\n\n##  通过链接的方式指定任务顺序\n\n如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。\n\n先来看看下面这段错误代码：\n```dart\n// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系\nfuture.then(...set an important variable...);\nTimer.run(() {...use the important variable...});\n```\n正确的写法应该是：\n```dart\n// 明确表现出了后者依赖前者设置的变量值\nfuture.then(...set an important variable...)\n  .then((_) {...use the important variable...});\n```\n为了表示明确的前后依赖关系，我们可以使用**then()()**来表明要使用变量就必须要等设置完这个变量。这里可以使用**whenComplete()**来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。\n\n如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：\n```dart\nfuture.then(...set an important variable...)\n  .then((_) {new Future(() {...use the important variable...})});\n```\n使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。\n\n## 怎么安排一个任务\n当你需要指定一些代码稍后运行的时候，你可以使用**dart:async**提供的两种方式：\n\n    1.Future类，它可以向event队列的尾部添加一个事件。\n    2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。\n\n### 使用合理的队列\n有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。\n如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。\n![](http://backup.flutter-dev.cn/scheduling-tasks.png)\n\n### Event队列\n使用`new Future`或者`new Future.delayed()`来向event队列中添加事件。\n\n> **注意:**你也可以使用`Timer`来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。\n\n立刻需要将任务加入event队列可以使用new Future\n```dart\n//向event队列中添加一个任务\nnew Future(() {\n  //任务具体代码\n});\n```\n你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：\n```dart\nnew Future(() => 21)\n    .then((v) => v*2)\n    .then((v) => print(v));\n```\n\n如果要在一段时间后添加一个任务，可以使用new Future.delayed():\n```dart\n// 一秒以后将任务添加至event队列\nnew Future.delayed(const Duration(seconds:1), () {\n  //任务具体代码\n});\n```\n\n虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：\n1. main方法执行完毕\n2. microtask队列为空\n3. 该任务前的任务全部执行完毕\n所以该任务真正被执行可能是大于1秒后。\n\n关于Future的有趣事实：\n1. 被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。\n2. 如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。\n3. Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。\n 4. Future.value()构造方法会在一个microtask中完成。\n 5. Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。\n\n### Microtask队列：  scheduleMicrotask()\n**dart:async**定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：\n```dart\nscheduleMicrotask(() {\n  // ...code goes here...\n});\n```\n### 如果有必要可以使用isolate或worker\n如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。\n\n那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。\n\n但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。\n\n## 测试一下你的理解程度\n目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。\n\n### 问题1\n下面这段代码的输出是什么？\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 2'));\n\n  new Future.delayed(new Duration(seconds:1),\n                     () => print('future #1 (delayed)'));\n  new Future(() => print('future #2 of 3'));\n  new Future(() => print('future #3 of 3'));\n\n  scheduleMicrotask(() => print('microtask #2 of 2'));\n\n  print('main #2 of 2');\n}\n```\n别急着看答案，自己在纸上写写答案呢？\n\n\n\n\n\n\n\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 2\nmicrotask #2 of 2\nfuture #2 of 3\nfuture #3 of 3\nfuture #1 (delayed)\n```\n上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：\n1. main()方法\n2. microtask队列\n3. event队列（先new Future后new Future.delayed）\n\nmain方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。\n\n### 问题2\n下面这个问题相对有些复杂：\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 3'));\n\n  new Future.delayed(new Duration(seconds:1),\n      () => print('future #1 (delayed)'));\n\n  new Future(() => print('future #2 of 4'))\n      .then((_) => print('future #2a'))\n      .then((_) {\n        print('future #2b');\n        scheduleMicrotask(() => print('microtask #0 (from future #2b)'));\n      })\n      .then((_) => print('future #2c'));\n\n  scheduleMicrotask(() => print('microtask #2 of 3'));\n\n  new Future(() => print('future #3 of 4'))\n      .then((_) => new Future(\n                   () => print('future #3a (a new future)')))\n      .then((_) => print('future #3b'));\n\n  new Future(() => print('future #4 of 4'));\n  scheduleMicrotask(() => print('microtask #3 of 3'));\n  print('main #2 of 2');\n}\n```\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 3\nmicrotask #2 of 3\nmicrotask #3 of 3\nfuture #2 of 4\nfuture #2a\nfuture #2b\nfuture #2c\nmicrotask #0 (from future #2b)\nfuture #3 of 4\nfuture #4 of 4\nfuture #3a (a new future)\nfuture #3b\nfuture #1 (delayed)\n```\n\n# 总结\n以下有几点关于dart的事件循环机制需要牢记于心：\n- Dart事件循环执行两个队列里的事件：event队列和microtask队列。\n- event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。\n- 目前为止，microtask队列的事件只来自dart。\n- 事件循环会优先清空microtask队列，然后才会去处理event队列。\n- 当两个队列都清空后，dart就会退出。\n- main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。\n\n当你要安排一个任务时，请遵守以下规则：\n- 如果可以，尽量将任务放入event队列中。\n - 使用Future的then方法或whenComplete方法来指定任务顺序。\n - 为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。\n - 大计算量的任务放入额外的isolate中。\n","slug":"dart-event-loop","published":1,"updated":"2024-08-21T03:16:19.783Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vs000w5p6ta4a7270n","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"Dart与消息循环机制\"><a href=\"#Dart与消息循环机制\" class=\"headerlink\" title=\"Dart与消息循环机制\"></a>Dart与消息循环机制</h1><p><em>翻译自<a href=\"https://www.dartlang.org/articles/event-loop/\">https://www.dartlang.org/articles/event-loop/</a></em></p>\n<p>异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。</p>\n<p>这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。</p>\n<p>在阅读这篇文章之前，你最好先要了解一下基本的<a href=\"https://www.dartlang.org/articles/using-future-based-apis/\">Future用法</a>。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。</p>\n<h3 id=\"消息循环和消息队列\"><a href=\"#消息循环和消息队列\" class=\"headerlink\" title=\"消息循环和消息队列\"></a>消息循环和消息队列</h3><p>一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。<br><img src=\"http://cdn.zqlxtt.cn/event-loop.png\" alt=\"\"></p>\n<p>消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。<br><img src=\"http://cdn.zqlxtt.cn/event-loop-example.png\" alt=\"\"></p>\n<p>上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？</p>\n<h3 id=\"Dart的单线程执行\"><a href=\"#Dart的单线程执行\" class=\"headerlink\" title=\"Dart的单线程执行\"></a>Dart的单线程执行</h3><p>当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。</p>\n<blockquote>\n<p>Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看<a href=\"https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\">https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary</a></p>\n</blockquote>\n<p>正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。<br><img src=\"http://cdn.zqlxtt.cn/event-loop-and-main.png\" alt=\"\"></p>\n<p>事实上，上图是经过简化的流程。</p>\n<h3 id=\"Dart的消息循环和消息队列\"><a href=\"#Dart的消息循环和消息队列\" class=\"headerlink\" title=\"Dart的消息循环和消息队列\"></a>Dart的消息循环和消息队列</h3><p>一个Dart应用有一个消息循环和两个消息队列– <em>event队列</em>和<em>microtask队列</em>。</p>\n<p><strong>event队列</strong>包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。</p>\n<p><strong>microtask 队列</strong>在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。</p>\n<p>event队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。</p>\n<p>正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。<br><img src=\"http://cdn.zqlxtt.cn/both-queues.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>注意：</strong>当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件</p>\n</blockquote>\n<p>虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。</p>\n<h2 id=\"通过链接的方式指定任务顺序\"><a href=\"#通过链接的方式指定任务顺序\" class=\"headerlink\" title=\"通过链接的方式指定任务顺序\"></a>通过链接的方式指定任务顺序</h2><p>如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。</p>\n<p>先来看看下面这段错误代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...);</span><br><span class=\"line\">Timer.run(() &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>正确的写法应该是：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 明确表现出了后者依赖前者设置的变量值</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了表示明确的前后依赖关系，我们可以使用<strong>then()()</strong>来表明要使用变量就必须要等设置完这个变量。这里可以使用<strong>whenComplete()</strong>来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。</p>\n<p>如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;<span class=\"keyword\">new</span> Future(() &#123;...use the important variable...&#125;)&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。</p>\n<h2 id=\"怎么安排一个任务\"><a href=\"#怎么安排一个任务\" class=\"headerlink\" title=\"怎么安排一个任务\"></a>怎么安排一个任务</h2><p>当你需要指定一些代码稍后运行的时候，你可以使用<strong>dart:async</strong>提供的两种方式：</p>\n<pre><code>1.Future类，它可以向event队列的尾部添加一个事件。\n2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。</code></pre><h3 id=\"使用合理的队列\"><a href=\"#使用合理的队列\" class=\"headerlink\" title=\"使用合理的队列\"></a>使用合理的队列</h3><p>有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。<br>如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。<br><img src=\"http://backup.flutter-dev.cn/scheduling-tasks.png\" alt=\"\"></p>\n<h3 id=\"Event队列\"><a href=\"#Event队列\" class=\"headerlink\" title=\"Event队列\"></a>Event队列</h3><p>使用<code>new Future</code>或者<code>new Future.delayed()</code>来向event队列中添加事件。</p>\n<blockquote>\n<p><strong>注意:</strong>你也可以使用<code>Timer</code>来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。</p>\n</blockquote>\n<p>立刻需要将任务加入event队列可以使用new Future</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向event队列中添加一个任务</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Future(() =&gt; <span class=\"number\">21</span>)</span><br><span class=\"line\">    .then((v) =&gt; v*<span class=\"number\">2</span>)</span><br><span class=\"line\">    .then((v) =&gt; <span class=\"built_in\">print</span>(v));</span><br></pre></td></tr></table></figure>\n\n<p>如果要在一段时间后添加一个任务，可以使用new Future.delayed():</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一秒以后将任务添加至event队列</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">const</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>), () &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：</p>\n<ol>\n<li>main方法执行完毕</li>\n<li>microtask队列为空</li>\n<li>该任务前的任务全部执行完毕<br>所以该任务真正被执行可能是大于1秒后。</li>\n</ol>\n<p>关于Future的有趣事实：</p>\n<ol>\n<li>被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。</li>\n<li>如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。</li>\n<li>Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。<ol start=\"4\">\n<li>Future.value()构造方法会在一个microtask中完成。</li>\n<li>Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Microtask队列：-scheduleMicrotask\"><a href=\"#Microtask队列：-scheduleMicrotask\" class=\"headerlink\" title=\"Microtask队列：  scheduleMicrotask()\"></a>Microtask队列：  scheduleMicrotask()</h3><p><strong>dart:async</strong>定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduleMicrotask(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...code goes here...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果有必要可以使用isolate或worker\"><a href=\"#如果有必要可以使用isolate或worker\" class=\"headerlink\" title=\"如果有必要可以使用isolate或worker\"></a>如果有必要可以使用isolate或worker</h3><p>如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。</p>\n<p>那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。</p>\n<p>但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。</p>\n<h2 id=\"测试一下你的理解程度\"><a href=\"#测试一下你的理解程度\" class=\"headerlink\" title=\"测试一下你的理解程度\"></a>测试一下你的理解程度</h2><p>目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。</p>\n<h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3><p>下面这段代码的输出是什么？</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">                     () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>别急着看答案，自己在纸上写写答案呢？</p>\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n<p>上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：</p>\n<ol>\n<li>main()方法</li>\n<li>microtask队列</li>\n<li>event队列（先new Future后new Future.delayed）</li>\n</ol>\n<p>main方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。</p>\n<h3 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h3><p>下面这个问题相对有些复杂：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">      () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2a&#x27;</span>))</span><br><span class=\"line\">      .then((_) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2b&#x27;</span>);</span><br><span class=\"line\">        scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #0 (from future #2b)&#x27;</span>));</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2c&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"keyword\">new</span> Future(</span><br><span class=\"line\">                   () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3a (a new future)&#x27;</span>)))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #4 of 4&#x27;</span>));</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #3 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">2</span>a</span><br><span class=\"line\">future #<span class=\"number\">2</span>b</span><br><span class=\"line\">future #<span class=\"number\">2</span>c</span><br><span class=\"line\">microtask #<span class=\"number\">0</span> (from future #<span class=\"number\">2</span>b)</span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">4</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">3</span>a (a <span class=\"keyword\">new</span> future)</span><br><span class=\"line\">future #<span class=\"number\">3</span>b</span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以下有几点关于dart的事件循环机制需要牢记于心：</p>\n<ul>\n<li>Dart事件循环执行两个队列里的事件：event队列和microtask队列。</li>\n<li>event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。</li>\n<li>目前为止，microtask队列的事件只来自dart。</li>\n<li>事件循环会优先清空microtask队列，然后才会去处理event队列。</li>\n<li>当两个队列都清空后，dart就会退出。</li>\n<li>main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。</li>\n</ul>\n<p>当你要安排一个任务时，请遵守以下规则：</p>\n<ul>\n<li>如果可以，尽量将任务放入event队列中。<ul>\n<li>使用Future的then方法或whenComplete方法来指定任务顺序。</li>\n<li>为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。</li>\n<li>大计算量的任务放入额外的isolate中。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h1 id=\"Dart与消息循环机制\"><a href=\"#Dart与消息循环机制\" class=\"headerlink\" title=\"Dart与消息循环机制\"></a>Dart与消息循环机制</h1><p><em>翻译自<a href=\"https://www.dartlang.org/articles/event-loop/\">https://www.dartlang.org/articles/event-loop/</a></em></p>\n<p>异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。</p>\n<p>这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。</p>\n<p>在阅读这篇文章之前，你最好先要了解一下基本的<a href=\"https://www.dartlang.org/articles/using-future-based-apis/\">Future用法</a>。</p>","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。</p>\n<h3 id=\"消息循环和消息队列\"><a href=\"#消息循环和消息队列\" class=\"headerlink\" title=\"消息循环和消息队列\"></a>消息循环和消息队列</h3><p>一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。<br><img src=\"http://cdn.zqlxtt.cn/event-loop.png\" alt=\"\"></p>\n<p>消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。<br><img src=\"http://cdn.zqlxtt.cn/event-loop-example.png\" alt=\"\"></p>\n<p>上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？</p>\n<h3 id=\"Dart的单线程执行\"><a href=\"#Dart的单线程执行\" class=\"headerlink\" title=\"Dart的单线程执行\"></a>Dart的单线程执行</h3><p>当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。</p>\n<blockquote>\n<p>Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看<a href=\"https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\">https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary</a></p>\n</blockquote>\n<p>正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。<br><img src=\"http://cdn.zqlxtt.cn/event-loop-and-main.png\" alt=\"\"></p>\n<p>事实上，上图是经过简化的流程。</p>\n<h3 id=\"Dart的消息循环和消息队列\"><a href=\"#Dart的消息循环和消息队列\" class=\"headerlink\" title=\"Dart的消息循环和消息队列\"></a>Dart的消息循环和消息队列</h3><p>一个Dart应用有一个消息循环和两个消息队列– <em>event队列</em>和<em>microtask队列</em>。</p>\n<p><strong>event队列</strong>包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。</p>\n<p><strong>microtask 队列</strong>在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。</p>\n<p>event队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。</p>\n<p>正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。<br><img src=\"http://cdn.zqlxtt.cn/both-queues.png\" alt=\"\"></p>\n<blockquote>\n<p><strong>注意：</strong>当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件</p>\n</blockquote>\n<p>虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。</p>\n<h2 id=\"通过链接的方式指定任务顺序\"><a href=\"#通过链接的方式指定任务顺序\" class=\"headerlink\" title=\"通过链接的方式指定任务顺序\"></a>通过链接的方式指定任务顺序</h2><p>如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。</p>\n<p>先来看看下面这段错误代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...);</span><br><span class=\"line\">Timer.run(() &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>正确的写法应该是：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 明确表现出了后者依赖前者设置的变量值</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了表示明确的前后依赖关系，我们可以使用<strong>then()()</strong>来表明要使用变量就必须要等设置完这个变量。这里可以使用<strong>whenComplete()</strong>来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。</p>\n<p>如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;<span class=\"keyword\">new</span> Future(() &#123;...use the important variable...&#125;)&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。</p>\n<h2 id=\"怎么安排一个任务\"><a href=\"#怎么安排一个任务\" class=\"headerlink\" title=\"怎么安排一个任务\"></a>怎么安排一个任务</h2><p>当你需要指定一些代码稍后运行的时候，你可以使用<strong>dart:async</strong>提供的两种方式：</p>\n<pre><code>1.Future类，它可以向event队列的尾部添加一个事件。\n2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。</code></pre><h3 id=\"使用合理的队列\"><a href=\"#使用合理的队列\" class=\"headerlink\" title=\"使用合理的队列\"></a>使用合理的队列</h3><p>有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。<br>如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。<br><img src=\"http://backup.flutter-dev.cn/scheduling-tasks.png\" alt=\"\"></p>\n<h3 id=\"Event队列\"><a href=\"#Event队列\" class=\"headerlink\" title=\"Event队列\"></a>Event队列</h3><p>使用<code>new Future</code>或者<code>new Future.delayed()</code>来向event队列中添加事件。</p>\n<blockquote>\n<p><strong>注意:</strong>你也可以使用<code>Timer</code>来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。</p>\n</blockquote>\n<p>立刻需要将任务加入event队列可以使用new Future</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向event队列中添加一个任务</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Future(() =&gt; <span class=\"number\">21</span>)</span><br><span class=\"line\">    .then((v) =&gt; v*<span class=\"number\">2</span>)</span><br><span class=\"line\">    .then((v) =&gt; <span class=\"built_in\">print</span>(v));</span><br></pre></td></tr></table></figure>\n\n<p>如果要在一段时间后添加一个任务，可以使用new Future.delayed():</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一秒以后将任务添加至event队列</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">const</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>), () &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：</p>\n<ol>\n<li>main方法执行完毕</li>\n<li>microtask队列为空</li>\n<li>该任务前的任务全部执行完毕<br>所以该任务真正被执行可能是大于1秒后。</li>\n</ol>\n<p>关于Future的有趣事实：</p>\n<ol>\n<li>被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。</li>\n<li>如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。</li>\n<li>Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。<ol start=\"4\">\n<li>Future.value()构造方法会在一个microtask中完成。</li>\n<li>Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Microtask队列：-scheduleMicrotask\"><a href=\"#Microtask队列：-scheduleMicrotask\" class=\"headerlink\" title=\"Microtask队列：  scheduleMicrotask()\"></a>Microtask队列：  scheduleMicrotask()</h3><p><strong>dart:async</strong>定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduleMicrotask(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...code goes here...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果有必要可以使用isolate或worker\"><a href=\"#如果有必要可以使用isolate或worker\" class=\"headerlink\" title=\"如果有必要可以使用isolate或worker\"></a>如果有必要可以使用isolate或worker</h3><p>如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。</p>\n<p>那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。</p>\n<p>但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。</p>\n<h2 id=\"测试一下你的理解程度\"><a href=\"#测试一下你的理解程度\" class=\"headerlink\" title=\"测试一下你的理解程度\"></a>测试一下你的理解程度</h2><p>目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。</p>\n<h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3><p>下面这段代码的输出是什么？</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">                     () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>别急着看答案，自己在纸上写写答案呢？</p>\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n<p>上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：</p>\n<ol>\n<li>main()方法</li>\n<li>microtask队列</li>\n<li>event队列（先new Future后new Future.delayed）</li>\n</ol>\n<p>main方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。</p>\n<h3 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h3><p>下面这个问题相对有些复杂：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">      () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2a&#x27;</span>))</span><br><span class=\"line\">      .then((_) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2b&#x27;</span>);</span><br><span class=\"line\">        scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #0 (from future #2b)&#x27;</span>));</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2c&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"keyword\">new</span> Future(</span><br><span class=\"line\">                   () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3a (a new future)&#x27;</span>)))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #4 of 4&#x27;</span>));</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #3 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">2</span>a</span><br><span class=\"line\">future #<span class=\"number\">2</span>b</span><br><span class=\"line\">future #<span class=\"number\">2</span>c</span><br><span class=\"line\">microtask #<span class=\"number\">0</span> (from future #<span class=\"number\">2</span>b)</span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">4</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">3</span>a (a <span class=\"keyword\">new</span> future)</span><br><span class=\"line\">future #<span class=\"number\">3</span>b</span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以下有几点关于dart的事件循环机制需要牢记于心：</p>\n<ul>\n<li>Dart事件循环执行两个队列里的事件：event队列和microtask队列。</li>\n<li>event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。</li>\n<li>目前为止，microtask队列的事件只来自dart。</li>\n<li>事件循环会优先清空microtask队列，然后才会去处理event队列。</li>\n<li>当两个队列都清空后，dart就会退出。</li>\n<li>main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。</li>\n</ul>\n<p>当你要安排一个任务时，请遵守以下规则：</p>\n<ul>\n<li>如果可以，尽量将任务放入event队列中。<ul>\n<li>使用Future的then方法或whenComplete方法来指定任务顺序。</li>\n<li>为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。</li>\n<li>大计算量的任务放入额外的isolate中。</li>\n</ul>\n</li>\n</ul>"},{"title":"Dart与消息循环机制[翻译]","date":"2016-08-17T01:29:52.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-485a4c0b715563d5.webp","top":7,"_content":"\n![dart](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-379516c69166cc82.webp)\n\n_翻译自[https://www.dartlang.org/articles/event-loop/](https://www.dartlang.org/articles/event-loop/)_\n\n异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。\n\n这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。\n\n在阅读这篇文章之前，你最好先要了解一下基本的[Future用法](https://www.dartlang.org/articles/using-future-based-apis/)。\n<!-- more -->\n\n## 基本概念\n\n如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。\n\n### 消息循环和消息队列\n一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-1c4637bccf1dd7dc.webp)\n\n消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ed3826b5b51e52dc.webp)\n\n上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？\n\n### Dart的单线程执行\n当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。\n\n> Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\n\n正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-485a4c0b715563d5.webp)\n\n事实上，上图是经过简化的流程。\n\n### Dart的消息循环和消息队列\n\n一个Dart应用有一个消息循环和两个消息队列-- *event队列*和*microtask队列*。\n\n**event队列**包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。\n\n**microtask 队列**在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。\n\nevent队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。\n\n正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8eea15e819cdf77d.webp)\n\n> **注意：**当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件\n\n虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。\n\n\n##  通过链接的方式指定任务顺序\n\n如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。\n\n先来看看下面这段错误代码：\n```dart\n// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系\nfuture.then(...set an important variable...);\nTimer.run(() {...use the important variable...});\n```\n正确的写法应该是：\n```dart\n// 明确表现出了后者依赖前者设置的变量值\nfuture.then(...set an important variable...)\n  .then((_) {...use the important variable...});\n```\n为了表示明确的前后依赖关系，我们可以使用**then()()**来表明要使用变量就必须要等设置完这个变量。这里可以使用**whenComplete()**来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。\n\n如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：\n```dart\nfuture.then(...set an important variable...)\n  .then((_) {new Future(() {...use the important variable...})});\n```\n使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。\n\n## 怎么安排一个任务\n当你需要指定一些代码稍后运行的时候，你可以使用**dart:async**提供的两种方式：\n\n    1.Future类，它可以向event队列的尾部添加一个事件。\n    2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。\n\n### 使用合理的队列\n有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。\n如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-e62b4467a0e186d5.webp)\n\n### Event队列\n使用`new Future`或者`new Future.delayed()`来向event队列中添加事件。\n\n> **注意:**你也可以使用`Timer`来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。\n\n立刻需要将任务加入event队列可以使用new Future\n```dart\n//向event队列中添加一个任务\nnew Future(() {\n  //任务具体代码\n});\n```\n你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：\n```dart\nnew Future(() => 21)\n    .then((v) => v*2)\n    .then((v) => print(v));\n```\n\n如果要在一段时间后添加一个任务，可以使用new Future.delayed():\n```dart\n// 一秒以后将任务添加至event队列\nnew Future.delayed(const Duration(seconds:1), () {\n  //任务具体代码\n});\n```\n\n虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：\n1. main方法执行完毕\n2. microtask队列为空\n3. 该任务前的任务全部执行完毕\n所以该任务真正被执行可能是大于1秒后。\n\n关于Future的有趣事实：\n1. 被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。\n2. 如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。\n3. Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。\n 4. Future.value()构造方法会在一个microtask中完成。\n 5. Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。\n\n### Microtask队列：  scheduleMicrotask()\n**dart:async**定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：\n```dart\nscheduleMicrotask(() {\n  // ...code goes here...\n});\n```\n### 如果有必要可以使用isolate或worker\n如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。\n\n那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。\n\n但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。\n\n## 测试一下你的理解程度\n目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。\n\n### 问题1\n下面这段代码的输出是什么？\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 2'));\n\n  new Future.delayed(new Duration(seconds:1),\n                     () => print('future #1 (delayed)'));\n  new Future(() => print('future #2 of 3'));\n  new Future(() => print('future #3 of 3'));\n\n  scheduleMicrotask(() => print('microtask #2 of 2'));\n\n  print('main #2 of 2');\n}\n```\n别急着看答案，自己在纸上写写答案呢？\n\n\n\n\n\n\n\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 2\nmicrotask #2 of 2\nfuture #2 of 3\nfuture #3 of 3\nfuture #1 (delayed)\n```\n上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：\n1. main()方法\n2. microtask队列\n3. event队列（先new Future后new Future.delayed）\n\nmain方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。\n\n### 问题2\n下面这个问题相对有些复杂：\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 3'));\n\n  new Future.delayed(new Duration(seconds:1),\n      () => print('future #1 (delayed)'));\n\n  new Future(() => print('future #2 of 4'))\n      .then((_) => print('future #2a'))\n      .then((_) {\n        print('future #2b');\n        scheduleMicrotask(() => print('microtask #0 (from future #2b)'));\n      })\n      .then((_) => print('future #2c'));\n\n  scheduleMicrotask(() => print('microtask #2 of 3'));\n\n  new Future(() => print('future #3 of 4'))\n      .then((_) => new Future(\n                   () => print('future #3a (a new future)')))\n      .then((_) => print('future #3b'));\n\n  new Future(() => print('future #4 of 4'));\n  scheduleMicrotask(() => print('microtask #3 of 3'));\n  print('main #2 of 2');\n}\n```\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 3\nmicrotask #2 of 3\nmicrotask #3 of 3\nfuture #2 of 4\nfuture #2a\nfuture #2b\nfuture #2c\nmicrotask #0 (from future #2b)\nfuture #3 of 4\nfuture #4 of 4\nfuture #3a (a new future)\nfuture #3b\nfuture #1 (delayed)\n```\n\n# 总结\n以下有几点关于dart的事件循环机制需要牢记于心：\n- Dart事件循环执行两个队列里的事件：event队列和microtask队列。\n- event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。\n- 目前为止，microtask队列的事件只来自dart。\n- 事件循环会优先清空microtask队列，然后才会去处理event队列。\n- 当两个队列都清空后，dart就会退出。\n- main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。\n\n当你要安排一个任务时，请遵守以下规则：\n- 如果可以，尽量将任务放入event队列中。\n - 使用Future的then方法或whenComplete方法来指定任务顺序。\n - 为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。\n - 大计算量的任务放入额外的isolate中。\n","source":"_posts/dart-thread-model.md","raw":"---\ntitle: Dart与消息循环机制[翻译]\ndate: 2016-08-17 09:29:52\ntags: dart\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-485a4c0b715563d5.webp\ntop: 7\n---\n\n![dart](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-379516c69166cc82.webp)\n\n_翻译自[https://www.dartlang.org/articles/event-loop/](https://www.dartlang.org/articles/event-loop/)_\n\n异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。\n\n这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。\n\n在阅读这篇文章之前，你最好先要了解一下基本的[Future用法](https://www.dartlang.org/articles/using-future-based-apis/)。\n<!-- more -->\n\n## 基本概念\n\n如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。\n\n### 消息循环和消息队列\n一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-1c4637bccf1dd7dc.webp)\n\n消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ed3826b5b51e52dc.webp)\n\n上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？\n\n### Dart的单线程执行\n当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。\n\n> Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\n\n正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-485a4c0b715563d5.webp)\n\n事实上，上图是经过简化的流程。\n\n### Dart的消息循环和消息队列\n\n一个Dart应用有一个消息循环和两个消息队列-- *event队列*和*microtask队列*。\n\n**event队列**包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。\n\n**microtask 队列**在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。\n\nevent队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。\n\n正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8eea15e819cdf77d.webp)\n\n> **注意：**当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件\n\n虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。\n\n\n##  通过链接的方式指定任务顺序\n\n如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。\n\n先来看看下面这段错误代码：\n```dart\n// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系\nfuture.then(...set an important variable...);\nTimer.run(() {...use the important variable...});\n```\n正确的写法应该是：\n```dart\n// 明确表现出了后者依赖前者设置的变量值\nfuture.then(...set an important variable...)\n  .then((_) {...use the important variable...});\n```\n为了表示明确的前后依赖关系，我们可以使用**then()()**来表明要使用变量就必须要等设置完这个变量。这里可以使用**whenComplete()**来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。\n\n如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：\n```dart\nfuture.then(...set an important variable...)\n  .then((_) {new Future(() {...use the important variable...})});\n```\n使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。\n\n## 怎么安排一个任务\n当你需要指定一些代码稍后运行的时候，你可以使用**dart:async**提供的两种方式：\n\n    1.Future类，它可以向event队列的尾部添加一个事件。\n    2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。\n\n### 使用合理的队列\n有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。\n如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-e62b4467a0e186d5.webp)\n\n### Event队列\n使用`new Future`或者`new Future.delayed()`来向event队列中添加事件。\n\n> **注意:**你也可以使用`Timer`来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。\n\n立刻需要将任务加入event队列可以使用new Future\n```dart\n//向event队列中添加一个任务\nnew Future(() {\n  //任务具体代码\n});\n```\n你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：\n```dart\nnew Future(() => 21)\n    .then((v) => v*2)\n    .then((v) => print(v));\n```\n\n如果要在一段时间后添加一个任务，可以使用new Future.delayed():\n```dart\n// 一秒以后将任务添加至event队列\nnew Future.delayed(const Duration(seconds:1), () {\n  //任务具体代码\n});\n```\n\n虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：\n1. main方法执行完毕\n2. microtask队列为空\n3. 该任务前的任务全部执行完毕\n所以该任务真正被执行可能是大于1秒后。\n\n关于Future的有趣事实：\n1. 被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。\n2. 如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。\n3. Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。\n 4. Future.value()构造方法会在一个microtask中完成。\n 5. Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。\n\n### Microtask队列：  scheduleMicrotask()\n**dart:async**定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：\n```dart\nscheduleMicrotask(() {\n  // ...code goes here...\n});\n```\n### 如果有必要可以使用isolate或worker\n如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。\n\n那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。\n\n但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。\n\n## 测试一下你的理解程度\n目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。\n\n### 问题1\n下面这段代码的输出是什么？\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 2'));\n\n  new Future.delayed(new Duration(seconds:1),\n                     () => print('future #1 (delayed)'));\n  new Future(() => print('future #2 of 3'));\n  new Future(() => print('future #3 of 3'));\n\n  scheduleMicrotask(() => print('microtask #2 of 2'));\n\n  print('main #2 of 2');\n}\n```\n别急着看答案，自己在纸上写写答案呢？\n\n\n\n\n\n\n\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 2\nmicrotask #2 of 2\nfuture #2 of 3\nfuture #3 of 3\nfuture #1 (delayed)\n```\n上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：\n1. main()方法\n2. microtask队列\n3. event队列（先new Future后new Future.delayed）\n\nmain方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。\n\n### 问题2\n下面这个问题相对有些复杂：\n```dart\nimport 'dart:async';\nmain() {\n  print('main #1 of 2');\n  scheduleMicrotask(() => print('microtask #1 of 3'));\n\n  new Future.delayed(new Duration(seconds:1),\n      () => print('future #1 (delayed)'));\n\n  new Future(() => print('future #2 of 4'))\n      .then((_) => print('future #2a'))\n      .then((_) {\n        print('future #2b');\n        scheduleMicrotask(() => print('microtask #0 (from future #2b)'));\n      })\n      .then((_) => print('future #2c'));\n\n  scheduleMicrotask(() => print('microtask #2 of 3'));\n\n  new Future(() => print('future #3 of 4'))\n      .then((_) => new Future(\n                   () => print('future #3a (a new future)')))\n      .then((_) => print('future #3b'));\n\n  new Future(() => print('future #4 of 4'));\n  scheduleMicrotask(() => print('microtask #3 of 3'));\n  print('main #2 of 2');\n}\n```\n\n答案：\n```dart\nmain #1 of 2\nmain #2 of 2\nmicrotask #1 of 3\nmicrotask #2 of 3\nmicrotask #3 of 3\nfuture #2 of 4\nfuture #2a\nfuture #2b\nfuture #2c\nmicrotask #0 (from future #2b)\nfuture #3 of 4\nfuture #4 of 4\nfuture #3a (a new future)\nfuture #3b\nfuture #1 (delayed)\n```\n\n# 总结\n以下有几点关于dart的事件循环机制需要牢记于心：\n- Dart事件循环执行两个队列里的事件：event队列和microtask队列。\n- event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。\n- 目前为止，microtask队列的事件只来自dart。\n- 事件循环会优先清空microtask队列，然后才会去处理event队列。\n- 当两个队列都清空后，dart就会退出。\n- main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。\n\n当你要安排一个任务时，请遵守以下规则：\n- 如果可以，尽量将任务放入event队列中。\n - 使用Future的then方法或whenComplete方法来指定任务顺序。\n - 为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。\n - 大计算量的任务放入额外的isolate中。\n","slug":"dart-thread-model","published":1,"updated":"2024-08-21T03:16:19.783Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vs000y5p6tgnci8img","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-379516c69166cc82.webp\" alt=\"dart\"></p>\n<p><em>翻译自<a href=\"https://www.dartlang.org/articles/event-loop/\">https://www.dartlang.org/articles/event-loop/</a></em></p>\n<p>异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。</p>\n<p>这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。</p>\n<p>在阅读这篇文章之前，你最好先要了解一下基本的<a href=\"https://www.dartlang.org/articles/using-future-based-apis/\">Future用法</a>。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。</p>\n<h3 id=\"消息循环和消息队列\"><a href=\"#消息循环和消息队列\" class=\"headerlink\" title=\"消息循环和消息队列\"></a>消息循环和消息队列</h3><p>一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-1c4637bccf1dd7dc.webp\" alt=\"\"></p>\n<p>消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ed3826b5b51e52dc.webp\" alt=\"\"></p>\n<p>上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？</p>\n<h3 id=\"Dart的单线程执行\"><a href=\"#Dart的单线程执行\" class=\"headerlink\" title=\"Dart的单线程执行\"></a>Dart的单线程执行</h3><p>当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。</p>\n<blockquote>\n<p>Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看<a href=\"https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\">https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary</a></p>\n</blockquote>\n<p>正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-485a4c0b715563d5.webp\" alt=\"\"></p>\n<p>事实上，上图是经过简化的流程。</p>\n<h3 id=\"Dart的消息循环和消息队列\"><a href=\"#Dart的消息循环和消息队列\" class=\"headerlink\" title=\"Dart的消息循环和消息队列\"></a>Dart的消息循环和消息队列</h3><p>一个Dart应用有一个消息循环和两个消息队列– <em>event队列</em>和<em>microtask队列</em>。</p>\n<p><strong>event队列</strong>包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。</p>\n<p><strong>microtask 队列</strong>在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。</p>\n<p>event队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。</p>\n<p>正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8eea15e819cdf77d.webp\" alt=\"\"></p>\n<blockquote>\n<p><strong>注意：</strong>当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件</p>\n</blockquote>\n<p>虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。</p>\n<h2 id=\"通过链接的方式指定任务顺序\"><a href=\"#通过链接的方式指定任务顺序\" class=\"headerlink\" title=\"通过链接的方式指定任务顺序\"></a>通过链接的方式指定任务顺序</h2><p>如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。</p>\n<p>先来看看下面这段错误代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...);</span><br><span class=\"line\">Timer.run(() &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>正确的写法应该是：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 明确表现出了后者依赖前者设置的变量值</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了表示明确的前后依赖关系，我们可以使用<strong>then()()</strong>来表明要使用变量就必须要等设置完这个变量。这里可以使用<strong>whenComplete()</strong>来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。</p>\n<p>如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;<span class=\"keyword\">new</span> Future(() &#123;...use the important variable...&#125;)&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。</p>\n<h2 id=\"怎么安排一个任务\"><a href=\"#怎么安排一个任务\" class=\"headerlink\" title=\"怎么安排一个任务\"></a>怎么安排一个任务</h2><p>当你需要指定一些代码稍后运行的时候，你可以使用<strong>dart:async</strong>提供的两种方式：</p>\n<pre><code>1.Future类，它可以向event队列的尾部添加一个事件。\n2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。</code></pre><h3 id=\"使用合理的队列\"><a href=\"#使用合理的队列\" class=\"headerlink\" title=\"使用合理的队列\"></a>使用合理的队列</h3><p>有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。<br>如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-e62b4467a0e186d5.webp\" alt=\"\"></p>\n<h3 id=\"Event队列\"><a href=\"#Event队列\" class=\"headerlink\" title=\"Event队列\"></a>Event队列</h3><p>使用<code>new Future</code>或者<code>new Future.delayed()</code>来向event队列中添加事件。</p>\n<blockquote>\n<p><strong>注意:</strong>你也可以使用<code>Timer</code>来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。</p>\n</blockquote>\n<p>立刻需要将任务加入event队列可以使用new Future</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向event队列中添加一个任务</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Future(() =&gt; <span class=\"number\">21</span>)</span><br><span class=\"line\">    .then((v) =&gt; v*<span class=\"number\">2</span>)</span><br><span class=\"line\">    .then((v) =&gt; <span class=\"built_in\">print</span>(v));</span><br></pre></td></tr></table></figure>\n\n<p>如果要在一段时间后添加一个任务，可以使用new Future.delayed():</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一秒以后将任务添加至event队列</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">const</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>), () &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：</p>\n<ol>\n<li>main方法执行完毕</li>\n<li>microtask队列为空</li>\n<li>该任务前的任务全部执行完毕<br>所以该任务真正被执行可能是大于1秒后。</li>\n</ol>\n<p>关于Future的有趣事实：</p>\n<ol>\n<li>被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。</li>\n<li>如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。</li>\n<li>Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。<ol start=\"4\">\n<li>Future.value()构造方法会在一个microtask中完成。</li>\n<li>Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Microtask队列：-scheduleMicrotask\"><a href=\"#Microtask队列：-scheduleMicrotask\" class=\"headerlink\" title=\"Microtask队列：  scheduleMicrotask()\"></a>Microtask队列：  scheduleMicrotask()</h3><p><strong>dart:async</strong>定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduleMicrotask(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...code goes here...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果有必要可以使用isolate或worker\"><a href=\"#如果有必要可以使用isolate或worker\" class=\"headerlink\" title=\"如果有必要可以使用isolate或worker\"></a>如果有必要可以使用isolate或worker</h3><p>如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。</p>\n<p>那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。</p>\n<p>但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。</p>\n<h2 id=\"测试一下你的理解程度\"><a href=\"#测试一下你的理解程度\" class=\"headerlink\" title=\"测试一下你的理解程度\"></a>测试一下你的理解程度</h2><p>目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。</p>\n<h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3><p>下面这段代码的输出是什么？</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">                     () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>别急着看答案，自己在纸上写写答案呢？</p>\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n<p>上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：</p>\n<ol>\n<li>main()方法</li>\n<li>microtask队列</li>\n<li>event队列（先new Future后new Future.delayed）</li>\n</ol>\n<p>main方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。</p>\n<h3 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h3><p>下面这个问题相对有些复杂：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">      () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2a&#x27;</span>))</span><br><span class=\"line\">      .then((_) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2b&#x27;</span>);</span><br><span class=\"line\">        scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #0 (from future #2b)&#x27;</span>));</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2c&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"keyword\">new</span> Future(</span><br><span class=\"line\">                   () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3a (a new future)&#x27;</span>)))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #4 of 4&#x27;</span>));</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #3 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">2</span>a</span><br><span class=\"line\">future #<span class=\"number\">2</span>b</span><br><span class=\"line\">future #<span class=\"number\">2</span>c</span><br><span class=\"line\">microtask #<span class=\"number\">0</span> (from future #<span class=\"number\">2</span>b)</span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">4</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">3</span>a (a <span class=\"keyword\">new</span> future)</span><br><span class=\"line\">future #<span class=\"number\">3</span>b</span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以下有几点关于dart的事件循环机制需要牢记于心：</p>\n<ul>\n<li>Dart事件循环执行两个队列里的事件：event队列和microtask队列。</li>\n<li>event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。</li>\n<li>目前为止，microtask队列的事件只来自dart。</li>\n<li>事件循环会优先清空microtask队列，然后才会去处理event队列。</li>\n<li>当两个队列都清空后，dart就会退出。</li>\n<li>main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。</li>\n</ul>\n<p>当你要安排一个任务时，请遵守以下规则：</p>\n<ul>\n<li>如果可以，尽量将任务放入event队列中。<ul>\n<li>使用Future的then方法或whenComplete方法来指定任务顺序。</li>\n<li>为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。</li>\n<li>大计算量的任务放入额外的isolate中。</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-379516c69166cc82.webp\" alt=\"dart\"></p>\n<p><em>翻译自<a href=\"https://www.dartlang.org/articles/event-loop/\">https://www.dartlang.org/articles/event-loop/</a></em></p>\n<p>异步任务在Dart中随处可见，例如许多库的方法调用都会返回Future对象来实现异步处理，我们也可以注册Handler来响应一些事件，如：鼠标点击事件，I/O流结束和定时器到期。</p>\n<p>这篇文章主要介绍了Dart中与异步任务相关的消息循环机制，阅读完这篇文章后相信你可写出更赞的异步执行代码。你也能学习到如何调度Future任务并且预测他们的执行顺序。</p>\n<p>在阅读这篇文章之前，你最好先要了解一下基本的<a href=\"https://www.dartlang.org/articles/using-future-based-apis/\">Future用法</a>。</p>","more":"<h2 id=\"基本概念\"><a href=\"#基本概念\" class=\"headerlink\" title=\"基本概念\"></a>基本概念</h2><p>如果你写过一些关于UI的代码，你就应该熟悉消息循环和消息队列。有了他们才能保重UI的绘制操作和一些UI事件，如鼠标点击事件可以被一个一个的执行从而保证UI和UI事件的统一性。</p>\n<h3 id=\"消息循环和消息队列\"><a href=\"#消息循环和消息队列\" class=\"headerlink\" title=\"消息循环和消息队列\"></a>消息循环和消息队列</h3><p>一个消息循环的职责就是不断从消息队列中取出消息并处理他们直到消息队列为空。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-1c4637bccf1dd7dc.webp\" alt=\"\"></p>\n<p>消息队列中的消息可能来自用户输入，文件I/O消息，定时器等。例如下图的消息队列就包含了定时器消息和用户输入消息。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ed3826b5b51e52dc.webp\" alt=\"\"></p>\n<p>上述的这些概念你可能已经驾轻就熟了，那接下来我们就讨论一下这些概念在Dart中是怎么表现的？</p>\n<h3 id=\"Dart的单线程执行\"><a href=\"#Dart的单线程执行\" class=\"headerlink\" title=\"Dart的单线程执行\"></a>Dart的单线程执行</h3><p>当一个Dart的方法开始执行时，他会一直执行直至达到这个方法的退出点。换句话说Dart的方法是不会被其他Dart代码打断的。</p>\n<blockquote>\n<p>Note:一个Dart的命令行应用可以通过创建isolates来达到并行运行的目的。isolates之间不会共享内存，它们就像几个运行在不同进程中的app，中能通过传递message来进行交流。出了明确指出运行在额外的isolates或者workers中的代码外，所有的应用代码都是运行在应用的main isolate中。要了解更多相关内容，可以查看<a href=\"https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary\">https://www.dartlang.org/articles/event-loop/#use-isolates-or-workers-if-necessary</a></p>\n</blockquote>\n<p>正如下图所示，当一个Dart应用开始的标志是它的main isolate执行了main方法。当main方法退出后，main isolate的线程就会去逐一处理消息队列中的消息。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-485a4c0b715563d5.webp\" alt=\"\"></p>\n<p>事实上，上图是经过简化的流程。</p>\n<h3 id=\"Dart的消息循环和消息队列\"><a href=\"#Dart的消息循环和消息队列\" class=\"headerlink\" title=\"Dart的消息循环和消息队列\"></a>Dart的消息循环和消息队列</h3><p>一个Dart应用有一个消息循环和两个消息队列– <em>event队列</em>和<em>microtask队列</em>。</p>\n<p><strong>event队列</strong>包含所有外来的事件：I/O，mouse events，drawing events，timers，isolate之间的message等。</p>\n<p><strong>microtask 队列</strong>在Dart中是必要的，因为有时候事件处理想要在稍后完成一些任务但又希望是在执行下一个事件消息之前。</p>\n<p>event队列包含Dart和来自系统其它位置的事件。但microtask队列只包含来自当前isolate的内部代码。</p>\n<p>正如下面的流程图，当main方法退出后，event循环就开始它的工作。首先它会以FIFO的顺序执行micro task，当所有micro task执行完后它会从event 队列中取事件并执行。如此反复，直到两个队列都为空。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8eea15e819cdf77d.webp\" alt=\"\"></p>\n<blockquote>\n<p><strong>注意：</strong>当事件循环正在处理micro task的时候。event队列会被堵塞。这时候app就无法进行UI绘制，响应鼠标事件和I/O等事件</p>\n</blockquote>\n<p>虽然你可以预测任务执行的顺序，但你无法准确的预测到事件循环何时会处理你期望的任务。例如当你创建一个延时1s的任务，但在排在你之前的任务结束前事件循环是不会处理这个延时任务的，也就是或任务执行可能是大于1s的。</p>\n<h2 id=\"通过链接的方式指定任务顺序\"><a href=\"#通过链接的方式指定任务顺序\" class=\"headerlink\" title=\"通过链接的方式指定任务顺序\"></a>通过链接的方式指定任务顺序</h2><p>如果你的代码之间存在依赖，那么尽量让他们之间的依赖关系明确一点。明确的依赖关系可以很好的帮助其他开发者理解你的代码，并且可以让你的代码更稳定也更容易重构。</p>\n<p>先来看看下面这段错误代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这样写错误的原因就是没有明确体现出设置变量和使用变量之间的依赖关系</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...);</span><br><span class=\"line\">Timer.run(() &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>正确的写法应该是：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 明确表现出了后者依赖前者设置的变量值</span></span><br><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;...use the important variable...&#125;);</span><br></pre></td></tr></table></figure>\n<p>为了表示明确的前后依赖关系，我们可以使用<strong>then()()</strong>来表明要使用变量就必须要等设置完这个变量。这里可以使用<strong>whenComplete()</strong>来代替then，它与then的不同点在于哪怕设置变量出现了异常也会被调用到。这个有点像java中的finally。</p>\n<p>如果上面这个使用变量也要花费一段时间，那么可以考虑将其放入一个新的Future中：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">future.then(...<span class=\"keyword\">set</span> an important variable...)</span><br><span class=\"line\">  .then((_) &#123;<span class=\"keyword\">new</span> Future(() &#123;...use the important variable...&#125;)&#125;);</span><br></pre></td></tr></table></figure>\n<p>使用一个新的Future可以给事件循环一个机会先去处理列队中的其他事件。</p>\n<h2 id=\"怎么安排一个任务\"><a href=\"#怎么安排一个任务\" class=\"headerlink\" title=\"怎么安排一个任务\"></a>怎么安排一个任务</h2><p>当你需要指定一些代码稍后运行的时候，你可以使用<strong>dart:async</strong>提供的两种方式：</p>\n<pre><code>1.Future类，它可以向event队列的尾部添加一个事件。\n2.使用顶级方法**scheduleMicrotask()**，它可以向microtask队列的尾部添加一个微任务。</code></pre><h3 id=\"使用合理的队列\"><a href=\"#使用合理的队列\" class=\"headerlink\" title=\"使用合理的队列\"></a>使用合理的队列</h3><p>有可能的还是尽量使用Future来向event队列添加事件。使用event队列可以保持microtask队列的简短，以此减少microtask的过度使用导致event队列的堵塞。<br>如果一个任务确实要在event队列的任何一个事件前完成，那么你应该尽量直接写在main方法中而不是使用这两个队列。如果你不能那么就用scheduleMicrotask来向microtask添加一个微任务。<br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-e62b4467a0e186d5.webp\" alt=\"\"></p>\n<h3 id=\"Event队列\"><a href=\"#Event队列\" class=\"headerlink\" title=\"Event队列\"></a>Event队列</h3><p>使用<code>new Future</code>或者<code>new Future.delayed()</code>来向event队列中添加事件。</p>\n<blockquote>\n<p><strong>注意:</strong>你也可以使用<code>Timer</code>来安排任务，但是使用Timer的过程中如果出现异常，则会退出程序。这里推荐使用Future，它是构建在Timer之上并加入了更多的功能，比如检测任务是否完成和异常反馈。</p>\n</blockquote>\n<p>立刻需要将任务加入event队列可以使用new Future</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//向event队列中添加一个任务</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>你也可以使用then或者whenComplete在Future结束后立刻执行某段代码。如下面这段代码在这个Future被执行后会立刻输出42：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> Future(() =&gt; <span class=\"number\">21</span>)</span><br><span class=\"line\">    .then((v) =&gt; v*<span class=\"number\">2</span>)</span><br><span class=\"line\">    .then((v) =&gt; <span class=\"built_in\">print</span>(v));</span><br></pre></td></tr></table></figure>\n\n<p>如果要在一段时间后添加一个任务，可以使用new Future.delayed():</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一秒以后将任务添加至event队列</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">const</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>), () &#123;</span><br><span class=\"line\">  <span class=\"comment\">//任务具体代码</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>虽然上面这个例子中一秒后向event队列添加一个任务，但是这个任务想要被执行的话必须满足一下几点：</p>\n<ol>\n<li>main方法执行完毕</li>\n<li>microtask队列为空</li>\n<li>该任务前的任务全部执行完毕<br>所以该任务真正被执行可能是大于1秒后。</li>\n</ol>\n<p>关于Future的有趣事实：</p>\n<ol>\n<li>被添加到then()中的方法会在Future执行后立马执行(这方法没有被加入任何队列，只是被回调了)。</li>\n<li>如果在then()调用之前Future就已经执行完毕了，那么会有一个任务被加入到microtask队列中。这个任务执行的就是被传入then的方法。</li>\n<li>Future()和Future.delayed()构造方法并不会被立刻完成，他们会向event队列中添加一个任务。<ol start=\"4\">\n<li>Future.value()构造方法会在一个microtask中完成。</li>\n<li>Future,sync()构造方法会立马执行其参数方法，并在microtask中完成。</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"Microtask队列：-scheduleMicrotask\"><a href=\"#Microtask队列：-scheduleMicrotask\" class=\"headerlink\" title=\"Microtask队列：  scheduleMicrotask()\"></a>Microtask队列：  scheduleMicrotask()</h3><p><strong>dart:async</strong>定义了一个顶级方法scheduleMicrotask() ，你可以这样使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheduleMicrotask(() &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...code goes here...</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"如果有必要可以使用isolate或worker\"><a href=\"#如果有必要可以使用isolate或worker\" class=\"headerlink\" title=\"如果有必要可以使用isolate或worker\"></a>如果有必要可以使用isolate或worker</h3><p>如果你想要完成一些重量级的任务，为了保证你应用可响应，你应该将任务添加到isolate或者worker中。isolate可能会运行在不同的进程或线程中.这取决于Dart的具体实现。</p>\n<p>那一般情况下你应该使用多少个isolate来完成你的工作呢？通常情况下可以根据你的cpu的个数来决定。</p>\n<p>但你也可以使用超过cpu个数的isolate，前提是你的app能有一个好的架构。让不同的isolate来分担不同的代码块运行，但这前提是你能保证这些isolate之间没有数据的共享。</p>\n<h2 id=\"测试一下你的理解程度\"><a href=\"#测试一下你的理解程度\" class=\"headerlink\" title=\"测试一下你的理解程度\"></a>测试一下你的理解程度</h2><p>目前为止你已经掌握了调度任务的基本知识，下面来测试一下你的理解程度。</p>\n<h3 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h3><p>下面这段代码的输出是什么？</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">                     () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 2&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>别急着看答案，自己在纸上写写答案呢？</p>\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n<p>上面的答案是否就是你所期望的呢？这段代码一共执行了三个分支：</p>\n<ol>\n<li>main()方法</li>\n<li>microtask队列</li>\n<li>event队列（先new Future后new Future.delayed）</li>\n</ol>\n<p>main方法中的普通代码都是同步执行的，所以肯定是main打印先全部打印出来，等main方法结束后会开始检查microtask中是否有任务，若有则执行，执行完继续检查microtask，直到microtask列队为空。所以接着打印的应该是microtask的打印。最后会去执行event队列。由于有一个使用的delay方法，所以它的打印应该是在最后的。</p>\n<h3 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h3><p>下面这个问题相对有些复杂：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\">main() &#123;</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #1 of 2&#x27;</span>);</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #1 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future.delayed(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(seconds:<span class=\"number\">1</span>),</span><br><span class=\"line\">      () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #1 (delayed)&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2a&#x27;</span>))</span><br><span class=\"line\">      .then((_) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2b&#x27;</span>);</span><br><span class=\"line\">        scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #0 (from future #2b)&#x27;</span>));</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #2c&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #2 of 3&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3 of 4&#x27;</span>))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"keyword\">new</span> Future(</span><br><span class=\"line\">                   () =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3a (a new future)&#x27;</span>)))</span><br><span class=\"line\">      .then((_) =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #3b&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">new</span> Future(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;future #4 of 4&#x27;</span>));</span><br><span class=\"line\">  scheduleMicrotask(() =&gt; <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;microtask #3 of 3&#x27;</span>));</span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;main #2 of 2&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>答案：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main #<span class=\"number\">1</span> of <span class=\"number\">2</span></span><br><span class=\"line\">main #<span class=\"number\">2</span> of <span class=\"number\">2</span></span><br><span class=\"line\">microtask #<span class=\"number\">1</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">2</span> of <span class=\"number\">3</span></span><br><span class=\"line\">microtask #<span class=\"number\">3</span> of <span class=\"number\">3</span></span><br><span class=\"line\">future #<span class=\"number\">2</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">2</span>a</span><br><span class=\"line\">future #<span class=\"number\">2</span>b</span><br><span class=\"line\">future #<span class=\"number\">2</span>c</span><br><span class=\"line\">microtask #<span class=\"number\">0</span> (from future #<span class=\"number\">2</span>b)</span><br><span class=\"line\">future #<span class=\"number\">3</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">4</span> of <span class=\"number\">4</span></span><br><span class=\"line\">future #<span class=\"number\">3</span>a (a <span class=\"keyword\">new</span> future)</span><br><span class=\"line\">future #<span class=\"number\">3</span>b</span><br><span class=\"line\">future #<span class=\"number\">1</span> (delayed)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>以下有几点关于dart的事件循环机制需要牢记于心：</p>\n<ul>\n<li>Dart事件循环执行两个队列里的事件：event队列和microtask队列。</li>\n<li>event队列的事件来自dart（future，timer，isolate message等）和系统（用户输入，I/O等）。</li>\n<li>目前为止，microtask队列的事件只来自dart。</li>\n<li>事件循环会优先清空microtask队列，然后才会去处理event队列。</li>\n<li>当两个队列都清空后，dart就会退出。</li>\n<li>main方法，来自event队列和microtask队列的所有事件都运行在Dart的main isolate中。</li>\n</ul>\n<p>当你要安排一个任务时，请遵守以下规则：</p>\n<ul>\n<li>如果可以，尽量将任务放入event队列中。<ul>\n<li>使用Future的then方法或whenComplete方法来指定任务顺序。</li>\n<li>为了保持你app的可响应性，尽量不要将大计算量的任务放入这两个队列。</li>\n<li>大计算量的任务放入额外的isolate中。</li>\n</ul>\n</li>\n</ul>"},{"title":"聊聊给DiyCode写第三方App的事","date":"2017-06-12T11:11:44.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-6b41628dadbf72b1.webp","_content":"\n首先介绍一下`DiyCode`，它的地址是[https://www.diycode.cc/](https://www.diycode.cc/)，是一个**致力于构建开发工程师高端交流分享社区。**它的后台 API 是开放出来的，恰好有段时间我也想用 Kotlin 写一个 App 练练手，所以就有了接下来的事。\n<!-- more -->\n## 这事我到底行不行？\n\n在上家公司，Leader 总挂在嘴边的一句话是“是男人就别说不行”。话虽如此，但做一件事之前最好还是有一个自我评估，在给 DiyCode 写 App 这件事上需要评估的就是我所掌握的能否将所有需求都实现？但再一想，现在社区类的 App 比比皆是，技术上应该没啥问题，不懂就 Google 呗。\n\n## 我能做啥？\n\n我能做啥？这个还需要看 API 给我们提供了哪些接口，API 地址如下 [https://www.diycode.cc/api](https://www.diycode.cc/api)。大体能做的我整理了下：\n\n- 用户登录\n- 话题的创建、查询、点赞、收藏、关注、回复\n- 通知的查询、读取\n- 对用户的相关操作如：关注用户、查看我关注的用户和被关注的用户等\n- 项目、News的创建、查询、回复等\n\n可以说绝大部分功能对应的 API 都有了，这时候心里就要有点数了，我的 App 要去实现哪些功能\n\n## 我想做啥？\n\n在知道了 API 给的接口后，就需要选定一些在 APP 中需要实现的功能，以下是我的选择：\n\n- 登录、退出\n- 主题的查看、回复、收藏、点赞和关注\n- 查看用户个人资料\n- 查看通知\n- 个人中心、我关注的人、关注我的人、我收藏的文章\n\n## 步步为营，有坑填坑\n\n### 私有信息对公屏蔽\n\n由于用户的登录需要 client\\_id 和 client\\_secret来申请token，如果把这两个信息直接放入源码中，那会引来熊孩子的搞破坏，所以这里选择一个比较大众的放发，就是将这两个信息放在 local.properties 文件中，.gitignore 通常会忽略这个文件。接着在 build.gradle 的 defaultConfig 块中加入如下配置：\n\n``` groovy\nbuildConfigField \"String\",\"CLIENT_ID\",\"\\\"\" + properties.get(\"client_id\",\"null\") + \"\\\"\"\nbuildConfigField \"String\",\"CLIENT_SECRET\",\"\\\"\" + properties.get(\"client_secret\",\"null\") + \"\\\"\"\n```\n\n然后就可以在项目中使用 BuildConfig 这个动态生成的类来访问这两个变量了，不用担心提交 Github 的时候会把一些私有信息提交上去。\n\n### UI 该如何设计？\n\n作为一名 Android 程序员，如果想自己画交互设计出 UI 设计文档，那此人也算神人了。根据我的经验，作为一名程序员在 UI 设计上别太有自己的想法，80%肯定都是不符合设计规范的。所以呢，还是要参考一些其他设计规范。好在 Google 自 Android 5.0 就推出了 Material Design 的设计规范并给出了相应的 Android 组件，我们大可从简，遵循少即是多的原则来设计 App 的 UI。\n\n我个人比较欣赏 Bilibili 客户端和知乎等客户端，打开 App，浓浓的 Material Design 设计味道那是深得我心。不废话，说白了就是程序猿好好写代码，UI 参考一些现成的规范即可。\n\n### App 架构\n\n此处说架构有些装逼了，其实就是怎么分层。目前流行的分层方法无外乎那几种，只要挑选自己觉得可以的就行。在这个 App 中我的选择是 MVP。\n\n### 开源框架的选择\n\n下面我简单列举一下在这个 App 中用到的开源开源框架：\n\n- [CircleImageView](https://github.com/hdodenhof/CircleImageView) : 圆形 ImageView\n- [Picasso](https://github.com/square/picasso) : 图片下载及缓存\n- [OkHttp](https://github.com/square/okhttp) : Http Client\n- [MarkdownView](https://github.com/tiagohm/MarkdownView) : 用于显示 MarkDown 的视图\n- [MaterialTextField](https://github.com/florent37/MaterialTextField) : 登录用的输入框\n- [PhotoView](https://github.com/chrisbanes/PhotoView) : 显示图片，可手势放大缩小\n- [Dexter](https://github.com/Karumi/Dexter) : Runtime Permission 相关\n- [Retrofit](https://github.com/square/retrofit) : Http Client\n\n大概就是这些个，如有新的后续补充。\n\n### 其他技术\n\n这个 App 代码部分用 Kotlin 完成，视图的数据填充使用 Databinding 。\n\n### 坑\n\n#### 1.\n由于使用了 Kotlin，直接使用 Databinding 会出错，需要在 build.gradle 中添加依赖：\n\n```groovy\nkapt \"com.android.databinding:compiler:2.3.3\"\n```\n\n以及插件：\n\n```groovy\napply plugin: 'kotlin-kapt'\n```\n\n只有这样 Databinding 才能正常工作。\n\n#### 2.\n在使用 Retrofit 和 converter-gson 配合获取数据时，对应的实体类应该定义成如下样子：\n\n```kotlin\ndata class Token\n(\n        @SerializedName(\"access_token\") val accessToken: String,\n        @SerializedName(\"token_type\") val tokenType: String,\n        @SerializedName(\"expires_in\") val expiresIn: String,\n        @SerializedName(\"refresh_token\") val refreshToken: String,\n        @SerializedName(\"created_at\") val createdAt: String\n)\n```\n\n使用 kotlin 的数据类保存数据应该是十分明智的选择，应为就只凭它重写的 toString 方法来输出所有字段就大大降低了我在调试时候的工作量。\n\n#### 3.\n由于此 App 涉及到用户登录的问题，那就肯定会涉及到请求中添加 token 信息的问题，这里应为用的是 Retrofit ，由于它底下用的也是 Okhttp，所以就自然可以选择 OkHttp 的拦截器 Interceptor。\n\n```kotlin\nvar interceptor: Interceptor = object : Interceptor {\n    override fun intercept(chain: Interceptor.Chain?): Response {\n        var originRequest = chain!!.request()\n        if (originRequest.url().toString().contains(DiyCodeContract.kOAuthUrl)) {\n              return chain.proceed(originRequest)\n        }\n\n        if (originRequest.headers()[\"Authorization\"] != null) {\n            return chain.proceed(originRequest)\n        }\n\n        if (mCallback!!.getToken() == null || mCallback!!.getToken()?.length == 0) {\n            return chain.proceed(originRequest)\n        }\n\n        var newRequest = originRequest.\n                newBuilder().\n                addHeader(\"Authorization\", \"Bearer \" + mCallback!!.getToken()).\n                build()\n        return chain.proceed(newRequest)\n    }\n\n}\n\nvar okHttpClient: OkHttpClient = OkHttpClient.Builder().addInterceptor(interceptor).build()\n\nval retrofit = Retrofit.Builder()\n        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n        .addConverterFactory(GsonConverterFactory.create())\n        .baseUrl(DiyCodeContract.kDiyCodeApi)\n        .client(okHttpClient)\n        .build()\n```\n\n#### 4.\nMarkdown 正文中的图片，连接的点击问题，这个问题其实比较简单，应为在使用的开源框架 MarkdownView 中就提供了如下接口：\n\n```kotlin\n    public interface OnElementListener {\n        void onButtonTap(String var1);\n\n        void onCodeTap(String var1, String var2);\n\n        void onHeadingTap(int var1, String var2);\n\n        void onImageTap(String var1, int var2, int var3);\n\n        void onLinkTap(String var1, String var2);\n\n        void onKeystrokeTap(String var1);\n\n        void onMarkTap(String var1);\n    }\n```\n\n图片的单独显示，连接的跳转都可以在此处做处理。\n\n#### 5.\n这里有个略微复杂的问题，由于在话题详情页下方会有评论列表，返回的评论数据有两种格式，markdown 和 html，本来我想有 markdown 不就足够了吗？评论同样采用 MarkdownView ，分分钟搞定。但万万没想到，这个 MarkdownView 是继承自 WebView，试想一下，一个列表里全是 WebView 在那滑动，界面会卡成啥样。\n所以只能退而求其次选择使用 TextView 来显示 html。此方法本来也不难，一句话就搞定了，\n\n```kotlin\nbinding.markdownView.text = Html.fromHtml(topicReply.bodyHtml)\n```\n但问题来了，有些评论里带链接，有些是@他人的，有些是带图片的，这里的三个元素都需要做处理。链接如果是指向某一个话题的，应该直接在应用内跳转到该话题而不是用浏览器打开对应页面。点@他人的文字，应该跳转到被@人的个人资料页。点击图片可以进入图片查看页，进行方法和缩小。\n\n这里的前两个问题都可以使用 ClickableSpan 进行处理，而 TextView 显示图片本身就是一个问题，上面的 Html.fromHtml 其实还提供了一个接口：\n\n```kotlin\n public static Spanned fromHtml(String source, int flags, Html.ImageGetter imageGetter, Html.TagHandler tagHandler) \n```\n\n注意这里的 ImageGetter，使用它就能 html 中的 <img> 标签进行处理。\n\n```kotlin\n   public interface ImageGetter {\n        Drawable getDrawable(String var1);\n    }\n```\n\n但这个接口怎么看也是一个同步的方法，而加载网络图片大家都知道这是一个异步的操作，所以我们还要做一下进一步的继承和封装处理：\n\n```kotlin\nclass URLDrawable : BitmapDrawable() {\n    var drawable: Drawable? = null\n\n    override fun draw(canvas: Canvas) {\n        if (drawable != null) {\n            drawable!!.draw(canvas)\n        }\n    }\n}\n\nclass URLImageParser(internal var container: View, internal var c: Context) : ImageGetter {\n\n    override fun getDrawable(source: String): Drawable {\n        val urlDrawable = URLDrawable()\n\n        val asyncTask = ImageGetterAsyncTask(urlDrawable)\n\n        asyncTask.execute(source)\n\n        return urlDrawable\n    }\n\n    inner class ImageGetterAsyncTask(internal var urlDrawable: URLDrawable) : AsyncTask<String, Void, Drawable>() {\n\n        override fun doInBackground(vararg params: String): Drawable? {\n            val source = params[0]\n            return fetchDrawable(source)\n        }\n\n        override fun onPostExecute(result: Drawable?) {\n            if(result == null) return\n            urlDrawable.setBounds(0, 0, 0 + result.intrinsicWidth, 0 + result.intrinsicHeight)\n\n            urlDrawable.drawable = result\n\n            val textview = this@URLImageParser.container as TextView\n            textview.text = textview.text\n        }\n\n        fun fetchDrawable(urlString: String): Drawable? {\n            try {\n                val `is` = fetch(urlString)\n                val drawable = Drawable.createFromStream(`is`, \"src\")\n                drawable.setBounds(0, 0, 0 + drawable.intrinsicWidth, 0 + drawable.intrinsicHeight)\n                return drawable\n            } catch (e: Exception) {\n                return null\n            }\n\n        }\n\n        @Throws(MalformedURLException::class, IOException::class)\n        private fun fetch(urlString: String): InputStream {\n            val url = URL(urlString)\n            val connection = url.openConnection()\n            val inputStream = BufferedInputStream(connection.getInputStream())\n            return inputStream\n        }\n    }\n}\n```\n这里的思路比较清晰，首先实现 ImageGetter 类，返回一个我们自定义的 URLDrawable 对象。然后使用 AsyncTask 加载网络图片，加载完成后将图片设置到 URLDrawable 内部，并对 TextView 做一次重新赋值的操作，让其进行一次刷新来显示我们异步加载的图片。\n\n#### 6.\n在使用 Kotlin 的过程中如果还遵循 Java 的那套编码习惯，恐怕写出来的代码不比 Java 的简单到哪里去，既然使用了 Kotlin，就要将其特性都用上。\n\n首先要说的就是它自带的 lambda 表达式，用起来确实省事。就拿设置 Button 的响应事件来讲，java 的如下：\n\n```java\nbutton.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        // ...\n    }\n});\n```\n\n在 Kotlin 中：\n\n```kotlin\n button.setOnClickListener { \n        // ...\n}\n```\n\n是不是简单了很多，还有另外值得一提的就是我们要利用好 Kotlin 的 Extensions 这个特性，这样可以是代码更具可读性，下面举个简单的例子，比如我们通常使用的 SharedPreference 的时候有时候会忘记最后的 commit 或者 apply 操作。传统的代码写法如下：\n\n```java\nSharedPreferences sharedPreferences = getContext().getSharedPreferences(\"text\",Context.MODE_PRIVATE);\nsharedPreferences.edit().putBoolean(\"b1\",true).putString(\"str\",\"foo\").putLong(\"l1\",1L).apply();\n```\n\n但如果在 Kotlin 中结合了 Extensions 特性，则写法相当风骚。\n\n```kotlin\nval sharedPreference  = context.getSharedPreferences(\"test\",Context.MODE_PRIVATE)\nsharedPreference.save {\n    putBoolean(\"b1\",true)\n    putString(\"str1\",\"foo\")\n    putLong(\"l1\",1L)\n}\n```\n首先看这里，apply没有了，并且 putBoolean 这些操作前也没有了相应的对象。更神奇的是这里的 save 方法，SharedPreferences 应该没有这个方法的。其实这一切都是 Extensions 的功劳，我没看一下隐藏在上面代码背后的几行代码：\n\n```kotlin\n    fun SharedPreferences.save(func: SharedPreferences.Editor.()->Unit){\n        val edit = edit()\n        edit.func()\n        edit.apply()\n    }\n```\n\n上述代码首先给 SharedPreferences 扩展了一个 save 方法，然后在扩展方法里做了 Editor 的初始化和最后的 apply 工作。只要在项目中的一处地方给出定义，其他地方都能使用。是不是很方便？\n\n## 完成\n\n下面是 App 的部分截图，\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-6b41628dadbf72b1.webp)\n\n源码在我的github上，分别是 dclib 和 dcapp，我的 github 地址：[https://github.com/ZhangQinglian](https://github.com/ZhangQinglian)","source":"_posts/diy-code.md","raw":"---\ntitle: 聊聊给DiyCode写第三方App的事\ndate: 2017-6-12 19:11:44\ntags: android\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-6b41628dadbf72b1.webp\n---\n\n首先介绍一下`DiyCode`，它的地址是[https://www.diycode.cc/](https://www.diycode.cc/)，是一个**致力于构建开发工程师高端交流分享社区。**它的后台 API 是开放出来的，恰好有段时间我也想用 Kotlin 写一个 App 练练手，所以就有了接下来的事。\n<!-- more -->\n## 这事我到底行不行？\n\n在上家公司，Leader 总挂在嘴边的一句话是“是男人就别说不行”。话虽如此，但做一件事之前最好还是有一个自我评估，在给 DiyCode 写 App 这件事上需要评估的就是我所掌握的能否将所有需求都实现？但再一想，现在社区类的 App 比比皆是，技术上应该没啥问题，不懂就 Google 呗。\n\n## 我能做啥？\n\n我能做啥？这个还需要看 API 给我们提供了哪些接口，API 地址如下 [https://www.diycode.cc/api](https://www.diycode.cc/api)。大体能做的我整理了下：\n\n- 用户登录\n- 话题的创建、查询、点赞、收藏、关注、回复\n- 通知的查询、读取\n- 对用户的相关操作如：关注用户、查看我关注的用户和被关注的用户等\n- 项目、News的创建、查询、回复等\n\n可以说绝大部分功能对应的 API 都有了，这时候心里就要有点数了，我的 App 要去实现哪些功能\n\n## 我想做啥？\n\n在知道了 API 给的接口后，就需要选定一些在 APP 中需要实现的功能，以下是我的选择：\n\n- 登录、退出\n- 主题的查看、回复、收藏、点赞和关注\n- 查看用户个人资料\n- 查看通知\n- 个人中心、我关注的人、关注我的人、我收藏的文章\n\n## 步步为营，有坑填坑\n\n### 私有信息对公屏蔽\n\n由于用户的登录需要 client\\_id 和 client\\_secret来申请token，如果把这两个信息直接放入源码中，那会引来熊孩子的搞破坏，所以这里选择一个比较大众的放发，就是将这两个信息放在 local.properties 文件中，.gitignore 通常会忽略这个文件。接着在 build.gradle 的 defaultConfig 块中加入如下配置：\n\n``` groovy\nbuildConfigField \"String\",\"CLIENT_ID\",\"\\\"\" + properties.get(\"client_id\",\"null\") + \"\\\"\"\nbuildConfigField \"String\",\"CLIENT_SECRET\",\"\\\"\" + properties.get(\"client_secret\",\"null\") + \"\\\"\"\n```\n\n然后就可以在项目中使用 BuildConfig 这个动态生成的类来访问这两个变量了，不用担心提交 Github 的时候会把一些私有信息提交上去。\n\n### UI 该如何设计？\n\n作为一名 Android 程序员，如果想自己画交互设计出 UI 设计文档，那此人也算神人了。根据我的经验，作为一名程序员在 UI 设计上别太有自己的想法，80%肯定都是不符合设计规范的。所以呢，还是要参考一些其他设计规范。好在 Google 自 Android 5.0 就推出了 Material Design 的设计规范并给出了相应的 Android 组件，我们大可从简，遵循少即是多的原则来设计 App 的 UI。\n\n我个人比较欣赏 Bilibili 客户端和知乎等客户端，打开 App，浓浓的 Material Design 设计味道那是深得我心。不废话，说白了就是程序猿好好写代码，UI 参考一些现成的规范即可。\n\n### App 架构\n\n此处说架构有些装逼了，其实就是怎么分层。目前流行的分层方法无外乎那几种，只要挑选自己觉得可以的就行。在这个 App 中我的选择是 MVP。\n\n### 开源框架的选择\n\n下面我简单列举一下在这个 App 中用到的开源开源框架：\n\n- [CircleImageView](https://github.com/hdodenhof/CircleImageView) : 圆形 ImageView\n- [Picasso](https://github.com/square/picasso) : 图片下载及缓存\n- [OkHttp](https://github.com/square/okhttp) : Http Client\n- [MarkdownView](https://github.com/tiagohm/MarkdownView) : 用于显示 MarkDown 的视图\n- [MaterialTextField](https://github.com/florent37/MaterialTextField) : 登录用的输入框\n- [PhotoView](https://github.com/chrisbanes/PhotoView) : 显示图片，可手势放大缩小\n- [Dexter](https://github.com/Karumi/Dexter) : Runtime Permission 相关\n- [Retrofit](https://github.com/square/retrofit) : Http Client\n\n大概就是这些个，如有新的后续补充。\n\n### 其他技术\n\n这个 App 代码部分用 Kotlin 完成，视图的数据填充使用 Databinding 。\n\n### 坑\n\n#### 1.\n由于使用了 Kotlin，直接使用 Databinding 会出错，需要在 build.gradle 中添加依赖：\n\n```groovy\nkapt \"com.android.databinding:compiler:2.3.3\"\n```\n\n以及插件：\n\n```groovy\napply plugin: 'kotlin-kapt'\n```\n\n只有这样 Databinding 才能正常工作。\n\n#### 2.\n在使用 Retrofit 和 converter-gson 配合获取数据时，对应的实体类应该定义成如下样子：\n\n```kotlin\ndata class Token\n(\n        @SerializedName(\"access_token\") val accessToken: String,\n        @SerializedName(\"token_type\") val tokenType: String,\n        @SerializedName(\"expires_in\") val expiresIn: String,\n        @SerializedName(\"refresh_token\") val refreshToken: String,\n        @SerializedName(\"created_at\") val createdAt: String\n)\n```\n\n使用 kotlin 的数据类保存数据应该是十分明智的选择，应为就只凭它重写的 toString 方法来输出所有字段就大大降低了我在调试时候的工作量。\n\n#### 3.\n由于此 App 涉及到用户登录的问题，那就肯定会涉及到请求中添加 token 信息的问题，这里应为用的是 Retrofit ，由于它底下用的也是 Okhttp，所以就自然可以选择 OkHttp 的拦截器 Interceptor。\n\n```kotlin\nvar interceptor: Interceptor = object : Interceptor {\n    override fun intercept(chain: Interceptor.Chain?): Response {\n        var originRequest = chain!!.request()\n        if (originRequest.url().toString().contains(DiyCodeContract.kOAuthUrl)) {\n              return chain.proceed(originRequest)\n        }\n\n        if (originRequest.headers()[\"Authorization\"] != null) {\n            return chain.proceed(originRequest)\n        }\n\n        if (mCallback!!.getToken() == null || mCallback!!.getToken()?.length == 0) {\n            return chain.proceed(originRequest)\n        }\n\n        var newRequest = originRequest.\n                newBuilder().\n                addHeader(\"Authorization\", \"Bearer \" + mCallback!!.getToken()).\n                build()\n        return chain.proceed(newRequest)\n    }\n\n}\n\nvar okHttpClient: OkHttpClient = OkHttpClient.Builder().addInterceptor(interceptor).build()\n\nval retrofit = Retrofit.Builder()\n        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())\n        .addConverterFactory(GsonConverterFactory.create())\n        .baseUrl(DiyCodeContract.kDiyCodeApi)\n        .client(okHttpClient)\n        .build()\n```\n\n#### 4.\nMarkdown 正文中的图片，连接的点击问题，这个问题其实比较简单，应为在使用的开源框架 MarkdownView 中就提供了如下接口：\n\n```kotlin\n    public interface OnElementListener {\n        void onButtonTap(String var1);\n\n        void onCodeTap(String var1, String var2);\n\n        void onHeadingTap(int var1, String var2);\n\n        void onImageTap(String var1, int var2, int var3);\n\n        void onLinkTap(String var1, String var2);\n\n        void onKeystrokeTap(String var1);\n\n        void onMarkTap(String var1);\n    }\n```\n\n图片的单独显示，连接的跳转都可以在此处做处理。\n\n#### 5.\n这里有个略微复杂的问题，由于在话题详情页下方会有评论列表，返回的评论数据有两种格式，markdown 和 html，本来我想有 markdown 不就足够了吗？评论同样采用 MarkdownView ，分分钟搞定。但万万没想到，这个 MarkdownView 是继承自 WebView，试想一下，一个列表里全是 WebView 在那滑动，界面会卡成啥样。\n所以只能退而求其次选择使用 TextView 来显示 html。此方法本来也不难，一句话就搞定了，\n\n```kotlin\nbinding.markdownView.text = Html.fromHtml(topicReply.bodyHtml)\n```\n但问题来了，有些评论里带链接，有些是@他人的，有些是带图片的，这里的三个元素都需要做处理。链接如果是指向某一个话题的，应该直接在应用内跳转到该话题而不是用浏览器打开对应页面。点@他人的文字，应该跳转到被@人的个人资料页。点击图片可以进入图片查看页，进行方法和缩小。\n\n这里的前两个问题都可以使用 ClickableSpan 进行处理，而 TextView 显示图片本身就是一个问题，上面的 Html.fromHtml 其实还提供了一个接口：\n\n```kotlin\n public static Spanned fromHtml(String source, int flags, Html.ImageGetter imageGetter, Html.TagHandler tagHandler) \n```\n\n注意这里的 ImageGetter，使用它就能 html 中的 <img> 标签进行处理。\n\n```kotlin\n   public interface ImageGetter {\n        Drawable getDrawable(String var1);\n    }\n```\n\n但这个接口怎么看也是一个同步的方法，而加载网络图片大家都知道这是一个异步的操作，所以我们还要做一下进一步的继承和封装处理：\n\n```kotlin\nclass URLDrawable : BitmapDrawable() {\n    var drawable: Drawable? = null\n\n    override fun draw(canvas: Canvas) {\n        if (drawable != null) {\n            drawable!!.draw(canvas)\n        }\n    }\n}\n\nclass URLImageParser(internal var container: View, internal var c: Context) : ImageGetter {\n\n    override fun getDrawable(source: String): Drawable {\n        val urlDrawable = URLDrawable()\n\n        val asyncTask = ImageGetterAsyncTask(urlDrawable)\n\n        asyncTask.execute(source)\n\n        return urlDrawable\n    }\n\n    inner class ImageGetterAsyncTask(internal var urlDrawable: URLDrawable) : AsyncTask<String, Void, Drawable>() {\n\n        override fun doInBackground(vararg params: String): Drawable? {\n            val source = params[0]\n            return fetchDrawable(source)\n        }\n\n        override fun onPostExecute(result: Drawable?) {\n            if(result == null) return\n            urlDrawable.setBounds(0, 0, 0 + result.intrinsicWidth, 0 + result.intrinsicHeight)\n\n            urlDrawable.drawable = result\n\n            val textview = this@URLImageParser.container as TextView\n            textview.text = textview.text\n        }\n\n        fun fetchDrawable(urlString: String): Drawable? {\n            try {\n                val `is` = fetch(urlString)\n                val drawable = Drawable.createFromStream(`is`, \"src\")\n                drawable.setBounds(0, 0, 0 + drawable.intrinsicWidth, 0 + drawable.intrinsicHeight)\n                return drawable\n            } catch (e: Exception) {\n                return null\n            }\n\n        }\n\n        @Throws(MalformedURLException::class, IOException::class)\n        private fun fetch(urlString: String): InputStream {\n            val url = URL(urlString)\n            val connection = url.openConnection()\n            val inputStream = BufferedInputStream(connection.getInputStream())\n            return inputStream\n        }\n    }\n}\n```\n这里的思路比较清晰，首先实现 ImageGetter 类，返回一个我们自定义的 URLDrawable 对象。然后使用 AsyncTask 加载网络图片，加载完成后将图片设置到 URLDrawable 内部，并对 TextView 做一次重新赋值的操作，让其进行一次刷新来显示我们异步加载的图片。\n\n#### 6.\n在使用 Kotlin 的过程中如果还遵循 Java 的那套编码习惯，恐怕写出来的代码不比 Java 的简单到哪里去，既然使用了 Kotlin，就要将其特性都用上。\n\n首先要说的就是它自带的 lambda 表达式，用起来确实省事。就拿设置 Button 的响应事件来讲，java 的如下：\n\n```java\nbutton.setOnClickListener(new View.OnClickListener() {\n    @Override\n    public void onClick(View v) {\n        // ...\n    }\n});\n```\n\n在 Kotlin 中：\n\n```kotlin\n button.setOnClickListener { \n        // ...\n}\n```\n\n是不是简单了很多，还有另外值得一提的就是我们要利用好 Kotlin 的 Extensions 这个特性，这样可以是代码更具可读性，下面举个简单的例子，比如我们通常使用的 SharedPreference 的时候有时候会忘记最后的 commit 或者 apply 操作。传统的代码写法如下：\n\n```java\nSharedPreferences sharedPreferences = getContext().getSharedPreferences(\"text\",Context.MODE_PRIVATE);\nsharedPreferences.edit().putBoolean(\"b1\",true).putString(\"str\",\"foo\").putLong(\"l1\",1L).apply();\n```\n\n但如果在 Kotlin 中结合了 Extensions 特性，则写法相当风骚。\n\n```kotlin\nval sharedPreference  = context.getSharedPreferences(\"test\",Context.MODE_PRIVATE)\nsharedPreference.save {\n    putBoolean(\"b1\",true)\n    putString(\"str1\",\"foo\")\n    putLong(\"l1\",1L)\n}\n```\n首先看这里，apply没有了，并且 putBoolean 这些操作前也没有了相应的对象。更神奇的是这里的 save 方法，SharedPreferences 应该没有这个方法的。其实这一切都是 Extensions 的功劳，我没看一下隐藏在上面代码背后的几行代码：\n\n```kotlin\n    fun SharedPreferences.save(func: SharedPreferences.Editor.()->Unit){\n        val edit = edit()\n        edit.func()\n        edit.apply()\n    }\n```\n\n上述代码首先给 SharedPreferences 扩展了一个 save 方法，然后在扩展方法里做了 Editor 的初始化和最后的 apply 工作。只要在项目中的一处地方给出定义，其他地方都能使用。是不是很方便？\n\n## 完成\n\n下面是 App 的部分截图，\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-6b41628dadbf72b1.webp)\n\n源码在我的github上，分别是 dclib 和 dcapp，我的 github 地址：[https://github.com/ZhangQinglian](https://github.com/ZhangQinglian)","slug":"diy-code","published":1,"updated":"2024-08-21T03:16:19.783Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vt00105p6td87k4i7a","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>首先介绍一下<code>DiyCode</code>，它的地址是<a href=\"https://www.diycode.cc/\">https://www.diycode.cc/</a>，是一个<strong>致力于构建开发工程师高端交流分享社区。</strong>它的后台 API 是开放出来的，恰好有段时间我也想用 Kotlin 写一个 App 练练手，所以就有了接下来的事。</p>\n<span id=\"more\"></span>\n<h2 id=\"这事我到底行不行？\"><a href=\"#这事我到底行不行？\" class=\"headerlink\" title=\"这事我到底行不行？\"></a>这事我到底行不行？</h2><p>在上家公司，Leader 总挂在嘴边的一句话是“是男人就别说不行”。话虽如此，但做一件事之前最好还是有一个自我评估，在给 DiyCode 写 App 这件事上需要评估的就是我所掌握的能否将所有需求都实现？但再一想，现在社区类的 App 比比皆是，技术上应该没啥问题，不懂就 Google 呗。</p>\n<h2 id=\"我能做啥？\"><a href=\"#我能做啥？\" class=\"headerlink\" title=\"我能做啥？\"></a>我能做啥？</h2><p>我能做啥？这个还需要看 API 给我们提供了哪些接口，API 地址如下 <a href=\"https://www.diycode.cc/api\">https://www.diycode.cc/api</a>。大体能做的我整理了下：</p>\n<ul>\n<li>用户登录</li>\n<li>话题的创建、查询、点赞、收藏、关注、回复</li>\n<li>通知的查询、读取</li>\n<li>对用户的相关操作如：关注用户、查看我关注的用户和被关注的用户等</li>\n<li>项目、News的创建、查询、回复等</li>\n</ul>\n<p>可以说绝大部分功能对应的 API 都有了，这时候心里就要有点数了，我的 App 要去实现哪些功能</p>\n<h2 id=\"我想做啥？\"><a href=\"#我想做啥？\" class=\"headerlink\" title=\"我想做啥？\"></a>我想做啥？</h2><p>在知道了 API 给的接口后，就需要选定一些在 APP 中需要实现的功能，以下是我的选择：</p>\n<ul>\n<li>登录、退出</li>\n<li>主题的查看、回复、收藏、点赞和关注</li>\n<li>查看用户个人资料</li>\n<li>查看通知</li>\n<li>个人中心、我关注的人、关注我的人、我收藏的文章</li>\n</ul>\n<h2 id=\"步步为营，有坑填坑\"><a href=\"#步步为营，有坑填坑\" class=\"headerlink\" title=\"步步为营，有坑填坑\"></a>步步为营，有坑填坑</h2><h3 id=\"私有信息对公屏蔽\"><a href=\"#私有信息对公屏蔽\" class=\"headerlink\" title=\"私有信息对公屏蔽\"></a>私有信息对公屏蔽</h3><p>由于用户的登录需要 client_id 和 client_secret来申请token，如果把这两个信息直接放入源码中，那会引来熊孩子的搞破坏，所以这里选择一个比较大众的放发，就是将这两个信息放在 local.properties 文件中，.gitignore 通常会忽略这个文件。接着在 build.gradle 的 defaultConfig 块中加入如下配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildConfigField <span class=\"string\">&quot;String&quot;</span>,<span class=\"string\">&quot;CLIENT_ID&quot;</span>,<span class=\"string\">&quot;\\&quot;&quot;</span> + properties.get(<span class=\"string\">&quot;client_id&quot;</span>,<span class=\"string\">&quot;null&quot;</span>) + <span class=\"string\">&quot;\\&quot;&quot;</span></span><br><span class=\"line\">buildConfigField <span class=\"string\">&quot;String&quot;</span>,<span class=\"string\">&quot;CLIENT_SECRET&quot;</span>,<span class=\"string\">&quot;\\&quot;&quot;</span> + properties.get(<span class=\"string\">&quot;client_secret&quot;</span>,<span class=\"string\">&quot;null&quot;</span>) + <span class=\"string\">&quot;\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在项目中使用 BuildConfig 这个动态生成的类来访问这两个变量了，不用担心提交 Github 的时候会把一些私有信息提交上去。</p>\n<h3 id=\"UI-该如何设计？\"><a href=\"#UI-该如何设计？\" class=\"headerlink\" title=\"UI 该如何设计？\"></a>UI 该如何设计？</h3><p>作为一名 Android 程序员，如果想自己画交互设计出 UI 设计文档，那此人也算神人了。根据我的经验，作为一名程序员在 UI 设计上别太有自己的想法，80%肯定都是不符合设计规范的。所以呢，还是要参考一些其他设计规范。好在 Google 自 Android 5.0 就推出了 Material Design 的设计规范并给出了相应的 Android 组件，我们大可从简，遵循少即是多的原则来设计 App 的 UI。</p>\n<p>我个人比较欣赏 Bilibili 客户端和知乎等客户端，打开 App，浓浓的 Material Design 设计味道那是深得我心。不废话，说白了就是程序猿好好写代码，UI 参考一些现成的规范即可。</p>\n<h3 id=\"App-架构\"><a href=\"#App-架构\" class=\"headerlink\" title=\"App 架构\"></a>App 架构</h3><p>此处说架构有些装逼了，其实就是怎么分层。目前流行的分层方法无外乎那几种，只要挑选自己觉得可以的就行。在这个 App 中我的选择是 MVP。</p>\n<h3 id=\"开源框架的选择\"><a href=\"#开源框架的选择\" class=\"headerlink\" title=\"开源框架的选择\"></a>开源框架的选择</h3><p>下面我简单列举一下在这个 App 中用到的开源开源框架：</p>\n<ul>\n<li><a href=\"https://github.com/hdodenhof/CircleImageView\">CircleImageView</a> : 圆形 ImageView</li>\n<li><a href=\"https://github.com/square/picasso\">Picasso</a> : 图片下载及缓存</li>\n<li><a href=\"https://github.com/square/okhttp\">OkHttp</a> : Http Client</li>\n<li><a href=\"https://github.com/tiagohm/MarkdownView\">MarkdownView</a> : 用于显示 MarkDown 的视图</li>\n<li><a href=\"https://github.com/florent37/MaterialTextField\">MaterialTextField</a> : 登录用的输入框</li>\n<li><a href=\"https://github.com/chrisbanes/PhotoView\">PhotoView</a> : 显示图片，可手势放大缩小</li>\n<li><a href=\"https://github.com/Karumi/Dexter\">Dexter</a> : Runtime Permission 相关</li>\n<li><a href=\"https://github.com/square/retrofit\">Retrofit</a> : Http Client</li>\n</ul>\n<p>大概就是这些个，如有新的后续补充。</p>\n<h3 id=\"其他技术\"><a href=\"#其他技术\" class=\"headerlink\" title=\"其他技术\"></a>其他技术</h3><p>这个 App 代码部分用 Kotlin 完成，视图的数据填充使用 Databinding 。</p>\n<h3 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>由于使用了 Kotlin，直接使用 Databinding 会出错，需要在 build.gradle 中添加依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kapt <span class=\"string\">&quot;com.android.databinding:compiler:2.3.3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>以及插件：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;kotlin-kapt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>只有这样 Databinding 才能正常工作。</p>\n<h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>在使用 Retrofit 和 converter-gson 配合获取数据时，对应的实体类应该定义成如下样子：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Token</span></span><br><span class=\"line\">(</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;access_token&quot;</span>)</span> <span class=\"keyword\">val</span> accessToken: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;token_type&quot;</span>)</span> <span class=\"keyword\">val</span> tokenType: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;expires_in&quot;</span>)</span> <span class=\"keyword\">val</span> expiresIn: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;refresh_token&quot;</span>)</span> <span class=\"keyword\">val</span> refreshToken: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;created_at&quot;</span>)</span> <span class=\"keyword\">val</span> createdAt: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>使用 kotlin 的数据类保存数据应该是十分明智的选择，应为就只凭它重写的 toString 方法来输出所有字段就大大降低了我在调试时候的工作量。</p>\n<h4 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h4><p>由于此 App 涉及到用户登录的问题，那就肯定会涉及到请求中添加 token 信息的问题，这里应为用的是 Retrofit ，由于它底下用的也是 Okhttp，所以就自然可以选择 OkHttp 的拦截器 Interceptor。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> interceptor: Interceptor = <span class=\"keyword\">object</span> : Interceptor &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">intercept</span><span class=\"params\">(chain: <span class=\"type\">Interceptor</span>.<span class=\"type\">Chain</span>?)</span></span>: Response &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> originRequest = chain!!.request()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originRequest.url().toString().contains(DiyCodeContract.kOAuthUrl)) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> chain.proceed(originRequest)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originRequest.headers()[<span class=\"string\">&quot;Authorization&quot;</span>] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.proceed(originRequest)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCallback!!.getToken() == <span class=\"literal\">null</span> || mCallback!!.getToken()?.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.proceed(originRequest)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> newRequest = originRequest.</span><br><span class=\"line\">                newBuilder().</span><br><span class=\"line\">                addHeader(<span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;Bearer &quot;</span> + mCallback!!.getToken()).</span><br><span class=\"line\">                build()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.proceed(newRequest)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> okHttpClient: OkHttpClient = OkHttpClient.Builder().addInterceptor(interceptor).build()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> retrofit = Retrofit.Builder()</span><br><span class=\"line\">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">        .baseUrl(DiyCodeContract.kDiyCodeApi)</span><br><span class=\"line\">        .client(okHttpClient)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>Markdown 正文中的图片，连接的点击问题，这个问题其实比较简单，应为在使用的开源框架 MarkdownView 中就提供了如下接口：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnElementListener</span> &#123;</span><br><span class=\"line\">    void onButtonTap(String var1);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onCodeTap(String var1, String var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onHeadingTap(int var1, String var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onImageTap(String var1, int var2, int var3);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onLinkTap(String var1, String var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onKeystrokeTap(String var1);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onMarkTap(String var1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图片的单独显示，连接的跳转都可以在此处做处理。</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>这里有个略微复杂的问题，由于在话题详情页下方会有评论列表，返回的评论数据有两种格式，markdown 和 html，本来我想有 markdown 不就足够了吗？评论同样采用 MarkdownView ，分分钟搞定。但万万没想到，这个 MarkdownView 是继承自 WebView，试想一下，一个列表里全是 WebView 在那滑动，界面会卡成啥样。<br>所以只能退而求其次选择使用 TextView 来显示 html。此方法本来也不难，一句话就搞定了，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.markdownView.text = Html.fromHtml(topicReply.bodyHtml)</span><br></pre></td></tr></table></figure>\n<p>但问题来了，有些评论里带链接，有些是@他人的，有些是带图片的，这里的三个元素都需要做处理。链接如果是指向某一个话题的，应该直接在应用内跳转到该话题而不是用浏览器打开对应页面。点@他人的文字，应该跳转到被@人的个人资料页。点击图片可以进入图片查看页，进行方法和缩小。</p>\n<p>这里的前两个问题都可以使用 ClickableSpan 进行处理，而 TextView 显示图片本身就是一个问题，上面的 Html.fromHtml 其实还提供了一个接口：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> static Spanned fromHtml(String source, int flags, Html.ImageGetter imageGetter, Html.TagHandler tagHandler) </span><br></pre></td></tr></table></figure>\n\n<p>注意这里的 ImageGetter，使用它就能 html 中的 <img> 标签进行处理。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ImageGetter</span> &#123;</span><br><span class=\"line\">     Drawable getDrawable(String var1);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但这个接口怎么看也是一个同步的方法，而加载网络图片大家都知道这是一个异步的操作，所以我们还要做一下进一步的继承和封装处理：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">URLDrawable</span> : <span class=\"type\">BitmapDrawable</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> drawable: Drawable? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">draw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (drawable != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            drawable!!.draw(canvas)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">URLImageParser</span>(<span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> container: View, <span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> c: Context) : ImageGetter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getDrawable</span><span class=\"params\">(source: <span class=\"type\">String</span>)</span></span>: Drawable &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> urlDrawable = URLDrawable()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> asyncTask = ImageGetterAsyncTask(urlDrawable)</span><br><span class=\"line\"></span><br><span class=\"line\">        asyncTask.execute(source)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> urlDrawable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageGetterAsyncTask</span>(<span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> urlDrawable: URLDrawable) : AsyncTask&lt;String, <span class=\"built_in\">Void</span>, Drawable&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doInBackground</span><span class=\"params\">(<span class=\"keyword\">vararg</span> params: <span class=\"type\">String</span>)</span></span>: Drawable? &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> source = params[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fetchDrawable(source)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(result: <span class=\"type\">Drawable</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            urlDrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> + result.intrinsicWidth, <span class=\"number\">0</span> + result.intrinsicHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">            urlDrawable.drawable = result</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">val</span> textview = <span class=\"keyword\">this</span><span class=\"symbol\">@URLImageParser</span>.container <span class=\"keyword\">as</span> TextView</span><br><span class=\"line\">            textview.text = textview.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchDrawable</span><span class=\"params\">(urlString: <span class=\"type\">String</span>)</span></span>: Drawable? &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> `<span class=\"keyword\">is</span>` = fetch(urlString)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> drawable = Drawable.createFromStream(`<span class=\"keyword\">is</span>`, <span class=\"string\">&quot;src&quot;</span>)</span><br><span class=\"line\">                drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> + drawable.intrinsicWidth, <span class=\"number\">0</span> + drawable.intrinsicHeight)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> drawable</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Throws(MalformedURLException::class, IOException::class)</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetch</span><span class=\"params\">(urlString: <span class=\"type\">String</span>)</span></span>: InputStream &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> url = URL(urlString)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> connection = url.openConnection()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> inputStream = BufferedInputStream(connection.getInputStream())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> inputStream</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的思路比较清晰，首先实现 ImageGetter 类，返回一个我们自定义的 URLDrawable 对象。然后使用 AsyncTask 加载网络图片，加载完成后将图片设置到 URLDrawable 内部，并对 TextView 做一次重新赋值的操作，让其进行一次刷新来显示我们异步加载的图片。</p>\n<h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><p>在使用 Kotlin 的过程中如果还遵循 Java 的那套编码习惯，恐怕写出来的代码不比 Java 的简单到哪里去，既然使用了 Kotlin，就要将其特性都用上。</p>\n<p>首先要说的就是它自带的 lambda 表达式，用起来确实省事。就拿设置 Button 的响应事件来讲，java 的如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View v)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在 Kotlin 中：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> button.setOnClickListener &#123; </span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>是不是简单了很多，还有另外值得一提的就是我们要利用好 Kotlin 的 Extensions 这个特性，这样可以是代码更具可读性，下面举个简单的例子，比如我们通常使用的 SharedPreference 的时候有时候会忘记最后的 commit 或者 apply 操作。传统的代码写法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SharedPreferences</span> <span class=\"variable\">sharedPreferences</span> <span class=\"operator\">=</span> getContext().getSharedPreferences(<span class=\"string\">&quot;text&quot;</span>,Context.MODE_PRIVATE);</span><br><span class=\"line\">sharedPreferences.edit().putBoolean(<span class=\"string\">&quot;b1&quot;</span>,<span class=\"literal\">true</span>).putString(<span class=\"string\">&quot;str&quot;</span>,<span class=\"string\">&quot;foo&quot;</span>).putLong(<span class=\"string\">&quot;l1&quot;</span>,<span class=\"number\">1L</span>).apply();</span><br></pre></td></tr></table></figure>\n\n<p>但如果在 Kotlin 中结合了 Extensions 特性，则写法相当风骚。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedPreference  = context.getSharedPreferences(<span class=\"string\">&quot;test&quot;</span>,Context.MODE_PRIVATE)</span><br><span class=\"line\">sharedPreference.save &#123;</span><br><span class=\"line\">    putBoolean(<span class=\"string\">&quot;b1&quot;</span>,<span class=\"literal\">true</span>)</span><br><span class=\"line\">    putString(<span class=\"string\">&quot;str1&quot;</span>,<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    putLong(<span class=\"string\">&quot;l1&quot;</span>,<span class=\"number\">1L</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先看这里，apply没有了，并且 putBoolean 这些操作前也没有了相应的对象。更神奇的是这里的 save 方法，SharedPreferences 应该没有这个方法的。其实这一切都是 Extensions 的功劳，我没看一下隐藏在上面代码背后的几行代码：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> SharedPreferences.<span class=\"title\">save</span><span class=\"params\">(func: <span class=\"type\">SharedPreferences</span>.<span class=\"type\">Editor</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> edit = edit()</span><br><span class=\"line\">    edit.func()</span><br><span class=\"line\">    edit.apply()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码首先给 SharedPreferences 扩展了一个 save 方法，然后在扩展方法里做了 Editor 的初始化和最后的 apply 工作。只要在项目中的一处地方给出定义，其他地方都能使用。是不是很方便？</p>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>下面是 App 的部分截图，</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-6b41628dadbf72b1.webp\" alt=\"image\"></p>\n<p>源码在我的github上，分别是 dclib 和 dcapp，我的 github 地址：<a href=\"https://github.com/ZhangQinglian\">https://github.com/ZhangQinglian</a></p>\n","excerpt":"<p>首先介绍一下<code>DiyCode</code>，它的地址是<a href=\"https://www.diycode.cc/\">https://www.diycode.cc/</a>，是一个<strong>致力于构建开发工程师高端交流分享社区。</strong>它的后台 API 是开放出来的，恰好有段时间我也想用 Kotlin 写一个 App 练练手，所以就有了接下来的事。</p>","more":"<h2 id=\"这事我到底行不行？\"><a href=\"#这事我到底行不行？\" class=\"headerlink\" title=\"这事我到底行不行？\"></a>这事我到底行不行？</h2><p>在上家公司，Leader 总挂在嘴边的一句话是“是男人就别说不行”。话虽如此，但做一件事之前最好还是有一个自我评估，在给 DiyCode 写 App 这件事上需要评估的就是我所掌握的能否将所有需求都实现？但再一想，现在社区类的 App 比比皆是，技术上应该没啥问题，不懂就 Google 呗。</p>\n<h2 id=\"我能做啥？\"><a href=\"#我能做啥？\" class=\"headerlink\" title=\"我能做啥？\"></a>我能做啥？</h2><p>我能做啥？这个还需要看 API 给我们提供了哪些接口，API 地址如下 <a href=\"https://www.diycode.cc/api\">https://www.diycode.cc/api</a>。大体能做的我整理了下：</p>\n<ul>\n<li>用户登录</li>\n<li>话题的创建、查询、点赞、收藏、关注、回复</li>\n<li>通知的查询、读取</li>\n<li>对用户的相关操作如：关注用户、查看我关注的用户和被关注的用户等</li>\n<li>项目、News的创建、查询、回复等</li>\n</ul>\n<p>可以说绝大部分功能对应的 API 都有了，这时候心里就要有点数了，我的 App 要去实现哪些功能</p>\n<h2 id=\"我想做啥？\"><a href=\"#我想做啥？\" class=\"headerlink\" title=\"我想做啥？\"></a>我想做啥？</h2><p>在知道了 API 给的接口后，就需要选定一些在 APP 中需要实现的功能，以下是我的选择：</p>\n<ul>\n<li>登录、退出</li>\n<li>主题的查看、回复、收藏、点赞和关注</li>\n<li>查看用户个人资料</li>\n<li>查看通知</li>\n<li>个人中心、我关注的人、关注我的人、我收藏的文章</li>\n</ul>\n<h2 id=\"步步为营，有坑填坑\"><a href=\"#步步为营，有坑填坑\" class=\"headerlink\" title=\"步步为营，有坑填坑\"></a>步步为营，有坑填坑</h2><h3 id=\"私有信息对公屏蔽\"><a href=\"#私有信息对公屏蔽\" class=\"headerlink\" title=\"私有信息对公屏蔽\"></a>私有信息对公屏蔽</h3><p>由于用户的登录需要 client_id 和 client_secret来申请token，如果把这两个信息直接放入源码中，那会引来熊孩子的搞破坏，所以这里选择一个比较大众的放发，就是将这两个信息放在 local.properties 文件中，.gitignore 通常会忽略这个文件。接着在 build.gradle 的 defaultConfig 块中加入如下配置：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">buildConfigField <span class=\"string\">&quot;String&quot;</span>,<span class=\"string\">&quot;CLIENT_ID&quot;</span>,<span class=\"string\">&quot;\\&quot;&quot;</span> + properties.get(<span class=\"string\">&quot;client_id&quot;</span>,<span class=\"string\">&quot;null&quot;</span>) + <span class=\"string\">&quot;\\&quot;&quot;</span></span><br><span class=\"line\">buildConfigField <span class=\"string\">&quot;String&quot;</span>,<span class=\"string\">&quot;CLIENT_SECRET&quot;</span>,<span class=\"string\">&quot;\\&quot;&quot;</span> + properties.get(<span class=\"string\">&quot;client_secret&quot;</span>,<span class=\"string\">&quot;null&quot;</span>) + <span class=\"string\">&quot;\\&quot;&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后就可以在项目中使用 BuildConfig 这个动态生成的类来访问这两个变量了，不用担心提交 Github 的时候会把一些私有信息提交上去。</p>\n<h3 id=\"UI-该如何设计？\"><a href=\"#UI-该如何设计？\" class=\"headerlink\" title=\"UI 该如何设计？\"></a>UI 该如何设计？</h3><p>作为一名 Android 程序员，如果想自己画交互设计出 UI 设计文档，那此人也算神人了。根据我的经验，作为一名程序员在 UI 设计上别太有自己的想法，80%肯定都是不符合设计规范的。所以呢，还是要参考一些其他设计规范。好在 Google 自 Android 5.0 就推出了 Material Design 的设计规范并给出了相应的 Android 组件，我们大可从简，遵循少即是多的原则来设计 App 的 UI。</p>\n<p>我个人比较欣赏 Bilibili 客户端和知乎等客户端，打开 App，浓浓的 Material Design 设计味道那是深得我心。不废话，说白了就是程序猿好好写代码，UI 参考一些现成的规范即可。</p>\n<h3 id=\"App-架构\"><a href=\"#App-架构\" class=\"headerlink\" title=\"App 架构\"></a>App 架构</h3><p>此处说架构有些装逼了，其实就是怎么分层。目前流行的分层方法无外乎那几种，只要挑选自己觉得可以的就行。在这个 App 中我的选择是 MVP。</p>\n<h3 id=\"开源框架的选择\"><a href=\"#开源框架的选择\" class=\"headerlink\" title=\"开源框架的选择\"></a>开源框架的选择</h3><p>下面我简单列举一下在这个 App 中用到的开源开源框架：</p>\n<ul>\n<li><a href=\"https://github.com/hdodenhof/CircleImageView\">CircleImageView</a> : 圆形 ImageView</li>\n<li><a href=\"https://github.com/square/picasso\">Picasso</a> : 图片下载及缓存</li>\n<li><a href=\"https://github.com/square/okhttp\">OkHttp</a> : Http Client</li>\n<li><a href=\"https://github.com/tiagohm/MarkdownView\">MarkdownView</a> : 用于显示 MarkDown 的视图</li>\n<li><a href=\"https://github.com/florent37/MaterialTextField\">MaterialTextField</a> : 登录用的输入框</li>\n<li><a href=\"https://github.com/chrisbanes/PhotoView\">PhotoView</a> : 显示图片，可手势放大缩小</li>\n<li><a href=\"https://github.com/Karumi/Dexter\">Dexter</a> : Runtime Permission 相关</li>\n<li><a href=\"https://github.com/square/retrofit\">Retrofit</a> : Http Client</li>\n</ul>\n<p>大概就是这些个，如有新的后续补充。</p>\n<h3 id=\"其他技术\"><a href=\"#其他技术\" class=\"headerlink\" title=\"其他技术\"></a>其他技术</h3><p>这个 App 代码部分用 Kotlin 完成，视图的数据填充使用 Databinding 。</p>\n<h3 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h3><h4 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1.\"></a>1.</h4><p>由于使用了 Kotlin，直接使用 Databinding 会出错，需要在 build.gradle 中添加依赖：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kapt <span class=\"string\">&quot;com.android.databinding:compiler:2.3.3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>以及插件：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"attr\">plugin:</span> <span class=\"string\">&#x27;kotlin-kapt&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>只有这样 Databinding 才能正常工作。</p>\n<h4 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2.\"></a>2.</h4><p>在使用 Retrofit 和 converter-gson 配合获取数据时，对应的实体类应该定义成如下样子：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Token</span></span><br><span class=\"line\">(</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;access_token&quot;</span>)</span> <span class=\"keyword\">val</span> accessToken: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;token_type&quot;</span>)</span> <span class=\"keyword\">val</span> tokenType: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;expires_in&quot;</span>)</span> <span class=\"keyword\">val</span> expiresIn: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;refresh_token&quot;</span>)</span> <span class=\"keyword\">val</span> refreshToken: String,</span><br><span class=\"line\">        <span class=\"meta\">@SerializedName(<span class=\"string\">&quot;created_at&quot;</span>)</span> <span class=\"keyword\">val</span> createdAt: String</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>使用 kotlin 的数据类保存数据应该是十分明智的选择，应为就只凭它重写的 toString 方法来输出所有字段就大大降低了我在调试时候的工作量。</p>\n<h4 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3.\"></a>3.</h4><p>由于此 App 涉及到用户登录的问题，那就肯定会涉及到请求中添加 token 信息的问题，这里应为用的是 Retrofit ，由于它底下用的也是 Okhttp，所以就自然可以选择 OkHttp 的拦截器 Interceptor。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> interceptor: Interceptor = <span class=\"keyword\">object</span> : Interceptor &#123;</span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">intercept</span><span class=\"params\">(chain: <span class=\"type\">Interceptor</span>.<span class=\"type\">Chain</span>?)</span></span>: Response &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> originRequest = chain!!.request()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originRequest.url().toString().contains(DiyCodeContract.kOAuthUrl)) &#123;</span><br><span class=\"line\">              <span class=\"keyword\">return</span> chain.proceed(originRequest)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (originRequest.headers()[<span class=\"string\">&quot;Authorization&quot;</span>] != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.proceed(originRequest)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mCallback!!.getToken() == <span class=\"literal\">null</span> || mCallback!!.getToken()?.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> chain.proceed(originRequest)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">var</span> newRequest = originRequest.</span><br><span class=\"line\">                newBuilder().</span><br><span class=\"line\">                addHeader(<span class=\"string\">&quot;Authorization&quot;</span>, <span class=\"string\">&quot;Bearer &quot;</span> + mCallback!!.getToken()).</span><br><span class=\"line\">                build()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> chain.proceed(newRequest)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> okHttpClient: OkHttpClient = OkHttpClient.Builder().addInterceptor(interceptor).build()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">val</span> retrofit = Retrofit.Builder()</span><br><span class=\"line\">        .addCallAdapterFactory(RxJava2CallAdapterFactory.create())</span><br><span class=\"line\">        .addConverterFactory(GsonConverterFactory.create())</span><br><span class=\"line\">        .baseUrl(DiyCodeContract.kDiyCodeApi)</span><br><span class=\"line\">        .client(okHttpClient)</span><br><span class=\"line\">        .build()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4\"><a href=\"#4\" class=\"headerlink\" title=\"4.\"></a>4.</h4><p>Markdown 正文中的图片，连接的点击问题，这个问题其实比较简单，应为在使用的开源框架 MarkdownView 中就提供了如下接口：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">OnElementListener</span> &#123;</span><br><span class=\"line\">    void onButtonTap(String var1);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onCodeTap(String var1, String var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onHeadingTap(int var1, String var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onImageTap(String var1, int var2, int var3);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onLinkTap(String var1, String var2);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onKeystrokeTap(String var1);</span><br><span class=\"line\"></span><br><span class=\"line\">    void onMarkTap(String var1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>图片的单独显示，连接的跳转都可以在此处做处理。</p>\n<h4 id=\"5\"><a href=\"#5\" class=\"headerlink\" title=\"5.\"></a>5.</h4><p>这里有个略微复杂的问题，由于在话题详情页下方会有评论列表，返回的评论数据有两种格式，markdown 和 html，本来我想有 markdown 不就足够了吗？评论同样采用 MarkdownView ，分分钟搞定。但万万没想到，这个 MarkdownView 是继承自 WebView，试想一下，一个列表里全是 WebView 在那滑动，界面会卡成啥样。<br>所以只能退而求其次选择使用 TextView 来显示 html。此方法本来也不难，一句话就搞定了，</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">binding.markdownView.text = Html.fromHtml(topicReply.bodyHtml)</span><br></pre></td></tr></table></figure>\n<p>但问题来了，有些评论里带链接，有些是@他人的，有些是带图片的，这里的三个元素都需要做处理。链接如果是指向某一个话题的，应该直接在应用内跳转到该话题而不是用浏览器打开对应页面。点@他人的文字，应该跳转到被@人的个人资料页。点击图片可以进入图片查看页，进行方法和缩小。</p>\n<p>这里的前两个问题都可以使用 ClickableSpan 进行处理，而 TextView 显示图片本身就是一个问题，上面的 Html.fromHtml 其实还提供了一个接口：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> static Spanned fromHtml(String source, int flags, Html.ImageGetter imageGetter, Html.TagHandler tagHandler) </span><br></pre></td></tr></table></figure>\n\n<p>注意这里的 ImageGetter，使用它就能 html 中的 <img> 标签进行处理。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">ImageGetter</span> &#123;</span><br><span class=\"line\">     Drawable getDrawable(String var1);</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>但这个接口怎么看也是一个同步的方法，而加载网络图片大家都知道这是一个异步的操作，所以我们还要做一下进一步的继承和封装处理：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">URLDrawable</span> : <span class=\"type\">BitmapDrawable</span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> drawable: Drawable? = <span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">draw</span><span class=\"params\">(canvas: <span class=\"type\">Canvas</span>)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (drawable != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            drawable!!.draw(canvas)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">URLImageParser</span>(<span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> container: View, <span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> c: Context) : ImageGetter &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getDrawable</span><span class=\"params\">(source: <span class=\"type\">String</span>)</span></span>: Drawable &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> urlDrawable = URLDrawable()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">val</span> asyncTask = ImageGetterAsyncTask(urlDrawable)</span><br><span class=\"line\"></span><br><span class=\"line\">        asyncTask.execute(source)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> urlDrawable</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">inner</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ImageGetterAsyncTask</span>(<span class=\"keyword\">internal</span> <span class=\"keyword\">var</span> urlDrawable: URLDrawable) : AsyncTask&lt;String, <span class=\"built_in\">Void</span>, Drawable&gt;() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">doInBackground</span><span class=\"params\">(<span class=\"keyword\">vararg</span> params: <span class=\"type\">String</span>)</span></span>: Drawable? &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> source = params[<span class=\"number\">0</span>]</span><br><span class=\"line\">            <span class=\"keyword\">return</span> fetchDrawable(source)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">override</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">onPostExecute</span><span class=\"params\">(result: <span class=\"type\">Drawable</span>?)</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(result == <span class=\"literal\">null</span>) <span class=\"keyword\">return</span></span><br><span class=\"line\">            urlDrawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> + result.intrinsicWidth, <span class=\"number\">0</span> + result.intrinsicHeight)</span><br><span class=\"line\"></span><br><span class=\"line\">            urlDrawable.drawable = result</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">val</span> textview = <span class=\"keyword\">this</span><span class=\"symbol\">@URLImageParser</span>.container <span class=\"keyword\">as</span> TextView</span><br><span class=\"line\">            textview.text = textview.text</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetchDrawable</span><span class=\"params\">(urlString: <span class=\"type\">String</span>)</span></span>: Drawable? &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">val</span> `<span class=\"keyword\">is</span>` = fetch(urlString)</span><br><span class=\"line\">                <span class=\"keyword\">val</span> drawable = Drawable.createFromStream(`<span class=\"keyword\">is</span>`, <span class=\"string\">&quot;src&quot;</span>)</span><br><span class=\"line\">                drawable.setBounds(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span> + drawable.intrinsicWidth, <span class=\"number\">0</span> + drawable.intrinsicHeight)</span><br><span class=\"line\">                <span class=\"keyword\">return</span> drawable</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (e: Exception) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">null</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"meta\">@Throws(MalformedURLException::class, IOException::class)</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">fetch</span><span class=\"params\">(urlString: <span class=\"type\">String</span>)</span></span>: InputStream &#123;</span><br><span class=\"line\">            <span class=\"keyword\">val</span> url = URL(urlString)</span><br><span class=\"line\">            <span class=\"keyword\">val</span> connection = url.openConnection()</span><br><span class=\"line\">            <span class=\"keyword\">val</span> inputStream = BufferedInputStream(connection.getInputStream())</span><br><span class=\"line\">            <span class=\"keyword\">return</span> inputStream</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里的思路比较清晰，首先实现 ImageGetter 类，返回一个我们自定义的 URLDrawable 对象。然后使用 AsyncTask 加载网络图片，加载完成后将图片设置到 URLDrawable 内部，并对 TextView 做一次重新赋值的操作，让其进行一次刷新来显示我们异步加载的图片。</p>\n<h4 id=\"6\"><a href=\"#6\" class=\"headerlink\" title=\"6.\"></a>6.</h4><p>在使用 Kotlin 的过程中如果还遵循 Java 的那套编码习惯，恐怕写出来的代码不比 Java 的简单到哪里去，既然使用了 Kotlin，就要将其特性都用上。</p>\n<p>首先要说的就是它自带的 lambda 表达式，用起来确实省事。就拿设置 Button 的响应事件来讲，java 的如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">button.setOnClickListener(<span class=\"keyword\">new</span> <span class=\"title class_\">View</span>.OnClickListener() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onClick</span><span class=\"params\">(View v)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在 Kotlin 中：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> button.setOnClickListener &#123; </span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>是不是简单了很多，还有另外值得一提的就是我们要利用好 Kotlin 的 Extensions 这个特性，这样可以是代码更具可读性，下面举个简单的例子，比如我们通常使用的 SharedPreference 的时候有时候会忘记最后的 commit 或者 apply 操作。传统的代码写法如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SharedPreferences</span> <span class=\"variable\">sharedPreferences</span> <span class=\"operator\">=</span> getContext().getSharedPreferences(<span class=\"string\">&quot;text&quot;</span>,Context.MODE_PRIVATE);</span><br><span class=\"line\">sharedPreferences.edit().putBoolean(<span class=\"string\">&quot;b1&quot;</span>,<span class=\"literal\">true</span>).putString(<span class=\"string\">&quot;str&quot;</span>,<span class=\"string\">&quot;foo&quot;</span>).putLong(<span class=\"string\">&quot;l1&quot;</span>,<span class=\"number\">1L</span>).apply();</span><br></pre></td></tr></table></figure>\n\n<p>但如果在 Kotlin 中结合了 Extensions 特性，则写法相当风骚。</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">val</span> sharedPreference  = context.getSharedPreferences(<span class=\"string\">&quot;test&quot;</span>,Context.MODE_PRIVATE)</span><br><span class=\"line\">sharedPreference.save &#123;</span><br><span class=\"line\">    putBoolean(<span class=\"string\">&quot;b1&quot;</span>,<span class=\"literal\">true</span>)</span><br><span class=\"line\">    putString(<span class=\"string\">&quot;str1&quot;</span>,<span class=\"string\">&quot;foo&quot;</span>)</span><br><span class=\"line\">    putLong(<span class=\"string\">&quot;l1&quot;</span>,<span class=\"number\">1L</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>首先看这里，apply没有了，并且 putBoolean 这些操作前也没有了相应的对象。更神奇的是这里的 save 方法，SharedPreferences 应该没有这个方法的。其实这一切都是 Extensions 的功劳，我没看一下隐藏在上面代码背后的几行代码：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">fun</span> SharedPreferences.<span class=\"title\">save</span><span class=\"params\">(func: <span class=\"type\">SharedPreferences</span>.<span class=\"type\">Editor</span>.()-&gt;<span class=\"type\">Unit</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">val</span> edit = edit()</span><br><span class=\"line\">    edit.func()</span><br><span class=\"line\">    edit.apply()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上述代码首先给 SharedPreferences 扩展了一个 save 方法，然后在扩展方法里做了 Editor 的初始化和最后的 apply 工作。只要在项目中的一处地方给出定义，其他地方都能使用。是不是很方便？</p>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>下面是 App 的部分截图，</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-6b41628dadbf72b1.webp\" alt=\"image\"></p>\n<p>源码在我的github上，分别是 dclib 和 dcapp，我的 github 地址：<a href=\"https://github.com/ZhangQinglian\">https://github.com/ZhangQinglian</a></p>"},{"title":"egl-1-4-quick-reference-card","date":"2021-01-21T14:29:58.000Z","_content":"\n![egl-1-4-quick-reference-card](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-1-4-quick-reference-card.png)","source":"_posts/egl-1-4-quick-reference-card.md","raw":"---\ntitle: egl-1-4-quick-reference-card\ndate: 2021-01-21 22:29:58\ntags: EGL\n---\n\n![egl-1-4-quick-reference-card](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-1-4-quick-reference-card.png)","slug":"egl-1-4-quick-reference-card","published":1,"updated":"2024-08-21T03:16:19.784Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vt00125p6tajzd4i0t","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-1-4-quick-reference-card.png\" alt=\"egl-1-4-quick-reference-card\"></p>\n","excerpt":"","more":"<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/opengl/egl-1-4-quick-reference-card.png\" alt=\"egl-1-4-quick-reference-card\"></p>\n"},{"title":"在 Flutter 中简单实现 LiveData","date":"2019-09-11T08:09:25.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/flutter_livedata.png","top":9,"_content":"\n# 在 Flutter 中简单实现 LiveData\n\n\n\n如果你是一名 Android 开发者，[LiveData](https://developer.android.com/topic/libraries/architecture/livedata) 一定不陌生 ，它和 [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel) 组合便可以构成简单的 MVVM 模式，而且是生命周期敏感的，不会造成不必要内存泄漏。\n\n那么在 Flutter 中是否也能使用到 LiveData 呢？很可惜，官方并没有给出相关 API。但是使用现有的官方 API 和第三方 API 还是可以简单实现的。\n\n首先我们总结下 LiveData 和 ViewModel 的几个特点：\n\n1. LiveData 可自动通知其上的观察者其值的改变。\n2. LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。\n3. ViewModel 用于业务逻辑和 UI 解耦，可复用。\n\n<!-- more -->\n\n## LiveData 实现\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass LiveData<T> with ChangeNotifier {\n  T _data;\n\n  T get value => _data;\n\n  set value(T data) {\n    _data = data;\n    notifyListeners();\n  }\n}\n```\n\n就是这么简单，一个 Flutter 版的 LiveData 已经实现了。\n\n### LiveDataWidget 实现\n\n仅仅使用 LiveData 还不够优雅，我们仍需手动调用 `setState` 方法去触发 Widget 刷新，接下来定义一个 LiveDataWidget 类，用于监听 LiveData 并自动更新其中的 Widget。\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nclass LiveDataWidget<T extends LiveData> extends StatelessWidget {\n  LiveDataWidget({Key key, @required this.data, @required this.builder})\n      : super(key: key);\n\n  final T data;\n\n  final Widget Function(BuildContext context, T value, Widget child) builder;\n\n  @override\n  Widget build(BuildContext context) {\n    return ChangeNotifierProvider<T>(\n      builder: (_) {\n        return data;\n      },\n      child: Consumer(builder: builder),\n    );\n  }\n}\n```\n\n这里使用到了 `provider` 中的 `ChangeNotifierProvider` 和 `Consumer`，这样一个简单的组合就能做到当 `data`发生变化，Consumer 就会重新构建其中的 Widget。\n\n## ViewModel 实现\n\n`ViewModel` 并没有固定的实现，可以在实际使用中自行定义。\n\n\n\n## Demo\n\n```dart\nimport 'package:bili_livedata/bili_livedata.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\n///使用 mixin 来定义一个ViewModel\nmixin HomePageViewModel {\n  /// 用于保存计数的 LiveData\n  final LiveData<int> counterLiveData = LiveData();\n\n  /// 调用此方法，会在 [counterLiveData] 值的基础上加 [add] 这个值\n  void counterAdd(int add) {\n    if (counterLiveData.value == null) {\n      counterLiveData.value = 0;\n    } else {\n      counterLiveData.value = counterLiveData.value + add;\n    }\n  }\n}\n\n// 使用 with 来并入 HomePageViewModel\nclass MyHomePage extends StatelessWidget with HomePageViewModel {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              'You have pushed the button this many times:',\n            ),\n            /// LiveDataWidget 的使用\n            LiveDataWidget<LiveData<int>>(\n                data: counterLiveData, // HomePageViewModel 中的 counterLiveData\n                builder: (context, value, _) {\n                  return Text(value.value.toString()); // 在 Text 上显示 counterLiveData 中的值。\n                }),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          counterAdd(2); // 调用 HomePageViewModel 中的 counterAdd 方法\n        },\n        tooltip: 'Increment',\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n\n```\n\n结合上面的代码再来回顾一下我们上面结合的三点：\n\n1. LiveData 可自动通知其上的观察者其值的改变。\n\n   **已实现** ，通过 ChangeNotifier 和 ChangeNotifierProvider 实现。\n\n2. LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。\n\n   **已实现**，ChangeNotifierProvider 内部会在 dispose 方法会去调用 ChangeNotifier 的 dispose 方法，所以当   页面销毁，ChangeNotifier（即 LiveData）上的监听者会被移除，不会造成内存泄漏。\n\n3. ViewModel 用于业务逻辑和 UI 解耦，可复用。\n\n   **已实现**，观察 HomePageViewModel，可以发现，业务逻辑都其中在其中，MyHomePage 只负责取 HomePageViewModel 中的 counterLiveData 值做展示，做到了业务和视图分离。另外 HomePageViewModel 作为一个 mixin，是可以被复用的，flutter 中也支持 with 多个 mixin。\n\n以上，简单的 Flutter 版 LiveData 就已经实现。\n\n\n\n## 总结\n\n不管是否使用 LiveData，重要的是学习其中的设计思想：\n\n1. 业务层视图层低耦合\n2. 业务层高复用\n3. UI 生命周期管理\n\n另外将业务分离可以更有利于单元测试。","source":"_posts/flutter-livedata.md","raw":"---\ntitle: 在 Flutter 中简单实现 LiveData\ndate: 2019-9-11 16:09:25\ntags: flutter\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/flutter_livedata.png\ntop: 9\n---\n\n# 在 Flutter 中简单实现 LiveData\n\n\n\n如果你是一名 Android 开发者，[LiveData](https://developer.android.com/topic/libraries/architecture/livedata) 一定不陌生 ，它和 [ViewModel](https://developer.android.com/topic/libraries/architecture/viewmodel) 组合便可以构成简单的 MVVM 模式，而且是生命周期敏感的，不会造成不必要内存泄漏。\n\n那么在 Flutter 中是否也能使用到 LiveData 呢？很可惜，官方并没有给出相关 API。但是使用现有的官方 API 和第三方 API 还是可以简单实现的。\n\n首先我们总结下 LiveData 和 ViewModel 的几个特点：\n\n1. LiveData 可自动通知其上的观察者其值的改变。\n2. LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。\n3. ViewModel 用于业务逻辑和 UI 解耦，可复用。\n\n<!-- more -->\n\n## LiveData 实现\n\n```dart\nimport 'package:flutter/material.dart';\n\nclass LiveData<T> with ChangeNotifier {\n  T _data;\n\n  T get value => _data;\n\n  set value(T data) {\n    _data = data;\n    notifyListeners();\n  }\n}\n```\n\n就是这么简单，一个 Flutter 版的 LiveData 已经实现了。\n\n### LiveDataWidget 实现\n\n仅仅使用 LiveData 还不够优雅，我们仍需手动调用 `setState` 方法去触发 Widget 刷新，接下来定义一个 LiveDataWidget 类，用于监听 LiveData 并自动更新其中的 Widget。\n\n```dart\nimport 'package:flutter/material.dart';\nimport 'package:provider/provider.dart';\n\nclass LiveDataWidget<T extends LiveData> extends StatelessWidget {\n  LiveDataWidget({Key key, @required this.data, @required this.builder})\n      : super(key: key);\n\n  final T data;\n\n  final Widget Function(BuildContext context, T value, Widget child) builder;\n\n  @override\n  Widget build(BuildContext context) {\n    return ChangeNotifierProvider<T>(\n      builder: (_) {\n        return data;\n      },\n      child: Consumer(builder: builder),\n    );\n  }\n}\n```\n\n这里使用到了 `provider` 中的 `ChangeNotifierProvider` 和 `Consumer`，这样一个简单的组合就能做到当 `data`发生变化，Consumer 就会重新构建其中的 Widget。\n\n## ViewModel 实现\n\n`ViewModel` 并没有固定的实现，可以在实际使用中自行定义。\n\n\n\n## Demo\n\n```dart\nimport 'package:bili_livedata/bili_livedata.dart';\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: MyHomePage(title: 'Flutter Demo Home Page'),\n    );\n  }\n}\n\n///使用 mixin 来定义一个ViewModel\nmixin HomePageViewModel {\n  /// 用于保存计数的 LiveData\n  final LiveData<int> counterLiveData = LiveData();\n\n  /// 调用此方法，会在 [counterLiveData] 值的基础上加 [add] 这个值\n  void counterAdd(int add) {\n    if (counterLiveData.value == null) {\n      counterLiveData.value = 0;\n    } else {\n      counterLiveData.value = counterLiveData.value + add;\n    }\n  }\n}\n\n// 使用 with 来并入 HomePageViewModel\nclass MyHomePage extends StatelessWidget with HomePageViewModel {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text(title),\n      ),\n      body: Center(\n        child: Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            Text(\n              'You have pushed the button this many times:',\n            ),\n            /// LiveDataWidget 的使用\n            LiveDataWidget<LiveData<int>>(\n                data: counterLiveData, // HomePageViewModel 中的 counterLiveData\n                builder: (context, value, _) {\n                  return Text(value.value.toString()); // 在 Text 上显示 counterLiveData 中的值。\n                }),\n          ],\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () {\n          counterAdd(2); // 调用 HomePageViewModel 中的 counterAdd 方法\n        },\n        tooltip: 'Increment',\n        child: Icon(Icons.add),\n      ),\n    );\n  }\n}\n\n```\n\n结合上面的代码再来回顾一下我们上面结合的三点：\n\n1. LiveData 可自动通知其上的观察者其值的改变。\n\n   **已实现** ，通过 ChangeNotifier 和 ChangeNotifierProvider 实现。\n\n2. LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。\n\n   **已实现**，ChangeNotifierProvider 内部会在 dispose 方法会去调用 ChangeNotifier 的 dispose 方法，所以当   页面销毁，ChangeNotifier（即 LiveData）上的监听者会被移除，不会造成内存泄漏。\n\n3. ViewModel 用于业务逻辑和 UI 解耦，可复用。\n\n   **已实现**，观察 HomePageViewModel，可以发现，业务逻辑都其中在其中，MyHomePage 只负责取 HomePageViewModel 中的 counterLiveData 值做展示，做到了业务和视图分离。另外 HomePageViewModel 作为一个 mixin，是可以被复用的，flutter 中也支持 with 多个 mixin。\n\n以上，简单的 Flutter 版 LiveData 就已经实现。\n\n\n\n## 总结\n\n不管是否使用 LiveData，重要的是学习其中的设计思想：\n\n1. 业务层视图层低耦合\n2. 业务层高复用\n3. UI 生命周期管理\n\n另外将业务分离可以更有利于单元测试。","slug":"flutter-livedata","published":1,"updated":"2024-08-21T03:16:19.784Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vt00145p6tenfj3xvl","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"在-Flutter-中简单实现-LiveData\"><a href=\"#在-Flutter-中简单实现-LiveData\" class=\"headerlink\" title=\"在 Flutter 中简单实现 LiveData\"></a>在 Flutter 中简单实现 LiveData</h1><p>如果你是一名 Android 开发者，<a href=\"https://developer.android.com/topic/libraries/architecture/livedata\">LiveData</a> 一定不陌生 ，它和 <a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel\">ViewModel</a> 组合便可以构成简单的 MVVM 模式，而且是生命周期敏感的，不会造成不必要内存泄漏。</p>\n<p>那么在 Flutter 中是否也能使用到 LiveData 呢？很可惜，官方并没有给出相关 API。但是使用现有的官方 API 和第三方 API 还是可以简单实现的。</p>\n<p>首先我们总结下 LiveData 和 ViewModel 的几个特点：</p>\n<ol>\n<li>LiveData 可自动通知其上的观察者其值的改变。</li>\n<li>LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。</li>\n<li>ViewModel 用于业务逻辑和 UI 解耦，可复用。</li>\n</ol>\n<span id=\"more\"></span>\n\n<h2 id=\"LiveData-实现\"><a href=\"#LiveData-实现\" class=\"headerlink\" title=\"LiveData 实现\"></a>LiveData 实现</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">with</span> <span class=\"title\">ChangeNotifier</span> </span>&#123;</span><br><span class=\"line\">  T _data;</span><br><span class=\"line\"></span><br><span class=\"line\">  T <span class=\"keyword\">get</span> value =&gt; _data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> value(T data) &#123;</span><br><span class=\"line\">    _data = data;</span><br><span class=\"line\">    notifyListeners();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是这么简单，一个 Flutter 版的 LiveData 已经实现了。</p>\n<h3 id=\"LiveDataWidget-实现\"><a href=\"#LiveDataWidget-实现\" class=\"headerlink\" title=\"LiveDataWidget 实现\"></a>LiveDataWidget 实现</h3><p>仅仅使用 LiveData 还不够优雅，我们仍需手动调用 <code>setState</code> 方法去触发 Widget 刷新，接下来定义一个 LiveDataWidget 类，用于监听 LiveData 并自动更新其中的 Widget。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveDataWidget</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiveData</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  LiveDataWidget(&#123;Key key, <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.data, <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.builder&#125;)</span><br><span class=\"line\">      : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget <span class=\"built_in\">Function</span>(BuildContext context, T value, Widget child) builder;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ChangeNotifierProvider&lt;T&gt;(</span><br><span class=\"line\">      builder: (_) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      child: Consumer(builder: builder),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用到了 <code>provider</code> 中的 <code>ChangeNotifierProvider</code> 和 <code>Consumer</code>，这样一个简单的组合就能做到当 <code>data</code>发生变化，Consumer 就会重新构建其中的 Widget。</p>\n<h2 id=\"ViewModel-实现\"><a href=\"#ViewModel-实现\" class=\"headerlink\" title=\"ViewModel 实现\"></a>ViewModel 实现</h2><p><code>ViewModel</code> 并没有固定的实现，可以在实际使用中自行定义。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:bili_livedata/bili_livedata.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///<span class=\"language-markdown\">使用 mixin 来定义一个ViewModel</span></span></span><br><span class=\"line\"><span class=\"keyword\">mixin</span> HomePageViewModel &#123;</span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"language-markdown\">用于保存计数的 LiveData</span></span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> LiveData&lt;<span class=\"built_in\">int</span>&gt; counterLiveData = LiveData();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"language-markdown\">调用此方法，会在 [counterLiveData] 值的基础上加 [add] 这个值</span></span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> counterAdd(<span class=\"built_in\">int</span> add) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (counterLiveData.value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      counterLiveData.value = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      counterLiveData.value = counterLiveData.value + add;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 with 来并入 HomePageViewModel</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> <span class=\"title\">with</span> <span class=\"title\">HomePageViewModel</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            <span class=\"comment\">/// <span class=\"language-markdown\">LiveDataWidget 的使用</span></span></span><br><span class=\"line\">            LiveDataWidget&lt;LiveData&lt;<span class=\"built_in\">int</span>&gt;&gt;(</span><br><span class=\"line\">                data: counterLiveData, <span class=\"comment\">// HomePageViewModel 中的 counterLiveData</span></span><br><span class=\"line\">                builder: (context, value, _) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> Text(value.value.toString()); <span class=\"comment\">// 在 Text 上显示 counterLiveData 中的值。</span></span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        onPressed: () &#123;</span><br><span class=\"line\">          counterAdd(<span class=\"number\">2</span>); <span class=\"comment\">// 调用 HomePageViewModel 中的 counterAdd 方法</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tooltip: <span class=\"string\">&#x27;Increment&#x27;</span>,</span><br><span class=\"line\">        child: Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结合上面的代码再来回顾一下我们上面结合的三点：</p>\n<ol>\n<li><p>LiveData 可自动通知其上的观察者其值的改变。</p>\n<p><strong>已实现</strong> ，通过 ChangeNotifier 和 ChangeNotifierProvider 实现。</p>\n</li>\n<li><p>LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。</p>\n<p><strong>已实现</strong>，ChangeNotifierProvider 内部会在 dispose 方法会去调用 ChangeNotifier 的 dispose 方法，所以当   页面销毁，ChangeNotifier（即 LiveData）上的监听者会被移除，不会造成内存泄漏。</p>\n</li>\n<li><p>ViewModel 用于业务逻辑和 UI 解耦，可复用。</p>\n<p><strong>已实现</strong>，观察 HomePageViewModel，可以发现，业务逻辑都其中在其中，MyHomePage 只负责取 HomePageViewModel 中的 counterLiveData 值做展示，做到了业务和视图分离。另外 HomePageViewModel 作为一个 mixin，是可以被复用的，flutter 中也支持 with 多个 mixin。</p>\n</li>\n</ol>\n<p>以上，简单的 Flutter 版 LiveData 就已经实现。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不管是否使用 LiveData，重要的是学习其中的设计思想：</p>\n<ol>\n<li>业务层视图层低耦合</li>\n<li>业务层高复用</li>\n<li>UI 生命周期管理</li>\n</ol>\n<p>另外将业务分离可以更有利于单元测试。</p>\n","excerpt":"<h1 id=\"在-Flutter-中简单实现-LiveData\"><a href=\"#在-Flutter-中简单实现-LiveData\" class=\"headerlink\" title=\"在 Flutter 中简单实现 LiveData\"></a>在 Flutter 中简单实现 LiveData</h1><p>如果你是一名 Android 开发者，<a href=\"https://developer.android.com/topic/libraries/architecture/livedata\">LiveData</a> 一定不陌生 ，它和 <a href=\"https://developer.android.com/topic/libraries/architecture/viewmodel\">ViewModel</a> 组合便可以构成简单的 MVVM 模式，而且是生命周期敏感的，不会造成不必要内存泄漏。</p>\n<p>那么在 Flutter 中是否也能使用到 LiveData 呢？很可惜，官方并没有给出相关 API。但是使用现有的官方 API 和第三方 API 还是可以简单实现的。</p>\n<p>首先我们总结下 LiveData 和 ViewModel 的几个特点：</p>\n<ol>\n<li>LiveData 可自动通知其上的观察者其值的改变。</li>\n<li>LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。</li>\n<li>ViewModel 用于业务逻辑和 UI 解耦，可复用。</li>\n</ol>","more":"<h2 id=\"LiveData-实现\"><a href=\"#LiveData-实现\" class=\"headerlink\" title=\"LiveData 实现\"></a>LiveData 实现</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveData</span>&lt;<span class=\"title\">T</span>&gt; <span class=\"title\">with</span> <span class=\"title\">ChangeNotifier</span> </span>&#123;</span><br><span class=\"line\">  T _data;</span><br><span class=\"line\"></span><br><span class=\"line\">  T <span class=\"keyword\">get</span> value =&gt; _data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">set</span> value(T data) &#123;</span><br><span class=\"line\">    _data = data;</span><br><span class=\"line\">    notifyListeners();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>就是这么简单，一个 Flutter 版的 LiveData 已经实现了。</p>\n<h3 id=\"LiveDataWidget-实现\"><a href=\"#LiveDataWidget-实现\" class=\"headerlink\" title=\"LiveDataWidget 实现\"></a>LiveDataWidget 实现</h3><p>仅仅使用 LiveData 还不够优雅，我们仍需手动调用 <code>setState</code> 方法去触发 Widget 刷新，接下来定义一个 LiveDataWidget 类，用于监听 LiveData 并自动更新其中的 Widget。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:provider/provider.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LiveDataWidget</span>&lt;<span class=\"title\">T</span> <span class=\"keyword\">extends</span> <span class=\"title\">LiveData</span>&gt; <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  LiveDataWidget(&#123;Key key, <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.data, <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.builder&#125;)</span><br><span class=\"line\">      : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget <span class=\"built_in\">Function</span>(BuildContext context, T value, Widget child) builder;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ChangeNotifierProvider&lt;T&gt;(</span><br><span class=\"line\">      builder: (_) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> data;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      child: Consumer(builder: builder),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里使用到了 <code>provider</code> 中的 <code>ChangeNotifierProvider</code> 和 <code>Consumer</code>，这样一个简单的组合就能做到当 <code>data</code>发生变化，Consumer 就会重新构建其中的 Widget。</p>\n<h2 id=\"ViewModel-实现\"><a href=\"#ViewModel-实现\" class=\"headerlink\" title=\"ViewModel 实现\"></a>ViewModel 实现</h2><p><code>ViewModel</code> 并没有固定的实现，可以在实际使用中自行定义。</p>\n<h2 id=\"Demo\"><a href=\"#Demo\" class=\"headerlink\" title=\"Demo\"></a>Demo</h2><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:bili_livedata/bili_livedata.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() =&gt; runApp(MyApp());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///<span class=\"language-markdown\">使用 mixin 来定义一个ViewModel</span></span></span><br><span class=\"line\"><span class=\"keyword\">mixin</span> HomePageViewModel &#123;</span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"language-markdown\">用于保存计数的 LiveData</span></span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> LiveData&lt;<span class=\"built_in\">int</span>&gt; counterLiveData = LiveData();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/// <span class=\"language-markdown\">调用此方法，会在 [counterLiveData] 值的基础上加 [add] 这个值</span></span></span><br><span class=\"line\">  <span class=\"keyword\">void</span> counterAdd(<span class=\"built_in\">int</span> add) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (counterLiveData.value == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">      counterLiveData.value = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      counterLiveData.value = counterLiveData.value + add;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 with 来并入 HomePageViewModel</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> <span class=\"title\">with</span> <span class=\"title\">HomePageViewModel</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Scaffold(</span><br><span class=\"line\">      appBar: AppBar(</span><br><span class=\"line\">        title: Text(title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: Center(</span><br><span class=\"line\">        child: Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            <span class=\"comment\">/// <span class=\"language-markdown\">LiveDataWidget 的使用</span></span></span><br><span class=\"line\">            LiveDataWidget&lt;LiveData&lt;<span class=\"built_in\">int</span>&gt;&gt;(</span><br><span class=\"line\">                data: counterLiveData, <span class=\"comment\">// HomePageViewModel 中的 counterLiveData</span></span><br><span class=\"line\">                builder: (context, value, _) &#123;</span><br><span class=\"line\">                  <span class=\"keyword\">return</span> Text(value.value.toString()); <span class=\"comment\">// 在 Text 上显示 counterLiveData 中的值。</span></span><br><span class=\"line\">                &#125;),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: FloatingActionButton(</span><br><span class=\"line\">        onPressed: () &#123;</span><br><span class=\"line\">          counterAdd(<span class=\"number\">2</span>); <span class=\"comment\">// 调用 HomePageViewModel 中的 counterAdd 方法</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        tooltip: <span class=\"string\">&#x27;Increment&#x27;</span>,</span><br><span class=\"line\">        child: Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>结合上面的代码再来回顾一下我们上面结合的三点：</p>\n<ol>\n<li><p>LiveData 可自动通知其上的观察者其值的改变。</p>\n<p><strong>已实现</strong> ，通过 ChangeNotifier 和 ChangeNotifierProvider 实现。</p>\n</li>\n<li><p>LiveData 会监听 Activity 或 Fragment 的生命周期，若视图已销毁，则不会通知其上的观察者（observeForeve除外）。</p>\n<p><strong>已实现</strong>，ChangeNotifierProvider 内部会在 dispose 方法会去调用 ChangeNotifier 的 dispose 方法，所以当   页面销毁，ChangeNotifier（即 LiveData）上的监听者会被移除，不会造成内存泄漏。</p>\n</li>\n<li><p>ViewModel 用于业务逻辑和 UI 解耦，可复用。</p>\n<p><strong>已实现</strong>，观察 HomePageViewModel，可以发现，业务逻辑都其中在其中，MyHomePage 只负责取 HomePageViewModel 中的 counterLiveData 值做展示，做到了业务和视图分离。另外 HomePageViewModel 作为一个 mixin，是可以被复用的，flutter 中也支持 with 多个 mixin。</p>\n</li>\n</ol>\n<p>以上，简单的 Flutter 版 LiveData 就已经实现。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>不管是否使用 LiveData，重要的是学习其中的设计思想：</p>\n<ol>\n<li>业务层视图层低耦合</li>\n<li>业务层高复用</li>\n<li>UI 生命周期管理</li>\n</ol>\n<p>另外将业务分离可以更有利于单元测试。</p>"},{"title":"Flutter 中的国际化","date":"2018-03-06T04:06:08.000Z","cover":"http://cdn.zqlxtt.cn/device-2017-12-21-214051.png","top":8,"_content":"\n## 一、前言\n\n从 2015 年接触 Flutter 到现在也有两年多时间，在这期间我并没有正真地去了解这个神奇的框架，只是时不时拉取 master 的最新代码，编一下 flutter_gallery 看看有什么新特性。但随着此次 GDD 的召开，Flutter 被 Google 带到了国内开发者的眼前，相信谷歌是已经准备好让 Flutter 走上移动开发历史的舞台了。\n\n一款好的移动应用该具备什么品质？戳中用户痛点的功能，炫酷的 UI 还是流畅的操作体验？这些都很重要，少了其中任何一点都是得不到用户青睐的。但今天我要说的虽然不是前面这三个中的哪一个，但也是少了它就不行的“应用国际化”。\n\n对于开发者来说，在 Android 和 iOS 开发中使用国际化已经是老掉牙的套路了，那么在 Flutter 中该如何使用国际化呢？是否也想 Android 一样只要多配置一个 xml 就能搞定了呢？\n\n<!-- more -->\n## 二、在 MaterialApp 中添加国际化支持\n\nFlutter 官方鼓励我们在写 Flutter 应用的时候直接从 MaterialApp 开始，原因是 MaterialApp 为我们集成好了很多 Material Design 所必须的控件，如AnimatedThemen、GridPager 等，另外还通过 MaterialApp 配置了全局路由，方便进行页面的切换。既然如此我们就先从 MaterialApp 开始实现国际化。国际化涵盖的不单单只是多国语言，还有文字阅读方向、时间和日期格式等，但本文仅介绍多国语言的适配，它们几种还希望读者自行学习和研究。\n\n通常我们新建的 Flutter 应用是默认不支持多语言的，即使用户在中文环境下，显示的文字仍然是英文，比如下图所示的日期选择对话框：\n\n![](http://cdn.zqlxtt.cn/device-2017-12-21-214051.png)\n\n那么怎么样将系统的这些组件国际化呢？首先需要在 pubspec.yaml 中添加如下依赖：\n\n```yaml\n  flutter_localizations:\n    sdk: flutter\n```\n\n接着运行：\n\n```shell\nflutter packages get\n```\n\n 以获取依赖库。\n\n当上面两部完成后在 main.dart 中 import 如下：\n\n```dart\nimport 'package:flutter_localizations/flutter_localizations.dart';\n```\n\n\n\n然后在 MaterialApp 的构造方法中给 `localizationsDelegates` 和 `supportedLocales` 两个可选参数赋值：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: 'Flutter Demo',\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: 'Flutter Demo Home Page'),\n      localizationsDelegates: [                             //此处\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n      ],\n      supportedLocales: [                                   //此处\n        const Locale('zh','CH'),\n        const Locale('en','US'),\n      ],\n    );\n  }\n}\n```\n\n\n\n暂时先不用理解这两个参数是什么意思，此时如果重新运行的话结果如下图：\n\n![](http://backup.flutter-dev.cn/device-2017-12-21-215330.png)\n\n\n\n细心的小伙伴可能发现这个 Dialog 中的文字是变成中文了，但背景中的 titlebar 的文字还是英文，难道老司机也翻车了？\n\n其实 titlebar 中的这串文字是属于我们创建的应用的，如下：\n\n```dart\nhome: new MyHomePage(title: 'Flutter Demo Home Page')\n```\n\nFlutter 框架是不知道翻译这句话。\n\n接下来要做的就是我们自己实现一个类似 `GlobalMaterialLocalizations`的东西，用它来实现多语言。\n\n首先需要准备在应用中用到的字符串，一个刚新建的 Flutter 应用用到了四个字符串，如下\n\n- Flutter Demo\n- Flutter Demo Home Page\n- You have pushed the button this many times:\n- Increment\n\n这里为了简单我们只增加中文，依次对应为：\n\n- Flutter 示例\n- Flutter 示例主页面\n- 你一共点击了这么多次按钮：\n- 增加\n\n两种文字准备后就可以着手写 Localizations 了，此处的 Localizations 是多国语言资源的汇总。在这里我自定义一个名为 DemoLocalizations 的类,然后将多国资源整合进此类：\n\n```dart\nclass DemoLocalizations {\n\n  final Locale locale;\n\n  DemoLocalizations(this.locale);\n\n  static Map<String, Map<String, String>> _localizedValues = {\n    'en': {\n      'task title': 'Flutter Demo',\n      'titlebar title': 'Flutter Demo Home Page',\n      'click tip': 'You have pushed the button this many times:',\n      'inc':'Increment'\n    },\n    'zh': {\n      'task title': 'Flutter 示例',\n      'titlebar title': 'Flutter 示例主页面',\n      'click tip': '你一共点击了这么多次按钮：',\n      'inc':'增加'\n    }\n  };\n\n  get taskTitle{\n    return _localizedValues[locale.languageCode]['task title'];\n  }\n\n  get titleBarTitle{\n    return _localizedValues[locale.languageCode]['titlebar title'];\n  }\n\n  get clickTop{\n    return _localizedValues[locale.languageCode]['click tip'];\n  }\n  \n  get inc{\n    return _localizedValues[locale.languageCode]['inc'];\n  }\n}\n```\n\n此时只要能拿到 DemoLocalizations 的对象实例，就可以调用它的`taskTitle`、`titleBarTitle`、`clickTop`这三个方法来获取对应的字符串。\n\n定义完 DemoLocalizations 以后，我们就需要想这么一个问题，这个类是谁负责初始化呢？答案自然不是我们自己主动去初始化，而是需要一个叫做 `LocalizationsDelegate`的类来完成，LocalizationsDelegate 是一个抽象类，需要我们去实现它：\n\n```dart\nclass DemoLocalizationsDelegate extends LocalizationsDelegate<DemoLocalizations>{\n\n  const DemoLocalizationsDelegate();\n\n  @override\n  bool isSupported(Locale locale) {\n    return ['en','zh'].contains(locale.languageCode);\n  }\n\n  @override\n  Future<DemoLocalizations> load(Locale locale) {\n    return new SynchronousFuture<DemoLocalizations>(new DemoLocalizations(locale));\n  }\n\n  @override\n  bool shouldReload(LocalizationsDelegate<DemoLocalizations> old) {\n    return false;\n  }\n\n  static DemoLocalizationsDelegate delegate = const DemoLocalizationsDelegate();\n}\n```\n\n注意 `load` 方法，DemoLocalizations就是在此方法内被初始化的。\n\n接着将 DemoLocalizationsDelegate 添加进 MaterialApp：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: 'Flutter Demo',\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: 'Flutter Demo Home Page'),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,                 //添加在此处\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n```\n\nDemoLocalizationsDelegate 已经被添加进 MaterialApp，那我们该如何使用 DemoLocalizations 呢？这里就要介绍另一个 Weidget 的子类 `Localizations`，注意此处的 Localizations 它是一个货真价实 Widget。DemoLocalizationsDelegate 这个类的对象虽然被传入了 MaterialApp，但由于 MaterialApp 会在内部嵌套 Localizations 这个 Widget，而 LocalizationsDelegate 正是其构造方法必须的参数：\n\n```dart\n  Localizations({\n    Key key,\n    @required this.locale,\n    @required this.delegates,                              //此处\n    this.child,\n  }) : assert(locale != null),\n       assert(delegates != null),\n       assert(delegates.any(\n               (LocalizationsDelegate<dynamic> delegate)\n                 => delegate is LocalizationsDelegate<WidgetsLocalizations>)\n             ),\n       super(key: key);\n```\n\n而 DemoLocalizations 的实例也是在 Localizations 中通过 DemoLocalizationsDelegate 实例化的。所以在应用中要使用 DemoLocalizations 的实例自然是需要通过 Localizations 这个 Widget 来获取的，代码如下：\n\n```dart\nLocalizations.of(context, DemoLocalizations);\n```\n\n`of`这个静态方法就会返回 DemoLocalizations 的实例，现在先别管其内部是如何实现的。我们将这行代码放入 DemoLocalizations 中以方便使用：\n\n```dart\nclass DemoLocalizations {\n\n  final Locale locale;\n\n  DemoLocalizations(this.locale);\n\n  static Map<String, Map<String, String>> _localizedValues = {\n    'en': {\n      'task title': 'Flutter Demo',\n      'titlebar title': 'Flutter Demo Home Page',\n      'click tip': 'You have pushed the button this many times:',\n      'inc':'Increment'\n    },\n    'zh': {\n      'task title': 'Flutter 示例',\n      'titlebar title': 'Flutter 示例主页面',\n      'click tip': '你一共点击了这么多次按钮：',\n      'inc':'增加'\n    }\n  };\n\n  get taskTitle{\n    return _localizedValues[locale.languageCode]['task title'];\n  }\n\n  get titleBarTitle{\n    return _localizedValues[locale.languageCode]['titlebar title'];\n  }\n\n  get clickTop{\n    return _localizedValues[locale.languageCode]['click tip'];\n  }\n\n  get inc{\n    return _localizedValues[locale.languageCode]['inc'];\n  }\n\n  //此处\n  static DemoLocalizations of(BuildContext context){\n    return Localizations.of(context, DemoLocalizations);\n  }\n}\n```\n\n接下来就是真正使用 DemoLocalizations 的时候了，在代码中将原来的字符串替换如下：\n\n```dart\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'package:flutter/foundation.dart' show SynchronousFuture;\n\nvoid main() {\n  runApp(new MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: DemoLocalizations.of(context).taskTitle,                           // 此处1\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: DemoLocalizations.of(context).titleBarTitle), // 此处2\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _MyHomePageState createState() => new _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    showDatePicker(context: context,\n        initialDate: new DateTime.now(),\n        firstDate: new DateTime.now().subtract(new Duration(days: 30)),\n        lastDate: new DateTime.now().add(new Duration(days: 30))).then((v) {});\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return new Scaffold(\n      appBar: new AppBar(\n        title: new Text(widget.title),\n      ),\n      body: new Center(\n        child: new Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            new Text(\n              DemoLocalizations.of(context).clickTop,                          // 此处3\n            ),\n            new Text(\n              '$_counter',\n              style: Theme\n                  .of(context)\n                  .textTheme\n                  .display1,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: new FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: DemoLocalizations.of(context).inc,                           // 此处4\n        child: new Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n运行！！\n\n![](http://backup.flutter-dev.cn/device-2017-12-21-231417.png)\n\n😂😂😂 \n\n当遇到这种突如其来的问题的时候一定要淡定，喝口水，眺望一会远方。。。\n\n接着仔细看报错信息：The getter 'taskTitle' was called on null.说的很明确，在 1 处出现了空指针，我们没有像预想的一样拿到 DemoLocalizations 对象。那问题一定出在 Localizations.of 方法内部，跟进去看看：\n\n```dart\n  static T of<T>(BuildContext context, Type type) {\n    assert(context != null);\n    assert(type != null);\n    final _LocalizationsScope scope =       \n             context.inheritFromWidgetOfExactType(_LocalizationsScope); // 此处\n    return scope?.localizationsState?.resourcesFor<T>(type);\n  }\n```\n\n关键在 `context.inheritFromWidgetOfExactType`处，继续进去：\n\n```dart\nInheritedWidget inheritFromWidgetOfExactType(Type targetType);\n```\n\n很简单，这是一个抽象 BuildContext 的抽象方法。此时如果再要继续追踪实现类就比较困难了，通过这个方法的注释可以知道，它是通过 targetType 来获取 context 最近父节点的对象，前提条件是 targetType 对应的类必须是 InheriteWidget 的子类。通过查看 `_LocalizationsScope`发现其正是继承自 InheriteWidget。那就是说没有从 context 的父节点中找到 _LocalizationsScope。此时我们再看一下调用 taskTitle 的地方：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: DemoLocalizations.of(context).taskTitle,                           // 此处\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n```\n\n\n\n仔细看 taskTitle 处的 context 是从最外层的 build 方法中传入的，而在之前说过 Localizations 这个组件是在 MaterialApp 中被嵌套的，也就是说能找到 DemoLocalizations 的 context 至少需要是 MaterialApp 内部的，而此时的 context 是无法找到 DemoLocalizations 对象的。但这样进入死胡同了，实现多语言的 DemoLocalizations 需要在 MaterialApp 内部才能被找到，而这里的 title 用到的 context 是在 MaterialApp 外部的。\n\n难道多语言在 title 上没法实现？\n\n喝口水，眺望下远方。\n\n既然如此我们不如看下这个 title 的说明：\n\n```dart\n  /// A one-line description used by the device to identify the app for the user.\n  ///\n  /// On Android the titles appear above the task manager's app snapshots which are\n  /// displayed when the user presses the \"recent apps\" button. Similarly, on\n  /// iOS the titles appear in the App Switcher when the user double presses the\n  /// home button.\n  ///\n  /// To provide a localized title instead, use [onGenerateTitle].\n  ///\n  /// This value is passed unmodified to [WidgetsApp.title].\n  final String title;\n```\n\n请注意这句：To provide a localized title instead, use [onGenerateTitle].\n\n没想到啊，如果要对 title 进行多语言处理还需要 `onGenerateTitle`这个属性。那就简单了，更改如下：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      onGenerateTitle: (context){                                              // 此处\n        return DemoLocalizations.of(context).taskTitle;\n      },\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n```\n\n\n\n此时运行会发现 taskTitle 处已经没问题了，但 titleBarTitle 这边还是报错，原因一样它的 context 使用的是 MaterialApp 外部的 context。但这里的 title 是可以被移动到 MyHomePage 内部初始的，所以很好修改，将 MyHomePage 构造方法中的 title 参数移除，直接在 AppBar 内部赋值：\n\n```dart\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key}) : super(key: key);\n\n  @override\n  _MyHomePageState createState() => new _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    showDatePicker(context: context,\n        initialDate: new DateTime.now(),\n        firstDate: new DateTime.now().subtract(new Duration(days: 30)),\n        lastDate: new DateTime.now().add(new Duration(days: 30))).then((v) {});\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return new Scaffold(\n      appBar: new AppBar(\n        title: new Text(DemoLocalizations.of(context).titleBarTitle),            // 此处\n      ),\n      body: new Center(\n        child: new Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            new Text(\n              DemoLocalizations.of(context).clickTop,\n            ),\n            new Text(\n              '$_counter',\n              style: Theme\n                  .of(context)\n                  .textTheme\n                  .display1,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: new FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: DemoLocalizations.of(context).inc,\n        child: new Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n\n\n再运行：\n\n![](http://backup.flutter-dev.cn/device-2017-12-22-001905.png)\n\n![](http://backup.flutter-dev.cn/device-2017-12-22-002133.png)\n\n完美。\n\n## 三、国际化的初始化过程\n\n上一节中简单介绍了如何在 MaterialApp 实现国际化，各位可能也注意到了最终语言资源的选择还是留给了 DemoLocalizations，而对语言资源本身是以什么形式存在没有特别规定。在上文中我将两国的语言放到了一个 Map 中，自然也可以将其放在服务器上，在程序启动后进行拉取，这些都是后话了，在这一节中我简单剖析下源码，看看 DemoLocalizatins 是如何在程序运行后被初始化的。\n\n上面已经说过官方鼓励我们使用 MaterialApp 作为程序入口，我们就从 MaterialApp 出发，首先看 MaterialApp 的构造方法：\n\n```dart\n  MaterialApp({ // can't be const because the asserts use methods on Map :-(\n    Key key,\n    this.title: '',\n    this.onGenerateTitle,\n    this.color,\n    this.theme,\n    this.home,\n    this.routes: const <String, WidgetBuilder>{},\n    this.initialRoute,\n    this.onGenerateRoute,\n    this.onUnknownRoute,\n    this.locale,\n    this.localizationsDelegates,\n    this.localeResolutionCallback,\n    this.supportedLocales: const <Locale>[const Locale('en', 'US')],\n    this.navigatorObservers: const <NavigatorObserver>[],\n    this.debugShowMaterialGrid: false,\n    this.showPerformanceOverlay: false,\n    this.checkerboardRasterCacheImages: false,\n    this.checkerboardOffscreenLayers: false,\n    this.showSemanticsDebugger: false,\n    this.debugShowCheckedModeBanner: true\n  })\n```\n\n上面的 `localizationsDelegates`是多语言的关键点，由于 MaterialApp 是一个 StatefulWidget，所以直接看其对应的 State 类 `_MaterialAppState`中的 build 方法，代码有点长：\n\n```dart\nWidget build(BuildContext context) {\n    final ThemeData theme = widget.theme ?? new ThemeData.fallback();\n    Widget result = new AnimatedTheme(                                // 1\n      data: theme,\n      isMaterialAppTheme: true,\n      child: new WidgetsApp(                                          //2\n        key: new GlobalObjectKey(this),\n        title: widget.title,\n        onGenerateTitle: widget.onGenerateTitle,\n        textStyle: _errorTextStyle,\n        // blue is the primary color of the default theme\n        color: widget.color ?? theme?.primaryColor ?? Colors.blue,\n        navigatorObservers:\n            new List<NavigatorObserver>.from(widget.navigatorObservers)\n              ..add(_heroController),\n        initialRoute: widget.initialRoute,\n        onGenerateRoute: _onGenerateRoute,\n        onUnknownRoute: _onUnknownRoute,\n        locale: widget.locale,\n        localizationsDelegates: _localizationsDelegates,                  //3\n        localeResolutionCallback: widget.localeResolutionCallback,\n        supportedLocales: widget.supportedLocales,\n        showPerformanceOverlay: widget.showPerformanceOverlay,\n        checkerboardRasterCacheImages: widget.checkerboardRasterCacheImages,\n        checkerboardOffscreenLayers: widget.checkerboardOffscreenLayers,\n        showSemanticsDebugger: widget.showSemanticsDebugger,\n        debugShowCheckedModeBanner: widget.debugShowCheckedModeBanner,\n        inspectorSelectButtonBuilder: (BuildContext context, VoidCallback onPressed) {\n          return new FloatingActionButton(\n            child: const Icon(Icons.search),\n            onPressed: onPressed,\n            mini: true,\n          );\n        },\n      )\n    );\n\n    assert(() {\n      if (widget.debugShowMaterialGrid) {    //此处如果有配置，则会显示网格\n        result = new GridPaper(\n          color: const Color(0xE0F9BBE0),\n          interval: 8.0,\n          divisions: 2,\n          subdivisions: 1,\n          child: result,\n        );\n      }\n      return true;\n    }());\n\n    return new ScrollConfiguration(                                // 4\n      behavior: new _MaterialScrollBehavior(),\n      child: result,\n    );\n  }\n```\n\n首先在 3 处可以看到 _localizationsDelegates 被赋值给了 WidgetsApp 的 localizationsDelegates 参数。在看 1、2、4 处分别又在原有的 Widget 上做了包裹，此时的 widget 树层次如下图：\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.45.47.png)\n\n接着进入 WidgetApp ，它也是个 StatefulWidget，直接看它的 State 类 `_WidgetsAppState`的 build 方法：\n\n```dart\n Widget build(BuildContext context) {\n    Widget result = new Navigator(                                    // 1\n      key: _navigator,\n      initialRoute: widget.initialRoute ?? ui.window.defaultRouteName,\n      onGenerateRoute: widget.onGenerateRoute,\n      onUnknownRoute: widget.onUnknownRoute,\n      observers: widget.navigatorObservers,\n    );\n\n    if (widget.textStyle != null) {\n      result = new DefaultTextStyle(                                    //2\n        style: widget.textStyle,\n        child: result,\n      );\n    }\n\n    ... //此处省略调试相关代码\n\n    return new MediaQuery(                                              //3\n      data: new MediaQueryData.fromWindow(ui.window),\n      child: new Localizations(                                         //4\n        locale: widget.locale ?? _locale,\n        delegates: _localizationsDelegates.toList(),\n        // This Builder exists to provide a context below the Localizations widget.\n        // The onGenerateCallback() can refer to Localizations via its context\n        // parameter.\n        child: new Builder(                                             //5\n          builder: (BuildContext context) {\n            String title = widget.title;\n            if (widget.onGenerateTitle != null) {\n              title = widget.onGenerateTitle(context);\n              assert(title != null, 'onGenerateTitle must return a non-null String');\n            }\n            return new Title(                                            //6\n              title: title,\n              color: widget.color,\n              child: result,\n            );\n          },\n        ),\n      ),\n    );\n  }\n```\n\n在 4 处终于见到了我们熟悉的身影 `Localizatins`。_localizationsDelegates 也是被传递进了 Localizations。此时的 widget 树层次如下：\n\n\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.55.52.png)\n\n层次如此之多，但我们关心只是其中的 Localizations，所以抛开其他不看，进入 Localizations 看看。\n\n不出意外 Localizations 也是一个 StatefulWidget，此时我们不需要关心它的 build 方法，而是应该关注其内部的 `initState` 方法，如果有数据需要初始化，不出意外就是在这里进行。\n\ninitState 方法很短：\n\n```dart\n  @override\n  void initState() {\n    super.initState();\n    load(widget.locale);\n  }\n```\n\n继续进入 load 方法：\n\n```dart\n  void load(Locale locale) {\n    final Iterable<LocalizationsDelegate<dynamic>> delegates = widget.delegates; // 1\n    if (delegates == null || delegates.isEmpty) {\n      _locale = locale;\n      return;\n    }\n\n    Map<Type, dynamic> typeToResources;\n    final Future<Map<Type, dynamic>> typeToResourcesFuture = _loadAll(locale, delegates) //2\n      .then((Map<Type, dynamic> value) {\n        return typeToResources = value;\n      });\n    \n    ...\n  \n  }\n```\n\n 1 处的 delegates 即一开始从 MaterialApp 传入的 delegate 数组，这里转成立可迭代对象。接着看 2 处的 `_loadAll` 方法返回的 typeToResourcesFuture ，其中的值类型为 `Map<Type, dynamic>`，这里可以推敲出来里边的 Type 对应的就是不同的 Localizations，而 dynamic 则是其实例。带着这样的想法看 _loadAll 方法：\n\n```dart\nFuture<Map<Type, dynamic>> _loadAll(Locale locale, Iterable<LocalizationsDelegate<dynamic>> allDelegates) {\n  final Map<Type, dynamic> output = <Type, dynamic>{};\n  List<_Pending> pendingList;\n\n  // Only load the first delegate for each delegate type that supports\n  // locale.languageCode.\n  final Set<Type> types = new Set<Type>();\n  final List<LocalizationsDelegate<dynamic>> delegates = <LocalizationsDelegate<dynamic>>[];\n  for (LocalizationsDelegate<dynamic> delegate in allDelegates) {\n    if (!types.contains(delegate.type) && delegate.isSupported(locale)) {\n      types.add(delegate.type);\n      delegates.add(delegate);          \n    }\n  }\n\n  for (LocalizationsDelegate<dynamic> delegate in delegates) {\n    final Future<dynamic> inputValue = delegate.load(locale);    // 1\n    dynamic completedValue;\n    final Future<dynamic> futureValue = inputValue.then<dynamic>((dynamic value) {\n      return completedValue = value;                             // 2\n    });\n    if (completedValue != null) { // inputValue was a SynchronousFuture\n      final Type type = delegate.type;\n      assert(!output.containsKey(type));\n      output[type] = completedValue;\n    } else {\n      pendingList ??= <_Pending>[];\n      pendingList.add(new _Pending(delegate, futureValue));\n    }\n  }\n\n  // All of the delegate.load() values were synchronous futures, we're done.\n  if (pendingList == null)\n    return new SynchronousFuture<Map<Type, dynamic>>(output);\n\n  // Some of delegate.load() values were asynchronous futures. Wait for them.\n  return Future.wait<dynamic>(pendingList.map((_Pending p) => p.futureValue))\n    .then<Map<Type, dynamic>>((List<dynamic> values) {\n      assert(values.length == pendingList.length);\n      for (int i = 0; i < values.length; i += 1) {\n        final Type type = pendingList[i].delegate.type;\n        assert(!output.containsKey(type));\n        output[type] = values[i];\n      }\n      return output;\n    });\n}\n```\n\n看 1 处，调用到了 deletegate 的 load 方法，返回一个 Future ，这里为什么不直接返回DemoLocalizations 的实例而要返回 Future，这个在前面也提到了如果你的资源是放在服务器上的，那么这就是一个耗时操作，所以在此处用了 Future。\n\n```dart\n  @override\n  Future<DemoLocalizations> load(Locale locale) {\n    return new SynchronousFuture<DemoLocalizations>(new DemoLocalizations(locale));\n  }\n```\n\n由于这里返回的是 SynchronousFuture ，所以在 2 处的代码会被顺序执行，此时 completedValue 就是 DemoLocalizations 的实例对象了。然后 completedValue 被放入了 output 接着就返回出去了，最后赋值给了 \\_LocalizationsState 的 \\_typeToResources 变量。\n\n到目前为止整个多语言的加载就完成了，剩下的就是等着被使用。下面看一下使用的方式：\n\n```dart\nDemoLocalizations.of(context).taskTitle\n```\n简单粗暴，根本看不出来是怎么拿到 DemoLocalizations 对象的。不多说，看代码：\n\n```dart\nreturn Localizations.of(context, DemoLocalizations);\n```\n内部调用的是 Localizations 的 of 静态方法，接着看：\n\n```dart\nstatic T of<T>(BuildContext context, Type type) {\n  assert(context != null);\n  assert(type != null);\n  final _LocalizationsScope scope = context.inheritFromWidgetOfExactType(_LocalizationsScope);\n  return scope?.localizationsState?.resourcesFor<T>(type);\n}\n```\n前面已经讲解过 context.inheritFromWidgetOfExactType 的作用，这里的 scope 就是最靠近 context 节点的 \\_LocalizationsScope 类型的节点。但我们看了上面的 widget 树的层次图，并没有看到 \\_LocalizationsScope 这个 widget,它是在什么时候被添加进去的呢？\n\n回到 \\_LocalizationsState 的 build 方法：\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    if (_locale == null)\n      return new Container();\n    return new _LocalizationsScope(\n      key: _localizedResourcesScopeKey,\n      locale: _locale,\n      localizationsState: this,\n      typeToResources: _typeToResources,\n      child: new Directionality(\n        textDirection: _textDirection,\n        child: widget.child,\n      ),\n    );\n  }\n```\n\n真想(●—●)。在 Localizations 的内部，它将它原本的子节点外又嵌套了 Directionality、\\_LocalizationsScope、Container 这三层。其中 \\_LocalizationsScope 就是我们想找的。\n\n接着看：\n\n```dart\n  return scope?.localizationsState?.resourcesFor<T>(type);\n```\n此处调用了 \\_LocalizationsState 的 resourcesFor 方法：\n\n```dart\n  T resourcesFor<T>(Type type) {\n    assert(type != null);\n    final T resources = _typeToResources[type];\n    return resources;\n  }\n```\n到这差不多就结束了，这里根据 type 从 \\_typeToResources 中取出了 DemoLocalizations 的实例。\n最后再把完整的 widget 树的层次展示一下：\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%882.29.45.png)\n\n\n## 四、简单的 App 内语言切换\n\n下面我见到介绍一下如何在不切换手机系统的语言的情况下来切换 Flutter 应用内的语言。主要用到的是 Localizations 的 override 方法。具体不多介绍，看下面我自定义的 StatefulWidget 类 FreeLocalizations 和它的 State 类 _FreeLocalizations：\n\n```dart\nclass FreeLocalizations extends StatefulWidget{\n\n  final Widget child;\n\n  FreeLocalizations({Key key,this.child}):super(key:key);\n\n  @override\n  State<FreeLocalizations> createState() {\n    return new _FreeLocalizations();\n  }\n}\n\nclass _FreeLocalizations extends State<FreeLocalizations>{\n\n  Locale _locale = const Locale('zh','CH');\n\n  changeLocale(Locale locale){\n    setState((){\n      _locale = locale;\n    });\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return new Localizations.override(\n      context: context,\n      locale: _locale,\n      child: widget.child,\n    );\n  }\n}\n```\n上面代码的意思比较清晰，就是在调用 changeLocale 方法的时候修改其内部 widget 的语言。\n下面来如何使用：\n\n```dart\nvoid main() {\n  runApp(new MyApp());\n}\n\nGlobalKey<_FreeLocalizations> freeLocalizationStateKey = new GlobalKey<_FreeLocalizations>();   // 1\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      onGenerateTitle: (context){\n        return DemoLocalizations.of(context).taskTitle;\n      },\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new Builder(builder: (context){\n        return new FreeLocalizations(\n          key: freeLocalizationStateKey,\n          child: new MyHomePage(),\n        );\n      }),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n\n```\n\n注意想要在 FreeLocalizations 外部去调用其方法需要使用到 GlobalKey 的帮助，用法见 1 处。让后我们将 MyHomePage 放入 FreeLocalizations 内部。\n\n接着在点击按钮的时候调用如下方法：\n\n```dart\n  void changeLocale(){\n    if(flag){\n      freeLocalizationStateKey.currentState.changeLocale(const Locale('zh',\"CH\"));\n    }else{\n      freeLocalizationStateKey.currentState.changeLocale(const Locale('en',\"US\"));\n    }\n    flag = !flag;\n  }\n```\n\n效果如下：\n\n![](http://backup.flutter-dev.cn/localizatiion_free.gif)\n\n这一小节我讲的比较简单，但如果你看明白了二、三两节，那弄明白这里多语言是怎么切换的应该是比较容易的。\n\n## 五、总结\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%883.34.41.png)\n\n思维导图地址：[https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr](https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr)\n文章中出现的代码的地址：[https://github.com/flutter-dev/internationalizing](https://github.com/flutter-dev/internationalizing)","source":"_posts/flutter-localizations.md","raw":"---\ntitle: Flutter 中的国际化\ndate: 2018-03-06 12:06:08\ntags: flutter\ncover: http://cdn.zqlxtt.cn/device-2017-12-21-214051.png\ntop: 8\n---\n\n## 一、前言\n\n从 2015 年接触 Flutter 到现在也有两年多时间，在这期间我并没有正真地去了解这个神奇的框架，只是时不时拉取 master 的最新代码，编一下 flutter_gallery 看看有什么新特性。但随着此次 GDD 的召开，Flutter 被 Google 带到了国内开发者的眼前，相信谷歌是已经准备好让 Flutter 走上移动开发历史的舞台了。\n\n一款好的移动应用该具备什么品质？戳中用户痛点的功能，炫酷的 UI 还是流畅的操作体验？这些都很重要，少了其中任何一点都是得不到用户青睐的。但今天我要说的虽然不是前面这三个中的哪一个，但也是少了它就不行的“应用国际化”。\n\n对于开发者来说，在 Android 和 iOS 开发中使用国际化已经是老掉牙的套路了，那么在 Flutter 中该如何使用国际化呢？是否也想 Android 一样只要多配置一个 xml 就能搞定了呢？\n\n<!-- more -->\n## 二、在 MaterialApp 中添加国际化支持\n\nFlutter 官方鼓励我们在写 Flutter 应用的时候直接从 MaterialApp 开始，原因是 MaterialApp 为我们集成好了很多 Material Design 所必须的控件，如AnimatedThemen、GridPager 等，另外还通过 MaterialApp 配置了全局路由，方便进行页面的切换。既然如此我们就先从 MaterialApp 开始实现国际化。国际化涵盖的不单单只是多国语言，还有文字阅读方向、时间和日期格式等，但本文仅介绍多国语言的适配，它们几种还希望读者自行学习和研究。\n\n通常我们新建的 Flutter 应用是默认不支持多语言的，即使用户在中文环境下，显示的文字仍然是英文，比如下图所示的日期选择对话框：\n\n![](http://cdn.zqlxtt.cn/device-2017-12-21-214051.png)\n\n那么怎么样将系统的这些组件国际化呢？首先需要在 pubspec.yaml 中添加如下依赖：\n\n```yaml\n  flutter_localizations:\n    sdk: flutter\n```\n\n接着运行：\n\n```shell\nflutter packages get\n```\n\n 以获取依赖库。\n\n当上面两部完成后在 main.dart 中 import 如下：\n\n```dart\nimport 'package:flutter_localizations/flutter_localizations.dart';\n```\n\n\n\n然后在 MaterialApp 的构造方法中给 `localizationsDelegates` 和 `supportedLocales` 两个可选参数赋值：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: 'Flutter Demo',\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: 'Flutter Demo Home Page'),\n      localizationsDelegates: [                             //此处\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n      ],\n      supportedLocales: [                                   //此处\n        const Locale('zh','CH'),\n        const Locale('en','US'),\n      ],\n    );\n  }\n}\n```\n\n\n\n暂时先不用理解这两个参数是什么意思，此时如果重新运行的话结果如下图：\n\n![](http://backup.flutter-dev.cn/device-2017-12-21-215330.png)\n\n\n\n细心的小伙伴可能发现这个 Dialog 中的文字是变成中文了，但背景中的 titlebar 的文字还是英文，难道老司机也翻车了？\n\n其实 titlebar 中的这串文字是属于我们创建的应用的，如下：\n\n```dart\nhome: new MyHomePage(title: 'Flutter Demo Home Page')\n```\n\nFlutter 框架是不知道翻译这句话。\n\n接下来要做的就是我们自己实现一个类似 `GlobalMaterialLocalizations`的东西，用它来实现多语言。\n\n首先需要准备在应用中用到的字符串，一个刚新建的 Flutter 应用用到了四个字符串，如下\n\n- Flutter Demo\n- Flutter Demo Home Page\n- You have pushed the button this many times:\n- Increment\n\n这里为了简单我们只增加中文，依次对应为：\n\n- Flutter 示例\n- Flutter 示例主页面\n- 你一共点击了这么多次按钮：\n- 增加\n\n两种文字准备后就可以着手写 Localizations 了，此处的 Localizations 是多国语言资源的汇总。在这里我自定义一个名为 DemoLocalizations 的类,然后将多国资源整合进此类：\n\n```dart\nclass DemoLocalizations {\n\n  final Locale locale;\n\n  DemoLocalizations(this.locale);\n\n  static Map<String, Map<String, String>> _localizedValues = {\n    'en': {\n      'task title': 'Flutter Demo',\n      'titlebar title': 'Flutter Demo Home Page',\n      'click tip': 'You have pushed the button this many times:',\n      'inc':'Increment'\n    },\n    'zh': {\n      'task title': 'Flutter 示例',\n      'titlebar title': 'Flutter 示例主页面',\n      'click tip': '你一共点击了这么多次按钮：',\n      'inc':'增加'\n    }\n  };\n\n  get taskTitle{\n    return _localizedValues[locale.languageCode]['task title'];\n  }\n\n  get titleBarTitle{\n    return _localizedValues[locale.languageCode]['titlebar title'];\n  }\n\n  get clickTop{\n    return _localizedValues[locale.languageCode]['click tip'];\n  }\n  \n  get inc{\n    return _localizedValues[locale.languageCode]['inc'];\n  }\n}\n```\n\n此时只要能拿到 DemoLocalizations 的对象实例，就可以调用它的`taskTitle`、`titleBarTitle`、`clickTop`这三个方法来获取对应的字符串。\n\n定义完 DemoLocalizations 以后，我们就需要想这么一个问题，这个类是谁负责初始化呢？答案自然不是我们自己主动去初始化，而是需要一个叫做 `LocalizationsDelegate`的类来完成，LocalizationsDelegate 是一个抽象类，需要我们去实现它：\n\n```dart\nclass DemoLocalizationsDelegate extends LocalizationsDelegate<DemoLocalizations>{\n\n  const DemoLocalizationsDelegate();\n\n  @override\n  bool isSupported(Locale locale) {\n    return ['en','zh'].contains(locale.languageCode);\n  }\n\n  @override\n  Future<DemoLocalizations> load(Locale locale) {\n    return new SynchronousFuture<DemoLocalizations>(new DemoLocalizations(locale));\n  }\n\n  @override\n  bool shouldReload(LocalizationsDelegate<DemoLocalizations> old) {\n    return false;\n  }\n\n  static DemoLocalizationsDelegate delegate = const DemoLocalizationsDelegate();\n}\n```\n\n注意 `load` 方法，DemoLocalizations就是在此方法内被初始化的。\n\n接着将 DemoLocalizationsDelegate 添加进 MaterialApp：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: 'Flutter Demo',\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: 'Flutter Demo Home Page'),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,                 //添加在此处\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n```\n\nDemoLocalizationsDelegate 已经被添加进 MaterialApp，那我们该如何使用 DemoLocalizations 呢？这里就要介绍另一个 Weidget 的子类 `Localizations`，注意此处的 Localizations 它是一个货真价实 Widget。DemoLocalizationsDelegate 这个类的对象虽然被传入了 MaterialApp，但由于 MaterialApp 会在内部嵌套 Localizations 这个 Widget，而 LocalizationsDelegate 正是其构造方法必须的参数：\n\n```dart\n  Localizations({\n    Key key,\n    @required this.locale,\n    @required this.delegates,                              //此处\n    this.child,\n  }) : assert(locale != null),\n       assert(delegates != null),\n       assert(delegates.any(\n               (LocalizationsDelegate<dynamic> delegate)\n                 => delegate is LocalizationsDelegate<WidgetsLocalizations>)\n             ),\n       super(key: key);\n```\n\n而 DemoLocalizations 的实例也是在 Localizations 中通过 DemoLocalizationsDelegate 实例化的。所以在应用中要使用 DemoLocalizations 的实例自然是需要通过 Localizations 这个 Widget 来获取的，代码如下：\n\n```dart\nLocalizations.of(context, DemoLocalizations);\n```\n\n`of`这个静态方法就会返回 DemoLocalizations 的实例，现在先别管其内部是如何实现的。我们将这行代码放入 DemoLocalizations 中以方便使用：\n\n```dart\nclass DemoLocalizations {\n\n  final Locale locale;\n\n  DemoLocalizations(this.locale);\n\n  static Map<String, Map<String, String>> _localizedValues = {\n    'en': {\n      'task title': 'Flutter Demo',\n      'titlebar title': 'Flutter Demo Home Page',\n      'click tip': 'You have pushed the button this many times:',\n      'inc':'Increment'\n    },\n    'zh': {\n      'task title': 'Flutter 示例',\n      'titlebar title': 'Flutter 示例主页面',\n      'click tip': '你一共点击了这么多次按钮：',\n      'inc':'增加'\n    }\n  };\n\n  get taskTitle{\n    return _localizedValues[locale.languageCode]['task title'];\n  }\n\n  get titleBarTitle{\n    return _localizedValues[locale.languageCode]['titlebar title'];\n  }\n\n  get clickTop{\n    return _localizedValues[locale.languageCode]['click tip'];\n  }\n\n  get inc{\n    return _localizedValues[locale.languageCode]['inc'];\n  }\n\n  //此处\n  static DemoLocalizations of(BuildContext context){\n    return Localizations.of(context, DemoLocalizations);\n  }\n}\n```\n\n接下来就是真正使用 DemoLocalizations 的时候了，在代码中将原来的字符串替换如下：\n\n```dart\nimport 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'package:flutter/foundation.dart' show SynchronousFuture;\n\nvoid main() {\n  runApp(new MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: DemoLocalizations.of(context).taskTitle,                           // 此处1\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: DemoLocalizations.of(context).titleBarTitle), // 此处2\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key, this.title}) : super(key: key);\n\n  final String title;\n\n  @override\n  _MyHomePageState createState() => new _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    showDatePicker(context: context,\n        initialDate: new DateTime.now(),\n        firstDate: new DateTime.now().subtract(new Duration(days: 30)),\n        lastDate: new DateTime.now().add(new Duration(days: 30))).then((v) {});\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return new Scaffold(\n      appBar: new AppBar(\n        title: new Text(widget.title),\n      ),\n      body: new Center(\n        child: new Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            new Text(\n              DemoLocalizations.of(context).clickTop,                          // 此处3\n            ),\n            new Text(\n              '$_counter',\n              style: Theme\n                  .of(context)\n                  .textTheme\n                  .display1,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: new FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: DemoLocalizations.of(context).inc,                           // 此处4\n        child: new Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n运行！！\n\n![](http://backup.flutter-dev.cn/device-2017-12-21-231417.png)\n\n😂😂😂 \n\n当遇到这种突如其来的问题的时候一定要淡定，喝口水，眺望一会远方。。。\n\n接着仔细看报错信息：The getter 'taskTitle' was called on null.说的很明确，在 1 处出现了空指针，我们没有像预想的一样拿到 DemoLocalizations 对象。那问题一定出在 Localizations.of 方法内部，跟进去看看：\n\n```dart\n  static T of<T>(BuildContext context, Type type) {\n    assert(context != null);\n    assert(type != null);\n    final _LocalizationsScope scope =       \n             context.inheritFromWidgetOfExactType(_LocalizationsScope); // 此处\n    return scope?.localizationsState?.resourcesFor<T>(type);\n  }\n```\n\n关键在 `context.inheritFromWidgetOfExactType`处，继续进去：\n\n```dart\nInheritedWidget inheritFromWidgetOfExactType(Type targetType);\n```\n\n很简单，这是一个抽象 BuildContext 的抽象方法。此时如果再要继续追踪实现类就比较困难了，通过这个方法的注释可以知道，它是通过 targetType 来获取 context 最近父节点的对象，前提条件是 targetType 对应的类必须是 InheriteWidget 的子类。通过查看 `_LocalizationsScope`发现其正是继承自 InheriteWidget。那就是说没有从 context 的父节点中找到 _LocalizationsScope。此时我们再看一下调用 taskTitle 的地方：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      title: DemoLocalizations.of(context).taskTitle,                           // 此处\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n```\n\n\n\n仔细看 taskTitle 处的 context 是从最外层的 build 方法中传入的，而在之前说过 Localizations 这个组件是在 MaterialApp 中被嵌套的，也就是说能找到 DemoLocalizations 的 context 至少需要是 MaterialApp 内部的，而此时的 context 是无法找到 DemoLocalizations 对象的。但这样进入死胡同了，实现多语言的 DemoLocalizations 需要在 MaterialApp 内部才能被找到，而这里的 title 用到的 context 是在 MaterialApp 外部的。\n\n难道多语言在 title 上没法实现？\n\n喝口水，眺望下远方。\n\n既然如此我们不如看下这个 title 的说明：\n\n```dart\n  /// A one-line description used by the device to identify the app for the user.\n  ///\n  /// On Android the titles appear above the task manager's app snapshots which are\n  /// displayed when the user presses the \"recent apps\" button. Similarly, on\n  /// iOS the titles appear in the App Switcher when the user double presses the\n  /// home button.\n  ///\n  /// To provide a localized title instead, use [onGenerateTitle].\n  ///\n  /// This value is passed unmodified to [WidgetsApp.title].\n  final String title;\n```\n\n请注意这句：To provide a localized title instead, use [onGenerateTitle].\n\n没想到啊，如果要对 title 进行多语言处理还需要 `onGenerateTitle`这个属性。那就简单了，更改如下：\n\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      onGenerateTitle: (context){                                              // 此处\n        return DemoLocalizations.of(context).taskTitle;\n      },\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n```\n\n\n\n此时运行会发现 taskTitle 处已经没问题了，但 titleBarTitle 这边还是报错，原因一样它的 context 使用的是 MaterialApp 外部的 context。但这里的 title 是可以被移动到 MyHomePage 内部初始的，所以很好修改，将 MyHomePage 构造方法中的 title 参数移除，直接在 AppBar 内部赋值：\n\n```dart\nclass MyHomePage extends StatefulWidget {\n  MyHomePage({Key key}) : super(key: key);\n\n  @override\n  _MyHomePageState createState() => new _MyHomePageState();\n}\n\nclass _MyHomePageState extends State<MyHomePage> {\n  int _counter = 0;\n\n  void _incrementCounter() {\n    showDatePicker(context: context,\n        initialDate: new DateTime.now(),\n        firstDate: new DateTime.now().subtract(new Duration(days: 30)),\n        lastDate: new DateTime.now().add(new Duration(days: 30))).then((v) {});\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return new Scaffold(\n      appBar: new AppBar(\n        title: new Text(DemoLocalizations.of(context).titleBarTitle),            // 此处\n      ),\n      body: new Center(\n        child: new Column(\n          mainAxisAlignment: MainAxisAlignment.center,\n          children: <Widget>[\n            new Text(\n              DemoLocalizations.of(context).clickTop,\n            ),\n            new Text(\n              '$_counter',\n              style: Theme\n                  .of(context)\n                  .textTheme\n                  .display1,\n            ),\n          ],\n        ),\n      ),\n      floatingActionButton: new FloatingActionButton(\n        onPressed: _incrementCounter,\n        tooltip: DemoLocalizations.of(context).inc,\n        child: new Icon(Icons.add),\n      ),\n    );\n  }\n}\n```\n\n\n\n再运行：\n\n![](http://backup.flutter-dev.cn/device-2017-12-22-001905.png)\n\n![](http://backup.flutter-dev.cn/device-2017-12-22-002133.png)\n\n完美。\n\n## 三、国际化的初始化过程\n\n上一节中简单介绍了如何在 MaterialApp 实现国际化，各位可能也注意到了最终语言资源的选择还是留给了 DemoLocalizations，而对语言资源本身是以什么形式存在没有特别规定。在上文中我将两国的语言放到了一个 Map 中，自然也可以将其放在服务器上，在程序启动后进行拉取，这些都是后话了，在这一节中我简单剖析下源码，看看 DemoLocalizatins 是如何在程序运行后被初始化的。\n\n上面已经说过官方鼓励我们使用 MaterialApp 作为程序入口，我们就从 MaterialApp 出发，首先看 MaterialApp 的构造方法：\n\n```dart\n  MaterialApp({ // can't be const because the asserts use methods on Map :-(\n    Key key,\n    this.title: '',\n    this.onGenerateTitle,\n    this.color,\n    this.theme,\n    this.home,\n    this.routes: const <String, WidgetBuilder>{},\n    this.initialRoute,\n    this.onGenerateRoute,\n    this.onUnknownRoute,\n    this.locale,\n    this.localizationsDelegates,\n    this.localeResolutionCallback,\n    this.supportedLocales: const <Locale>[const Locale('en', 'US')],\n    this.navigatorObservers: const <NavigatorObserver>[],\n    this.debugShowMaterialGrid: false,\n    this.showPerformanceOverlay: false,\n    this.checkerboardRasterCacheImages: false,\n    this.checkerboardOffscreenLayers: false,\n    this.showSemanticsDebugger: false,\n    this.debugShowCheckedModeBanner: true\n  })\n```\n\n上面的 `localizationsDelegates`是多语言的关键点，由于 MaterialApp 是一个 StatefulWidget，所以直接看其对应的 State 类 `_MaterialAppState`中的 build 方法，代码有点长：\n\n```dart\nWidget build(BuildContext context) {\n    final ThemeData theme = widget.theme ?? new ThemeData.fallback();\n    Widget result = new AnimatedTheme(                                // 1\n      data: theme,\n      isMaterialAppTheme: true,\n      child: new WidgetsApp(                                          //2\n        key: new GlobalObjectKey(this),\n        title: widget.title,\n        onGenerateTitle: widget.onGenerateTitle,\n        textStyle: _errorTextStyle,\n        // blue is the primary color of the default theme\n        color: widget.color ?? theme?.primaryColor ?? Colors.blue,\n        navigatorObservers:\n            new List<NavigatorObserver>.from(widget.navigatorObservers)\n              ..add(_heroController),\n        initialRoute: widget.initialRoute,\n        onGenerateRoute: _onGenerateRoute,\n        onUnknownRoute: _onUnknownRoute,\n        locale: widget.locale,\n        localizationsDelegates: _localizationsDelegates,                  //3\n        localeResolutionCallback: widget.localeResolutionCallback,\n        supportedLocales: widget.supportedLocales,\n        showPerformanceOverlay: widget.showPerformanceOverlay,\n        checkerboardRasterCacheImages: widget.checkerboardRasterCacheImages,\n        checkerboardOffscreenLayers: widget.checkerboardOffscreenLayers,\n        showSemanticsDebugger: widget.showSemanticsDebugger,\n        debugShowCheckedModeBanner: widget.debugShowCheckedModeBanner,\n        inspectorSelectButtonBuilder: (BuildContext context, VoidCallback onPressed) {\n          return new FloatingActionButton(\n            child: const Icon(Icons.search),\n            onPressed: onPressed,\n            mini: true,\n          );\n        },\n      )\n    );\n\n    assert(() {\n      if (widget.debugShowMaterialGrid) {    //此处如果有配置，则会显示网格\n        result = new GridPaper(\n          color: const Color(0xE0F9BBE0),\n          interval: 8.0,\n          divisions: 2,\n          subdivisions: 1,\n          child: result,\n        );\n      }\n      return true;\n    }());\n\n    return new ScrollConfiguration(                                // 4\n      behavior: new _MaterialScrollBehavior(),\n      child: result,\n    );\n  }\n```\n\n首先在 3 处可以看到 _localizationsDelegates 被赋值给了 WidgetsApp 的 localizationsDelegates 参数。在看 1、2、4 处分别又在原有的 Widget 上做了包裹，此时的 widget 树层次如下图：\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.45.47.png)\n\n接着进入 WidgetApp ，它也是个 StatefulWidget，直接看它的 State 类 `_WidgetsAppState`的 build 方法：\n\n```dart\n Widget build(BuildContext context) {\n    Widget result = new Navigator(                                    // 1\n      key: _navigator,\n      initialRoute: widget.initialRoute ?? ui.window.defaultRouteName,\n      onGenerateRoute: widget.onGenerateRoute,\n      onUnknownRoute: widget.onUnknownRoute,\n      observers: widget.navigatorObservers,\n    );\n\n    if (widget.textStyle != null) {\n      result = new DefaultTextStyle(                                    //2\n        style: widget.textStyle,\n        child: result,\n      );\n    }\n\n    ... //此处省略调试相关代码\n\n    return new MediaQuery(                                              //3\n      data: new MediaQueryData.fromWindow(ui.window),\n      child: new Localizations(                                         //4\n        locale: widget.locale ?? _locale,\n        delegates: _localizationsDelegates.toList(),\n        // This Builder exists to provide a context below the Localizations widget.\n        // The onGenerateCallback() can refer to Localizations via its context\n        // parameter.\n        child: new Builder(                                             //5\n          builder: (BuildContext context) {\n            String title = widget.title;\n            if (widget.onGenerateTitle != null) {\n              title = widget.onGenerateTitle(context);\n              assert(title != null, 'onGenerateTitle must return a non-null String');\n            }\n            return new Title(                                            //6\n              title: title,\n              color: widget.color,\n              child: result,\n            );\n          },\n        ),\n      ),\n    );\n  }\n```\n\n在 4 处终于见到了我们熟悉的身影 `Localizatins`。_localizationsDelegates 也是被传递进了 Localizations。此时的 widget 树层次如下：\n\n\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.55.52.png)\n\n层次如此之多，但我们关心只是其中的 Localizations，所以抛开其他不看，进入 Localizations 看看。\n\n不出意外 Localizations 也是一个 StatefulWidget，此时我们不需要关心它的 build 方法，而是应该关注其内部的 `initState` 方法，如果有数据需要初始化，不出意外就是在这里进行。\n\ninitState 方法很短：\n\n```dart\n  @override\n  void initState() {\n    super.initState();\n    load(widget.locale);\n  }\n```\n\n继续进入 load 方法：\n\n```dart\n  void load(Locale locale) {\n    final Iterable<LocalizationsDelegate<dynamic>> delegates = widget.delegates; // 1\n    if (delegates == null || delegates.isEmpty) {\n      _locale = locale;\n      return;\n    }\n\n    Map<Type, dynamic> typeToResources;\n    final Future<Map<Type, dynamic>> typeToResourcesFuture = _loadAll(locale, delegates) //2\n      .then((Map<Type, dynamic> value) {\n        return typeToResources = value;\n      });\n    \n    ...\n  \n  }\n```\n\n 1 处的 delegates 即一开始从 MaterialApp 传入的 delegate 数组，这里转成立可迭代对象。接着看 2 处的 `_loadAll` 方法返回的 typeToResourcesFuture ，其中的值类型为 `Map<Type, dynamic>`，这里可以推敲出来里边的 Type 对应的就是不同的 Localizations，而 dynamic 则是其实例。带着这样的想法看 _loadAll 方法：\n\n```dart\nFuture<Map<Type, dynamic>> _loadAll(Locale locale, Iterable<LocalizationsDelegate<dynamic>> allDelegates) {\n  final Map<Type, dynamic> output = <Type, dynamic>{};\n  List<_Pending> pendingList;\n\n  // Only load the first delegate for each delegate type that supports\n  // locale.languageCode.\n  final Set<Type> types = new Set<Type>();\n  final List<LocalizationsDelegate<dynamic>> delegates = <LocalizationsDelegate<dynamic>>[];\n  for (LocalizationsDelegate<dynamic> delegate in allDelegates) {\n    if (!types.contains(delegate.type) && delegate.isSupported(locale)) {\n      types.add(delegate.type);\n      delegates.add(delegate);          \n    }\n  }\n\n  for (LocalizationsDelegate<dynamic> delegate in delegates) {\n    final Future<dynamic> inputValue = delegate.load(locale);    // 1\n    dynamic completedValue;\n    final Future<dynamic> futureValue = inputValue.then<dynamic>((dynamic value) {\n      return completedValue = value;                             // 2\n    });\n    if (completedValue != null) { // inputValue was a SynchronousFuture\n      final Type type = delegate.type;\n      assert(!output.containsKey(type));\n      output[type] = completedValue;\n    } else {\n      pendingList ??= <_Pending>[];\n      pendingList.add(new _Pending(delegate, futureValue));\n    }\n  }\n\n  // All of the delegate.load() values were synchronous futures, we're done.\n  if (pendingList == null)\n    return new SynchronousFuture<Map<Type, dynamic>>(output);\n\n  // Some of delegate.load() values were asynchronous futures. Wait for them.\n  return Future.wait<dynamic>(pendingList.map((_Pending p) => p.futureValue))\n    .then<Map<Type, dynamic>>((List<dynamic> values) {\n      assert(values.length == pendingList.length);\n      for (int i = 0; i < values.length; i += 1) {\n        final Type type = pendingList[i].delegate.type;\n        assert(!output.containsKey(type));\n        output[type] = values[i];\n      }\n      return output;\n    });\n}\n```\n\n看 1 处，调用到了 deletegate 的 load 方法，返回一个 Future ，这里为什么不直接返回DemoLocalizations 的实例而要返回 Future，这个在前面也提到了如果你的资源是放在服务器上的，那么这就是一个耗时操作，所以在此处用了 Future。\n\n```dart\n  @override\n  Future<DemoLocalizations> load(Locale locale) {\n    return new SynchronousFuture<DemoLocalizations>(new DemoLocalizations(locale));\n  }\n```\n\n由于这里返回的是 SynchronousFuture ，所以在 2 处的代码会被顺序执行，此时 completedValue 就是 DemoLocalizations 的实例对象了。然后 completedValue 被放入了 output 接着就返回出去了，最后赋值给了 \\_LocalizationsState 的 \\_typeToResources 变量。\n\n到目前为止整个多语言的加载就完成了，剩下的就是等着被使用。下面看一下使用的方式：\n\n```dart\nDemoLocalizations.of(context).taskTitle\n```\n简单粗暴，根本看不出来是怎么拿到 DemoLocalizations 对象的。不多说，看代码：\n\n```dart\nreturn Localizations.of(context, DemoLocalizations);\n```\n内部调用的是 Localizations 的 of 静态方法，接着看：\n\n```dart\nstatic T of<T>(BuildContext context, Type type) {\n  assert(context != null);\n  assert(type != null);\n  final _LocalizationsScope scope = context.inheritFromWidgetOfExactType(_LocalizationsScope);\n  return scope?.localizationsState?.resourcesFor<T>(type);\n}\n```\n前面已经讲解过 context.inheritFromWidgetOfExactType 的作用，这里的 scope 就是最靠近 context 节点的 \\_LocalizationsScope 类型的节点。但我们看了上面的 widget 树的层次图，并没有看到 \\_LocalizationsScope 这个 widget,它是在什么时候被添加进去的呢？\n\n回到 \\_LocalizationsState 的 build 方法：\n\n```dart\n  @override\n  Widget build(BuildContext context) {\n    if (_locale == null)\n      return new Container();\n    return new _LocalizationsScope(\n      key: _localizedResourcesScopeKey,\n      locale: _locale,\n      localizationsState: this,\n      typeToResources: _typeToResources,\n      child: new Directionality(\n        textDirection: _textDirection,\n        child: widget.child,\n      ),\n    );\n  }\n```\n\n真想(●—●)。在 Localizations 的内部，它将它原本的子节点外又嵌套了 Directionality、\\_LocalizationsScope、Container 这三层。其中 \\_LocalizationsScope 就是我们想找的。\n\n接着看：\n\n```dart\n  return scope?.localizationsState?.resourcesFor<T>(type);\n```\n此处调用了 \\_LocalizationsState 的 resourcesFor 方法：\n\n```dart\n  T resourcesFor<T>(Type type) {\n    assert(type != null);\n    final T resources = _typeToResources[type];\n    return resources;\n  }\n```\n到这差不多就结束了，这里根据 type 从 \\_typeToResources 中取出了 DemoLocalizations 的实例。\n最后再把完整的 widget 树的层次展示一下：\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%882.29.45.png)\n\n\n## 四、简单的 App 内语言切换\n\n下面我见到介绍一下如何在不切换手机系统的语言的情况下来切换 Flutter 应用内的语言。主要用到的是 Localizations 的 override 方法。具体不多介绍，看下面我自定义的 StatefulWidget 类 FreeLocalizations 和它的 State 类 _FreeLocalizations：\n\n```dart\nclass FreeLocalizations extends StatefulWidget{\n\n  final Widget child;\n\n  FreeLocalizations({Key key,this.child}):super(key:key);\n\n  @override\n  State<FreeLocalizations> createState() {\n    return new _FreeLocalizations();\n  }\n}\n\nclass _FreeLocalizations extends State<FreeLocalizations>{\n\n  Locale _locale = const Locale('zh','CH');\n\n  changeLocale(Locale locale){\n    setState((){\n      _locale = locale;\n    });\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    return new Localizations.override(\n      context: context,\n      locale: _locale,\n      child: widget.child,\n    );\n  }\n}\n```\n上面代码的意思比较清晰，就是在调用 changeLocale 方法的时候修改其内部 widget 的语言。\n下面来如何使用：\n\n```dart\nvoid main() {\n  runApp(new MyApp());\n}\n\nGlobalKey<_FreeLocalizations> freeLocalizationStateKey = new GlobalKey<_FreeLocalizations>();   // 1\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return new MaterialApp(\n      onGenerateTitle: (context){\n        return DemoLocalizations.of(context).taskTitle;\n      },\n      theme: new ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: new Builder(builder: (context){\n        return new FreeLocalizations(\n          key: freeLocalizationStateKey,\n          child: new MyHomePage(),\n        );\n      }),\n      localizationsDelegates: [\n        GlobalMaterialLocalizations.delegate,\n        GlobalWidgetsLocalizations.delegate,\n        DemoLocalizationsDelegate.delegate,\n      ],\n      supportedLocales: [\n        const Locale('zh', 'CH'),\n        const Locale('en', 'US'),\n      ],\n    );\n  }\n}\n\n```\n\n注意想要在 FreeLocalizations 外部去调用其方法需要使用到 GlobalKey 的帮助，用法见 1 处。让后我们将 MyHomePage 放入 FreeLocalizations 内部。\n\n接着在点击按钮的时候调用如下方法：\n\n```dart\n  void changeLocale(){\n    if(flag){\n      freeLocalizationStateKey.currentState.changeLocale(const Locale('zh',\"CH\"));\n    }else{\n      freeLocalizationStateKey.currentState.changeLocale(const Locale('en',\"US\"));\n    }\n    flag = !flag;\n  }\n```\n\n效果如下：\n\n![](http://backup.flutter-dev.cn/localizatiion_free.gif)\n\n这一小节我讲的比较简单，但如果你看明白了二、三两节，那弄明白这里多语言是怎么切换的应该是比较容易的。\n\n## 五、总结\n\n![](http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%883.34.41.png)\n\n思维导图地址：[https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr](https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr)\n文章中出现的代码的地址：[https://github.com/flutter-dev/internationalizing](https://github.com/flutter-dev/internationalizing)","slug":"flutter-localizations","published":1,"updated":"2024-08-21T03:16:19.784Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vt00165p6ta3v9607c","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>从 2015 年接触 Flutter 到现在也有两年多时间，在这期间我并没有正真地去了解这个神奇的框架，只是时不时拉取 master 的最新代码，编一下 flutter_gallery 看看有什么新特性。但随着此次 GDD 的召开，Flutter 被 Google 带到了国内开发者的眼前，相信谷歌是已经准备好让 Flutter 走上移动开发历史的舞台了。</p>\n<p>一款好的移动应用该具备什么品质？戳中用户痛点的功能，炫酷的 UI 还是流畅的操作体验？这些都很重要，少了其中任何一点都是得不到用户青睐的。但今天我要说的虽然不是前面这三个中的哪一个，但也是少了它就不行的“应用国际化”。</p>\n<p>对于开发者来说，在 Android 和 iOS 开发中使用国际化已经是老掉牙的套路了，那么在 Flutter 中该如何使用国际化呢？是否也想 Android 一样只要多配置一个 xml 就能搞定了呢？</p>\n<span id=\"more\"></span>\n<h2 id=\"二、在-MaterialApp-中添加国际化支持\"><a href=\"#二、在-MaterialApp-中添加国际化支持\" class=\"headerlink\" title=\"二、在 MaterialApp 中添加国际化支持\"></a>二、在 MaterialApp 中添加国际化支持</h2><p>Flutter 官方鼓励我们在写 Flutter 应用的时候直接从 MaterialApp 开始，原因是 MaterialApp 为我们集成好了很多 Material Design 所必须的控件，如AnimatedThemen、GridPager 等，另外还通过 MaterialApp 配置了全局路由，方便进行页面的切换。既然如此我们就先从 MaterialApp 开始实现国际化。国际化涵盖的不单单只是多国语言，还有文字阅读方向、时间和日期格式等，但本文仅介绍多国语言的适配，它们几种还希望读者自行学习和研究。</p>\n<p>通常我们新建的 Flutter 应用是默认不支持多语言的，即使用户在中文环境下，显示的文字仍然是英文，比如下图所示的日期选择对话框：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/device-2017-12-21-214051.png\" alt=\"\"></p>\n<p>那么怎么样将系统的这些组件国际化呢？首先需要在 pubspec.yaml 中添加如下依赖：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">flutter_localizations:</span></span><br><span class=\"line\">  <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br></pre></td></tr></table></figure>\n\n<p>接着运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter packages get</span><br></pre></td></tr></table></figure>\n\n<p> 以获取依赖库。</p>\n<p>当上面两部完成后在 main.dart 中 import 如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter_localizations/flutter_localizations.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在 MaterialApp 的构造方法中给 <code>localizationsDelegates</code> 和 <code>supportedLocales</code> 两个可选参数赋值：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">      localizationsDelegates: [                             <span class=\"comment\">//此处</span></span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [                                   <span class=\"comment\">//此处</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>,<span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>,<span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>暂时先不用理解这两个参数是什么意思，此时如果重新运行的话结果如下图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-21-215330.png\" alt=\"\"></p>\n<p>细心的小伙伴可能发现这个 Dialog 中的文字是变成中文了，但背景中的 titlebar 的文字还是英文，难道老司机也翻车了？</p>\n<p>其实 titlebar 中的这串文字是属于我们创建的应用的，如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home: <span class=\"keyword\">new</span> MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Flutter 框架是不知道翻译这句话。</p>\n<p>接下来要做的就是我们自己实现一个类似 <code>GlobalMaterialLocalizations</code>的东西，用它来实现多语言。</p>\n<p>首先需要准备在应用中用到的字符串，一个刚新建的 Flutter 应用用到了四个字符串，如下</p>\n<ul>\n<li>Flutter Demo</li>\n<li>Flutter Demo Home Page</li>\n<li>You have pushed the button this many times:</li>\n<li>Increment</li>\n</ul>\n<p>这里为了简单我们只增加中文，依次对应为：</p>\n<ul>\n<li>Flutter 示例</li>\n<li>Flutter 示例主页面</li>\n<li>你一共点击了这么多次按钮：</li>\n<li>增加</li>\n</ul>\n<p>两种文字准备后就可以着手写 Localizations 了，此处的 Localizations 是多国语言资源的汇总。在这里我自定义一个名为 DemoLocalizations 的类,然后将多国资源整合进此类：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoLocalizations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Locale locale;</span><br><span class=\"line\"></span><br><span class=\"line\">  DemoLocalizations(<span class=\"keyword\">this</span>.locale);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;&gt; _localizedValues = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;en&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;Increment&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;zh&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例主页面&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;你一共点击了这么多次按钮：&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;增加&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> taskTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;task title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> titleBarTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;titlebar title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> clickTop&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;click tip&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">get</span> inc&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;inc&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时只要能拿到 DemoLocalizations 的对象实例，就可以调用它的<code>taskTitle</code>、<code>titleBarTitle</code>、<code>clickTop</code>这三个方法来获取对应的字符串。</p>\n<p>定义完 DemoLocalizations 以后，我们就需要想这么一个问题，这个类是谁负责初始化呢？答案自然不是我们自己主动去初始化，而是需要一个叫做 <code>LocalizationsDelegate</code>的类来完成，LocalizationsDelegate 是一个抽象类，需要我们去实现它：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoLocalizationsDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">LocalizationsDelegate</span>&lt;<span class=\"title\">DemoLocalizations</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> DemoLocalizationsDelegate();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> isSupported(Locale locale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;en&#x27;</span>,<span class=\"string\">&#x27;zh&#x27;</span>].contains(locale.languageCode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Future&lt;DemoLocalizations&gt; load(Locale locale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronousFuture&lt;DemoLocalizations&gt;(<span class=\"keyword\">new</span> DemoLocalizations(locale));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldReload(LocalizationsDelegate&lt;DemoLocalizations&gt; old) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> DemoLocalizationsDelegate delegate = <span class=\"keyword\">const</span> DemoLocalizationsDelegate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>load</code> 方法，DemoLocalizations就是在此方法内被初始化的。</p>\n<p>接着将 DemoLocalizationsDelegate 添加进 MaterialApp：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,                 <span class=\"comment\">//添加在此处</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DemoLocalizationsDelegate 已经被添加进 MaterialApp，那我们该如何使用 DemoLocalizations 呢？这里就要介绍另一个 Weidget 的子类 <code>Localizations</code>，注意此处的 Localizations 它是一个货真价实 Widget。DemoLocalizationsDelegate 这个类的对象虽然被传入了 MaterialApp，但由于 MaterialApp 会在内部嵌套 Localizations 这个 Widget，而 LocalizationsDelegate 正是其构造方法必须的参数：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Localizations(&#123;</span><br><span class=\"line\">  Key key,</span><br><span class=\"line\">  <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.locale,</span><br><span class=\"line\">  <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.delegates,                              <span class=\"comment\">//此处</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">&#125;) : <span class=\"keyword\">assert</span>(locale != <span class=\"keyword\">null</span>),</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(delegates != <span class=\"keyword\">null</span>),</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(delegates.any(</span><br><span class=\"line\">             (LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt; delegate)</span><br><span class=\"line\">               =&gt; delegate <span class=\"keyword\">is</span> LocalizationsDelegate&lt;WidgetsLocalizations&gt;)</span><br><span class=\"line\">           ),</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(key: key);</span><br></pre></td></tr></table></figure>\n\n<p>而 DemoLocalizations 的实例也是在 Localizations 中通过 DemoLocalizationsDelegate 实例化的。所以在应用中要使用 DemoLocalizations 的实例自然是需要通过 Localizations 这个 Widget 来获取的，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Localizations.of(context, DemoLocalizations);</span><br></pre></td></tr></table></figure>\n\n<p><code>of</code>这个静态方法就会返回 DemoLocalizations 的实例，现在先别管其内部是如何实现的。我们将这行代码放入 DemoLocalizations 中以方便使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoLocalizations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Locale locale;</span><br><span class=\"line\"></span><br><span class=\"line\">  DemoLocalizations(<span class=\"keyword\">this</span>.locale);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;&gt; _localizedValues = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;en&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;Increment&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;zh&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例主页面&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;你一共点击了这么多次按钮：&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;增加&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> taskTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;task title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> titleBarTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;titlebar title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> clickTop&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;click tip&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> inc&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;inc&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//此处</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> DemoLocalizations of(BuildContext context)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Localizations.of(context, DemoLocalizations);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来就是真正使用 DemoLocalizations 的时候了，在代码中将原来的字符串替换如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter_localizations/flutter_localizations.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/foundation.dart&#x27;</span> <span class=\"keyword\">show</span> SynchronousFuture;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(<span class=\"keyword\">new</span> MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: DemoLocalizations.of(context).taskTitle,                           <span class=\"comment\">// 此处1</span></span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: DemoLocalizations.of(context).titleBarTitle), <span class=\"comment\">// 此处2</span></span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; <span class=\"keyword\">new</span> _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    showDatePicker(context: context,</span><br><span class=\"line\">        initialDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now(),</span><br><span class=\"line\">        firstDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().subtract(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>)),</span><br><span class=\"line\">        lastDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().add(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>))).then((v) &#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Scaffold(</span><br><span class=\"line\">      appBar: <span class=\"keyword\">new</span> AppBar(</span><br><span class=\"line\">        title: <span class=\"keyword\">new</span> Text(widget.title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: <span class=\"keyword\">new</span> Center(</span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              DemoLocalizations.of(context).clickTop,                          <span class=\"comment\">// 此处3</span></span><br><span class=\"line\">            ),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme</span><br><span class=\"line\">                  .of(context)</span><br><span class=\"line\">                  .textTheme</span><br><span class=\"line\">                  .display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: <span class=\"keyword\">new</span> FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: DemoLocalizations.of(context).inc,                           <span class=\"comment\">// 此处4</span></span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行！！</p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-21-231417.png\" alt=\"\"></p>\n<p>😂😂😂 </p>\n<p>当遇到这种突如其来的问题的时候一定要淡定，喝口水，眺望一会远方。。。</p>\n<p>接着仔细看报错信息：The getter ‘taskTitle’ was called on null.说的很明确，在 1 处出现了空指针，我们没有像预想的一样拿到 DemoLocalizations 对象。那问题一定出在 Localizations.of 方法内部，跟进去看看：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> T of&lt;T&gt;(BuildContext context, <span class=\"built_in\">Type</span> type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(context != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(type != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _LocalizationsScope scope =       </span><br><span class=\"line\">           context.inheritFromWidgetOfExactType(_LocalizationsScope); <span class=\"comment\">// 此处</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> scope?.localizationsState?.resourcesFor&lt;T&gt;(type);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键在 <code>context.inheritFromWidgetOfExactType</code>处，继续进去：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InheritedWidget inheritFromWidgetOfExactType(<span class=\"built_in\">Type</span> targetType);</span><br></pre></td></tr></table></figure>\n\n<p>很简单，这是一个抽象 BuildContext 的抽象方法。此时如果再要继续追踪实现类就比较困难了，通过这个方法的注释可以知道，它是通过 targetType 来获取 context 最近父节点的对象，前提条件是 targetType 对应的类必须是 InheriteWidget 的子类。通过查看 <code>_LocalizationsScope</code>发现其正是继承自 InheriteWidget。那就是说没有从 context 的父节点中找到 _LocalizationsScope。此时我们再看一下调用 taskTitle 的地方：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: DemoLocalizations.of(context).taskTitle,                           <span class=\"comment\">// 此处</span></span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>仔细看 taskTitle 处的 context 是从最外层的 build 方法中传入的，而在之前说过 Localizations 这个组件是在 MaterialApp 中被嵌套的，也就是说能找到 DemoLocalizations 的 context 至少需要是 MaterialApp 内部的，而此时的 context 是无法找到 DemoLocalizations 对象的。但这样进入死胡同了，实现多语言的 DemoLocalizations 需要在 MaterialApp 内部才能被找到，而这里的 title 用到的 context 是在 MaterialApp 外部的。</p>\n<p>难道多语言在 title 上没法实现？</p>\n<p>喝口水，眺望下远方。</p>\n<p>既然如此我们不如看下这个 title 的说明：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">A one-line description used by the device to identify the app for the user.</span></span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">On Android the titles appear above the task manager&#x27;s app snapshots which are</span></span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">displayed when the user presses the &quot;recent apps&quot; button. Similarly, on</span></span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">iOS the titles appear in the App Switcher when the user double presses the</span></span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">home button.</span></span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">To provide a localized title instead, use [onGenerateTitle].</span></span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">This value is passed unmodified to [WidgetsApp.title].</span></span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br></pre></td></tr></table></figure>\n\n<p>请注意这句：To provide a localized title instead, use [onGenerateTitle].</p>\n<p>没想到啊，如果要对 title 进行多语言处理还需要 <code>onGenerateTitle</code>这个属性。那就简单了，更改如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      onGenerateTitle: (context)&#123;                                              <span class=\"comment\">// 此处</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> DemoLocalizations.of(context).taskTitle;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时运行会发现 taskTitle 处已经没问题了，但 titleBarTitle 这边还是报错，原因一样它的 context 使用的是 MaterialApp 外部的 context。但这里的 title 是可以被移动到 MyHomePage 内部初始的，所以很好修改，将 MyHomePage 构造方法中的 title 参数移除，直接在 AppBar 内部赋值：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; <span class=\"keyword\">new</span> _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    showDatePicker(context: context,</span><br><span class=\"line\">        initialDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now(),</span><br><span class=\"line\">        firstDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().subtract(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>)),</span><br><span class=\"line\">        lastDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().add(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>))).then((v) &#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Scaffold(</span><br><span class=\"line\">      appBar: <span class=\"keyword\">new</span> AppBar(</span><br><span class=\"line\">        title: <span class=\"keyword\">new</span> Text(DemoLocalizations.of(context).titleBarTitle),            <span class=\"comment\">// 此处</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: <span class=\"keyword\">new</span> Center(</span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              DemoLocalizations.of(context).clickTop,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme</span><br><span class=\"line\">                  .of(context)</span><br><span class=\"line\">                  .textTheme</span><br><span class=\"line\">                  .display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: <span class=\"keyword\">new</span> FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: DemoLocalizations.of(context).inc,</span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>再运行：</p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-22-001905.png\" alt=\"\"></p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-22-002133.png\" alt=\"\"></p>\n<p>完美。</p>\n<h2 id=\"三、国际化的初始化过程\"><a href=\"#三、国际化的初始化过程\" class=\"headerlink\" title=\"三、国际化的初始化过程\"></a>三、国际化的初始化过程</h2><p>上一节中简单介绍了如何在 MaterialApp 实现国际化，各位可能也注意到了最终语言资源的选择还是留给了 DemoLocalizations，而对语言资源本身是以什么形式存在没有特别规定。在上文中我将两国的语言放到了一个 Map 中，自然也可以将其放在服务器上，在程序启动后进行拉取，这些都是后话了，在这一节中我简单剖析下源码，看看 DemoLocalizatins 是如何在程序运行后被初始化的。</p>\n<p>上面已经说过官方鼓励我们使用 MaterialApp 作为程序入口，我们就从 MaterialApp 出发，首先看 MaterialApp 的构造方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(&#123; <span class=\"comment\">// can&#x27;t be const because the asserts use methods on Map :-(</span></span><br><span class=\"line\">  Key key,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.title: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onGenerateTitle,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.theme,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.home,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.routes: <span class=\"keyword\">const</span> &lt;<span class=\"built_in\">String</span>, WidgetBuilder&gt;&#123;&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.initialRoute,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onGenerateRoute,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onUnknownRoute,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.locale,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.localizationsDelegates,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.localeResolutionCallback,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.supportedLocales: <span class=\"keyword\">const</span> &lt;Locale&gt;[<span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>)],</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.navigatorObservers: <span class=\"keyword\">const</span> &lt;NavigatorObserver&gt;[],</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.debugShowMaterialGrid: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showPerformanceOverlay: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkerboardRasterCacheImages: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkerboardOffscreenLayers: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showSemanticsDebugger: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.debugShowCheckedModeBanner: <span class=\"keyword\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的 <code>localizationsDelegates</code>是多语言的关键点，由于 MaterialApp 是一个 StatefulWidget，所以直接看其对应的 State 类 <code>_MaterialAppState</code>中的 build 方法，代码有点长：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ThemeData theme = widget.theme ?? <span class=\"keyword\">new</span> ThemeData.fallback();</span><br><span class=\"line\">    Widget result = <span class=\"keyword\">new</span> AnimatedTheme(                                <span class=\"comment\">// 1</span></span><br><span class=\"line\">      data: theme,</span><br><span class=\"line\">      isMaterialAppTheme: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">      child: <span class=\"keyword\">new</span> WidgetsApp(                                          <span class=\"comment\">//2</span></span><br><span class=\"line\">        key: <span class=\"keyword\">new</span> GlobalObjectKey(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">        title: widget.title,</span><br><span class=\"line\">        onGenerateTitle: widget.onGenerateTitle,</span><br><span class=\"line\">        textStyle: _errorTextStyle,</span><br><span class=\"line\">        <span class=\"comment\">// blue is the primary color of the default theme</span></span><br><span class=\"line\">        color: widget.color ?? theme?.primaryColor ?? Colors.blue,</span><br><span class=\"line\">        navigatorObservers:</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;NavigatorObserver&gt;.from(widget.navigatorObservers)</span><br><span class=\"line\">              ..add(_heroController),</span><br><span class=\"line\">        initialRoute: widget.initialRoute,</span><br><span class=\"line\">        onGenerateRoute: _onGenerateRoute,</span><br><span class=\"line\">        onUnknownRoute: _onUnknownRoute,</span><br><span class=\"line\">        locale: widget.locale,</span><br><span class=\"line\">        localizationsDelegates: _localizationsDelegates,                  <span class=\"comment\">//3</span></span><br><span class=\"line\">        localeResolutionCallback: widget.localeResolutionCallback,</span><br><span class=\"line\">        supportedLocales: widget.supportedLocales,</span><br><span class=\"line\">        showPerformanceOverlay: widget.showPerformanceOverlay,</span><br><span class=\"line\">        checkerboardRasterCacheImages: widget.checkerboardRasterCacheImages,</span><br><span class=\"line\">        checkerboardOffscreenLayers: widget.checkerboardOffscreenLayers,</span><br><span class=\"line\">        showSemanticsDebugger: widget.showSemanticsDebugger,</span><br><span class=\"line\">        debugShowCheckedModeBanner: widget.debugShowCheckedModeBanner,</span><br><span class=\"line\">        inspectorSelectButtonBuilder: (BuildContext context, VoidCallback onPressed) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FloatingActionButton(</span><br><span class=\"line\">            child: <span class=\"keyword\">const</span> Icon(Icons.search),</span><br><span class=\"line\">            onPressed: onPressed,</span><br><span class=\"line\">            mini: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (widget.debugShowMaterialGrid) &#123;    <span class=\"comment\">//此处如果有配置，则会显示网格</span></span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> GridPaper(</span><br><span class=\"line\">          color: <span class=\"keyword\">const</span> Color(<span class=\"number\">0xE0F9BBE0</span>),</span><br><span class=\"line\">          interval: <span class=\"number\">8.0</span>,</span><br><span class=\"line\">          divisions: <span class=\"number\">2</span>,</span><br><span class=\"line\">          subdivisions: <span class=\"number\">1</span>,</span><br><span class=\"line\">          child: result,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScrollConfiguration(                                <span class=\"comment\">// 4</span></span><br><span class=\"line\">      behavior: <span class=\"keyword\">new</span> _MaterialScrollBehavior(),</span><br><span class=\"line\">      child: result,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在 3 处可以看到 _localizationsDelegates 被赋值给了 WidgetsApp 的 localizationsDelegates 参数。在看 1、2、4 处分别又在原有的 Widget 上做了包裹，此时的 widget 树层次如下图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.45.47.png\" alt=\"\"></p>\n<p>接着进入 WidgetApp ，它也是个 StatefulWidget，直接看它的 State 类 <code>_WidgetsAppState</code>的 build 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">   Widget result = <span class=\"keyword\">new</span> Navigator(                                    <span class=\"comment\">// 1</span></span><br><span class=\"line\">     key: _navigator,</span><br><span class=\"line\">     initialRoute: widget.initialRoute ?? ui.<span class=\"built_in\">window</span>.defaultRouteName,</span><br><span class=\"line\">     onGenerateRoute: widget.onGenerateRoute,</span><br><span class=\"line\">     onUnknownRoute: widget.onUnknownRoute,</span><br><span class=\"line\">     observers: widget.navigatorObservers,</span><br><span class=\"line\">   );</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (widget.textStyle != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     result = <span class=\"keyword\">new</span> DefaultTextStyle(                                    <span class=\"comment\">//2</span></span><br><span class=\"line\">       style: widget.textStyle,</span><br><span class=\"line\">       child: result,</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   ... <span class=\"comment\">//此处省略调试相关代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MediaQuery(                                              <span class=\"comment\">//3</span></span><br><span class=\"line\">     data: <span class=\"keyword\">new</span> MediaQueryData.fromWindow(ui.<span class=\"built_in\">window</span>),</span><br><span class=\"line\">     child: <span class=\"keyword\">new</span> Localizations(                                         <span class=\"comment\">//4</span></span><br><span class=\"line\">       locale: widget.locale ?? _locale,</span><br><span class=\"line\">       delegates: _localizationsDelegates.toList(),</span><br><span class=\"line\">       <span class=\"comment\">// This Builder exists to provide a context below the Localizations widget.</span></span><br><span class=\"line\">       <span class=\"comment\">// The onGenerateCallback() can refer to Localizations via its context</span></span><br><span class=\"line\">       <span class=\"comment\">// parameter.</span></span><br><span class=\"line\">       child: <span class=\"keyword\">new</span> Builder(                                             <span class=\"comment\">//5</span></span><br><span class=\"line\">         builder: (BuildContext context) &#123;</span><br><span class=\"line\">           <span class=\"built_in\">String</span> title = widget.title;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (widget.onGenerateTitle != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             title = widget.onGenerateTitle(context);</span><br><span class=\"line\">             <span class=\"keyword\">assert</span>(title != <span class=\"keyword\">null</span>, <span class=\"string\">&#x27;onGenerateTitle must return a non-null String&#x27;</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Title(                                            <span class=\"comment\">//6</span></span><br><span class=\"line\">             title: title,</span><br><span class=\"line\">             color: widget.color,</span><br><span class=\"line\">             child: result,</span><br><span class=\"line\">           );</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">       ),</span><br><span class=\"line\">     ),</span><br><span class=\"line\">   );</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 4 处终于见到了我们熟悉的身影 <code>Localizatins</code>。_localizationsDelegates 也是被传递进了 Localizations。此时的 widget 树层次如下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.55.52.png\" alt=\"\"></p>\n<p>层次如此之多，但我们关心只是其中的 Localizations，所以抛开其他不看，进入 Localizations 看看。</p>\n<p>不出意外 Localizations 也是一个 StatefulWidget，此时我们不需要关心它的 build 方法，而是应该关注其内部的 <code>initState</code> 方法，如果有数据需要初始化，不出意外就是在这里进行。</p>\n<p>initState 方法很短：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">  load(widget.locale);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继续进入 load 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> load(Locale locale) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">Iterable</span>&lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt; delegates = widget.delegates; <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (delegates == <span class=\"keyword\">null</span> || delegates.isEmpty) &#123;</span><br><span class=\"line\">    _locale = locale;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt; typeToResources;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Future&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt; typeToResourcesFuture = _loadAll(locale, delegates) <span class=\"comment\">//2</span></span><br><span class=\"line\">    .then((<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt; value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> typeToResources = value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 1 处的 delegates 即一开始从 MaterialApp 传入的 delegate 数组，这里转成立可迭代对象。接着看 2 处的 <code>_loadAll</code> 方法返回的 typeToResourcesFuture ，其中的值类型为 <code>Map&lt;Type, dynamic&gt;</code>，这里可以推敲出来里边的 Type 对应的就是不同的 Localizations，而 dynamic 则是其实例。带着这样的想法看 _loadAll 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt; _loadAll(Locale locale, <span class=\"built_in\">Iterable</span>&lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt; allDelegates) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt; output = &lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;_Pending&gt; pendingList;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Only load the first delegate for each delegate type that supports</span></span><br><span class=\"line\">  <span class=\"comment\">// locale.languageCode.</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">Type</span>&gt; types = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">Type</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">List</span>&lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt; delegates = &lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt;[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt; delegate <span class=\"keyword\">in</span> allDelegates) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.contains(delegate.type) &amp;&amp; delegate.isSupported(locale)) &#123;</span><br><span class=\"line\">      types.add(delegate.type);</span><br><span class=\"line\">      delegates.add(delegate);          </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt; delegate <span class=\"keyword\">in</span> delegates) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Future&lt;<span class=\"built_in\">dynamic</span>&gt; inputValue = delegate.load(locale);    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"built_in\">dynamic</span> completedValue;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Future&lt;<span class=\"built_in\">dynamic</span>&gt; futureValue = inputValue.then&lt;<span class=\"built_in\">dynamic</span>&gt;((<span class=\"built_in\">dynamic</span> value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> completedValue = value;                             <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (completedValue != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// inputValue was a SynchronousFuture</span></span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"built_in\">Type</span> type = delegate.type;</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(!output.containsKey(type));</span><br><span class=\"line\">      output[type] = completedValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      pendingList ??= &lt;_Pending&gt;[];</span><br><span class=\"line\">      pendingList.add(<span class=\"keyword\">new</span> _Pending(delegate, futureValue));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All of the delegate.load() values were synchronous futures, we&#x27;re done.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pendingList == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronousFuture&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt;(output);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Some of delegate.load() values were asynchronous futures. Wait for them.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Future.wait&lt;<span class=\"built_in\">dynamic</span>&gt;(pendingList.map((_Pending p) =&gt; p.futureValue))</span><br><span class=\"line\">    .then&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt;((<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">dynamic</span>&gt; values) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(values.length == pendingList.length);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"built_in\">Type</span> type = pendingList[i].delegate.type;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span>(!output.containsKey(type));</span><br><span class=\"line\">        output[type] = values[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看 1 处，调用到了 deletegate 的 load 方法，返回一个 Future ，这里为什么不直接返回DemoLocalizations 的实例而要返回 Future，这个在前面也提到了如果你的资源是放在服务器上的，那么这就是一个耗时操作，所以在此处用了 Future。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">Future&lt;DemoLocalizations&gt; load(Locale locale) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronousFuture&lt;DemoLocalizations&gt;(<span class=\"keyword\">new</span> DemoLocalizations(locale));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于这里返回的是 SynchronousFuture ，所以在 2 处的代码会被顺序执行，此时 completedValue 就是 DemoLocalizations 的实例对象了。然后 completedValue 被放入了 output 接着就返回出去了，最后赋值给了 _LocalizationsState 的 _typeToResources 变量。</p>\n<p>到目前为止整个多语言的加载就完成了，剩下的就是等着被使用。下面看一下使用的方式：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DemoLocalizations.of(context).taskTitle</span><br></pre></td></tr></table></figure>\n<p>简单粗暴，根本看不出来是怎么拿到 DemoLocalizations 对象的。不多说，看代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> Localizations.of(context, DemoLocalizations);</span><br></pre></td></tr></table></figure>\n<p>内部调用的是 Localizations 的 of 静态方法，接着看：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> T of&lt;T&gt;(BuildContext context, <span class=\"built_in\">Type</span> type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(context != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(type != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _LocalizationsScope scope = context.inheritFromWidgetOfExactType(_LocalizationsScope);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> scope?.localizationsState?.resourcesFor&lt;T&gt;(type);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面已经讲解过 context.inheritFromWidgetOfExactType 的作用，这里的 scope 就是最靠近 context 节点的 _LocalizationsScope 类型的节点。但我们看了上面的 widget 树的层次图，并没有看到 _LocalizationsScope 这个 widget,它是在什么时候被添加进去的呢？</p>\n<p>回到 _LocalizationsState 的 build 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_locale == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Container();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _LocalizationsScope(</span><br><span class=\"line\">    key: _localizedResourcesScopeKey,</span><br><span class=\"line\">    locale: _locale,</span><br><span class=\"line\">    localizationsState: <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    typeToResources: _typeToResources,</span><br><span class=\"line\">    child: <span class=\"keyword\">new</span> Directionality(</span><br><span class=\"line\">      textDirection: _textDirection,</span><br><span class=\"line\">      child: widget.child,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真想(●—●)。在 Localizations 的内部，它将它原本的子节点外又嵌套了 Directionality、_LocalizationsScope、Container 这三层。其中 _LocalizationsScope 就是我们想找的。</p>\n<p>接着看：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> scope?.localizationsState?.resourcesFor&lt;T&gt;(type);</span><br></pre></td></tr></table></figure>\n<p>此处调用了 _LocalizationsState 的 resourcesFor 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T resourcesFor&lt;T&gt;(<span class=\"built_in\">Type</span> type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(type != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> T resources = _typeToResources[type];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resources;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这差不多就结束了，这里根据 type 从 _typeToResources 中取出了 DemoLocalizations 的实例。<br>最后再把完整的 widget 树的层次展示一下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%882.29.45.png\" alt=\"\"></p>\n<h2 id=\"四、简单的-App-内语言切换\"><a href=\"#四、简单的-App-内语言切换\" class=\"headerlink\" title=\"四、简单的 App 内语言切换\"></a>四、简单的 App 内语言切换</h2><p>下面我见到介绍一下如何在不切换手机系统的语言的情况下来切换 Flutter 应用内的语言。主要用到的是 Localizations 的 override 方法。具体不多介绍，看下面我自定义的 StatefulWidget 类 FreeLocalizations 和它的 State 类 _FreeLocalizations：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FreeLocalizations</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget child;</span><br><span class=\"line\"></span><br><span class=\"line\">  FreeLocalizations(&#123;Key key,<span class=\"keyword\">this</span>.child&#125;):<span class=\"keyword\">super</span>(key:key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  State&lt;FreeLocalizations&gt; createState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _FreeLocalizations();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_FreeLocalizations</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">FreeLocalizations</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  Locale _locale = <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>,<span class=\"string\">&#x27;CH&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  changeLocale(Locale locale)&#123;</span><br><span class=\"line\">    setState(()&#123;</span><br><span class=\"line\">      _locale = locale;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Localizations.override(</span><br><span class=\"line\">      context: context,</span><br><span class=\"line\">      locale: _locale,</span><br><span class=\"line\">      child: widget.child,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码的意思比较清晰，就是在调用 changeLocale 方法的时候修改其内部 widget 的语言。<br>下面来如何使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(<span class=\"keyword\">new</span> MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">GlobalKey&lt;_FreeLocalizations&gt; freeLocalizationStateKey = <span class=\"keyword\">new</span> GlobalKey&lt;_FreeLocalizations&gt;();   <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      onGenerateTitle: (context)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DemoLocalizations.of(context).taskTitle;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> Builder(builder: (context)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FreeLocalizations(</span><br><span class=\"line\">          key: freeLocalizationStateKey,</span><br><span class=\"line\">          child: <span class=\"keyword\">new</span> MyHomePage(),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意想要在 FreeLocalizations 外部去调用其方法需要使用到 GlobalKey 的帮助，用法见 1 处。让后我们将 MyHomePage 放入 FreeLocalizations 内部。</p>\n<p>接着在点击按钮的时候调用如下方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> changeLocale()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">    freeLocalizationStateKey.currentState.changeLocale(<span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>,<span class=\"string\">&quot;CH&quot;</span>));</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    freeLocalizationStateKey.currentState.changeLocale(<span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>,<span class=\"string\">&quot;US&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  flag = !flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/localizatiion_free.gif\" alt=\"\"></p>\n<p>这一小节我讲的比较简单，但如果你看明白了二、三两节，那弄明白这里多语言是怎么切换的应该是比较容易的。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%883.34.41.png\" alt=\"\"></p>\n<p>思维导图地址：<a href=\"https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr\">https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr</a><br>文章中出现的代码的地址：<a href=\"https://github.com/flutter-dev/internationalizing\">https://github.com/flutter-dev/internationalizing</a></p>\n","excerpt":"<h2 id=\"一、前言\"><a href=\"#一、前言\" class=\"headerlink\" title=\"一、前言\"></a>一、前言</h2><p>从 2015 年接触 Flutter 到现在也有两年多时间，在这期间我并没有正真地去了解这个神奇的框架，只是时不时拉取 master 的最新代码，编一下 flutter_gallery 看看有什么新特性。但随着此次 GDD 的召开，Flutter 被 Google 带到了国内开发者的眼前，相信谷歌是已经准备好让 Flutter 走上移动开发历史的舞台了。</p>\n<p>一款好的移动应用该具备什么品质？戳中用户痛点的功能，炫酷的 UI 还是流畅的操作体验？这些都很重要，少了其中任何一点都是得不到用户青睐的。但今天我要说的虽然不是前面这三个中的哪一个，但也是少了它就不行的“应用国际化”。</p>\n<p>对于开发者来说，在 Android 和 iOS 开发中使用国际化已经是老掉牙的套路了，那么在 Flutter 中该如何使用国际化呢？是否也想 Android 一样只要多配置一个 xml 就能搞定了呢？</p>","more":"<h2 id=\"二、在-MaterialApp-中添加国际化支持\"><a href=\"#二、在-MaterialApp-中添加国际化支持\" class=\"headerlink\" title=\"二、在 MaterialApp 中添加国际化支持\"></a>二、在 MaterialApp 中添加国际化支持</h2><p>Flutter 官方鼓励我们在写 Flutter 应用的时候直接从 MaterialApp 开始，原因是 MaterialApp 为我们集成好了很多 Material Design 所必须的控件，如AnimatedThemen、GridPager 等，另外还通过 MaterialApp 配置了全局路由，方便进行页面的切换。既然如此我们就先从 MaterialApp 开始实现国际化。国际化涵盖的不单单只是多国语言，还有文字阅读方向、时间和日期格式等，但本文仅介绍多国语言的适配，它们几种还希望读者自行学习和研究。</p>\n<p>通常我们新建的 Flutter 应用是默认不支持多语言的，即使用户在中文环境下，显示的文字仍然是英文，比如下图所示的日期选择对话框：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/device-2017-12-21-214051.png\" alt=\"\"></p>\n<p>那么怎么样将系统的这些组件国际化呢？首先需要在 pubspec.yaml 中添加如下依赖：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">flutter_localizations:</span></span><br><span class=\"line\">  <span class=\"attr\">sdk:</span> <span class=\"string\">flutter</span></span><br></pre></td></tr></table></figure>\n\n<p>接着运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flutter packages get</span><br></pre></td></tr></table></figure>\n\n<p> 以获取依赖库。</p>\n<p>当上面两部完成后在 main.dart 中 import 如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter_localizations/flutter_localizations.dart&#x27;</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>然后在 MaterialApp 的构造方法中给 <code>localizationsDelegates</code> 和 <code>supportedLocales</code> 两个可选参数赋值：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">      localizationsDelegates: [                             <span class=\"comment\">//此处</span></span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [                                   <span class=\"comment\">//此处</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>,<span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>,<span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>暂时先不用理解这两个参数是什么意思，此时如果重新运行的话结果如下图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-21-215330.png\" alt=\"\"></p>\n<p>细心的小伙伴可能发现这个 Dialog 中的文字是变成中文了，但背景中的 titlebar 的文字还是英文，难道老司机也翻车了？</p>\n<p>其实 titlebar 中的这串文字是属于我们创建的应用的，如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home: <span class=\"keyword\">new</span> MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>Flutter 框架是不知道翻译这句话。</p>\n<p>接下来要做的就是我们自己实现一个类似 <code>GlobalMaterialLocalizations</code>的东西，用它来实现多语言。</p>\n<p>首先需要准备在应用中用到的字符串，一个刚新建的 Flutter 应用用到了四个字符串，如下</p>\n<ul>\n<li>Flutter Demo</li>\n<li>Flutter Demo Home Page</li>\n<li>You have pushed the button this many times:</li>\n<li>Increment</li>\n</ul>\n<p>这里为了简单我们只增加中文，依次对应为：</p>\n<ul>\n<li>Flutter 示例</li>\n<li>Flutter 示例主页面</li>\n<li>你一共点击了这么多次按钮：</li>\n<li>增加</li>\n</ul>\n<p>两种文字准备后就可以着手写 Localizations 了，此处的 Localizations 是多国语言资源的汇总。在这里我自定义一个名为 DemoLocalizations 的类,然后将多国资源整合进此类：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoLocalizations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Locale locale;</span><br><span class=\"line\"></span><br><span class=\"line\">  DemoLocalizations(<span class=\"keyword\">this</span>.locale);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;&gt; _localizedValues = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;en&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;Increment&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;zh&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例主页面&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;你一共点击了这么多次按钮：&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;增加&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> taskTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;task title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> titleBarTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;titlebar title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> clickTop&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;click tip&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">get</span> inc&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;inc&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时只要能拿到 DemoLocalizations 的对象实例，就可以调用它的<code>taskTitle</code>、<code>titleBarTitle</code>、<code>clickTop</code>这三个方法来获取对应的字符串。</p>\n<p>定义完 DemoLocalizations 以后，我们就需要想这么一个问题，这个类是谁负责初始化呢？答案自然不是我们自己主动去初始化，而是需要一个叫做 <code>LocalizationsDelegate</code>的类来完成，LocalizationsDelegate 是一个抽象类，需要我们去实现它：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoLocalizationsDelegate</span> <span class=\"keyword\">extends</span> <span class=\"title\">LocalizationsDelegate</span>&lt;<span class=\"title\">DemoLocalizations</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> DemoLocalizationsDelegate();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> isSupported(Locale locale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&#x27;en&#x27;</span>,<span class=\"string\">&#x27;zh&#x27;</span>].contains(locale.languageCode);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Future&lt;DemoLocalizations&gt; load(Locale locale) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronousFuture&lt;DemoLocalizations&gt;(<span class=\"keyword\">new</span> DemoLocalizations(locale));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  <span class=\"built_in\">bool</span> shouldReload(LocalizationsDelegate&lt;DemoLocalizations&gt; old) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> DemoLocalizationsDelegate delegate = <span class=\"keyword\">const</span> DemoLocalizationsDelegate();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意 <code>load</code> 方法，DemoLocalizations就是在此方法内被初始化的。</p>\n<p>接着将 DemoLocalizationsDelegate 添加进 MaterialApp：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,                 <span class=\"comment\">//添加在此处</span></span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>DemoLocalizationsDelegate 已经被添加进 MaterialApp，那我们该如何使用 DemoLocalizations 呢？这里就要介绍另一个 Weidget 的子类 <code>Localizations</code>，注意此处的 Localizations 它是一个货真价实 Widget。DemoLocalizationsDelegate 这个类的对象虽然被传入了 MaterialApp，但由于 MaterialApp 会在内部嵌套 Localizations 这个 Widget，而 LocalizationsDelegate 正是其构造方法必须的参数：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Localizations(&#123;</span><br><span class=\"line\">  Key key,</span><br><span class=\"line\">  <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.locale,</span><br><span class=\"line\">  <span class=\"meta\">@required</span> <span class=\"keyword\">this</span>.delegates,                              <span class=\"comment\">//此处</span></span><br><span class=\"line\">  <span class=\"keyword\">this</span>.child,</span><br><span class=\"line\">&#125;) : <span class=\"keyword\">assert</span>(locale != <span class=\"keyword\">null</span>),</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(delegates != <span class=\"keyword\">null</span>),</span><br><span class=\"line\">     <span class=\"keyword\">assert</span>(delegates.any(</span><br><span class=\"line\">             (LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt; delegate)</span><br><span class=\"line\">               =&gt; delegate <span class=\"keyword\">is</span> LocalizationsDelegate&lt;WidgetsLocalizations&gt;)</span><br><span class=\"line\">           ),</span><br><span class=\"line\">     <span class=\"keyword\">super</span>(key: key);</span><br></pre></td></tr></table></figure>\n\n<p>而 DemoLocalizations 的实例也是在 Localizations 中通过 DemoLocalizationsDelegate 实例化的。所以在应用中要使用 DemoLocalizations 的实例自然是需要通过 Localizations 这个 Widget 来获取的，代码如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Localizations.of(context, DemoLocalizations);</span><br></pre></td></tr></table></figure>\n\n<p><code>of</code>这个静态方法就会返回 DemoLocalizations 的实例，现在先别管其内部是如何实现的。我们将这行代码放入 DemoLocalizations 中以方便使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DemoLocalizations</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Locale locale;</span><br><span class=\"line\"></span><br><span class=\"line\">  DemoLocalizations(<span class=\"keyword\">this</span>.locale);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">String</span>&gt;&gt; _localizedValues = &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;en&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter Demo Home Page&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;You have pushed the button this many times:&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;Increment&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">&#x27;zh&#x27;</span>: &#123;</span><br><span class=\"line\">      <span class=\"string\">&#x27;task title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;titlebar title&#x27;</span>: <span class=\"string\">&#x27;Flutter 示例主页面&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;click tip&#x27;</span>: <span class=\"string\">&#x27;你一共点击了这么多次按钮：&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;inc&#x27;</span>:<span class=\"string\">&#x27;增加&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> taskTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;task title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> titleBarTitle&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;titlebar title&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> clickTop&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;click tip&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">get</span> inc&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> _localizedValues[locale.languageCode][<span class=\"string\">&#x27;inc&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//此处</span></span><br><span class=\"line\">  <span class=\"keyword\">static</span> DemoLocalizations of(BuildContext context)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Localizations.of(context, DemoLocalizations);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来就是真正使用 DemoLocalizations 的时候了，在代码中将原来的字符串替换如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;dart:async&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/material.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter_localizations/flutter_localizations.dart&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;package:flutter/foundation.dart&#x27;</span> <span class=\"keyword\">show</span> SynchronousFuture;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(<span class=\"keyword\">new</span> MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: DemoLocalizations.of(context).taskTitle,                           <span class=\"comment\">// 此处1</span></span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: DemoLocalizations.of(context).titleBarTitle), <span class=\"comment\">// 此处2</span></span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key, <span class=\"keyword\">this</span>.title&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; <span class=\"keyword\">new</span> _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    showDatePicker(context: context,</span><br><span class=\"line\">        initialDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now(),</span><br><span class=\"line\">        firstDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().subtract(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>)),</span><br><span class=\"line\">        lastDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().add(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>))).then((v) &#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Scaffold(</span><br><span class=\"line\">      appBar: <span class=\"keyword\">new</span> AppBar(</span><br><span class=\"line\">        title: <span class=\"keyword\">new</span> Text(widget.title),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: <span class=\"keyword\">new</span> Center(</span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              DemoLocalizations.of(context).clickTop,                          <span class=\"comment\">// 此处3</span></span><br><span class=\"line\">            ),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme</span><br><span class=\"line\">                  .of(context)</span><br><span class=\"line\">                  .textTheme</span><br><span class=\"line\">                  .display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: <span class=\"keyword\">new</span> FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: DemoLocalizations.of(context).inc,                           <span class=\"comment\">// 此处4</span></span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行！！</p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-21-231417.png\" alt=\"\"></p>\n<p>😂😂😂 </p>\n<p>当遇到这种突如其来的问题的时候一定要淡定，喝口水，眺望一会远方。。。</p>\n<p>接着仔细看报错信息：The getter ‘taskTitle’ was called on null.说的很明确，在 1 处出现了空指针，我们没有像预想的一样拿到 DemoLocalizations 对象。那问题一定出在 Localizations.of 方法内部，跟进去看看：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> T of&lt;T&gt;(BuildContext context, <span class=\"built_in\">Type</span> type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(context != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(type != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _LocalizationsScope scope =       </span><br><span class=\"line\">           context.inheritFromWidgetOfExactType(_LocalizationsScope); <span class=\"comment\">// 此处</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> scope?.localizationsState?.resourcesFor&lt;T&gt;(type);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>关键在 <code>context.inheritFromWidgetOfExactType</code>处，继续进去：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InheritedWidget inheritFromWidgetOfExactType(<span class=\"built_in\">Type</span> targetType);</span><br></pre></td></tr></table></figure>\n\n<p>很简单，这是一个抽象 BuildContext 的抽象方法。此时如果再要继续追踪实现类就比较困难了，通过这个方法的注释可以知道，它是通过 targetType 来获取 context 最近父节点的对象，前提条件是 targetType 对应的类必须是 InheriteWidget 的子类。通过查看 <code>_LocalizationsScope</code>发现其正是继承自 InheriteWidget。那就是说没有从 context 的父节点中找到 _LocalizationsScope。此时我们再看一下调用 taskTitle 的地方：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      title: DemoLocalizations.of(context).taskTitle,                           <span class=\"comment\">// 此处</span></span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>仔细看 taskTitle 处的 context 是从最外层的 build 方法中传入的，而在之前说过 Localizations 这个组件是在 MaterialApp 中被嵌套的，也就是说能找到 DemoLocalizations 的 context 至少需要是 MaterialApp 内部的，而此时的 context 是无法找到 DemoLocalizations 对象的。但这样进入死胡同了，实现多语言的 DemoLocalizations 需要在 MaterialApp 内部才能被找到，而这里的 title 用到的 context 是在 MaterialApp 外部的。</p>\n<p>难道多语言在 title 上没法实现？</p>\n<p>喝口水，眺望下远方。</p>\n<p>既然如此我们不如看下这个 title 的说明：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">A one-line description used by the device to identify the app for the user.</span></span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">On Android the titles appear above the task manager&#x27;s app snapshots which are</span></span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">displayed when the user presses the &quot;recent apps&quot; button. Similarly, on</span></span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">iOS the titles appear in the App Switcher when the user double presses the</span></span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">home button.</span></span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">To provide a localized title instead, use [onGenerateTitle].</span></span></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"comment\">/// <span class=\"language-markdown\">This value is passed unmodified to [WidgetsApp.title].</span></span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"built_in\">String</span> title;</span><br></pre></td></tr></table></figure>\n\n<p>请注意这句：To provide a localized title instead, use [onGenerateTitle].</p>\n<p>没想到啊，如果要对 title 进行多语言处理还需要 <code>onGenerateTitle</code>这个属性。那就简单了，更改如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      onGenerateTitle: (context)&#123;                                              <span class=\"comment\">// 此处</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> DemoLocalizations.of(context).taskTitle;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> MyHomePage(title: DemoLocalizations.of(context).titleBarTitle),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>此时运行会发现 taskTitle 处已经没问题了，但 titleBarTitle 这边还是报错，原因一样它的 context 使用的是 MaterialApp 外部的 context。但这里的 title 是可以被移动到 MyHomePage 内部初始的，所以很好修改，将 MyHomePage 构造方法中的 title 参数移除，直接在 AppBar 内部赋值：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHomePage</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span> </span>&#123;</span><br><span class=\"line\">  MyHomePage(&#123;Key key&#125;) : <span class=\"keyword\">super</span>(key: key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  _MyHomePageState createState() =&gt; <span class=\"keyword\">new</span> _MyHomePageState();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_MyHomePageState</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">MyHomePage</span>&gt; </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">int</span> _counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">void</span> _incrementCounter() &#123;</span><br><span class=\"line\">    showDatePicker(context: context,</span><br><span class=\"line\">        initialDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now(),</span><br><span class=\"line\">        firstDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().subtract(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>)),</span><br><span class=\"line\">        lastDate: <span class=\"keyword\">new</span> <span class=\"built_in\">DateTime</span>.now().add(<span class=\"keyword\">new</span> <span class=\"built_in\">Duration</span>(days: <span class=\"number\">30</span>))).then((v) &#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Scaffold(</span><br><span class=\"line\">      appBar: <span class=\"keyword\">new</span> AppBar(</span><br><span class=\"line\">        title: <span class=\"keyword\">new</span> Text(DemoLocalizations.of(context).titleBarTitle),            <span class=\"comment\">// 此处</span></span><br><span class=\"line\">      ),</span><br><span class=\"line\">      body: <span class=\"keyword\">new</span> Center(</span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Column(</span><br><span class=\"line\">          mainAxisAlignment: MainAxisAlignment.center,</span><br><span class=\"line\">          children: &lt;Widget&gt;[</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              DemoLocalizations.of(context).clickTop,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Text(</span><br><span class=\"line\">              <span class=\"string\">&#x27;<span class=\"subst\">$_counter</span>&#x27;</span>,</span><br><span class=\"line\">              style: Theme</span><br><span class=\"line\">                  .of(context)</span><br><span class=\"line\">                  .textTheme</span><br><span class=\"line\">                  .display1,</span><br><span class=\"line\">            ),</span><br><span class=\"line\">          ],</span><br><span class=\"line\">        ),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      floatingActionButton: <span class=\"keyword\">new</span> FloatingActionButton(</span><br><span class=\"line\">        onPressed: _incrementCounter,</span><br><span class=\"line\">        tooltip: DemoLocalizations.of(context).inc,</span><br><span class=\"line\">        child: <span class=\"keyword\">new</span> Icon(Icons.add),</span><br><span class=\"line\">      ),</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>再运行：</p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-22-001905.png\" alt=\"\"></p>\n<p><img src=\"http://backup.flutter-dev.cn/device-2017-12-22-002133.png\" alt=\"\"></p>\n<p>完美。</p>\n<h2 id=\"三、国际化的初始化过程\"><a href=\"#三、国际化的初始化过程\" class=\"headerlink\" title=\"三、国际化的初始化过程\"></a>三、国际化的初始化过程</h2><p>上一节中简单介绍了如何在 MaterialApp 实现国际化，各位可能也注意到了最终语言资源的选择还是留给了 DemoLocalizations，而对语言资源本身是以什么形式存在没有特别规定。在上文中我将两国的语言放到了一个 Map 中，自然也可以将其放在服务器上，在程序启动后进行拉取，这些都是后话了，在这一节中我简单剖析下源码，看看 DemoLocalizatins 是如何在程序运行后被初始化的。</p>\n<p>上面已经说过官方鼓励我们使用 MaterialApp 作为程序入口，我们就从 MaterialApp 出发，首先看 MaterialApp 的构造方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MaterialApp(&#123; <span class=\"comment\">// can&#x27;t be const because the asserts use methods on Map :-(</span></span><br><span class=\"line\">  Key key,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.title: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onGenerateTitle,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.color,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.theme,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.home,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.routes: <span class=\"keyword\">const</span> &lt;<span class=\"built_in\">String</span>, WidgetBuilder&gt;&#123;&#125;,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.initialRoute,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onGenerateRoute,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.onUnknownRoute,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.locale,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.localizationsDelegates,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.localeResolutionCallback,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.supportedLocales: <span class=\"keyword\">const</span> &lt;Locale&gt;[<span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>)],</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.navigatorObservers: <span class=\"keyword\">const</span> &lt;NavigatorObserver&gt;[],</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.debugShowMaterialGrid: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showPerformanceOverlay: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkerboardRasterCacheImages: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.checkerboardOffscreenLayers: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.showSemanticsDebugger: <span class=\"keyword\">false</span>,</span><br><span class=\"line\">  <span class=\"keyword\">this</span>.debugShowCheckedModeBanner: <span class=\"keyword\">true</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>上面的 <code>localizationsDelegates</code>是多语言的关键点，由于 MaterialApp 是一个 StatefulWidget，所以直接看其对应的 State 类 <code>_MaterialAppState</code>中的 build 方法，代码有点长：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> ThemeData theme = widget.theme ?? <span class=\"keyword\">new</span> ThemeData.fallback();</span><br><span class=\"line\">    Widget result = <span class=\"keyword\">new</span> AnimatedTheme(                                <span class=\"comment\">// 1</span></span><br><span class=\"line\">      data: theme,</span><br><span class=\"line\">      isMaterialAppTheme: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">      child: <span class=\"keyword\">new</span> WidgetsApp(                                          <span class=\"comment\">//2</span></span><br><span class=\"line\">        key: <span class=\"keyword\">new</span> GlobalObjectKey(<span class=\"keyword\">this</span>),</span><br><span class=\"line\">        title: widget.title,</span><br><span class=\"line\">        onGenerateTitle: widget.onGenerateTitle,</span><br><span class=\"line\">        textStyle: _errorTextStyle,</span><br><span class=\"line\">        <span class=\"comment\">// blue is the primary color of the default theme</span></span><br><span class=\"line\">        color: widget.color ?? theme?.primaryColor ?? Colors.blue,</span><br><span class=\"line\">        navigatorObservers:</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"built_in\">List</span>&lt;NavigatorObserver&gt;.from(widget.navigatorObservers)</span><br><span class=\"line\">              ..add(_heroController),</span><br><span class=\"line\">        initialRoute: widget.initialRoute,</span><br><span class=\"line\">        onGenerateRoute: _onGenerateRoute,</span><br><span class=\"line\">        onUnknownRoute: _onUnknownRoute,</span><br><span class=\"line\">        locale: widget.locale,</span><br><span class=\"line\">        localizationsDelegates: _localizationsDelegates,                  <span class=\"comment\">//3</span></span><br><span class=\"line\">        localeResolutionCallback: widget.localeResolutionCallback,</span><br><span class=\"line\">        supportedLocales: widget.supportedLocales,</span><br><span class=\"line\">        showPerformanceOverlay: widget.showPerformanceOverlay,</span><br><span class=\"line\">        checkerboardRasterCacheImages: widget.checkerboardRasterCacheImages,</span><br><span class=\"line\">        checkerboardOffscreenLayers: widget.checkerboardOffscreenLayers,</span><br><span class=\"line\">        showSemanticsDebugger: widget.showSemanticsDebugger,</span><br><span class=\"line\">        debugShowCheckedModeBanner: widget.debugShowCheckedModeBanner,</span><br><span class=\"line\">        inspectorSelectButtonBuilder: (BuildContext context, VoidCallback onPressed) &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FloatingActionButton(</span><br><span class=\"line\">            child: <span class=\"keyword\">const</span> Icon(Icons.search),</span><br><span class=\"line\">            onPressed: onPressed,</span><br><span class=\"line\">            mini: <span class=\"keyword\">true</span>,</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      )</span><br><span class=\"line\">    );</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">assert</span>(() &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (widget.debugShowMaterialGrid) &#123;    <span class=\"comment\">//此处如果有配置，则会显示网格</span></span><br><span class=\"line\">        result = <span class=\"keyword\">new</span> GridPaper(</span><br><span class=\"line\">          color: <span class=\"keyword\">const</span> Color(<span class=\"number\">0xE0F9BBE0</span>),</span><br><span class=\"line\">          interval: <span class=\"number\">8.0</span>,</span><br><span class=\"line\">          divisions: <span class=\"number\">2</span>,</span><br><span class=\"line\">          subdivisions: <span class=\"number\">1</span>,</span><br><span class=\"line\">          child: result,</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> ScrollConfiguration(                                <span class=\"comment\">// 4</span></span><br><span class=\"line\">      behavior: <span class=\"keyword\">new</span> _MaterialScrollBehavior(),</span><br><span class=\"line\">      child: result,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先在 3 处可以看到 _localizationsDelegates 被赋值给了 WidgetsApp 的 localizationsDelegates 参数。在看 1、2、4 处分别又在原有的 Widget 上做了包裹，此时的 widget 树层次如下图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.45.47.png\" alt=\"\"></p>\n<p>接着进入 WidgetApp ，它也是个 StatefulWidget，直接看它的 State 类 <code>_WidgetsAppState</code>的 build 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">   Widget result = <span class=\"keyword\">new</span> Navigator(                                    <span class=\"comment\">// 1</span></span><br><span class=\"line\">     key: _navigator,</span><br><span class=\"line\">     initialRoute: widget.initialRoute ?? ui.<span class=\"built_in\">window</span>.defaultRouteName,</span><br><span class=\"line\">     onGenerateRoute: widget.onGenerateRoute,</span><br><span class=\"line\">     onUnknownRoute: widget.onUnknownRoute,</span><br><span class=\"line\">     observers: widget.navigatorObservers,</span><br><span class=\"line\">   );</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (widget.textStyle != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">     result = <span class=\"keyword\">new</span> DefaultTextStyle(                                    <span class=\"comment\">//2</span></span><br><span class=\"line\">       style: widget.textStyle,</span><br><span class=\"line\">       child: result,</span><br><span class=\"line\">     );</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   ... <span class=\"comment\">//此处省略调试相关代码</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MediaQuery(                                              <span class=\"comment\">//3</span></span><br><span class=\"line\">     data: <span class=\"keyword\">new</span> MediaQueryData.fromWindow(ui.<span class=\"built_in\">window</span>),</span><br><span class=\"line\">     child: <span class=\"keyword\">new</span> Localizations(                                         <span class=\"comment\">//4</span></span><br><span class=\"line\">       locale: widget.locale ?? _locale,</span><br><span class=\"line\">       delegates: _localizationsDelegates.toList(),</span><br><span class=\"line\">       <span class=\"comment\">// This Builder exists to provide a context below the Localizations widget.</span></span><br><span class=\"line\">       <span class=\"comment\">// The onGenerateCallback() can refer to Localizations via its context</span></span><br><span class=\"line\">       <span class=\"comment\">// parameter.</span></span><br><span class=\"line\">       child: <span class=\"keyword\">new</span> Builder(                                             <span class=\"comment\">//5</span></span><br><span class=\"line\">         builder: (BuildContext context) &#123;</span><br><span class=\"line\">           <span class=\"built_in\">String</span> title = widget.title;</span><br><span class=\"line\">           <span class=\"keyword\">if</span> (widget.onGenerateTitle != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">             title = widget.onGenerateTitle(context);</span><br><span class=\"line\">             <span class=\"keyword\">assert</span>(title != <span class=\"keyword\">null</span>, <span class=\"string\">&#x27;onGenerateTitle must return a non-null String&#x27;</span>);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Title(                                            <span class=\"comment\">//6</span></span><br><span class=\"line\">             title: title,</span><br><span class=\"line\">             color: widget.color,</span><br><span class=\"line\">             child: result,</span><br><span class=\"line\">           );</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\">       ),</span><br><span class=\"line\">     ),</span><br><span class=\"line\">   );</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n\n<p>在 4 处终于见到了我们熟悉的身影 <code>Localizatins</code>。_localizationsDelegates 也是被传递进了 Localizations。此时的 widget 树层次如下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8A%E5%8D%8810.55.52.png\" alt=\"\"></p>\n<p>层次如此之多，但我们关心只是其中的 Localizations，所以抛开其他不看，进入 Localizations 看看。</p>\n<p>不出意外 Localizations 也是一个 StatefulWidget，此时我们不需要关心它的 build 方法，而是应该关注其内部的 <code>initState</code> 方法，如果有数据需要初始化，不出意外就是在这里进行。</p>\n<p>initState 方法很短：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> initState() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">super</span>.initState();</span><br><span class=\"line\">  load(widget.locale);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>继续进入 load 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> load(Locale locale) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">Iterable</span>&lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt; delegates = widget.delegates; <span class=\"comment\">// 1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (delegates == <span class=\"keyword\">null</span> || delegates.isEmpty) &#123;</span><br><span class=\"line\">    _locale = locale;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt; typeToResources;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> Future&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt; typeToResourcesFuture = _loadAll(locale, delegates) <span class=\"comment\">//2</span></span><br><span class=\"line\">    .then((<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt; value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> typeToResources = value;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  </span><br><span class=\"line\">  ...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 1 处的 delegates 即一开始从 MaterialApp 传入的 delegate 数组，这里转成立可迭代对象。接着看 2 处的 <code>_loadAll</code> 方法返回的 typeToResourcesFuture ，其中的值类型为 <code>Map&lt;Type, dynamic&gt;</code>，这里可以推敲出来里边的 Type 对应的就是不同的 Localizations，而 dynamic 则是其实例。带着这样的想法看 _loadAll 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Future&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt; _loadAll(Locale locale, <span class=\"built_in\">Iterable</span>&lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt; allDelegates) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt; output = &lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">List</span>&lt;_Pending&gt; pendingList;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Only load the first delegate for each delegate type that supports</span></span><br><span class=\"line\">  <span class=\"comment\">// locale.languageCode.</span></span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">Type</span>&gt; types = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">Type</span>&gt;();</span><br><span class=\"line\">  <span class=\"keyword\">final</span> <span class=\"built_in\">List</span>&lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt; delegates = &lt;LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt;&gt;[];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt; delegate <span class=\"keyword\">in</span> allDelegates) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!types.contains(delegate.type) &amp;&amp; delegate.isSupported(locale)) &#123;</span><br><span class=\"line\">      types.add(delegate.type);</span><br><span class=\"line\">      delegates.add(delegate);          </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (LocalizationsDelegate&lt;<span class=\"built_in\">dynamic</span>&gt; delegate <span class=\"keyword\">in</span> delegates) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Future&lt;<span class=\"built_in\">dynamic</span>&gt; inputValue = delegate.load(locale);    <span class=\"comment\">// 1</span></span><br><span class=\"line\">    <span class=\"built_in\">dynamic</span> completedValue;</span><br><span class=\"line\">    <span class=\"keyword\">final</span> Future&lt;<span class=\"built_in\">dynamic</span>&gt; futureValue = inputValue.then&lt;<span class=\"built_in\">dynamic</span>&gt;((<span class=\"built_in\">dynamic</span> value) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> completedValue = value;                             <span class=\"comment\">// 2</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (completedValue != <span class=\"keyword\">null</span>) &#123; <span class=\"comment\">// inputValue was a SynchronousFuture</span></span><br><span class=\"line\">      <span class=\"keyword\">final</span> <span class=\"built_in\">Type</span> type = delegate.type;</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(!output.containsKey(type));</span><br><span class=\"line\">      output[type] = completedValue;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      pendingList ??= &lt;_Pending&gt;[];</span><br><span class=\"line\">      pendingList.add(<span class=\"keyword\">new</span> _Pending(delegate, futureValue));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// All of the delegate.load() values were synchronous futures, we&#x27;re done.</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (pendingList == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronousFuture&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt;(output);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Some of delegate.load() values were asynchronous futures. Wait for them.</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> Future.wait&lt;<span class=\"built_in\">dynamic</span>&gt;(pendingList.map((_Pending p) =&gt; p.futureValue))</span><br><span class=\"line\">    .then&lt;<span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">Type</span>, <span class=\"built_in\">dynamic</span>&gt;&gt;((<span class=\"built_in\">List</span>&lt;<span class=\"built_in\">dynamic</span>&gt; values) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">assert</span>(values.length == pendingList.length);</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; values.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"built_in\">Type</span> type = pendingList[i].delegate.type;</span><br><span class=\"line\">        <span class=\"keyword\">assert</span>(!output.containsKey(type));</span><br><span class=\"line\">        output[type] = values[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> output;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>看 1 处，调用到了 deletegate 的 load 方法，返回一个 Future ，这里为什么不直接返回DemoLocalizations 的实例而要返回 Future，这个在前面也提到了如果你的资源是放在服务器上的，那么这就是一个耗时操作，所以在此处用了 Future。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">Future&lt;DemoLocalizations&gt; load(Locale locale) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> SynchronousFuture&lt;DemoLocalizations&gt;(<span class=\"keyword\">new</span> DemoLocalizations(locale));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由于这里返回的是 SynchronousFuture ，所以在 2 处的代码会被顺序执行，此时 completedValue 就是 DemoLocalizations 的实例对象了。然后 completedValue 被放入了 output 接着就返回出去了，最后赋值给了 _LocalizationsState 的 _typeToResources 变量。</p>\n<p>到目前为止整个多语言的加载就完成了，剩下的就是等着被使用。下面看一下使用的方式：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DemoLocalizations.of(context).taskTitle</span><br></pre></td></tr></table></figure>\n<p>简单粗暴，根本看不出来是怎么拿到 DemoLocalizations 对象的。不多说，看代码：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> Localizations.of(context, DemoLocalizations);</span><br></pre></td></tr></table></figure>\n<p>内部调用的是 Localizations 的 of 静态方法，接着看：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> T of&lt;T&gt;(BuildContext context, <span class=\"built_in\">Type</span> type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(context != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(type != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> _LocalizationsScope scope = context.inheritFromWidgetOfExactType(_LocalizationsScope);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> scope?.localizationsState?.resourcesFor&lt;T&gt;(type);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>前面已经讲解过 context.inheritFromWidgetOfExactType 的作用，这里的 scope 就是最靠近 context 节点的 _LocalizationsScope 类型的节点。但我们看了上面的 widget 树的层次图，并没有看到 _LocalizationsScope 这个 widget,它是在什么时候被添加进去的呢？</p>\n<p>回到 _LocalizationsState 的 build 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@override</span></span><br><span class=\"line\">Widget build(BuildContext context) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_locale == <span class=\"keyword\">null</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Container();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _LocalizationsScope(</span><br><span class=\"line\">    key: _localizedResourcesScopeKey,</span><br><span class=\"line\">    locale: _locale,</span><br><span class=\"line\">    localizationsState: <span class=\"keyword\">this</span>,</span><br><span class=\"line\">    typeToResources: _typeToResources,</span><br><span class=\"line\">    child: <span class=\"keyword\">new</span> Directionality(</span><br><span class=\"line\">      textDirection: _textDirection,</span><br><span class=\"line\">      child: widget.child,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>真想(●—●)。在 Localizations 的内部，它将它原本的子节点外又嵌套了 Directionality、_LocalizationsScope、Container 这三层。其中 _LocalizationsScope 就是我们想找的。</p>\n<p>接着看：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> scope?.localizationsState?.resourcesFor&lt;T&gt;(type);</span><br></pre></td></tr></table></figure>\n<p>此处调用了 _LocalizationsState 的 resourcesFor 方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">T resourcesFor&lt;T&gt;(<span class=\"built_in\">Type</span> type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">assert</span>(type != <span class=\"keyword\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">final</span> T resources = _typeToResources[type];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> resources;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>到这差不多就结束了，这里根据 type 从 _typeToResources 中取出了 DemoLocalizations 的实例。<br>最后再把完整的 widget 树的层次展示一下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%882.29.45.png\" alt=\"\"></p>\n<h2 id=\"四、简单的-App-内语言切换\"><a href=\"#四、简单的-App-内语言切换\" class=\"headerlink\" title=\"四、简单的 App 内语言切换\"></a>四、简单的 App 内语言切换</h2><p>下面我见到介绍一下如何在不切换手机系统的语言的情况下来切换 Flutter 应用内的语言。主要用到的是 Localizations 的 override 方法。具体不多介绍，看下面我自定义的 StatefulWidget 类 FreeLocalizations 和它的 State 类 _FreeLocalizations：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FreeLocalizations</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatefulWidget</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">final</span> Widget child;</span><br><span class=\"line\"></span><br><span class=\"line\">  FreeLocalizations(&#123;Key key,<span class=\"keyword\">this</span>.child&#125;):<span class=\"keyword\">super</span>(key:key);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  State&lt;FreeLocalizations&gt; createState() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> _FreeLocalizations();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">_FreeLocalizations</span> <span class=\"keyword\">extends</span> <span class=\"title\">State</span>&lt;<span class=\"title\">FreeLocalizations</span>&gt;</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  Locale _locale = <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>,<span class=\"string\">&#x27;CH&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  changeLocale(Locale locale)&#123;</span><br><span class=\"line\">    setState(()&#123;</span><br><span class=\"line\">      _locale = locale;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Localizations.override(</span><br><span class=\"line\">      context: context,</span><br><span class=\"line\">      locale: _locale,</span><br><span class=\"line\">      child: widget.child,</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面代码的意思比较清晰，就是在调用 changeLocale 方法的时候修改其内部 widget 的语言。<br>下面来如何使用：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> main() &#123;</span><br><span class=\"line\">  runApp(<span class=\"keyword\">new</span> MyApp());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">GlobalKey&lt;_FreeLocalizations&gt; freeLocalizationStateKey = <span class=\"keyword\">new</span> GlobalKey&lt;_FreeLocalizations&gt;();   <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyApp</span> <span class=\"keyword\">extends</span> <span class=\"title\">StatelessWidget</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"meta\">@override</span></span><br><span class=\"line\">  Widget build(BuildContext context) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MaterialApp(</span><br><span class=\"line\">      onGenerateTitle: (context)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> DemoLocalizations.of(context).taskTitle;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      theme: <span class=\"keyword\">new</span> ThemeData(</span><br><span class=\"line\">        primarySwatch: Colors.blue,</span><br><span class=\"line\">      ),</span><br><span class=\"line\">      home: <span class=\"keyword\">new</span> Builder(builder: (context)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> FreeLocalizations(</span><br><span class=\"line\">          key: freeLocalizationStateKey,</span><br><span class=\"line\">          child: <span class=\"keyword\">new</span> MyHomePage(),</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">      localizationsDelegates: [</span><br><span class=\"line\">        GlobalMaterialLocalizations.delegate,</span><br><span class=\"line\">        GlobalWidgetsLocalizations.delegate,</span><br><span class=\"line\">        DemoLocalizationsDelegate.delegate,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      supportedLocales: [</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>, <span class=\"string\">&#x27;CH&#x27;</span>),</span><br><span class=\"line\">        <span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>, <span class=\"string\">&#x27;US&#x27;</span>),</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>注意想要在 FreeLocalizations 外部去调用其方法需要使用到 GlobalKey 的帮助，用法见 1 处。让后我们将 MyHomePage 放入 FreeLocalizations 内部。</p>\n<p>接着在点击按钮的时候调用如下方法：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">void</span> changeLocale()&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(flag)&#123;</span><br><span class=\"line\">    freeLocalizationStateKey.currentState.changeLocale(<span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;zh&#x27;</span>,<span class=\"string\">&quot;CH&quot;</span>));</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    freeLocalizationStateKey.currentState.changeLocale(<span class=\"keyword\">const</span> Locale(<span class=\"string\">&#x27;en&#x27;</span>,<span class=\"string\">&quot;US&quot;</span>));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  flag = !flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/localizatiion_free.gif\" alt=\"\"></p>\n<p>这一小节我讲的比较简单，但如果你看明白了二、三两节，那弄明白这里多语言是怎么切换的应该是比较容易的。</p>\n<h2 id=\"五、总结\"><a href=\"#五、总结\" class=\"headerlink\" title=\"五、总结\"></a>五、总结</h2><p><img src=\"http://backup.flutter-dev.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-22%20%E4%B8%8B%E5%8D%883.34.41.png\" alt=\"\"></p>\n<p>思维导图地址：<a href=\"https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr\">https://my.mindnode.com/7u6RudyGs5bqzX1WrxY5XtZZqUDBzqvL2NioVbrr</a><br>文章中出现的代码的地址：<a href=\"https://github.com/flutter-dev/internationalizing\">https://github.com/flutter-dev/internationalizing</a></p>"},{"title":"GIF 字节格式解析","date":"2017-11-15T01:38:53.000Z","cover":"http://cdn.zqlxtt.cn/gif_file_stream.gif","_content":"最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。\n\n下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。\n\n> http://giflib.sourceforge.net/index.html\n> https://www.w3.org/Graphics/GIF/spec-gif89a.txt\n<!-- more -->\n# GIF 文件格式\n\n下图是我从 http://giflib.sourceforge.net/index.html 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。\n\n![](http://cdn.zqlxtt.cn/gif_file_stream.gif)\n\n上图中一个有十一块，其中有八块是 GIF 图像必备的：`Header`（头）、`Logical Screen Descriptor`（逻辑屏幕描述符）、`Image Descriptor`（图像描述符）、`Image Data`（图像数据流）、`Plain Text Extension`（文本扩展）、`Application Extension`（应用扩展）、`Comment Extension`（注释扩展）、`Trailer`（尾部标记）。\n\n另外还有三个可选块：`Global Color Table`（全局颜色表）、`Graphic Control Extension`（图形控制扩展）、`Local Color Table`（本地颜色表）。\n\n传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。\n\n为了比较直观的了解这些内容，我还是从 http://giflib.sourceforge.net/index.html 拿了一个 GIF 图过来，如下图：\n\n![](http://cdn.zqlxtt.cn/sample_1.gif)\n\n其放大后的效果图如下：\n\n![](http://cdn.zqlxtt.cn/sample_1_enlarged.gif)\n\n上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：\n\n    47 49 46 38 39 61 \n    0A 00 0A 00 91 00 00 \n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n    21 F9 04 00 00 00 00 00 \n    2C 00 00 00 00 0A 00 0A 00 00 \n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    3B\n    \n## Header\n\nGIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：\n\n![](http://cdn.zqlxtt.cn/header_block.gif)\n\n其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。\n\n对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：\n\n![](http://cdn.zqlxtt.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%20%E4%B8%8B%E5%8D%883.41.20.png)\n\n## Logical Screen Descriptor\n\nLogical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：\n\n![](http://cdn.zqlxtt.cn/logical_screen_desc_block.gif)\n\n按顺序看，\n\n- `Canvas Width`：表示 GIF 图像的宽度，单位是像素。\n- `Canvas Height`：表示 GIF 图像的高度，单位是像素。\n- `Packed Field`：这是一个包装字段，内部的不同 bit（位）表示有不同的含义\n    - 从左边数第一位表示 `Global Color Table Flag`，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。\n    - 从左边数第二、三、四位表示 `Color Resolution`，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。\n    - 从左边数第五位表示 `Sort Flag`，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。\n    - 最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。\n- `Background Color Index`：表示 GIF 的背景色在 Global Color Table 中的索引。\n- `Pixel Aspect Ratio`：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。\n\n对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：\n\n    0A 00 0A 00 91 00 00\n    \n其中：\n`Canvas Width` = 0A00 = 10（十进制）\n`Canvas Height` = 0A00 = 10（十进制）\n`Packed Field` = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。\n`Background Color Index` = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。\n`Pixel Aspect Ratio` = 0,可忽略。\n\n# Global Color Table\n\nGlobal Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：\n\n![](http://backup.flutter-dev.cn/global_color_table.gif)\n\n在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：\n\n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n\n根据上面的数据我们来构建 Global Color Table\n\n|索引|字节组合|颜色|\n|---|---|---|\n|0|FFFFFF|白色|\n|1|FF0000|红色|\n|2|0000FF|蓝色|\n|3|000000|黑色|\n\n# Graphics Control Extension\n\n这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的`21`，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。\n\nOK，那我们接着 21 往后看，下一个字节为`F9`，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。\n\nGraphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：\n\n![](http://backup.flutter-dev.cn/graphic_control_ext.gif)\n\n其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：\n\n- `Byte Size`：表示接下来的有效数据字节数。\n- `Packed Field`：是一个包装字段，内部不同位的意义也不同。\n    - 从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。\n    - 从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。\n    - 从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。\n    - 最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。\n- `Delay Time`：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。\n- `Transparent Color Index`：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。\n- `Block Terminator`：表示 Extension 到此结束。\n\n下面看一下示例中 Graphics Control Extension 对应的字节：\n\n    21 F9 04 00 00 00 00 00\n\n其中 21，F9 表示这是一个 Graphics Control Extension 块。\nByte Size 为 4。\n其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。\n\n# Image Descriptor\n\n上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 `2C`。下面看一下 Image Descriptor 内部字节结构：\n\n![](http://backup.flutter-dev.cn/image_descriptor_block.gif)\n\n\n其中 Image Seperator 为固定值 2C。\n\n- `Image Left`：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。\n- `Image Top`：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。\n- `Image Width`：该值表示下一帧图像的宽度。\n- `Image Height`：该值表示下一帧图像的高度。\n- `Packed Field`：这是一个包装字段，内部不同位的意义也不同。\n    - 从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。\n    - 从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。\n    - 从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。\n    - 从左数第四、五位：Reserved For Future Use，保留位。\n    - 从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。\n    \n接着看一下示例中的对应字节：\n\n    2C 00 00 00 00 0A 00 0A 00 00 \n\n2C 表示 Image Descriptor\nImage Left = 0\nImage Top = 0\nImage Width = 10\nImage Height = 10\n上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。\n打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。\n\n> 这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。\n\n\n# Local Color Table\nlocal color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。\n\n# Image Data\n\n如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。\n\n![](http://backup.flutter-dev.cn/image_data_block.gif)\n\n- `LZW Minimum Code Size`: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。\n- `Number of bytes of data in sun-blocks（01-FF）`：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。\n- `Data Sub-Block(s)`：表示有效的字节块。\n- `Block Terminator`：表示 Image Data 的结束部分。\n\n接着看一下示例中对应的字节：\n\n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    \n02 表示 LZW Minimum Code Size。\n16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。\n00 表示 Image Data 到此为止。\n\n# Trailer\n\n从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。\n\n# Plain Text Extension、Application Extension和Comment Extension\n\n最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。\n\n# 总结\n本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。","source":"_posts/gif-bytes-format.md","raw":"---\ntitle: GIF 字节格式解析\ndate: 2017-11-15 09:38:53\ntags: 多媒体\ncover: http://cdn.zqlxtt.cn/gif_file_stream.gif\n---\n最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。\n\n下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。\n\n> http://giflib.sourceforge.net/index.html\n> https://www.w3.org/Graphics/GIF/spec-gif89a.txt\n<!-- more -->\n# GIF 文件格式\n\n下图是我从 http://giflib.sourceforge.net/index.html 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。\n\n![](http://cdn.zqlxtt.cn/gif_file_stream.gif)\n\n上图中一个有十一块，其中有八块是 GIF 图像必备的：`Header`（头）、`Logical Screen Descriptor`（逻辑屏幕描述符）、`Image Descriptor`（图像描述符）、`Image Data`（图像数据流）、`Plain Text Extension`（文本扩展）、`Application Extension`（应用扩展）、`Comment Extension`（注释扩展）、`Trailer`（尾部标记）。\n\n另外还有三个可选块：`Global Color Table`（全局颜色表）、`Graphic Control Extension`（图形控制扩展）、`Local Color Table`（本地颜色表）。\n\n传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。\n\n为了比较直观的了解这些内容，我还是从 http://giflib.sourceforge.net/index.html 拿了一个 GIF 图过来，如下图：\n\n![](http://cdn.zqlxtt.cn/sample_1.gif)\n\n其放大后的效果图如下：\n\n![](http://cdn.zqlxtt.cn/sample_1_enlarged.gif)\n\n上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：\n\n    47 49 46 38 39 61 \n    0A 00 0A 00 91 00 00 \n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n    21 F9 04 00 00 00 00 00 \n    2C 00 00 00 00 0A 00 0A 00 00 \n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    3B\n    \n## Header\n\nGIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：\n\n![](http://cdn.zqlxtt.cn/header_block.gif)\n\n其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。\n\n对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：\n\n![](http://cdn.zqlxtt.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%20%E4%B8%8B%E5%8D%883.41.20.png)\n\n## Logical Screen Descriptor\n\nLogical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：\n\n![](http://cdn.zqlxtt.cn/logical_screen_desc_block.gif)\n\n按顺序看，\n\n- `Canvas Width`：表示 GIF 图像的宽度，单位是像素。\n- `Canvas Height`：表示 GIF 图像的高度，单位是像素。\n- `Packed Field`：这是一个包装字段，内部的不同 bit（位）表示有不同的含义\n    - 从左边数第一位表示 `Global Color Table Flag`，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。\n    - 从左边数第二、三、四位表示 `Color Resolution`，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。\n    - 从左边数第五位表示 `Sort Flag`，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。\n    - 最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。\n- `Background Color Index`：表示 GIF 的背景色在 Global Color Table 中的索引。\n- `Pixel Aspect Ratio`：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。\n\n对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：\n\n    0A 00 0A 00 91 00 00\n    \n其中：\n`Canvas Width` = 0A00 = 10（十进制）\n`Canvas Height` = 0A00 = 10（十进制）\n`Packed Field` = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。\n`Background Color Index` = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。\n`Pixel Aspect Ratio` = 0,可忽略。\n\n# Global Color Table\n\nGlobal Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：\n\n![](http://backup.flutter-dev.cn/global_color_table.gif)\n\n在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：\n\n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n\n根据上面的数据我们来构建 Global Color Table\n\n|索引|字节组合|颜色|\n|---|---|---|\n|0|FFFFFF|白色|\n|1|FF0000|红色|\n|2|0000FF|蓝色|\n|3|000000|黑色|\n\n# Graphics Control Extension\n\n这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的`21`，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。\n\nOK，那我们接着 21 往后看，下一个字节为`F9`，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。\n\nGraphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：\n\n![](http://backup.flutter-dev.cn/graphic_control_ext.gif)\n\n其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：\n\n- `Byte Size`：表示接下来的有效数据字节数。\n- `Packed Field`：是一个包装字段，内部不同位的意义也不同。\n    - 从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。\n    - 从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。\n    - 从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。\n    - 最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。\n- `Delay Time`：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。\n- `Transparent Color Index`：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。\n- `Block Terminator`：表示 Extension 到此结束。\n\n下面看一下示例中 Graphics Control Extension 对应的字节：\n\n    21 F9 04 00 00 00 00 00\n\n其中 21，F9 表示这是一个 Graphics Control Extension 块。\nByte Size 为 4。\n其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。\n\n# Image Descriptor\n\n上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 `2C`。下面看一下 Image Descriptor 内部字节结构：\n\n![](http://backup.flutter-dev.cn/image_descriptor_block.gif)\n\n\n其中 Image Seperator 为固定值 2C。\n\n- `Image Left`：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。\n- `Image Top`：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。\n- `Image Width`：该值表示下一帧图像的宽度。\n- `Image Height`：该值表示下一帧图像的高度。\n- `Packed Field`：这是一个包装字段，内部不同位的意义也不同。\n    - 从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。\n    - 从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。\n    - 从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。\n    - 从左数第四、五位：Reserved For Future Use，保留位。\n    - 从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。\n    \n接着看一下示例中的对应字节：\n\n    2C 00 00 00 00 0A 00 0A 00 00 \n\n2C 表示 Image Descriptor\nImage Left = 0\nImage Top = 0\nImage Width = 10\nImage Height = 10\n上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。\n打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。\n\n> 这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。\n\n\n# Local Color Table\nlocal color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。\n\n# Image Data\n\n如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。\n\n![](http://backup.flutter-dev.cn/image_data_block.gif)\n\n- `LZW Minimum Code Size`: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。\n- `Number of bytes of data in sun-blocks（01-FF）`：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。\n- `Data Sub-Block(s)`：表示有效的字节块。\n- `Block Terminator`：表示 Image Data 的结束部分。\n\n接着看一下示例中对应的字节：\n\n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    \n02 表示 LZW Minimum Code Size。\n16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。\n00 表示 Image Data 到此为止。\n\n# Trailer\n\n从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。\n\n# Plain Text Extension、Application Extension和Comment Extension\n\n最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。\n\n# 总结\n本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。","slug":"gif-bytes-format","published":1,"updated":"2024-08-21T03:16:19.784Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vt00175p6t6zskfsfx","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。</p>\n<p>下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。</p>\n<blockquote>\n<p><a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a><br><a href=\"https://www.w3.org/Graphics/GIF/spec-gif89a.txt\">https://www.w3.org/Graphics/GIF/spec-gif89a.txt</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"GIF-文件格式\"><a href=\"#GIF-文件格式\" class=\"headerlink\" title=\"GIF 文件格式\"></a>GIF 文件格式</h1><p>下图是我从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。</p>\n<p><img src=\"http://cdn.zqlxtt.cn/gif_file_stream.gif\" alt=\"\"></p>\n<p>上图中一个有十一块，其中有八块是 GIF 图像必备的：<code>Header</code>（头）、<code>Logical Screen Descriptor</code>（逻辑屏幕描述符）、<code>Image Descriptor</code>（图像描述符）、<code>Image Data</code>（图像数据流）、<code>Plain Text Extension</code>（文本扩展）、<code>Application Extension</code>（应用扩展）、<code>Comment Extension</code>（注释扩展）、<code>Trailer</code>（尾部标记）。</p>\n<p>另外还有三个可选块：<code>Global Color Table</code>（全局颜色表）、<code>Graphic Control Extension</code>（图形控制扩展）、<code>Local Color Table</code>（本地颜色表）。</p>\n<p>传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。</p>\n<p>为了比较直观的了解这些内容，我还是从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿了一个 GIF 图过来，如下图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/sample_1.gif\" alt=\"\"></p>\n<p>其放大后的效果图如下：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/sample_1_enlarged.gif\" alt=\"\"></p>\n<p>上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：</p>\n<pre><code>47 49 46 38 39 61 \n0A 00 0A 00 91 00 00 \nFF FF FF FF 00 00 00 00 FF 00 00 00 \n21 F9 04 00 00 00 00 00 \n2C 00 00 00 00 0A 00 0A 00 00 \n02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n3B</code></pre><h2 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h2><p>GIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/header_block.gif\" alt=\"\"></p>\n<p>其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。</p>\n<p>对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%20%E4%B8%8B%E5%8D%883.41.20.png\" alt=\"\"></p>\n<h2 id=\"Logical-Screen-Descriptor\"><a href=\"#Logical-Screen-Descriptor\" class=\"headerlink\" title=\"Logical Screen Descriptor\"></a>Logical Screen Descriptor</h2><p>Logical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/logical_screen_desc_block.gif\" alt=\"\"></p>\n<p>按顺序看，</p>\n<ul>\n<li><code>Canvas Width</code>：表示 GIF 图像的宽度，单位是像素。</li>\n<li><code>Canvas Height</code>：表示 GIF 图像的高度，单位是像素。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部的不同 bit（位）表示有不同的含义<ul>\n<li>从左边数第一位表示 <code>Global Color Table Flag</code>，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。</li>\n<li>从左边数第二、三、四位表示 <code>Color Resolution</code>，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。</li>\n<li>从左边数第五位表示 <code>Sort Flag</code>，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。</li>\n<li>最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。</li>\n</ul>\n</li>\n<li><code>Background Color Index</code>：表示 GIF 的背景色在 Global Color Table 中的索引。</li>\n<li><code>Pixel Aspect Ratio</code>：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。</li>\n</ul>\n<p>对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：</p>\n<pre><code>0A 00 0A 00 91 00 00</code></pre><p>其中：<br><code>Canvas Width</code> = 0A00 = 10（十进制）<br><code>Canvas Height</code> = 0A00 = 10（十进制）<br><code>Packed Field</code> = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。<br><code>Background Color Index</code> = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。<br><code>Pixel Aspect Ratio</code> = 0,可忽略。</p>\n<h1 id=\"Global-Color-Table\"><a href=\"#Global-Color-Table\" class=\"headerlink\" title=\"Global Color Table\"></a>Global Color Table</h1><p>Global Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/global_color_table.gif\" alt=\"\"></p>\n<p>在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：</p>\n<pre><code>FF FF FF FF 00 00 00 00 FF 00 00 00 </code></pre><p>根据上面的数据我们来构建 Global Color Table</p>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>字节组合</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>FFFFFF</td>\n<td>白色</td>\n</tr>\n<tr>\n<td>1</td>\n<td>FF0000</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0000FF</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>3</td>\n<td>000000</td>\n<td>黑色</td>\n</tr>\n</tbody></table>\n<h1 id=\"Graphics-Control-Extension\"><a href=\"#Graphics-Control-Extension\" class=\"headerlink\" title=\"Graphics Control Extension\"></a>Graphics Control Extension</h1><p>这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的<code>21</code>，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。</p>\n<p>OK，那我们接着 21 往后看，下一个字节为<code>F9</code>，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。</p>\n<p>Graphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/graphic_control_ext.gif\" alt=\"\"></p>\n<p>其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：</p>\n<ul>\n<li><code>Byte Size</code>：表示接下来的有效数据字节数。</li>\n<li><code>Packed Field</code>：是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。</li>\n<li>从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。</li>\n<li>从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。</li>\n<li>最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。</li>\n</ul>\n</li>\n<li><code>Delay Time</code>：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。</li>\n<li><code>Transparent Color Index</code>：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。</li>\n<li><code>Block Terminator</code>：表示 Extension 到此结束。</li>\n</ul>\n<p>下面看一下示例中 Graphics Control Extension 对应的字节：</p>\n<pre><code>21 F9 04 00 00 00 00 00</code></pre><p>其中 21，F9 表示这是一个 Graphics Control Extension 块。<br>Byte Size 为 4。<br>其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。</p>\n<h1 id=\"Image-Descriptor\"><a href=\"#Image-Descriptor\" class=\"headerlink\" title=\"Image Descriptor\"></a>Image Descriptor</h1><p>上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 <code>2C</code>。下面看一下 Image Descriptor 内部字节结构：</p>\n<p><img src=\"http://backup.flutter-dev.cn/image_descriptor_block.gif\" alt=\"\"></p>\n<p>其中 Image Seperator 为固定值 2C。</p>\n<ul>\n<li><code>Image Left</code>：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。</li>\n<li><code>Image Top</code>：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。</li>\n<li><code>Image Width</code>：该值表示下一帧图像的宽度。</li>\n<li><code>Image Height</code>：该值表示下一帧图像的高度。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。</li>\n<li>从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。</li>\n<li>从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。</li>\n<li>从左数第四、五位：Reserved For Future Use，保留位。</li>\n<li>从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。</li>\n</ul>\n</li>\n</ul>\n<p>接着看一下示例中的对应字节：</p>\n<pre><code>2C 00 00 00 00 0A 00 0A 00 00 </code></pre><p>2C 表示 Image Descriptor<br>Image Left = 0<br>Image Top = 0<br>Image Width = 10<br>Image Height = 10<br>上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。<br>打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。</p>\n<blockquote>\n<p>这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。</p>\n</blockquote>\n<h1 id=\"Local-Color-Table\"><a href=\"#Local-Color-Table\" class=\"headerlink\" title=\"Local Color Table\"></a>Local Color Table</h1><p>local color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。</p>\n<h1 id=\"Image-Data\"><a href=\"#Image-Data\" class=\"headerlink\" title=\"Image Data\"></a>Image Data</h1><p>如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。</p>\n<p><img src=\"http://backup.flutter-dev.cn/image_data_block.gif\" alt=\"\"></p>\n<ul>\n<li><code>LZW Minimum Code Size</code>: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。</li>\n<li><code>Number of bytes of data in sun-blocks（01-FF）</code>：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。</li>\n<li><code>Data Sub-Block(s)</code>：表示有效的字节块。</li>\n<li><code>Block Terminator</code>：表示 Image Data 的结束部分。</li>\n</ul>\n<p>接着看一下示例中对应的字节：</p>\n<pre><code>02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00</code></pre><p>02 表示 LZW Minimum Code Size。<br>16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。<br>00 表示 Image Data 到此为止。</p>\n<h1 id=\"Trailer\"><a href=\"#Trailer\" class=\"headerlink\" title=\"Trailer\"></a>Trailer</h1><p>从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。</p>\n<h1 id=\"Plain-Text-Extension、Application-Extension和Comment-Extension\"><a href=\"#Plain-Text-Extension、Application-Extension和Comment-Extension\" class=\"headerlink\" title=\"Plain Text Extension、Application Extension和Comment Extension\"></a>Plain Text Extension、Application Extension和Comment Extension</h1><p>最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。</p>\n","excerpt":"<p>最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。</p>\n<p>下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。</p>\n<blockquote>\n<p><a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a><br><a href=\"https://www.w3.org/Graphics/GIF/spec-gif89a.txt\">https://www.w3.org/Graphics/GIF/spec-gif89a.txt</a></p>\n</blockquote>","more":"<h1 id=\"GIF-文件格式\"><a href=\"#GIF-文件格式\" class=\"headerlink\" title=\"GIF 文件格式\"></a>GIF 文件格式</h1><p>下图是我从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。</p>\n<p><img src=\"http://cdn.zqlxtt.cn/gif_file_stream.gif\" alt=\"\"></p>\n<p>上图中一个有十一块，其中有八块是 GIF 图像必备的：<code>Header</code>（头）、<code>Logical Screen Descriptor</code>（逻辑屏幕描述符）、<code>Image Descriptor</code>（图像描述符）、<code>Image Data</code>（图像数据流）、<code>Plain Text Extension</code>（文本扩展）、<code>Application Extension</code>（应用扩展）、<code>Comment Extension</code>（注释扩展）、<code>Trailer</code>（尾部标记）。</p>\n<p>另外还有三个可选块：<code>Global Color Table</code>（全局颜色表）、<code>Graphic Control Extension</code>（图形控制扩展）、<code>Local Color Table</code>（本地颜色表）。</p>\n<p>传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。</p>\n<p>为了比较直观的了解这些内容，我还是从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿了一个 GIF 图过来，如下图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/sample_1.gif\" alt=\"\"></p>\n<p>其放大后的效果图如下：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/sample_1_enlarged.gif\" alt=\"\"></p>\n<p>上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：</p>\n<pre><code>47 49 46 38 39 61 \n0A 00 0A 00 91 00 00 \nFF FF FF FF 00 00 00 00 FF 00 00 00 \n21 F9 04 00 00 00 00 00 \n2C 00 00 00 00 0A 00 0A 00 00 \n02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n3B</code></pre><h2 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h2><p>GIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/header_block.gif\" alt=\"\"></p>\n<p>其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。</p>\n<p>对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-11-14%20%E4%B8%8B%E5%8D%883.41.20.png\" alt=\"\"></p>\n<h2 id=\"Logical-Screen-Descriptor\"><a href=\"#Logical-Screen-Descriptor\" class=\"headerlink\" title=\"Logical Screen Descriptor\"></a>Logical Screen Descriptor</h2><p>Logical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：</p>\n<p><img src=\"http://cdn.zqlxtt.cn/logical_screen_desc_block.gif\" alt=\"\"></p>\n<p>按顺序看，</p>\n<ul>\n<li><code>Canvas Width</code>：表示 GIF 图像的宽度，单位是像素。</li>\n<li><code>Canvas Height</code>：表示 GIF 图像的高度，单位是像素。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部的不同 bit（位）表示有不同的含义<ul>\n<li>从左边数第一位表示 <code>Global Color Table Flag</code>，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。</li>\n<li>从左边数第二、三、四位表示 <code>Color Resolution</code>，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。</li>\n<li>从左边数第五位表示 <code>Sort Flag</code>，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。</li>\n<li>最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。</li>\n</ul>\n</li>\n<li><code>Background Color Index</code>：表示 GIF 的背景色在 Global Color Table 中的索引。</li>\n<li><code>Pixel Aspect Ratio</code>：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。</li>\n</ul>\n<p>对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：</p>\n<pre><code>0A 00 0A 00 91 00 00</code></pre><p>其中：<br><code>Canvas Width</code> = 0A00 = 10（十进制）<br><code>Canvas Height</code> = 0A00 = 10（十进制）<br><code>Packed Field</code> = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。<br><code>Background Color Index</code> = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。<br><code>Pixel Aspect Ratio</code> = 0,可忽略。</p>\n<h1 id=\"Global-Color-Table\"><a href=\"#Global-Color-Table\" class=\"headerlink\" title=\"Global Color Table\"></a>Global Color Table</h1><p>Global Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：</p>\n<p><img src=\"http://backup.flutter-dev.cn/global_color_table.gif\" alt=\"\"></p>\n<p>在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：</p>\n<pre><code>FF FF FF FF 00 00 00 00 FF 00 00 00 </code></pre><p>根据上面的数据我们来构建 Global Color Table</p>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>字节组合</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>FFFFFF</td>\n<td>白色</td>\n</tr>\n<tr>\n<td>1</td>\n<td>FF0000</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0000FF</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>3</td>\n<td>000000</td>\n<td>黑色</td>\n</tr>\n</tbody></table>\n<h1 id=\"Graphics-Control-Extension\"><a href=\"#Graphics-Control-Extension\" class=\"headerlink\" title=\"Graphics Control Extension\"></a>Graphics Control Extension</h1><p>这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的<code>21</code>，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。</p>\n<p>OK，那我们接着 21 往后看，下一个字节为<code>F9</code>，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。</p>\n<p>Graphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：</p>\n<p><img src=\"http://backup.flutter-dev.cn/graphic_control_ext.gif\" alt=\"\"></p>\n<p>其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：</p>\n<ul>\n<li><code>Byte Size</code>：表示接下来的有效数据字节数。</li>\n<li><code>Packed Field</code>：是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。</li>\n<li>从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。</li>\n<li>从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。</li>\n<li>最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。</li>\n</ul>\n</li>\n<li><code>Delay Time</code>：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。</li>\n<li><code>Transparent Color Index</code>：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。</li>\n<li><code>Block Terminator</code>：表示 Extension 到此结束。</li>\n</ul>\n<p>下面看一下示例中 Graphics Control Extension 对应的字节：</p>\n<pre><code>21 F9 04 00 00 00 00 00</code></pre><p>其中 21，F9 表示这是一个 Graphics Control Extension 块。<br>Byte Size 为 4。<br>其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。</p>\n<h1 id=\"Image-Descriptor\"><a href=\"#Image-Descriptor\" class=\"headerlink\" title=\"Image Descriptor\"></a>Image Descriptor</h1><p>上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 <code>2C</code>。下面看一下 Image Descriptor 内部字节结构：</p>\n<p><img src=\"http://backup.flutter-dev.cn/image_descriptor_block.gif\" alt=\"\"></p>\n<p>其中 Image Seperator 为固定值 2C。</p>\n<ul>\n<li><code>Image Left</code>：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。</li>\n<li><code>Image Top</code>：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。</li>\n<li><code>Image Width</code>：该值表示下一帧图像的宽度。</li>\n<li><code>Image Height</code>：该值表示下一帧图像的高度。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。</li>\n<li>从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。</li>\n<li>从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。</li>\n<li>从左数第四、五位：Reserved For Future Use，保留位。</li>\n<li>从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。</li>\n</ul>\n</li>\n</ul>\n<p>接着看一下示例中的对应字节：</p>\n<pre><code>2C 00 00 00 00 0A 00 0A 00 00 </code></pre><p>2C 表示 Image Descriptor<br>Image Left = 0<br>Image Top = 0<br>Image Width = 10<br>Image Height = 10<br>上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。<br>打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。</p>\n<blockquote>\n<p>这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。</p>\n</blockquote>\n<h1 id=\"Local-Color-Table\"><a href=\"#Local-Color-Table\" class=\"headerlink\" title=\"Local Color Table\"></a>Local Color Table</h1><p>local color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。</p>\n<h1 id=\"Image-Data\"><a href=\"#Image-Data\" class=\"headerlink\" title=\"Image Data\"></a>Image Data</h1><p>如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。</p>\n<p><img src=\"http://backup.flutter-dev.cn/image_data_block.gif\" alt=\"\"></p>\n<ul>\n<li><code>LZW Minimum Code Size</code>: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。</li>\n<li><code>Number of bytes of data in sun-blocks（01-FF）</code>：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。</li>\n<li><code>Data Sub-Block(s)</code>：表示有效的字节块。</li>\n<li><code>Block Terminator</code>：表示 Image Data 的结束部分。</li>\n</ul>\n<p>接着看一下示例中对应的字节：</p>\n<pre><code>02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00</code></pre><p>02 表示 LZW Minimum Code Size。<br>16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。<br>00 表示 Image Data 到此为止。</p>\n<h1 id=\"Trailer\"><a href=\"#Trailer\" class=\"headerlink\" title=\"Trailer\"></a>Trailer</h1><p>从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。</p>\n<h1 id=\"Plain-Text-Extension、Application-Extension和Comment-Extension\"><a href=\"#Plain-Text-Extension、Application-Extension和Comment-Extension\" class=\"headerlink\" title=\"Plain Text Extension、Application Extension和Comment Extension\"></a>Plain Text Extension、Application Extension和Comment Extension</h1><p>最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。</p>"},{"title":"GIF 字节格式介绍","date":"2017-11-03T11:08:22.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9a836aaf2873ebc0.webp","_content":"![gif](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9a836aaf2873ebc0.webp)\n\n\n最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。\n\n下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。\n\n> http://giflib.sourceforge.net/index.html\n> https://www.w3.org/Graphics/GIF/spec-gif89a.txt\n<!-- more -->\n# GIF 文件格式\n\n下图是我从 http://giflib.sourceforge.net/index.html 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d2847ad5154c6744.webp)\n\n上图中一个有十一块，其中有八块是 GIF 图像必备的：`Header`（头）、`Logical Screen Descriptor`（逻辑屏幕描述符）、`Image Descriptor`（图像描述符）、`Image Data`（图像数据流）、`Plain Text Extension`（文本扩展）、`Application Extension`（应用扩展）、`Comment Extension`（注释扩展）、`Trailer`（尾部标记）。\n\n另外还有三个可选块：`Global Color Table`（全局颜色表）、`Graphic Control Extension`（图形控制扩展）、`Local Color Table`（本地颜色表）。\n\n传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。\n\n为了比较直观的了解这些内容，我还是从 http://giflib.sourceforge.net/index.html 拿了一个 GIF 图过来，如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-434075727f059761.webp)\n\n其放大后的效果图如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9da5a168aebb3bf5.webp)\n\n上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：\n\n    47 49 46 38 39 61 \n    0A 00 0A 00 91 00 00 \n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n    21 F9 04 00 00 00 00 00 \n    2C 00 00 00 00 0A 00 0A 00 00 \n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    3B\n    \n## Header\n\nGIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-4309aa3f589fbaa8.webp)\n\n其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。\n\n对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-c558f44ea7b41241.webp)\n\n## Logical Screen Descriptor\n\nLogical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp)\n\n按顺序看，\n\n- `Canvas Width`：表示 GIF 图像的宽度，单位是像素。\n- `Canvas Height`：表示 GIF 图像的高度，单位是像素。\n- `Packed Field`：这是一个包装字段，内部的不同 bit（位）表示有不同的含义\n    - 从左边数第一位表示 `Global Color Table Flag`，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。\n    - 从左边数第二、三、四位表示 `Color Resolution`，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。\n    - 从左边数第五位表示 `Sort Flag`，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。\n    - 最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。\n- `Background Color Index`：表示 GIF 的背景色在 Global Color Table 中的索引。\n- `Pixel Aspect Ratio`：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。\n\n对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：\n\n    0A 00 0A 00 91 00 00\n    \n其中：\n`Canvas Width` = 0A00 = 10（十进制）\n`Canvas Height` = 0A00 = 10（十进制）\n`Packed Field` = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。\n`Background Color Index` = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。\n`Pixel Aspect Ratio` = 0,可忽略。\n\n# Global Color Table\n\nGlobal Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp)\n\n在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：\n\n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n\n根据上面的数据我们来构建 Global Color Table\n\n|索引|字节组合|颜色|\n|---|---|---|\n|0|FFFFFF|白色|\n|1|FF0000|红色|\n|2|0000FF|蓝色|\n|3|000000|黑色|\n\n# Graphics Control Extension\n\n这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的`21`，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。\n\nOK，那我们接着 21 往后看，下一个字节为`F9`，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。\n\nGraphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ebc764ba29f365c1.webp)\n\n其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：\n\n- `Byte Size`：表示接下来的有效数据字节数。\n- `Packed Field`：是一个包装字段，内部不同位的意义也不同。\n    - 从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。\n    - 从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。\n    - 从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。\n    - 最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。\n- `Delay Time`：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。\n- `Transparent Color Index`：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。\n- `Block Terminator`：表示 Extension 到此结束。\n\n下面看一下示例中 Graphics Control Extension 对应的字节：\n\n    21 F9 04 00 00 00 00 00\n\n其中 21，F9 表示这是一个 Graphics Control Extension 块。\nByte Size 为 4。\n其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。\n\n# Image Descriptor\n\n上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 `2C`。下面看一下 Image Descriptor 内部字节结构：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-607ad12f91e24c47.webp)\n\n\n其中 Image Seperator 为固定值 2C。\n\n- `Image Left`：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。\n- `Image Top`：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。\n- `Image Width`：该值表示下一帧图像的宽度。\n- `Image Height`：该值表示下一帧图像的高度。\n- `Packed Field`：这是一个包装字段，内部不同位的意义也不同。\n    - 从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。\n    - 从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。\n    - 从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。\n    - 从左数第四、五位：Reserved For Future Use，保留位。\n    - 从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。\n    \n接着看一下示例中的对应字节：\n\n    2C 00 00 00 00 0A 00 0A 00 00 \n\n2C 表示 Image Descriptor\nImage Left = 0\nImage Top = 0\nImage Width = 10\nImage Height = 10\n上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。\n打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。\n\n> 这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。\n\n\n# Local Color Table\nlocal color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。\n\n# Image Data\n\n如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8b4ded747247ce4a.webp)\n\n- `LZW Minimum Code Size`: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。\n- `Number of bytes of data in sun-blocks（01-FF）`：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。\n- `Data Sub-Block(s)`：表示有效的字节块。\n- `Block Terminator`：表示 Image Data 的结束部分。\n\n接着看一下示例中对应的字节：\n\n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    \n02 表示 LZW Minimum Code Size。\n16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。\n00 表示 Image Data 到此为止。\n\n# Trailer\n\n从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。\n\n# Plain Text Extension、Application Extension和Comment Extension\n\n最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。\n\n# 总结\n本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。","source":"_posts/git-intro.md","raw":"---\ntitle: GIF 字节格式介绍\ndate: 2017-11-03 19:08:22\ntags: 多媒体\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9a836aaf2873ebc0.webp\n---\n![gif](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9a836aaf2873ebc0.webp)\n\n\n最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。\n\n下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。\n\n> http://giflib.sourceforge.net/index.html\n> https://www.w3.org/Graphics/GIF/spec-gif89a.txt\n<!-- more -->\n# GIF 文件格式\n\n下图是我从 http://giflib.sourceforge.net/index.html 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d2847ad5154c6744.webp)\n\n上图中一个有十一块，其中有八块是 GIF 图像必备的：`Header`（头）、`Logical Screen Descriptor`（逻辑屏幕描述符）、`Image Descriptor`（图像描述符）、`Image Data`（图像数据流）、`Plain Text Extension`（文本扩展）、`Application Extension`（应用扩展）、`Comment Extension`（注释扩展）、`Trailer`（尾部标记）。\n\n另外还有三个可选块：`Global Color Table`（全局颜色表）、`Graphic Control Extension`（图形控制扩展）、`Local Color Table`（本地颜色表）。\n\n传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。\n\n为了比较直观的了解这些内容，我还是从 http://giflib.sourceforge.net/index.html 拿了一个 GIF 图过来，如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-434075727f059761.webp)\n\n其放大后的效果图如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9da5a168aebb3bf5.webp)\n\n上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：\n\n    47 49 46 38 39 61 \n    0A 00 0A 00 91 00 00 \n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n    21 F9 04 00 00 00 00 00 \n    2C 00 00 00 00 0A 00 0A 00 00 \n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    3B\n    \n## Header\n\nGIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-4309aa3f589fbaa8.webp)\n\n其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。\n\n对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-c558f44ea7b41241.webp)\n\n## Logical Screen Descriptor\n\nLogical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp)\n\n按顺序看，\n\n- `Canvas Width`：表示 GIF 图像的宽度，单位是像素。\n- `Canvas Height`：表示 GIF 图像的高度，单位是像素。\n- `Packed Field`：这是一个包装字段，内部的不同 bit（位）表示有不同的含义\n    - 从左边数第一位表示 `Global Color Table Flag`，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。\n    - 从左边数第二、三、四位表示 `Color Resolution`，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。\n    - 从左边数第五位表示 `Sort Flag`，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。\n    - 最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。\n- `Background Color Index`：表示 GIF 的背景色在 Global Color Table 中的索引。\n- `Pixel Aspect Ratio`：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。\n\n对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：\n\n    0A 00 0A 00 91 00 00\n    \n其中：\n`Canvas Width` = 0A00 = 10（十进制）\n`Canvas Height` = 0A00 = 10（十进制）\n`Packed Field` = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。\n`Background Color Index` = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。\n`Pixel Aspect Ratio` = 0,可忽略。\n\n# Global Color Table\n\nGlobal Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp)\n\n在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：\n\n    FF FF FF FF 00 00 00 00 FF 00 00 00 \n\n根据上面的数据我们来构建 Global Color Table\n\n|索引|字节组合|颜色|\n|---|---|---|\n|0|FFFFFF|白色|\n|1|FF0000|红色|\n|2|0000FF|蓝色|\n|3|000000|黑色|\n\n# Graphics Control Extension\n\n这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的`21`，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。\n\nOK，那我们接着 21 往后看，下一个字节为`F9`，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。\n\nGraphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ebc764ba29f365c1.webp)\n\n其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：\n\n- `Byte Size`：表示接下来的有效数据字节数。\n- `Packed Field`：是一个包装字段，内部不同位的意义也不同。\n    - 从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。\n    - 从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。\n    - 从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。\n    - 最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。\n- `Delay Time`：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。\n- `Transparent Color Index`：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。\n- `Block Terminator`：表示 Extension 到此结束。\n\n下面看一下示例中 Graphics Control Extension 对应的字节：\n\n    21 F9 04 00 00 00 00 00\n\n其中 21，F9 表示这是一个 Graphics Control Extension 块。\nByte Size 为 4。\n其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。\n\n# Image Descriptor\n\n上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 `2C`。下面看一下 Image Descriptor 内部字节结构：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-607ad12f91e24c47.webp)\n\n\n其中 Image Seperator 为固定值 2C。\n\n- `Image Left`：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。\n- `Image Top`：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。\n- `Image Width`：该值表示下一帧图像的宽度。\n- `Image Height`：该值表示下一帧图像的高度。\n- `Packed Field`：这是一个包装字段，内部不同位的意义也不同。\n    - 从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。\n    - 从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。\n    - 从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。\n    - 从左数第四、五位：Reserved For Future Use，保留位。\n    - 从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。\n    \n接着看一下示例中的对应字节：\n\n    2C 00 00 00 00 0A 00 0A 00 00 \n\n2C 表示 Image Descriptor\nImage Left = 0\nImage Top = 0\nImage Width = 10\nImage Height = 10\n上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。\n打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。\n\n> 这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。\n\n\n# Local Color Table\nlocal color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。\n\n# Image Data\n\n如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8b4ded747247ce4a.webp)\n\n- `LZW Minimum Code Size`: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。\n- `Number of bytes of data in sun-blocks（01-FF）`：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。\n- `Data Sub-Block(s)`：表示有效的字节块。\n- `Block Terminator`：表示 Image Data 的结束部分。\n\n接着看一下示例中对应的字节：\n\n    02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n    \n02 表示 LZW Minimum Code Size。\n16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。\n00 表示 Image Data 到此为止。\n\n# Trailer\n\n从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。\n\n# Plain Text Extension、Application Extension和Comment Extension\n\n最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。\n\n# 总结\n本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。","slug":"git-intro","published":1,"updated":"2024-08-21T03:16:19.785Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vu001a5p6tfxsu8hac","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9a836aaf2873ebc0.webp\" alt=\"gif\"></p>\n<p>最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。</p>\n<p>下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。</p>\n<blockquote>\n<p><a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a><br><a href=\"https://www.w3.org/Graphics/GIF/spec-gif89a.txt\">https://www.w3.org/Graphics/GIF/spec-gif89a.txt</a></p>\n</blockquote>\n<span id=\"more\"></span>\n<h1 id=\"GIF-文件格式\"><a href=\"#GIF-文件格式\" class=\"headerlink\" title=\"GIF 文件格式\"></a>GIF 文件格式</h1><p>下图是我从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d2847ad5154c6744.webp\" alt=\"image\"></p>\n<p>上图中一个有十一块，其中有八块是 GIF 图像必备的：<code>Header</code>（头）、<code>Logical Screen Descriptor</code>（逻辑屏幕描述符）、<code>Image Descriptor</code>（图像描述符）、<code>Image Data</code>（图像数据流）、<code>Plain Text Extension</code>（文本扩展）、<code>Application Extension</code>（应用扩展）、<code>Comment Extension</code>（注释扩展）、<code>Trailer</code>（尾部标记）。</p>\n<p>另外还有三个可选块：<code>Global Color Table</code>（全局颜色表）、<code>Graphic Control Extension</code>（图形控制扩展）、<code>Local Color Table</code>（本地颜色表）。</p>\n<p>传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。</p>\n<p>为了比较直观的了解这些内容，我还是从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿了一个 GIF 图过来，如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-434075727f059761.webp\" alt=\"image\"></p>\n<p>其放大后的效果图如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9da5a168aebb3bf5.webp\" alt=\"image\"></p>\n<p>上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：</p>\n<pre><code>47 49 46 38 39 61 \n0A 00 0A 00 91 00 00 \nFF FF FF FF 00 00 00 00 FF 00 00 00 \n21 F9 04 00 00 00 00 00 \n2C 00 00 00 00 0A 00 0A 00 00 \n02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n3B</code></pre><h2 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h2><p>GIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-4309aa3f589fbaa8.webp\" alt=\"image\"></p>\n<p>其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。</p>\n<p>对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-c558f44ea7b41241.webp\" alt=\"image\"></p>\n<h2 id=\"Logical-Screen-Descriptor\"><a href=\"#Logical-Screen-Descriptor\" class=\"headerlink\" title=\"Logical Screen Descriptor\"></a>Logical Screen Descriptor</h2><p>Logical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp\" alt=\"image\"></p>\n<p>按顺序看，</p>\n<ul>\n<li><code>Canvas Width</code>：表示 GIF 图像的宽度，单位是像素。</li>\n<li><code>Canvas Height</code>：表示 GIF 图像的高度，单位是像素。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部的不同 bit（位）表示有不同的含义<ul>\n<li>从左边数第一位表示 <code>Global Color Table Flag</code>，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。</li>\n<li>从左边数第二、三、四位表示 <code>Color Resolution</code>，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。</li>\n<li>从左边数第五位表示 <code>Sort Flag</code>，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。</li>\n<li>最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。</li>\n</ul>\n</li>\n<li><code>Background Color Index</code>：表示 GIF 的背景色在 Global Color Table 中的索引。</li>\n<li><code>Pixel Aspect Ratio</code>：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。</li>\n</ul>\n<p>对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：</p>\n<pre><code>0A 00 0A 00 91 00 00</code></pre><p>其中：<br><code>Canvas Width</code> = 0A00 = 10（十进制）<br><code>Canvas Height</code> = 0A00 = 10（十进制）<br><code>Packed Field</code> = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。<br><code>Background Color Index</code> = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。<br><code>Pixel Aspect Ratio</code> = 0,可忽略。</p>\n<h1 id=\"Global-Color-Table\"><a href=\"#Global-Color-Table\" class=\"headerlink\" title=\"Global Color Table\"></a>Global Color Table</h1><p>Global Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp\" alt=\"image\"></p>\n<p>在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：</p>\n<pre><code>FF FF FF FF 00 00 00 00 FF 00 00 00 </code></pre><p>根据上面的数据我们来构建 Global Color Table</p>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>字节组合</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>FFFFFF</td>\n<td>白色</td>\n</tr>\n<tr>\n<td>1</td>\n<td>FF0000</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0000FF</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>3</td>\n<td>000000</td>\n<td>黑色</td>\n</tr>\n</tbody></table>\n<h1 id=\"Graphics-Control-Extension\"><a href=\"#Graphics-Control-Extension\" class=\"headerlink\" title=\"Graphics Control Extension\"></a>Graphics Control Extension</h1><p>这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的<code>21</code>，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。</p>\n<p>OK，那我们接着 21 往后看，下一个字节为<code>F9</code>，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。</p>\n<p>Graphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ebc764ba29f365c1.webp\" alt=\"image\"></p>\n<p>其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：</p>\n<ul>\n<li><code>Byte Size</code>：表示接下来的有效数据字节数。</li>\n<li><code>Packed Field</code>：是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。</li>\n<li>从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。</li>\n<li>从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。</li>\n<li>最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。</li>\n</ul>\n</li>\n<li><code>Delay Time</code>：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。</li>\n<li><code>Transparent Color Index</code>：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。</li>\n<li><code>Block Terminator</code>：表示 Extension 到此结束。</li>\n</ul>\n<p>下面看一下示例中 Graphics Control Extension 对应的字节：</p>\n<pre><code>21 F9 04 00 00 00 00 00</code></pre><p>其中 21，F9 表示这是一个 Graphics Control Extension 块。<br>Byte Size 为 4。<br>其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。</p>\n<h1 id=\"Image-Descriptor\"><a href=\"#Image-Descriptor\" class=\"headerlink\" title=\"Image Descriptor\"></a>Image Descriptor</h1><p>上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 <code>2C</code>。下面看一下 Image Descriptor 内部字节结构：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-607ad12f91e24c47.webp\" alt=\"image\"></p>\n<p>其中 Image Seperator 为固定值 2C。</p>\n<ul>\n<li><code>Image Left</code>：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。</li>\n<li><code>Image Top</code>：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。</li>\n<li><code>Image Width</code>：该值表示下一帧图像的宽度。</li>\n<li><code>Image Height</code>：该值表示下一帧图像的高度。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。</li>\n<li>从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。</li>\n<li>从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。</li>\n<li>从左数第四、五位：Reserved For Future Use，保留位。</li>\n<li>从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。</li>\n</ul>\n</li>\n</ul>\n<p>接着看一下示例中的对应字节：</p>\n<pre><code>2C 00 00 00 00 0A 00 0A 00 00 </code></pre><p>2C 表示 Image Descriptor<br>Image Left = 0<br>Image Top = 0<br>Image Width = 10<br>Image Height = 10<br>上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。<br>打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。</p>\n<blockquote>\n<p>这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。</p>\n</blockquote>\n<h1 id=\"Local-Color-Table\"><a href=\"#Local-Color-Table\" class=\"headerlink\" title=\"Local Color Table\"></a>Local Color Table</h1><p>local color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。</p>\n<h1 id=\"Image-Data\"><a href=\"#Image-Data\" class=\"headerlink\" title=\"Image Data\"></a>Image Data</h1><p>如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8b4ded747247ce4a.webp\" alt=\"image\"></p>\n<ul>\n<li><code>LZW Minimum Code Size</code>: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。</li>\n<li><code>Number of bytes of data in sun-blocks（01-FF）</code>：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。</li>\n<li><code>Data Sub-Block(s)</code>：表示有效的字节块。</li>\n<li><code>Block Terminator</code>：表示 Image Data 的结束部分。</li>\n</ul>\n<p>接着看一下示例中对应的字节：</p>\n<pre><code>02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00</code></pre><p>02 表示 LZW Minimum Code Size。<br>16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。<br>00 表示 Image Data 到此为止。</p>\n<h1 id=\"Trailer\"><a href=\"#Trailer\" class=\"headerlink\" title=\"Trailer\"></a>Trailer</h1><p>从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。</p>\n<h1 id=\"Plain-Text-Extension、Application-Extension和Comment-Extension\"><a href=\"#Plain-Text-Extension、Application-Extension和Comment-Extension\" class=\"headerlink\" title=\"Plain Text Extension、Application Extension和Comment Extension\"></a>Plain Text Extension、Application Extension和Comment Extension</h1><p>最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。</p>\n","excerpt":"<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9a836aaf2873ebc0.webp\" alt=\"gif\"></p>\n<p>最近花了点时间用 C++ 写了一个 GIF 图片的解析程序，在这一过程中我找了许多中文相关的材料，但没有哪一篇是真正能够让读者完全理解 GIF 的文件格式和 LZW 在 GIF 中的应用（解析部分）。在查阅了一些官方文档后我算是顺利的将程序完成了，顺道我就把 GIF 文件的解析在这儿讲讲清除，方便大家学习。</p>\n<p>下面这两个网页是我参考的比较权威的资料，大家也可以直接阅读。</p>\n<blockquote>\n<p><a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a><br><a href=\"https://www.w3.org/Graphics/GIF/spec-gif89a.txt\">https://www.w3.org/Graphics/GIF/spec-gif89a.txt</a></p>\n</blockquote>","more":"<h1 id=\"GIF-文件格式\"><a href=\"#GIF-文件格式\" class=\"headerlink\" title=\"GIF 文件格式\"></a>GIF 文件格式</h1><p>下图是我从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿过来的图，从图上可以很清晰的看到 GIF 文件的内部组成。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-d2847ad5154c6744.webp\" alt=\"image\"></p>\n<p>上图中一个有十一块，其中有八块是 GIF 图像必备的：<code>Header</code>（头）、<code>Logical Screen Descriptor</code>（逻辑屏幕描述符）、<code>Image Descriptor</code>（图像描述符）、<code>Image Data</code>（图像数据流）、<code>Plain Text Extension</code>（文本扩展）、<code>Application Extension</code>（应用扩展）、<code>Comment Extension</code>（注释扩展）、<code>Trailer</code>（尾部标记）。</p>\n<p>另外还有三个可选块：<code>Global Color Table</code>（全局颜色表）、<code>Graphic Control Extension</code>（图形控制扩展）、<code>Local Color Table</code>（本地颜色表）。</p>\n<p>传统的 Gif 解码器正是通过上述的这些块来对 GIF 文件进行解析，下面我们就按照顺序来详细了解一下这些块的内部字节格式。</p>\n<p>为了比较直观的了解这些内容，我还是从 <a href=\"http://giflib.sourceforge.net/index.html\">http://giflib.sourceforge.net/index.html</a> 拿了一个 GIF 图过来，如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-434075727f059761.webp\" alt=\"image\"></p>\n<p>其放大后的效果图如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-9da5a168aebb3bf5.webp\" alt=\"image\"></p>\n<p>上图经过放大处理，其代表了一个 10*10 个像素的 GIF 图，其内部字节如下：</p>\n<pre><code>47 49 46 38 39 61 \n0A 00 0A 00 91 00 00 \nFF FF FF FF 00 00 00 00 FF 00 00 00 \n21 F9 04 00 00 00 00 00 \n2C 00 00 00 00 0A 00 0A 00 00 \n02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00\n3B</code></pre><h2 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h2><p>GIF 文件由它的 Header 块最为其文件的入口，Header 一共包含六个字节，如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-4309aa3f589fbaa8.webp\" alt=\"image\"></p>\n<p>其中前三个字节对应 ASCII 码中的 G、I、F 三个字符，后三个字节用于说明此 GIF 的版本号，目前的版本号有 87a 和 89a 两个。</p>\n<p>对于上面的示例图来说，前六个字节分别是 47、49、46、38、39、61。 用 0xED 查看如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-c558f44ea7b41241.webp\" alt=\"image\"></p>\n<h2 id=\"Logical-Screen-Descriptor\"><a href=\"#Logical-Screen-Descriptor\" class=\"headerlink\" title=\"Logical Screen Descriptor\"></a>Logical Screen Descriptor</h2><p>Logical Screen Descriptor（逻辑屏幕描述符）通常紧跟在 Header 后面，它的作用是告诉解码器 GIF 图像的分辨率，背景色和 Global Color Table 等信息。先看一下其字节的组成：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp\" alt=\"image\"></p>\n<p>按顺序看，</p>\n<ul>\n<li><code>Canvas Width</code>：表示 GIF 图像的宽度，单位是像素。</li>\n<li><code>Canvas Height</code>：表示 GIF 图像的高度，单位是像素。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部的不同 bit（位）表示有不同的含义<ul>\n<li>从左边数第一位表示 <code>Global Color Table Flag</code>，如果其为 1 ，则表示存在 Global Color Table。如果为 0，则没有 Global Color Table。</li>\n<li>从左边数第二、三、四位表示 <code>Color Resolution</code>，用于表示色彩分辨率，如果为 s，则 Global Color Table 的颜色数为 2^(s+1)个，如果这是 s = 1,则一共有 4 中颜色，即每个像素可以用 2位（二进制） 来表示。</li>\n<li>从左边数第五位表示 <code>Sort Flag</code>，它有两个值 0 或 1。如果为 0 则 Global Color Table 不进行排序，为 1 则表示 Global Color Table 按照降序排列，出现频率最多的颜色排在最前面。</li>\n<li>最右边三位表示 Global Color Table 的颜色数，如其值为 s，则全局列表颜色个数的计算公式为 2^(s+1)。如 s = 1，则 Global Color Table 包含 4 个颜色。</li>\n</ul>\n</li>\n<li><code>Background Color Index</code>：表示 GIF 的背景色在 Global Color Table 中的索引。</li>\n<li><code>Pixel Aspect Ratio</code>：表示用于计算原始图像中像素宽高比的近似因子，一般情况为 0，顾不做深入了解。</li>\n</ul>\n<p>对于我们是示例图，其 Logical Screen Descriptor 对应的字节如下：</p>\n<pre><code>0A 00 0A 00 91 00 00</code></pre><p>其中：<br><code>Canvas Width</code> = 0A00 = 10（十进制）<br><code>Canvas Height</code> = 0A00 = 10（十进制）<br><code>Packed Field</code> = 10010001（二进制），其中 Global Color Table 为 1，则存在 Global Color Table。Color Resolution 为 1，表示三原色分别用 2 位来表示。Sort Flag = 0，不排序。Global Color Table 中颜色数为 4 。<br><code>Background Color Index</code> = 0，说明此 GIF 的背景色为 Global Color Table 中第一个颜色。<br><code>Pixel Aspect Ratio</code> = 0,可忽略。</p>\n<h1 id=\"Global-Color-Table\"><a href=\"#Global-Color-Table\" class=\"headerlink\" title=\"Global Color Table\"></a>Global Color Table</h1><p>Global Color Table 如果有的话就会跟在 Logical Screen Descriptor 块后面。其块中的字节格式如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-49686736a5ecb836.webp\" alt=\"image\"></p>\n<p>在 Global Color Table 中每个字节仅代表一种颜色，所以 Global Color Table 的字节数 = 颜色数 * 3.在 Logical Screen Descriptor 中我们知道示例中包含 4 中颜色，即 Global Color Table 的字节数为 12 。所以读取接下的 12 个字节。其具体字节如下：</p>\n<pre><code>FF FF FF FF 00 00 00 00 FF 00 00 00 </code></pre><p>根据上面的数据我们来构建 Global Color Table</p>\n<table>\n<thead>\n<tr>\n<th>索引</th>\n<th>字节组合</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>FFFFFF</td>\n<td>白色</td>\n</tr>\n<tr>\n<td>1</td>\n<td>FF0000</td>\n<td>红色</td>\n</tr>\n<tr>\n<td>2</td>\n<td>0000FF</td>\n<td>蓝色</td>\n</tr>\n<tr>\n<td>3</td>\n<td>000000</td>\n<td>黑色</td>\n</tr>\n</tbody></table>\n<h1 id=\"Graphics-Control-Extension\"><a href=\"#Graphics-Control-Extension\" class=\"headerlink\" title=\"Graphics Control Extension\"></a>Graphics Control Extension</h1><p>这里先不说 Graphics Control Extension，我们先看 Global Color Table 后面紧跟的那个字节，从示例中可以看到的<code>21</code>，21在 GIF 格式中是有特殊意义的，它表示 Extension Introducer（扩展入口），即接下来的一段数据为最开始提到的这几个扩展中的某一个扩展。</p>\n<p>OK，那我们接着 21 往后看，下一个字节为<code>F9</code>，F9 也是有特殊含义的，表示这是一个 Graphics Control Extension。</p>\n<p>Graphics Control Extension 算上 21 和 F9 一共有八个字节，其结构如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-ebc764ba29f365c1.webp\" alt=\"image\"></p>\n<p>其中前两个字节上面已经提到，看接下来的几个字节分别表示什么含义：</p>\n<ul>\n<li><code>Byte Size</code>：表示接下来的有效数据字节数。</li>\n<li><code>Packed Field</code>：是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左边数一，二，三位表示Reserved for Future Use，即保留位，暂无用处。</li>\n<li>从左边数四，五，六位表示 Display Method，表示在进行逐帧渲染时，前一帧留下的图像作何处理：0：不做任何处理。1：保留前一帧图像，在此基础上进行渲染。2：渲染前将图像置为背景色。3：将被下一帧覆盖的图像重置。</li>\n<li>从右数第二位表示 User Input Flag，表示是否需要在得到用户的输入时才进行下一帧的输入（具体用户输入指什么视应用而定）。0 表示无需用户输入。1 表示需要用户输入。</li>\n<li>最右边一位，表示 Transparent Flag，当该值为 1 时，后面的 Transparent Color Index 指定的颜色将被当做透明色处理。为 0 则不做处理。</li>\n</ul>\n</li>\n<li><code>Delay Time</code>：表示 GIF 动图每一帧之间的间隔，单位为百分之一秒。当为 0 时间隔由解码器管理。</li>\n<li><code>Transparent Color Index</code>：当 Transparent Flag 为 1 时，此字节有效，表示此索引在 Global Color Table 中对应的颜色将被当做透明色做处理。</li>\n<li><code>Block Terminator</code>：表示 Extension 到此结束。</li>\n</ul>\n<p>下面看一下示例中 Graphics Control Extension 对应的字节：</p>\n<pre><code>21 F9 04 00 00 00 00 00</code></pre><p>其中 21，F9 表示这是一个 Graphics Control Extension 块。<br>Byte Size 为 4。<br>其它值都为 0 ，概括来讲此 Graphics Control Extension 对应下一帧的渲染无需任何处理，也不需要用户输入，也没有需要做透明处理的颜色值。渲染器要做的就是直接把下一帧图像渲染在画布上即可。</p>\n<h1 id=\"Image-Descriptor\"><a href=\"#Image-Descriptor\" class=\"headerlink\" title=\"Image Descriptor\"></a>Image Descriptor</h1><p>上面讲到 21 上 Extension 的标识符。这里的 Image Descriptor 也有自己的标识符，为 <code>2C</code>。下面看一下 Image Descriptor 内部字节结构：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-607ad12f91e24c47.webp\" alt=\"image\"></p>\n<p>其中 Image Seperator 为固定值 2C。</p>\n<ul>\n<li><code>Image Left</code>：该值表示下一帧图像渲染位置离画布左边的距离（从 0 开始）。</li>\n<li><code>Image Top</code>：该值表示下一帧图像渲染位置离画布上边的距离（从 0 开始）。</li>\n<li><code>Image Width</code>：该值表示下一帧图像的宽度。</li>\n<li><code>Image Height</code>：该值表示下一帧图像的高度。</li>\n<li><code>Packed Field</code>：这是一个包装字段，内部不同位的意义也不同。<ul>\n<li>从左数第一位：Local Color Table Flag，表示下一帧图像是否需要一个独立的颜色表。1 为需要，0 为不需要。</li>\n<li>从左数第二位：Interlace Flag，表示是否需要隔行扫描。1 为需要，0 为不需要。</li>\n<li>从左数第三位：Sort Flag，如果需要 Local Color Table 的话，这个字段表示其排列顺序，同 Global Color Table。</li>\n<li>从左数第四、五位：Reserved For Future Use，保留位。</li>\n<li>从左数最后三位：Size of Local Color Table，同 Global Color Table 中的该位。如需要本地颜色表，则该数有效。</li>\n</ul>\n</li>\n</ul>\n<p>接着看一下示例中的对应字节：</p>\n<pre><code>2C 00 00 00 00 0A 00 0A 00 00 </code></pre><p>2C 表示 Image Descriptor<br>Image Left = 0<br>Image Top = 0<br>Image Width = 10<br>Image Height = 10<br>上面这四个数字表示即将渲染的一帧大小为 10*10 像素，正好与 GIF 图的分辨率一致。<br>打包字段都为零，表示下一帧不需要 Local Color Table，也不需要进行隔行扫描。</p>\n<blockquote>\n<p>这里读者可能会好奇我们不是在 Logical Screen Descriptor 中知道了图像的分辨率吗，为什么还要在 Image Descriptor 中额外指定图像的宽和高。其实 GIF 在进行编码的时候并不一定对每一帧进行全尺寸的压缩。因为有时候一个 GIF 图只有中间区域是动的，四周都是静止的，那只需要对中间那部分进行压缩编码即可。所以这里的 Image Left、Image Top、Image Width 和 Image Height正好可以指定一个小于等于 GIF 分辨率的图像。</p>\n</blockquote>\n<h1 id=\"Local-Color-Table\"><a href=\"#Local-Color-Table\" class=\"headerlink\" title=\"Local Color Table\"></a>Local Color Table</h1><p>local color table 在本示例中不涉及，我也不多介绍，在处理的时候按照 Global Color Table 处理即可。</p>\n<h1 id=\"Image-Data\"><a href=\"#Image-Data\" class=\"headerlink\" title=\"Image Data\"></a>Image Data</h1><p>如果存在 Local Color Table，Image Data 就紧跟其后。如若不存在，则紧跟在 Image Descriptor 后。下面先看一下 Image Data 的内部字节组成。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/2702499-8b4ded747247ce4a.webp\" alt=\"image\"></p>\n<ul>\n<li><code>LZW Minimum Code Size</code>: GIF 在对每一帧的像素颜色在 Color Table 所对应的索引进行 LZW 压缩，这里的 LZW Minimum Code Size 就是 LZW 压缩中很关键的一个值，不过目前这个值先放着，等后面讲到对 LZW 解压缩时再讲。</li>\n<li><code>Number of bytes of data in sun-blocks（01-FF）</code>：这个值表示在其后面的有效字节的个数。范围为 01-FF，当其值为 0，则表示 Image Data 到此为止，后面就是其他块的数据了。这里需要注意由于其最大值为 FF，但图像的像素个数可能会大于这个值，所以从图上也能知道这个 Data sub-Blocks是有可能接连出现很多个的。</li>\n<li><code>Data Sub-Block(s)</code>：表示有效的字节块。</li>\n<li><code>Block Terminator</code>：表示 Image Data 的结束部分。</li>\n</ul>\n<p>接着看一下示例中对应的字节：</p>\n<pre><code>02 16 8C 2D 99 87 2A 1C DC 33 A0 02 75 EC 95 FA A8 DE 60 8C 04 91 4C 01 00</code></pre><p>02 表示 LZW Minimum Code Size。<br>16（十六进制） 表示后面紧跟着的 22 个字节用来表示下一帧的图像数据。<br>00 表示 Image Data 到此为止。</p>\n<h1 id=\"Trailer\"><a href=\"#Trailer\" class=\"headerlink\" title=\"Trailer\"></a>Trailer</h1><p>从上面的示例看，最后还剩下一个字节 3B，这个在 GIF 中也有特殊含义，是尾部标记的意思，GIF 的字节内容到此就结束了。</p>\n<h1 id=\"Plain-Text-Extension、Application-Extension和Comment-Extension\"><a href=\"#Plain-Text-Extension、Application-Extension和Comment-Extension\" class=\"headerlink\" title=\"Plain Text Extension、Application Extension和Comment Extension\"></a>Plain Text Extension、Application Extension和Comment Extension</h1><p>最后还剩下上面三个 Extension，他们主要是为 GIF 提供一些额外的信息，本身的信息对实际的渲染没有多少影响。所以这里我也不多介绍，想深入了解的可以阅读一开始提到的两个网址。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>本文主要以 GIF 内部字节的格式作为出发点，简单介绍了十一种块。只有充分理解了各个块内部的含义，才能为其编写正确的解码器。但仅仅只了解各个块还是不够的，GIF 的图像数据采用的是 LZW 算法进行压缩，所以还需要对 LZW 有较深理解。在下一篇《GIF 与 LWZ》中我将结合本文中的示例图像，详细讲解如何通过 LWZ 对 GIF 的图像数据进行压缩和解压。</p>"},{"title":"2020 春节难得的晴天和晚霞，行车记录仪下从老家回城","date":"2020-01-31T15:52:10.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/wanxia.jpg","_content":"\n2020春节难得的晴天和晚霞，行车记录仪下从老家回城。\n\n<!-- more -->\n<iframe src=\"//player.bilibili.com/player.html?aid=86118628&bvid=BV147411x7Tu&cid=147152633&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>","source":"_posts/go-home.md","raw":"---\ntitle: 2020 春节难得的晴天和晚霞，行车记录仪下从老家回城\ndate: 2020-01-31 23:52:10\ntags: 日常\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/wanxia.jpg\n---\n\n2020春节难得的晴天和晚霞，行车记录仪下从老家回城。\n\n<!-- more -->\n<iframe src=\"//player.bilibili.com/player.html?aid=86118628&bvid=BV147411x7Tu&cid=147152633&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>","slug":"go-home","published":1,"updated":"2024-08-21T03:16:19.785Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vu001c5p6t738l3jw7","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>2020春节难得的晴天和晚霞，行车记录仪下从老家回城。</p>\n<span id=\"more\"></span>\n<iframe src=\"//player.bilibili.com/player.html?aid=86118628&bvid=BV147411x7Tu&cid=147152633&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>","excerpt":"<p>2020春节难得的晴天和晚霞，行车记录仪下从老家回城。</p>","more":"<iframe src=\"//player.bilibili.com/player.html?aid=86118628&bvid=BV147411x7Tu&cid=147152633&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>"},{"title":"JVM 概览","date":"2017-12-07T13:38:50.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/1.webp","top":6,"_content":"## Java\n说到 Java，大家第一时间想到的类似于下面的程序语句：\n\n```java\npackage com.zqlite.jvm;\n\npublic class HelloJVM {\n\n    private static final int k = 100;\n    public static void main(String ...args){\n        int a = 0,b=3;\n        System.out.println(a+b+k);\n    }\n}\n```\n<!-- more -->\n但这仅仅只属于 Java 技术体系中的 Java 程序设计语言。Java 的技术体系从传统意义上来看有以下几个：\n\n1. Java 程序设计语言\n2. 各硬件平台上的 Java 虚拟机\n3. Class 文件格式\n4. Java API 类库\n5. 其他商业机构或开源社区的第三方 Java 类库\n\n其中 1、4、5 大家应该比较熟悉，在编程中都能直接接触。2、3 对于大家来说可能陌生了些，但不夸张的讲，Java 能有如今的活力，其功臣正是 2 和 3。所以接下来的内容将围绕这两点展开，让你从更深的层次了解你所熟悉的 Java。\n\n## JVM\n\nJVM（Java Virtual Machine）就是上面所说的 Java 虚拟机，其作用是加载与运行 Class 文件。有句话大家一定不陌生，“一次编写，到处运行”。简单解释一下，因为在 Class 文件和硬件平台中间隔着一个 JVM，由 JVM 负责加载和执行 Class 文件，这样平台的差异性就留给了 JVM 去考虑，而不是 Class 文件。也正因如此，Class 文件的格式可以真正做到平台无关性。\n\n### JVM 中的 Java 内存区域划分\n\n对于从事 C、C++ 的开发人员来说，在内存管理领域他们是拥有最高权力的“皇帝”，但又是从事最底层基础工作的“劳动人民”。他们即拥有与内存直接打交道的权利，又要负责维护每一个对象的生命周期。\n\n对于 Java 开发人员来说就轻松多了，在 JVM 自动内存管理机制的帮助下，不再需要维护每一个对象的生命周期，内存控制的权利由开发人员转移到了 JVM 。\n\n因为 JVM 需要管理 Java 运行期间的各种对象的生命周期，所以它在执行 Java 程序的时候会把它所管辖的内存分成若干个不同的数据区域，具体如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/1.webp)\n\n对以上几个区域做下简单的介绍：\n\n- 方法区：线程共享区域，用于存储被虚拟机加载的类信息、常量、静态变量等数据。\n- 堆：线程共享区域，存放类实例以及数组。我们平时听到的 GC（垃圾回收）就是在堆上进行的。 \n- 虚拟机栈：线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。\n- 本地方法栈：线程私有区域，与虚拟机栈作用类似，区别在于本地方法栈执行的是 Native 方法。\n- 程序计数器：线程私有区域，用于指向当前线程下一条需要执行的字节码指令。\n\n除了以上几个主要区域外，另外还要介绍一个区域：运行时常量池。它是方法区的一部分，用于存放编译期生成的字面量和符号引用。字面量好理解，比如：\n\n```java\nString str = \"a\";\n```\n\n上面的 a 就是字面量。而符号引用则是一些字符串，用于给虚拟机定位类或类方法等。\n\n> 面试的时候有时会遇到这样的问题，Java 中每次声明并初始化一个 String 对象都会在堆上面分配内存吗？这里的答案当然是否，因为有可能新声明的对象已经在常量池中存在了，这时候 JVM 会将新对象的引用指向常量池中对应的值而不是在堆重新分配。\n\n### 对象在 JVM 中的创建过程\n\n在 Java 中创建对象很简单，一个简单的 new 关键字就可以。但在虚拟机中，对象的创建过程是怎样的呢？我们来一起了解一下。\n\n在 JVM 中，创建对象的字节码指令是 new，当 JVM 执行引擎遇到 new 指令后会进行如下五步操作：\n\n一、检查这个指令的参数能否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经加载、解析和初始化。\n\n下面我们看一下：\n\n```java\npackage com.zqlite.jvm;\n\npublic class HelloJVM {\n\n    public static void main(String ...args){\n        Object obj = new Object();\n    }\n}\n```\n然后用 javap 对这段代码生成的 class 文件进行反汇编处理，结果如下：\n\n```class\nClassfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class\n  Last modified 2017-11-29; size 446 bytes\n  MD5 checksum bcc0b2d9129748ef0caa00e95cf95a47\n  Compiled from \"HelloJVM.java\"\npublic class com.zqlite.jvm.HelloJVM\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #2.#19         // java/lang/Object.\"<init>\":()V\n   #2 = Class              #20            // java/lang/Object\n   #3 = Class              #21            // com/zqlite/jvm/HelloJVM\n   #4 = Utf8               <init>\n   #5 = Utf8               ()V\n   #6 = Utf8               Code\n   #7 = Utf8               LineNumberTable\n   #8 = Utf8               LocalVariableTable\n   #9 = Utf8               this\n  #10 = Utf8               Lcom/zqlite/jvm/HelloJVM;\n  #11 = Utf8               main\n  #12 = Utf8               ([Ljava/lang/String;)V\n  #13 = Utf8               args\n  #14 = Utf8               [Ljava/lang/String;\n  #15 = Utf8               obj\n  #16 = Utf8               Ljava/lang/Object;\n  #17 = Utf8               SourceFile\n  #18 = Utf8               HelloJVM.java\n  #19 = NameAndType        #4:#5          // \"<init>\":()V\n  #20 = Utf8               java/lang/Object\n  #21 = Utf8               com/zqlite/jvm/HelloJVM\n{\n  public com.zqlite.jvm.HelloJVM();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 6: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;\n\n  public static void main(java.lang.String...);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n    Code:\n      stack=2, locals=2, args_size=1\n         0: new           #2                  // class java/lang/Object\n         3: dup\n         4: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         7: astore_1\n         8: return\n      LineNumberTable:\n        line 9: 0\n        line 10: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       9     0  args   [Ljava/lang/String;\n            8       1     1   obj   Ljava/lang/Object;\n}\nSourceFile: \"HelloJVM.java\"\n\n```\n暂时无需理解上面的所有内容，我们只关注 new 字节码部分。\n\n找到\n\n```class\n0: new           #2\n```\n\n可以看到 new 指令码的参数是 #2，接着通过参数 #2 在常量池（Constant pool）中找到 #2 对应的内容：\n\n```class\n#2 = Class              #20            // java/lang/Object\n```\n\n这里说明了 #2 对应的是一个类，类符号引用需要到 #20 中找，在看 #20 ：\n\n```class\n#20 = Utf8               java/lang/Object\n```\n\n这里的 #20 是一个字符串类型，其内容是 ava/lang/Object，表示 Object 类的符号引用即全限定名。接着 JVM 就会去寻找并加载、解析和初始化这个类。\n\n二、当在第一步确定了目标类以后，JVM 就会为这个类的新生对象在堆上面分配内存。对象所需要的内存大小在第一步的类加载后已经确定了，所以为对象分配内存也就等同于把一块确定大小的内存从 Java 堆中划分出来。\n \n三、分配完内存后，JVM 需要将分配到的内存空间都初始化为零值（不包括对象头）。\n \n > 这里需要注意，由于 JVM 会对对象的内存空间做初始化操作，所以在类中类似的定义一个 int i ，其默认值就是整型的零值 0 。Java 类变量也正因如此允许不赋初始值。但在类方法中，如果这样定义一个 i，在接下来的代码中如果使用 i 的话，会有报错提示 i 没有初始化值，\n \n四、当初始化完以后，JVM 就要对对象做必要的处理，比如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄表的信息。这些信息都会放在对象头中。\n \n五、上面的工作都完成之后，从 JVM 的角度来看，一个新的对象已经产生了，但从 Java 程序的角度来看，对象创建才刚开始。<init> 方法还没有执行，所有的字段还都为零。所以一般在 new 指令码后都会跟 invokespecial 指令来调用 <init> 方法。此处的 <init> 即我们通常说的构造方法。\n \n### 对象的内存布局\n \n在上小节介绍了对象在 JVM 中的创建过程，这节简单介绍下对象的内存布局。\n \n对象的内存布局可以分三个区域：对象头、实例数据和对齐填充。\n \n其中对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁等。另外一部分则是类型指针，用于指向它的类元数据。JVM 可以通过这个指针来确定对象是属于哪个类的。另外需要注意的是如果对象是数组，那么对象头中还需要记录数组的长度。\n \n实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型字段的内容，包括从父类继承下来的和自己定义的。\n \n最后一部分并不是必须的，它仅仅起到了占位符的作用。有些虚拟机要求对象的起始地址必须是 8 字节的整数倍，换句话说就是对象大小必须是 8 字节的整数倍。所以当不足整数倍的时候，就需要进行对齐填充处理。\n \n下面这张图简单表示了对象在内存中的布局：\n \n ![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/2.webp)\n \n\n## Class 文件\n\n计算机只认识 0 和 1 ，这是常识。所以我们编写的程序都需要经过编译器翻译成有 0 和 1 构成的二进制格式才能被计算机执行。但在近十几年内，虚拟机以及大量建立在虚拟机上的程序语言如雨后春笋般出现并蓬勃发展，由此二进制本地机器码已不再是唯一的选择，越来越多的程序语言选择了与操作系统和机器指令集无关的、平台中立的格式作为程序编译后的存储格式。我们这里的 Class 文件就是其中一种。\n\n我们通常都把 Java 和 JVM 有意识无意识的联系在一起，但 JVM 其实并不关心 Java。什么意思呢？JVM 面向的是 Class 格式的文件，它并不关系 Class 的来源是何种语言。如 Clojure、Groovy、Jruby、Jython、Scala 等都可以被编译成 Class 文件，从而在 JVM 上运行。\n\n### Class 内部结构\n\nClass 文件是一组以 8 位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，其中没有任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行必须的数据，没有空隙存在。\n\nClass 文件的完整格式见下表：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/3.webp)\n\n其中类型中的 u4，u2以及没有这上图出现的 u1，u8都表示无符号数。其中 u1 表示 1 个字节，u2 表示 2 个字节，以此类推。名称则说明该位置数据的作用，如 constant\\_pool 表示常量池。数量则说明 Class 文件中，不同名称的数据块的个数。如 constant\\_pool 的个数取决于 constant\\_pool\\_count，而 constant\\_pool\\_count 则是占用两个字节的无符号数。\n\n不管是多复杂的 Class 文件，其内部数据结构必然是按照上表来排列的，由于其内部各类型的数据比较复杂，这里也不展开讲。这一节大家只要知道 Class 文件内部有这些数据就可以了，如果需要查看 Class 文件，可以使用反编译工具 javap 。具体命令如下：\n\n```sh\njavap -v ClassFile\n```\n\n### 字节码指令介绍\n\nJVM 中的指令由一个字节长度的、代表着某种特定操作含义的数字（操作码，字节码）以及跟随其后的零至多个代表此操作所需参数（操作数）构成。由于 JVM 采用面向操作数栈而不是寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。由于指令长度是 8 位的无符号数，所以 JVM 指令最多 256 条。\n\n\n大部分指令从其助记符就能知道它所操作的数据类型，比如 iload 指令用于从局部变量表加载 int 型的数据到操作数栈，而 fload 指令加载的则是 float 类型的数据。\n\n大部分与数据相关的字节码指令，其助记符都有特殊的字符来表示其服务的数据类型：i 代表对 int 型数据的操作，l 代表 long，s 代表 short，b 代表 byte，c 代表 char，f 代表 float，d 代表 double，a 代表 reference。\n\n如需查看所有 JVM 指令，点击此链接：[http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A](http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A)\n\n\n## JVM 与 Class 文件\n\n前面分开讲了 JVM 与 Class 文件，相信大家对它们有了一定的了解。Java 程序之所以可以运行起来，离不开这两位的紧密配合，下面我要给大家介绍的就是关于它俩的一些相关知识。\n\n### 类加载\n\nClass 文件从被 JVM 加载到内存，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载。其中验证、准备、解析三个部分统称为连接，这七个阶段发生顺序如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/4.webp)\n\n\n接下来我们简单了解一下这几个过程\n\n- 加载：在类的加载阶段 JVM 主要做了下面三件事：\n\n1. 通过类的全限定名来获取定义此类的二进制字节流。\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。\n\n这里需要注意第一点，它只说明了通过全限定名获取定义此类的二进制字节流，但是没有具体说从哪获取，怎么获取。正是有了这么一个开放的入口，才有了现在 Java 的各种有趣的玩法。\n\n- 验证：这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。\n\n- 准备：为类变量（static 变量）分配内存并设置变量的初始值。\n\n- 解析：JVM 将常量池内的符号引用替换为直接引用。\n\n- 初始化：前面几个阶段都是 JVM 主导和控制的，到了这一步开始，才真正开始执行 Java 程序代码。在准备阶段 JVM 为类变量设置了初始值，而在初始化阶段，JVM 会调用类构造器 <clinit>() 方法，即我们平时写的 static{ ... } 这部分代码和静态变量赋值操作的集合。\n\n- 使用：这部分是我们开发者最熟悉的，即我们所写的程序运行的过程。\n\n- 卸载：当 JVM 确定某个类永久不需要的时候，就会执行类卸载，将其在内存中占用的空间全部释放。\n\n### 类加载器\n\n前面介绍 JVM 加载类的时候说到，JVM 对于从哪加载二进制字节流是对外开放的，即这部分是在 JVM 外部实现的。而用于实现类加载的代码模块称为“类加载器”。类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它起初是为 Java Applet 而开发出开的。虽然目前 Java Applet 技术基本已经“死了”，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 体系中一块重要的基石。\n\n下面我用代码展示如何自定义一个类加载器，从网络上加载一个类，然后调用其 toString 方法。其实现很简单，如下：\n\n```java\npackage com.zqlite.jvm;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HelloJVM {\n\n    public static void main(String ...args){\n        \n        MyNetClassLoader classLoader = new MyNetClassLoader();\n        try {\n            Class<?> clazz = classLoader.findClass(\"http://7xprgn.com1.z0.glb.clouddn.com/RemoteClass.class\");\n            Object o = clazz.newInstance();\n            System.out.print(o.toString());\n        } catch (ClassNotFoundException |IllegalAccessException | InstantiationException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class MyNetClassLoader extends ClassLoader{\n        @Override\n        protected Class<?> findClass(String name) throws ClassNotFoundException {\n            try {\n                URL url = new URL(name);\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                InputStream inputStream =  connection.getInputStream();\n                byte[] b = new byte[inputStream.available()];\n                inputStream.read(b);\n                return defineClass(\"com.zqlite.jvm.RemoteClass\",b,0,b.length);\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return super.findClass(name);\n        }\n    }\n}\n```\n\n首先我们自定义一个 MyNetClassLoader 类来继承 ClassLoader ，然后重写它的 findClass 方法，此方法会在系统找不到指定类的时候调用。在 findClass 中我们做的事情很简单，从网络上获取类的二进制字节流，然后读入数组，最后通过 defineClass 方法，将其转为 class 对象并返回。\n\n然后通过 class 对象的 newInstance 方法获得一个对应的实例对象，即 RemoteClass 的对象，然后输入其 toString 返回的内容。具体输出什么大家可以在本地跑了试试。\n\n\n### 基于栈的解释器执行过程\n\n在 JVM 的内存区域划分的时候讲到过虚拟机栈这个区域，它是线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。接下来我就用一个实际的例子来介绍在 JVM 中，一个方法是如何被解释执行的。借此机会也可以更进一步了解虚拟机栈相关知识。\n\n#### 运行时栈帧结构\n\n栈帧是用于支持 JVM 进行方法调用和方法执行的数据结构，它是虚拟机栈的栈元素。每一个方法从调用到完成，都对应着一个栈帧在虚拟机栈中的入栈和出栈操作。\n\n每个栈帧都包括局部变量表、操作数、动态连接、方法返回地址和一些额外的附加信信息。并且在程序进行编译的时候，栈帧需要多大的局部变量表，多深的操作数栈都是已经确定的，因此一个栈帧需要分配多少内存也是确定不变的。JVM 中线程、虚拟机栈、栈帧的典型结构图如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/5.webp)\n\n#### 解释器执行过程实例\n\n本节中，我准备了如下一段代码：\n\n```java\npackage com.zqlite.jvm;\n\npublic class HelloJVM {\n\n    public static void main(String ...args){\n        calc();\n    }\n\n    public static int calc(){\n        int a = 100;\n        int b = 200;\n        int c = 300;\n        return (a + b) * c;\n    }\n}\n```\n\n从 Java 的语言角度来讲，这段代码没有任何解释的必要，我们接下来用 javap 来看看他的字节码指令，如下：\n\n```class\nClassfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class\n  Last modified 2017-11-30; size 549 bytes\n  MD5 checksum 1bf313c415146d6070a30e8addc83a8c\n  Compiled from \"HelloJVM.java\"\npublic class com.zqlite.jvm.HelloJVM\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #4.#24         // java/lang/Object.\"<init>\":()V\n   #2 = Methodref          #3.#25         // com/zqlite/jvm/HelloJVM.calc:()I\n   #3 = Class              #26            // com/zqlite/jvm/HelloJVM\n   #4 = Class              #27            // java/lang/Object\n   #5 = Utf8               <init>\n   #6 = Utf8               ()V\n   #7 = Utf8               Code\n   #8 = Utf8               LineNumberTable\n   #9 = Utf8               LocalVariableTable\n  #10 = Utf8               this\n  #11 = Utf8               Lcom/zqlite/jvm/HelloJVM;\n  #12 = Utf8               main\n  #13 = Utf8               ([Ljava/lang/String;)V\n  #14 = Utf8               args\n  #15 = Utf8               [Ljava/lang/String;\n  #16 = Utf8               calc\n  #17 = Utf8               ()I\n  #18 = Utf8               a\n  #19 = Utf8               I\n  #20 = Utf8               b\n  #21 = Utf8               c\n  #22 = Utf8               SourceFile\n  #23 = Utf8               HelloJVM.java\n  #24 = NameAndType        #5:#6          // \"<init>\":()V\n  #25 = NameAndType        #16:#17        // calc:()I\n  #26 = Utf8               com/zqlite/jvm/HelloJVM\n  #27 = Utf8               java/lang/Object\n{\n  public com.zqlite.jvm.HelloJVM();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;\n\n  public static void main(java.lang.String...);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n    Code:\n      stack=1, locals=1, args_size=1\n         0: invokestatic  #2                  // Method calc:()I\n         3: pop\n         4: return\n      LineNumberTable:\n        line 6: 0\n        line 7: 4\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  args   [Ljava/lang/String;\n\n  public static int calc();\n    descriptor: ()I\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=3, args_size=0\n         0: bipush        100\n         2: istore_0\n         3: sipush        200\n         6: istore_1\n         7: sipush        300\n        10: istore_2\n        11: iload_0\n        12: iload_1\n        13: iadd\n        14: iload_2\n        15: imul\n        16: ireturn\n      LineNumberTable:\n        line 10: 0\n        line 11: 3\n        line 12: 7\n        line 13: 11\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            3      14     0     a   I\n            7      10     1     b   I\n           11       6     2     c   I\n}\nSourceFile: \"HelloJVM.java\"\n\n```\n\n我们把注意点放在 calc 方法上，其中\n\n```class\ndescriptor: ()I\n```\n表示这个方法的方法描述符是 ()I。了解 JNI 的小伙伴对方法描述符应该不会陌生，这里我不多介绍，想了解更多可以参考[此处](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html)。\n\n接着的\n\n```class\nflags: ACC_PUBLIC, ACC_STATIC\n```\n\n表示这个是一个 public static 修饰的方法。\n\n然后 Code 部分是重点，其中 stack = 2 说明操作数栈的深度为 2 ，locals = 3 说明本地变量表有三个变量，args_size = 0 说明此方法没有参数。\n\n接下来先跳过下面的字节码，来看到 LocalVariableTable，这就是所谓的本地变量表了，表中有三行数据，分别是 a，b，c 和代码中定义的变量名一致。且他们的签名都是 I ，表示是 Int 型整数。\n\n接下来，我通过下面 7 幅图来讲解下解释执行这个方法的过程和此过程中局部变量表和操作数栈的变化情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/6.webp)\n\n上图是执行偏移地址为 0 的指令的情况。\n\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/7.webp)\n\n上图是执行偏移地址为 2 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/8.webp)\n\n上图是执行偏移地址为 11 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/9.webp)\n\n上图是执行偏移地址为 12 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/10.webp)\n\n上图是执行偏移地址为 13 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/11.webp)\n\n上图是执行偏移地址为 14 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/12.webp)\n\n上图是执行偏移地址为 16 的指令的情况。\n\n方法的执行模型到这就结束了，请大家记住这仅仅是一种概念模型，虚拟机最终会对执行过程做一些优化来提升性能，实际的执行过程与概念模型差距可能会很大。之所以会有这种差距是因为虚拟机的执行引擎和即时编译器都会对输入的字节码进行优化。\n\n## 总结\n\n这篇文章我主要带着大家简单了解了一下 JVM 的内层划分、对象的创建、字节码结构、字节码指令和类加载与解释执行这几部分的相关内容。由于篇幅有限，如 GC，编译优化和 JVM内部实现并发等内容没有介绍，如果大家感兴趣可以阅读《深入理解 Java 虚拟机-JVM 高级特性与最佳实践》。本文也是参考此书总结而来。","source":"_posts/jvm-preview.md","raw":"---\ntitle: JVM 概览\ndate: 2017-12-07 21:38:50\ntags: java \ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/1.webp\ntop: 6\n---\n## Java\n说到 Java，大家第一时间想到的类似于下面的程序语句：\n\n```java\npackage com.zqlite.jvm;\n\npublic class HelloJVM {\n\n    private static final int k = 100;\n    public static void main(String ...args){\n        int a = 0,b=3;\n        System.out.println(a+b+k);\n    }\n}\n```\n<!-- more -->\n但这仅仅只属于 Java 技术体系中的 Java 程序设计语言。Java 的技术体系从传统意义上来看有以下几个：\n\n1. Java 程序设计语言\n2. 各硬件平台上的 Java 虚拟机\n3. Class 文件格式\n4. Java API 类库\n5. 其他商业机构或开源社区的第三方 Java 类库\n\n其中 1、4、5 大家应该比较熟悉，在编程中都能直接接触。2、3 对于大家来说可能陌生了些，但不夸张的讲，Java 能有如今的活力，其功臣正是 2 和 3。所以接下来的内容将围绕这两点展开，让你从更深的层次了解你所熟悉的 Java。\n\n## JVM\n\nJVM（Java Virtual Machine）就是上面所说的 Java 虚拟机，其作用是加载与运行 Class 文件。有句话大家一定不陌生，“一次编写，到处运行”。简单解释一下，因为在 Class 文件和硬件平台中间隔着一个 JVM，由 JVM 负责加载和执行 Class 文件，这样平台的差异性就留给了 JVM 去考虑，而不是 Class 文件。也正因如此，Class 文件的格式可以真正做到平台无关性。\n\n### JVM 中的 Java 内存区域划分\n\n对于从事 C、C++ 的开发人员来说，在内存管理领域他们是拥有最高权力的“皇帝”，但又是从事最底层基础工作的“劳动人民”。他们即拥有与内存直接打交道的权利，又要负责维护每一个对象的生命周期。\n\n对于 Java 开发人员来说就轻松多了，在 JVM 自动内存管理机制的帮助下，不再需要维护每一个对象的生命周期，内存控制的权利由开发人员转移到了 JVM 。\n\n因为 JVM 需要管理 Java 运行期间的各种对象的生命周期，所以它在执行 Java 程序的时候会把它所管辖的内存分成若干个不同的数据区域，具体如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/1.webp)\n\n对以上几个区域做下简单的介绍：\n\n- 方法区：线程共享区域，用于存储被虚拟机加载的类信息、常量、静态变量等数据。\n- 堆：线程共享区域，存放类实例以及数组。我们平时听到的 GC（垃圾回收）就是在堆上进行的。 \n- 虚拟机栈：线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。\n- 本地方法栈：线程私有区域，与虚拟机栈作用类似，区别在于本地方法栈执行的是 Native 方法。\n- 程序计数器：线程私有区域，用于指向当前线程下一条需要执行的字节码指令。\n\n除了以上几个主要区域外，另外还要介绍一个区域：运行时常量池。它是方法区的一部分，用于存放编译期生成的字面量和符号引用。字面量好理解，比如：\n\n```java\nString str = \"a\";\n```\n\n上面的 a 就是字面量。而符号引用则是一些字符串，用于给虚拟机定位类或类方法等。\n\n> 面试的时候有时会遇到这样的问题，Java 中每次声明并初始化一个 String 对象都会在堆上面分配内存吗？这里的答案当然是否，因为有可能新声明的对象已经在常量池中存在了，这时候 JVM 会将新对象的引用指向常量池中对应的值而不是在堆重新分配。\n\n### 对象在 JVM 中的创建过程\n\n在 Java 中创建对象很简单，一个简单的 new 关键字就可以。但在虚拟机中，对象的创建过程是怎样的呢？我们来一起了解一下。\n\n在 JVM 中，创建对象的字节码指令是 new，当 JVM 执行引擎遇到 new 指令后会进行如下五步操作：\n\n一、检查这个指令的参数能否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经加载、解析和初始化。\n\n下面我们看一下：\n\n```java\npackage com.zqlite.jvm;\n\npublic class HelloJVM {\n\n    public static void main(String ...args){\n        Object obj = new Object();\n    }\n}\n```\n然后用 javap 对这段代码生成的 class 文件进行反汇编处理，结果如下：\n\n```class\nClassfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class\n  Last modified 2017-11-29; size 446 bytes\n  MD5 checksum bcc0b2d9129748ef0caa00e95cf95a47\n  Compiled from \"HelloJVM.java\"\npublic class com.zqlite.jvm.HelloJVM\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #2.#19         // java/lang/Object.\"<init>\":()V\n   #2 = Class              #20            // java/lang/Object\n   #3 = Class              #21            // com/zqlite/jvm/HelloJVM\n   #4 = Utf8               <init>\n   #5 = Utf8               ()V\n   #6 = Utf8               Code\n   #7 = Utf8               LineNumberTable\n   #8 = Utf8               LocalVariableTable\n   #9 = Utf8               this\n  #10 = Utf8               Lcom/zqlite/jvm/HelloJVM;\n  #11 = Utf8               main\n  #12 = Utf8               ([Ljava/lang/String;)V\n  #13 = Utf8               args\n  #14 = Utf8               [Ljava/lang/String;\n  #15 = Utf8               obj\n  #16 = Utf8               Ljava/lang/Object;\n  #17 = Utf8               SourceFile\n  #18 = Utf8               HelloJVM.java\n  #19 = NameAndType        #4:#5          // \"<init>\":()V\n  #20 = Utf8               java/lang/Object\n  #21 = Utf8               com/zqlite/jvm/HelloJVM\n{\n  public com.zqlite.jvm.HelloJVM();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 6: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;\n\n  public static void main(java.lang.String...);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n    Code:\n      stack=2, locals=2, args_size=1\n         0: new           #2                  // class java/lang/Object\n         3: dup\n         4: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         7: astore_1\n         8: return\n      LineNumberTable:\n        line 9: 0\n        line 10: 8\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       9     0  args   [Ljava/lang/String;\n            8       1     1   obj   Ljava/lang/Object;\n}\nSourceFile: \"HelloJVM.java\"\n\n```\n暂时无需理解上面的所有内容，我们只关注 new 字节码部分。\n\n找到\n\n```class\n0: new           #2\n```\n\n可以看到 new 指令码的参数是 #2，接着通过参数 #2 在常量池（Constant pool）中找到 #2 对应的内容：\n\n```class\n#2 = Class              #20            // java/lang/Object\n```\n\n这里说明了 #2 对应的是一个类，类符号引用需要到 #20 中找，在看 #20 ：\n\n```class\n#20 = Utf8               java/lang/Object\n```\n\n这里的 #20 是一个字符串类型，其内容是 ava/lang/Object，表示 Object 类的符号引用即全限定名。接着 JVM 就会去寻找并加载、解析和初始化这个类。\n\n二、当在第一步确定了目标类以后，JVM 就会为这个类的新生对象在堆上面分配内存。对象所需要的内存大小在第一步的类加载后已经确定了，所以为对象分配内存也就等同于把一块确定大小的内存从 Java 堆中划分出来。\n \n三、分配完内存后，JVM 需要将分配到的内存空间都初始化为零值（不包括对象头）。\n \n > 这里需要注意，由于 JVM 会对对象的内存空间做初始化操作，所以在类中类似的定义一个 int i ，其默认值就是整型的零值 0 。Java 类变量也正因如此允许不赋初始值。但在类方法中，如果这样定义一个 i，在接下来的代码中如果使用 i 的话，会有报错提示 i 没有初始化值，\n \n四、当初始化完以后，JVM 就要对对象做必要的处理，比如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄表的信息。这些信息都会放在对象头中。\n \n五、上面的工作都完成之后，从 JVM 的角度来看，一个新的对象已经产生了，但从 Java 程序的角度来看，对象创建才刚开始。<init> 方法还没有执行，所有的字段还都为零。所以一般在 new 指令码后都会跟 invokespecial 指令来调用 <init> 方法。此处的 <init> 即我们通常说的构造方法。\n \n### 对象的内存布局\n \n在上小节介绍了对象在 JVM 中的创建过程，这节简单介绍下对象的内存布局。\n \n对象的内存布局可以分三个区域：对象头、实例数据和对齐填充。\n \n其中对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁等。另外一部分则是类型指针，用于指向它的类元数据。JVM 可以通过这个指针来确定对象是属于哪个类的。另外需要注意的是如果对象是数组，那么对象头中还需要记录数组的长度。\n \n实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型字段的内容，包括从父类继承下来的和自己定义的。\n \n最后一部分并不是必须的，它仅仅起到了占位符的作用。有些虚拟机要求对象的起始地址必须是 8 字节的整数倍，换句话说就是对象大小必须是 8 字节的整数倍。所以当不足整数倍的时候，就需要进行对齐填充处理。\n \n下面这张图简单表示了对象在内存中的布局：\n \n ![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/2.webp)\n \n\n## Class 文件\n\n计算机只认识 0 和 1 ，这是常识。所以我们编写的程序都需要经过编译器翻译成有 0 和 1 构成的二进制格式才能被计算机执行。但在近十几年内，虚拟机以及大量建立在虚拟机上的程序语言如雨后春笋般出现并蓬勃发展，由此二进制本地机器码已不再是唯一的选择，越来越多的程序语言选择了与操作系统和机器指令集无关的、平台中立的格式作为程序编译后的存储格式。我们这里的 Class 文件就是其中一种。\n\n我们通常都把 Java 和 JVM 有意识无意识的联系在一起，但 JVM 其实并不关心 Java。什么意思呢？JVM 面向的是 Class 格式的文件，它并不关系 Class 的来源是何种语言。如 Clojure、Groovy、Jruby、Jython、Scala 等都可以被编译成 Class 文件，从而在 JVM 上运行。\n\n### Class 内部结构\n\nClass 文件是一组以 8 位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，其中没有任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行必须的数据，没有空隙存在。\n\nClass 文件的完整格式见下表：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/3.webp)\n\n其中类型中的 u4，u2以及没有这上图出现的 u1，u8都表示无符号数。其中 u1 表示 1 个字节，u2 表示 2 个字节，以此类推。名称则说明该位置数据的作用，如 constant\\_pool 表示常量池。数量则说明 Class 文件中，不同名称的数据块的个数。如 constant\\_pool 的个数取决于 constant\\_pool\\_count，而 constant\\_pool\\_count 则是占用两个字节的无符号数。\n\n不管是多复杂的 Class 文件，其内部数据结构必然是按照上表来排列的，由于其内部各类型的数据比较复杂，这里也不展开讲。这一节大家只要知道 Class 文件内部有这些数据就可以了，如果需要查看 Class 文件，可以使用反编译工具 javap 。具体命令如下：\n\n```sh\njavap -v ClassFile\n```\n\n### 字节码指令介绍\n\nJVM 中的指令由一个字节长度的、代表着某种特定操作含义的数字（操作码，字节码）以及跟随其后的零至多个代表此操作所需参数（操作数）构成。由于 JVM 采用面向操作数栈而不是寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。由于指令长度是 8 位的无符号数，所以 JVM 指令最多 256 条。\n\n\n大部分指令从其助记符就能知道它所操作的数据类型，比如 iload 指令用于从局部变量表加载 int 型的数据到操作数栈，而 fload 指令加载的则是 float 类型的数据。\n\n大部分与数据相关的字节码指令，其助记符都有特殊的字符来表示其服务的数据类型：i 代表对 int 型数据的操作，l 代表 long，s 代表 short，b 代表 byte，c 代表 char，f 代表 float，d 代表 double，a 代表 reference。\n\n如需查看所有 JVM 指令，点击此链接：[http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A](http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A)\n\n\n## JVM 与 Class 文件\n\n前面分开讲了 JVM 与 Class 文件，相信大家对它们有了一定的了解。Java 程序之所以可以运行起来，离不开这两位的紧密配合，下面我要给大家介绍的就是关于它俩的一些相关知识。\n\n### 类加载\n\nClass 文件从被 JVM 加载到内存，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载。其中验证、准备、解析三个部分统称为连接，这七个阶段发生顺序如下图：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/4.webp)\n\n\n接下来我们简单了解一下这几个过程\n\n- 加载：在类的加载阶段 JVM 主要做了下面三件事：\n\n1. 通过类的全限定名来获取定义此类的二进制字节流。\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。\n\n这里需要注意第一点，它只说明了通过全限定名获取定义此类的二进制字节流，但是没有具体说从哪获取，怎么获取。正是有了这么一个开放的入口，才有了现在 Java 的各种有趣的玩法。\n\n- 验证：这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。\n\n- 准备：为类变量（static 变量）分配内存并设置变量的初始值。\n\n- 解析：JVM 将常量池内的符号引用替换为直接引用。\n\n- 初始化：前面几个阶段都是 JVM 主导和控制的，到了这一步开始，才真正开始执行 Java 程序代码。在准备阶段 JVM 为类变量设置了初始值，而在初始化阶段，JVM 会调用类构造器 <clinit>() 方法，即我们平时写的 static{ ... } 这部分代码和静态变量赋值操作的集合。\n\n- 使用：这部分是我们开发者最熟悉的，即我们所写的程序运行的过程。\n\n- 卸载：当 JVM 确定某个类永久不需要的时候，就会执行类卸载，将其在内存中占用的空间全部释放。\n\n### 类加载器\n\n前面介绍 JVM 加载类的时候说到，JVM 对于从哪加载二进制字节流是对外开放的，即这部分是在 JVM 外部实现的。而用于实现类加载的代码模块称为“类加载器”。类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它起初是为 Java Applet 而开发出开的。虽然目前 Java Applet 技术基本已经“死了”，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 体系中一块重要的基石。\n\n下面我用代码展示如何自定义一个类加载器，从网络上加载一个类，然后调用其 toString 方法。其实现很简单，如下：\n\n```java\npackage com.zqlite.jvm;\n\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HelloJVM {\n\n    public static void main(String ...args){\n        \n        MyNetClassLoader classLoader = new MyNetClassLoader();\n        try {\n            Class<?> clazz = classLoader.findClass(\"http://7xprgn.com1.z0.glb.clouddn.com/RemoteClass.class\");\n            Object o = clazz.newInstance();\n            System.out.print(o.toString());\n        } catch (ClassNotFoundException |IllegalAccessException | InstantiationException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static class MyNetClassLoader extends ClassLoader{\n        @Override\n        protected Class<?> findClass(String name) throws ClassNotFoundException {\n            try {\n                URL url = new URL(name);\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n                InputStream inputStream =  connection.getInputStream();\n                byte[] b = new byte[inputStream.available()];\n                inputStream.read(b);\n                return defineClass(\"com.zqlite.jvm.RemoteClass\",b,0,b.length);\n\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            return super.findClass(name);\n        }\n    }\n}\n```\n\n首先我们自定义一个 MyNetClassLoader 类来继承 ClassLoader ，然后重写它的 findClass 方法，此方法会在系统找不到指定类的时候调用。在 findClass 中我们做的事情很简单，从网络上获取类的二进制字节流，然后读入数组，最后通过 defineClass 方法，将其转为 class 对象并返回。\n\n然后通过 class 对象的 newInstance 方法获得一个对应的实例对象，即 RemoteClass 的对象，然后输入其 toString 返回的内容。具体输出什么大家可以在本地跑了试试。\n\n\n### 基于栈的解释器执行过程\n\n在 JVM 的内存区域划分的时候讲到过虚拟机栈这个区域，它是线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。接下来我就用一个实际的例子来介绍在 JVM 中，一个方法是如何被解释执行的。借此机会也可以更进一步了解虚拟机栈相关知识。\n\n#### 运行时栈帧结构\n\n栈帧是用于支持 JVM 进行方法调用和方法执行的数据结构，它是虚拟机栈的栈元素。每一个方法从调用到完成，都对应着一个栈帧在虚拟机栈中的入栈和出栈操作。\n\n每个栈帧都包括局部变量表、操作数、动态连接、方法返回地址和一些额外的附加信信息。并且在程序进行编译的时候，栈帧需要多大的局部变量表，多深的操作数栈都是已经确定的，因此一个栈帧需要分配多少内存也是确定不变的。JVM 中线程、虚拟机栈、栈帧的典型结构图如下：\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/5.webp)\n\n#### 解释器执行过程实例\n\n本节中，我准备了如下一段代码：\n\n```java\npackage com.zqlite.jvm;\n\npublic class HelloJVM {\n\n    public static void main(String ...args){\n        calc();\n    }\n\n    public static int calc(){\n        int a = 100;\n        int b = 200;\n        int c = 300;\n        return (a + b) * c;\n    }\n}\n```\n\n从 Java 的语言角度来讲，这段代码没有任何解释的必要，我们接下来用 javap 来看看他的字节码指令，如下：\n\n```class\nClassfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class\n  Last modified 2017-11-30; size 549 bytes\n  MD5 checksum 1bf313c415146d6070a30e8addc83a8c\n  Compiled from \"HelloJVM.java\"\npublic class com.zqlite.jvm.HelloJVM\n  minor version: 0\n  major version: 52\n  flags: ACC_PUBLIC, ACC_SUPER\nConstant pool:\n   #1 = Methodref          #4.#24         // java/lang/Object.\"<init>\":()V\n   #2 = Methodref          #3.#25         // com/zqlite/jvm/HelloJVM.calc:()I\n   #3 = Class              #26            // com/zqlite/jvm/HelloJVM\n   #4 = Class              #27            // java/lang/Object\n   #5 = Utf8               <init>\n   #6 = Utf8               ()V\n   #7 = Utf8               Code\n   #8 = Utf8               LineNumberTable\n   #9 = Utf8               LocalVariableTable\n  #10 = Utf8               this\n  #11 = Utf8               Lcom/zqlite/jvm/HelloJVM;\n  #12 = Utf8               main\n  #13 = Utf8               ([Ljava/lang/String;)V\n  #14 = Utf8               args\n  #15 = Utf8               [Ljava/lang/String;\n  #16 = Utf8               calc\n  #17 = Utf8               ()I\n  #18 = Utf8               a\n  #19 = Utf8               I\n  #20 = Utf8               b\n  #21 = Utf8               c\n  #22 = Utf8               SourceFile\n  #23 = Utf8               HelloJVM.java\n  #24 = NameAndType        #5:#6          // \"<init>\":()V\n  #25 = NameAndType        #16:#17        // calc:()I\n  #26 = Utf8               com/zqlite/jvm/HelloJVM\n  #27 = Utf8               java/lang/Object\n{\n  public com.zqlite.jvm.HelloJVM();\n    descriptor: ()V\n    flags: ACC_PUBLIC\n    Code:\n      stack=1, locals=1, args_size=1\n         0: aload_0\n         1: invokespecial #1                  // Method java/lang/Object.\"<init>\":()V\n         4: return\n      LineNumberTable:\n        line 3: 0\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;\n\n  public static void main(java.lang.String...);\n    descriptor: ([Ljava/lang/String;)V\n    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS\n    Code:\n      stack=1, locals=1, args_size=1\n         0: invokestatic  #2                  // Method calc:()I\n         3: pop\n         4: return\n      LineNumberTable:\n        line 6: 0\n        line 7: 4\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       5     0  args   [Ljava/lang/String;\n\n  public static int calc();\n    descriptor: ()I\n    flags: ACC_PUBLIC, ACC_STATIC\n    Code:\n      stack=2, locals=3, args_size=0\n         0: bipush        100\n         2: istore_0\n         3: sipush        200\n         6: istore_1\n         7: sipush        300\n        10: istore_2\n        11: iload_0\n        12: iload_1\n        13: iadd\n        14: iload_2\n        15: imul\n        16: ireturn\n      LineNumberTable:\n        line 10: 0\n        line 11: 3\n        line 12: 7\n        line 13: 11\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            3      14     0     a   I\n            7      10     1     b   I\n           11       6     2     c   I\n}\nSourceFile: \"HelloJVM.java\"\n\n```\n\n我们把注意点放在 calc 方法上，其中\n\n```class\ndescriptor: ()I\n```\n表示这个方法的方法描述符是 ()I。了解 JNI 的小伙伴对方法描述符应该不会陌生，这里我不多介绍，想了解更多可以参考[此处](https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html)。\n\n接着的\n\n```class\nflags: ACC_PUBLIC, ACC_STATIC\n```\n\n表示这个是一个 public static 修饰的方法。\n\n然后 Code 部分是重点，其中 stack = 2 说明操作数栈的深度为 2 ，locals = 3 说明本地变量表有三个变量，args_size = 0 说明此方法没有参数。\n\n接下来先跳过下面的字节码，来看到 LocalVariableTable，这就是所谓的本地变量表了，表中有三行数据，分别是 a，b，c 和代码中定义的变量名一致。且他们的签名都是 I ，表示是 Int 型整数。\n\n接下来，我通过下面 7 幅图来讲解下解释执行这个方法的过程和此过程中局部变量表和操作数栈的变化情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/6.webp)\n\n上图是执行偏移地址为 0 的指令的情况。\n\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/7.webp)\n\n上图是执行偏移地址为 2 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/8.webp)\n\n上图是执行偏移地址为 11 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/9.webp)\n\n上图是执行偏移地址为 12 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/10.webp)\n\n上图是执行偏移地址为 13 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/11.webp)\n\n上图是执行偏移地址为 14 的指令的情况。\n\n![image](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/12.webp)\n\n上图是执行偏移地址为 16 的指令的情况。\n\n方法的执行模型到这就结束了，请大家记住这仅仅是一种概念模型，虚拟机最终会对执行过程做一些优化来提升性能，实际的执行过程与概念模型差距可能会很大。之所以会有这种差距是因为虚拟机的执行引擎和即时编译器都会对输入的字节码进行优化。\n\n## 总结\n\n这篇文章我主要带着大家简单了解了一下 JVM 的内层划分、对象的创建、字节码结构、字节码指令和类加载与解释执行这几部分的相关内容。由于篇幅有限，如 GC，编译优化和 JVM内部实现并发等内容没有介绍，如果大家感兴趣可以阅读《深入理解 Java 虚拟机-JVM 高级特性与最佳实践》。本文也是参考此书总结而来。","slug":"jvm-preview","published":1,"updated":"2024-08-21T03:16:19.785Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vu001f5p6t3f87e7l1","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>说到 Java，大家第一时间想到的类似于下面的程序语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,b=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(a+b+k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>\n<p>但这仅仅只属于 Java 技术体系中的 Java 程序设计语言。Java 的技术体系从传统意义上来看有以下几个：</p>\n<ol>\n<li>Java 程序设计语言</li>\n<li>各硬件平台上的 Java 虚拟机</li>\n<li>Class 文件格式</li>\n<li>Java API 类库</li>\n<li>其他商业机构或开源社区的第三方 Java 类库</li>\n</ol>\n<p>其中 1、4、5 大家应该比较熟悉，在编程中都能直接接触。2、3 对于大家来说可能陌生了些，但不夸张的讲，Java 能有如今的活力，其功臣正是 2 和 3。所以接下来的内容将围绕这两点展开，让你从更深的层次了解你所熟悉的 Java。</p>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><p>JVM（Java Virtual Machine）就是上面所说的 Java 虚拟机，其作用是加载与运行 Class 文件。有句话大家一定不陌生，“一次编写，到处运行”。简单解释一下，因为在 Class 文件和硬件平台中间隔着一个 JVM，由 JVM 负责加载和执行 Class 文件，这样平台的差异性就留给了 JVM 去考虑，而不是 Class 文件。也正因如此，Class 文件的格式可以真正做到平台无关性。</p>\n<h3 id=\"JVM-中的-Java-内存区域划分\"><a href=\"#JVM-中的-Java-内存区域划分\" class=\"headerlink\" title=\"JVM 中的 Java 内存区域划分\"></a>JVM 中的 Java 内存区域划分</h3><p>对于从事 C、C++ 的开发人员来说，在内存管理领域他们是拥有最高权力的“皇帝”，但又是从事最底层基础工作的“劳动人民”。他们即拥有与内存直接打交道的权利，又要负责维护每一个对象的生命周期。</p>\n<p>对于 Java 开发人员来说就轻松多了，在 JVM 自动内存管理机制的帮助下，不再需要维护每一个对象的生命周期，内存控制的权利由开发人员转移到了 JVM 。</p>\n<p>因为 JVM 需要管理 Java 运行期间的各种对象的生命周期，所以它在执行 Java 程序的时候会把它所管辖的内存分成若干个不同的数据区域，具体如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/1.webp\" alt=\"image\"></p>\n<p>对以上几个区域做下简单的介绍：</p>\n<ul>\n<li>方法区：线程共享区域，用于存储被虚拟机加载的类信息、常量、静态变量等数据。</li>\n<li>堆：线程共享区域，存放类实例以及数组。我们平时听到的 GC（垃圾回收）就是在堆上进行的。 </li>\n<li>虚拟机栈：线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。</li>\n<li>本地方法栈：线程私有区域，与虚拟机栈作用类似，区别在于本地方法栈执行的是 Native 方法。</li>\n<li>程序计数器：线程私有区域，用于指向当前线程下一条需要执行的字节码指令。</li>\n</ul>\n<p>除了以上几个主要区域外，另外还要介绍一个区域：运行时常量池。它是方法区的一部分，用于存放编译期生成的字面量和符号引用。字面量好理解，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面的 a 就是字面量。而符号引用则是一些字符串，用于给虚拟机定位类或类方法等。</p>\n<blockquote>\n<p>面试的时候有时会遇到这样的问题，Java 中每次声明并初始化一个 String 对象都会在堆上面分配内存吗？这里的答案当然是否，因为有可能新声明的对象已经在常量池中存在了，这时候 JVM 会将新对象的引用指向常量池中对应的值而不是在堆重新分配。</p>\n</blockquote>\n<h3 id=\"对象在-JVM-中的创建过程\"><a href=\"#对象在-JVM-中的创建过程\" class=\"headerlink\" title=\"对象在 JVM 中的创建过程\"></a>对象在 JVM 中的创建过程</h3><p>在 Java 中创建对象很简单，一个简单的 new 关键字就可以。但在虚拟机中，对象的创建过程是怎样的呢？我们来一起了解一下。</p>\n<p>在 JVM 中，创建对象的字节码指令是 new，当 JVM 执行引擎遇到 new 指令后会进行如下五步操作：</p>\n<p>一、检查这个指令的参数能否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经加载、解析和初始化。</p>\n<p>下面我们看一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用 javap 对这段代码生成的 class 文件进行反汇编处理，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Classfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class</span><br><span class=\"line\">  Last modified 2017-11-29; size 446 bytes</span><br><span class=\"line\">  MD5 checksum bcc0b2d9129748ef0caa00e95cf95a47</span><br><span class=\"line\">  Compiled from &quot;HelloJVM.java&quot;</span><br><span class=\"line\">public class com.zqlite.jvm.HelloJVM</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #2.#19         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Class              #20            // java/lang/Object</span><br><span class=\"line\">   #3 = Class              #21            // com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">   #4 = Utf8               &lt;init&gt;</span><br><span class=\"line\">   #5 = Utf8               ()V</span><br><span class=\"line\">   #6 = Utf8               Code</span><br><span class=\"line\">   #7 = Utf8               LineNumberTable</span><br><span class=\"line\">   #8 = Utf8               LocalVariableTable</span><br><span class=\"line\">   #9 = Utf8               this</span><br><span class=\"line\">  #10 = Utf8               Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\">  #11 = Utf8               main</span><br><span class=\"line\">  #12 = Utf8               ([Ljava/lang/String;)V</span><br><span class=\"line\">  #13 = Utf8               args</span><br><span class=\"line\">  #14 = Utf8               [Ljava/lang/String;</span><br><span class=\"line\">  #15 = Utf8               obj</span><br><span class=\"line\">  #16 = Utf8               Ljava/lang/Object;</span><br><span class=\"line\">  #17 = Utf8               SourceFile</span><br><span class=\"line\">  #18 = Utf8               HelloJVM.java</span><br><span class=\"line\">  #19 = NameAndType        #4:#5          // &quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">  #20 = Utf8               java/lang/Object</span><br><span class=\"line\">  #21 = Utf8               com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.zqlite.jvm.HelloJVM();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 6: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String...);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=1</span><br><span class=\"line\">         0: new           #2                  // class java/lang/Object</span><br><span class=\"line\">         3: dup</span><br><span class=\"line\">         4: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         7: astore_1</span><br><span class=\"line\">         8: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 9: 0</span><br><span class=\"line\">        line 10: 8</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       9     0  args   [Ljava/lang/String;</span><br><span class=\"line\">            8       1     1   obj   Ljava/lang/Object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;HelloJVM.java&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>暂时无需理解上面的所有内容，我们只关注 new 字节码部分。</p>\n<p>找到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: new           #2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 new 指令码的参数是 #2，接着通过参数 #2 在常量池（Constant pool）中找到 #2 对应的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#2 = Class              #20            // java/lang/Object</span><br></pre></td></tr></table></figure>\n\n<p>这里说明了 #2 对应的是一个类，类符号引用需要到 #20 中找，在看 #20 ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#20 = Utf8               java/lang/Object</span><br></pre></td></tr></table></figure>\n\n<p>这里的 #20 是一个字符串类型，其内容是 ava/lang/Object，表示 Object 类的符号引用即全限定名。接着 JVM 就会去寻找并加载、解析和初始化这个类。</p>\n<p>二、当在第一步确定了目标类以后，JVM 就会为这个类的新生对象在堆上面分配内存。对象所需要的内存大小在第一步的类加载后已经确定了，所以为对象分配内存也就等同于把一块确定大小的内存从 Java 堆中划分出来。</p>\n<p>三、分配完内存后，JVM 需要将分配到的内存空间都初始化为零值（不包括对象头）。</p>\n<blockquote>\n<p>这里需要注意，由于 JVM 会对对象的内存空间做初始化操作，所以在类中类似的定义一个 int i ，其默认值就是整型的零值 0 。Java 类变量也正因如此允许不赋初始值。但在类方法中，如果这样定义一个 i，在接下来的代码中如果使用 i 的话，会有报错提示 i 没有初始化值，</p>\n</blockquote>\n<p>四、当初始化完以后，JVM 就要对对象做必要的处理，比如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄表的信息。这些信息都会放在对象头中。</p>\n<p>五、上面的工作都完成之后，从 JVM 的角度来看，一个新的对象已经产生了，但从 Java 程序的角度来看，对象创建才刚开始。<init> 方法还没有执行，所有的字段还都为零。所以一般在 new 指令码后都会跟 invokespecial 指令来调用 <init> 方法。此处的 <init> 即我们通常说的构造方法。</p>\n<h3 id=\"对象的内存布局\"><a href=\"#对象的内存布局\" class=\"headerlink\" title=\"对象的内存布局\"></a>对象的内存布局</h3><p>在上小节介绍了对象在 JVM 中的创建过程，这节简单介绍下对象的内存布局。</p>\n<p>对象的内存布局可以分三个区域：对象头、实例数据和对齐填充。</p>\n<p>其中对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁等。另外一部分则是类型指针，用于指向它的类元数据。JVM 可以通过这个指针来确定对象是属于哪个类的。另外需要注意的是如果对象是数组，那么对象头中还需要记录数组的长度。</p>\n<p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型字段的内容，包括从父类继承下来的和自己定义的。</p>\n<p>最后一部分并不是必须的，它仅仅起到了占位符的作用。有些虚拟机要求对象的起始地址必须是 8 字节的整数倍，换句话说就是对象大小必须是 8 字节的整数倍。所以当不足整数倍的时候，就需要进行对齐填充处理。</p>\n<p>下面这张图简单表示了对象在内存中的布局：</p>\n<p> <img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/2.webp\" alt=\"image\"></p>\n<h2 id=\"Class-文件\"><a href=\"#Class-文件\" class=\"headerlink\" title=\"Class 文件\"></a>Class 文件</h2><p>计算机只认识 0 和 1 ，这是常识。所以我们编写的程序都需要经过编译器翻译成有 0 和 1 构成的二进制格式才能被计算机执行。但在近十几年内，虚拟机以及大量建立在虚拟机上的程序语言如雨后春笋般出现并蓬勃发展，由此二进制本地机器码已不再是唯一的选择，越来越多的程序语言选择了与操作系统和机器指令集无关的、平台中立的格式作为程序编译后的存储格式。我们这里的 Class 文件就是其中一种。</p>\n<p>我们通常都把 Java 和 JVM 有意识无意识的联系在一起，但 JVM 其实并不关心 Java。什么意思呢？JVM 面向的是 Class 格式的文件，它并不关系 Class 的来源是何种语言。如 Clojure、Groovy、Jruby、Jython、Scala 等都可以被编译成 Class 文件，从而在 JVM 上运行。</p>\n<h3 id=\"Class-内部结构\"><a href=\"#Class-内部结构\" class=\"headerlink\" title=\"Class 内部结构\"></a>Class 内部结构</h3><p>Class 文件是一组以 8 位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，其中没有任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行必须的数据，没有空隙存在。</p>\n<p>Class 文件的完整格式见下表：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/3.webp\" alt=\"image\"></p>\n<p>其中类型中的 u4，u2以及没有这上图出现的 u1，u8都表示无符号数。其中 u1 表示 1 个字节，u2 表示 2 个字节，以此类推。名称则说明该位置数据的作用，如 constant_pool 表示常量池。数量则说明 Class 文件中，不同名称的数据块的个数。如 constant_pool 的个数取决于 constant_pool_count，而 constant_pool_count 则是占用两个字节的无符号数。</p>\n<p>不管是多复杂的 Class 文件，其内部数据结构必然是按照上表来排列的，由于其内部各类型的数据比较复杂，这里也不展开讲。这一节大家只要知道 Class 文件内部有这些数据就可以了，如果需要查看 Class 文件，可以使用反编译工具 javap 。具体命令如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javap -v ClassFile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字节码指令介绍\"><a href=\"#字节码指令介绍\" class=\"headerlink\" title=\"字节码指令介绍\"></a>字节码指令介绍</h3><p>JVM 中的指令由一个字节长度的、代表着某种特定操作含义的数字（操作码，字节码）以及跟随其后的零至多个代表此操作所需参数（操作数）构成。由于 JVM 采用面向操作数栈而不是寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。由于指令长度是 8 位的无符号数，所以 JVM 指令最多 256 条。</p>\n<p>大部分指令从其助记符就能知道它所操作的数据类型，比如 iload 指令用于从局部变量表加载 int 型的数据到操作数栈，而 fload 指令加载的则是 float 类型的数据。</p>\n<p>大部分与数据相关的字节码指令，其助记符都有特殊的字符来表示其服务的数据类型：i 代表对 int 型数据的操作，l 代表 long，s 代表 short，b 代表 byte，c 代表 char，f 代表 float，d 代表 double，a 代表 reference。</p>\n<p>如需查看所有 JVM 指令，点击此链接：<a href=\"http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A\">http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A</a></p>\n<h2 id=\"JVM-与-Class-文件\"><a href=\"#JVM-与-Class-文件\" class=\"headerlink\" title=\"JVM 与 Class 文件\"></a>JVM 与 Class 文件</h2><p>前面分开讲了 JVM 与 Class 文件，相信大家对它们有了一定的了解。Java 程序之所以可以运行起来，离不开这两位的紧密配合，下面我要给大家介绍的就是关于它俩的一些相关知识。</p>\n<h3 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h3><p>Class 文件从被 JVM 加载到内存，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载。其中验证、准备、解析三个部分统称为连接，这七个阶段发生顺序如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/4.webp\" alt=\"image\"></p>\n<p>接下来我们简单了解一下这几个过程</p>\n<ul>\n<li>加载：在类的加载阶段 JVM 主要做了下面三件事：</li>\n</ul>\n<ol>\n<li>通过类的全限定名来获取定义此类的二进制字节流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li>\n</ol>\n<p>这里需要注意第一点，它只说明了通过全限定名获取定义此类的二进制字节流，但是没有具体说从哪获取，怎么获取。正是有了这么一个开放的入口，才有了现在 Java 的各种有趣的玩法。</p>\n<ul>\n<li><p>验证：这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n</li>\n<li><p>准备：为类变量（static 变量）分配内存并设置变量的初始值。</p>\n</li>\n<li><p>解析：JVM 将常量池内的符号引用替换为直接引用。</p>\n</li>\n<li><p>初始化：前面几个阶段都是 JVM 主导和控制的，到了这一步开始，才真正开始执行 Java 程序代码。在准备阶段 JVM 为类变量设置了初始值，而在初始化阶段，JVM 会调用类构造器 <clinit>() 方法，即我们平时写的 static{ … } 这部分代码和静态变量赋值操作的集合。</p>\n</li>\n<li><p>使用：这部分是我们开发者最熟悉的，即我们所写的程序运行的过程。</p>\n</li>\n<li><p>卸载：当 JVM 确定某个类永久不需要的时候，就会执行类卸载，将其在内存中占用的空间全部释放。</p>\n</li>\n</ul>\n<h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><p>前面介绍 JVM 加载类的时候说到，JVM 对于从哪加载二进制字节流是对外开放的，即这部分是在 JVM 外部实现的。而用于实现类加载的代码模块称为“类加载器”。类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它起初是为 Java Applet 而开发出开的。虽然目前 Java Applet 技术基本已经“死了”，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 体系中一块重要的基石。</p>\n<p>下面我用代码展示如何自定义一个类加载器，从网络上加载一个类，然后调用其 toString 方法。其实现很简单，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.HttpURLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">MyNetClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyNetClassLoader</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; clazz = classLoader.findClass(<span class=\"string\">&quot;http://7xprgn.com1.z0.glb.clouddn.com/RemoteClass.class&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> clazz.newInstance();</span><br><span class=\"line\">            System.out.print(o.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException |IllegalAccessException | InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyNetClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(name);</span><br><span class=\"line\">                <span class=\"type\">HttpURLConnection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> (HttpURLConnection) url.openConnection();</span><br><span class=\"line\">                <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span>  connection.getInputStream();</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[inputStream.available()];</span><br><span class=\"line\">                inputStream.read(b);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> defineClass(<span class=\"string\">&quot;com.zqlite.jvm.RemoteClass&quot;</span>,b,<span class=\"number\">0</span>,b.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.findClass(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先我们自定义一个 MyNetClassLoader 类来继承 ClassLoader ，然后重写它的 findClass 方法，此方法会在系统找不到指定类的时候调用。在 findClass 中我们做的事情很简单，从网络上获取类的二进制字节流，然后读入数组，最后通过 defineClass 方法，将其转为 class 对象并返回。</p>\n<p>然后通过 class 对象的 newInstance 方法获得一个对应的实例对象，即 RemoteClass 的对象，然后输入其 toString 返回的内容。具体输出什么大家可以在本地跑了试试。</p>\n<h3 id=\"基于栈的解释器执行过程\"><a href=\"#基于栈的解释器执行过程\" class=\"headerlink\" title=\"基于栈的解释器执行过程\"></a>基于栈的解释器执行过程</h3><p>在 JVM 的内存区域划分的时候讲到过虚拟机栈这个区域，它是线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。接下来我就用一个实际的例子来介绍在 JVM 中，一个方法是如何被解释执行的。借此机会也可以更进一步了解虚拟机栈相关知识。</p>\n<h4 id=\"运行时栈帧结构\"><a href=\"#运行时栈帧结构\" class=\"headerlink\" title=\"运行时栈帧结构\"></a>运行时栈帧结构</h4><p>栈帧是用于支持 JVM 进行方法调用和方法执行的数据结构，它是虚拟机栈的栈元素。每一个方法从调用到完成，都对应着一个栈帧在虚拟机栈中的入栈和出栈操作。</p>\n<p>每个栈帧都包括局部变量表、操作数、动态连接、方法返回地址和一些额外的附加信信息。并且在程序进行编译的时候，栈帧需要多大的局部变量表，多深的操作数栈都是已经确定的，因此一个栈帧需要分配多少内存也是确定不变的。JVM 中线程、虚拟机栈、栈帧的典型结构图如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/5.webp\" alt=\"image\"></p>\n<h4 id=\"解释器执行过程实例\"><a href=\"#解释器执行过程实例\" class=\"headerlink\" title=\"解释器执行过程实例\"></a>解释器执行过程实例</h4><p>本节中，我准备了如下一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        calc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">calc</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a + b) * c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从 Java 的语言角度来讲，这段代码没有任何解释的必要，我们接下来用 javap 来看看他的字节码指令，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Classfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class</span><br><span class=\"line\">  Last modified 2017-11-30; size 549 bytes</span><br><span class=\"line\">  MD5 checksum 1bf313c415146d6070a30e8addc83a8c</span><br><span class=\"line\">  Compiled from &quot;HelloJVM.java&quot;</span><br><span class=\"line\">public class com.zqlite.jvm.HelloJVM</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #4.#24         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Methodref          #3.#25         // com/zqlite/jvm/HelloJVM.calc:()I</span><br><span class=\"line\">   #3 = Class              #26            // com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">   #4 = Class              #27            // java/lang/Object</span><br><span class=\"line\">   #5 = Utf8               &lt;init&gt;</span><br><span class=\"line\">   #6 = Utf8               ()V</span><br><span class=\"line\">   #7 = Utf8               Code</span><br><span class=\"line\">   #8 = Utf8               LineNumberTable</span><br><span class=\"line\">   #9 = Utf8               LocalVariableTable</span><br><span class=\"line\">  #10 = Utf8               this</span><br><span class=\"line\">  #11 = Utf8               Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\">  #12 = Utf8               main</span><br><span class=\"line\">  #13 = Utf8               ([Ljava/lang/String;)V</span><br><span class=\"line\">  #14 = Utf8               args</span><br><span class=\"line\">  #15 = Utf8               [Ljava/lang/String;</span><br><span class=\"line\">  #16 = Utf8               calc</span><br><span class=\"line\">  #17 = Utf8               ()I</span><br><span class=\"line\">  #18 = Utf8               a</span><br><span class=\"line\">  #19 = Utf8               I</span><br><span class=\"line\">  #20 = Utf8               b</span><br><span class=\"line\">  #21 = Utf8               c</span><br><span class=\"line\">  #22 = Utf8               SourceFile</span><br><span class=\"line\">  #23 = Utf8               HelloJVM.java</span><br><span class=\"line\">  #24 = NameAndType        #5:#6          // &quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">  #25 = NameAndType        #16:#17        // calc:()I</span><br><span class=\"line\">  #26 = Utf8               com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">  #27 = Utf8               java/lang/Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.zqlite.jvm.HelloJVM();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 3: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String...);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: invokestatic  #2                  // Method calc:()I</span><br><span class=\"line\">         3: pop</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 6: 0</span><br><span class=\"line\">        line 7: 4</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  args   [Ljava/lang/String;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static int calc();</span><br><span class=\"line\">    descriptor: ()I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=3, args_size=0</span><br><span class=\"line\">         0: bipush        100</span><br><span class=\"line\">         2: istore_0</span><br><span class=\"line\">         3: sipush        200</span><br><span class=\"line\">         6: istore_1</span><br><span class=\"line\">         7: sipush        300</span><br><span class=\"line\">        10: istore_2</span><br><span class=\"line\">        11: iload_0</span><br><span class=\"line\">        12: iload_1</span><br><span class=\"line\">        13: iadd</span><br><span class=\"line\">        14: iload_2</span><br><span class=\"line\">        15: imul</span><br><span class=\"line\">        16: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 10: 0</span><br><span class=\"line\">        line 11: 3</span><br><span class=\"line\">        line 12: 7</span><br><span class=\"line\">        line 13: 11</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            3      14     0     a   I</span><br><span class=\"line\">            7      10     1     b   I</span><br><span class=\"line\">           11       6     2     c   I</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;HelloJVM.java&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们把注意点放在 calc 方法上，其中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">descriptor: ()I</span><br></pre></td></tr></table></figure>\n<p>表示这个方法的方法描述符是 ()I。了解 JNI 的小伙伴对方法描述符应该不会陌生，这里我不多介绍，想了解更多可以参考<a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html\">此处</a>。</p>\n<p>接着的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flags: ACC_PUBLIC, ACC_STATIC</span><br></pre></td></tr></table></figure>\n\n<p>表示这个是一个 public static 修饰的方法。</p>\n<p>然后 Code 部分是重点，其中 stack = 2 说明操作数栈的深度为 2 ，locals = 3 说明本地变量表有三个变量，args_size = 0 说明此方法没有参数。</p>\n<p>接下来先跳过下面的字节码，来看到 LocalVariableTable，这就是所谓的本地变量表了，表中有三行数据，分别是 a，b，c 和代码中定义的变量名一致。且他们的签名都是 I ，表示是 Int 型整数。</p>\n<p>接下来，我通过下面 7 幅图来讲解下解释执行这个方法的过程和此过程中局部变量表和操作数栈的变化情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/6.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 0 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/7.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 2 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/8.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 11 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/9.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 12 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/10.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 13 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/11.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 14 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/12.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 16 的指令的情况。</p>\n<p>方法的执行模型到这就结束了，请大家记住这仅仅是一种概念模型，虚拟机最终会对执行过程做一些优化来提升性能，实际的执行过程与概念模型差距可能会很大。之所以会有这种差距是因为虚拟机的执行引擎和即时编译器都会对输入的字节码进行优化。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这篇文章我主要带着大家简单了解了一下 JVM 的内层划分、对象的创建、字节码结构、字节码指令和类加载与解释执行这几部分的相关内容。由于篇幅有限，如 GC，编译优化和 JVM内部实现并发等内容没有介绍，如果大家感兴趣可以阅读《深入理解 Java 虚拟机-JVM 高级特性与最佳实践》。本文也是参考此书总结而来。</p>\n","excerpt":"<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p>说到 Java，大家第一时间想到的类似于下面的程序语句：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">k</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>,b=<span class=\"number\">3</span>;</span><br><span class=\"line\">        System.out.println(a+b+k);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<p>但这仅仅只属于 Java 技术体系中的 Java 程序设计语言。Java 的技术体系从传统意义上来看有以下几个：</p>\n<ol>\n<li>Java 程序设计语言</li>\n<li>各硬件平台上的 Java 虚拟机</li>\n<li>Class 文件格式</li>\n<li>Java API 类库</li>\n<li>其他商业机构或开源社区的第三方 Java 类库</li>\n</ol>\n<p>其中 1、4、5 大家应该比较熟悉，在编程中都能直接接触。2、3 对于大家来说可能陌生了些，但不夸张的讲，Java 能有如今的活力，其功臣正是 2 和 3。所以接下来的内容将围绕这两点展开，让你从更深的层次了解你所熟悉的 Java。</p>\n<h2 id=\"JVM\"><a href=\"#JVM\" class=\"headerlink\" title=\"JVM\"></a>JVM</h2><p>JVM（Java Virtual Machine）就是上面所说的 Java 虚拟机，其作用是加载与运行 Class 文件。有句话大家一定不陌生，“一次编写，到处运行”。简单解释一下，因为在 Class 文件和硬件平台中间隔着一个 JVM，由 JVM 负责加载和执行 Class 文件，这样平台的差异性就留给了 JVM 去考虑，而不是 Class 文件。也正因如此，Class 文件的格式可以真正做到平台无关性。</p>\n<h3 id=\"JVM-中的-Java-内存区域划分\"><a href=\"#JVM-中的-Java-内存区域划分\" class=\"headerlink\" title=\"JVM 中的 Java 内存区域划分\"></a>JVM 中的 Java 内存区域划分</h3><p>对于从事 C、C++ 的开发人员来说，在内存管理领域他们是拥有最高权力的“皇帝”，但又是从事最底层基础工作的“劳动人民”。他们即拥有与内存直接打交道的权利，又要负责维护每一个对象的生命周期。</p>\n<p>对于 Java 开发人员来说就轻松多了，在 JVM 自动内存管理机制的帮助下，不再需要维护每一个对象的生命周期，内存控制的权利由开发人员转移到了 JVM 。</p>\n<p>因为 JVM 需要管理 Java 运行期间的各种对象的生命周期，所以它在执行 Java 程序的时候会把它所管辖的内存分成若干个不同的数据区域，具体如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/1.webp\" alt=\"image\"></p>\n<p>对以上几个区域做下简单的介绍：</p>\n<ul>\n<li>方法区：线程共享区域，用于存储被虚拟机加载的类信息、常量、静态变量等数据。</li>\n<li>堆：线程共享区域，存放类实例以及数组。我们平时听到的 GC（垃圾回收）就是在堆上进行的。 </li>\n<li>虚拟机栈：线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。</li>\n<li>本地方法栈：线程私有区域，与虚拟机栈作用类似，区别在于本地方法栈执行的是 Native 方法。</li>\n<li>程序计数器：线程私有区域，用于指向当前线程下一条需要执行的字节码指令。</li>\n</ul>\n<p>除了以上几个主要区域外，另外还要介绍一个区域：运行时常量池。它是方法区的一部分，用于存放编译期生成的字面量和符号引用。字面量好理解，比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;a&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>上面的 a 就是字面量。而符号引用则是一些字符串，用于给虚拟机定位类或类方法等。</p>\n<blockquote>\n<p>面试的时候有时会遇到这样的问题，Java 中每次声明并初始化一个 String 对象都会在堆上面分配内存吗？这里的答案当然是否，因为有可能新声明的对象已经在常量池中存在了，这时候 JVM 会将新对象的引用指向常量池中对应的值而不是在堆重新分配。</p>\n</blockquote>\n<h3 id=\"对象在-JVM-中的创建过程\"><a href=\"#对象在-JVM-中的创建过程\" class=\"headerlink\" title=\"对象在 JVM 中的创建过程\"></a>对象在 JVM 中的创建过程</h3><p>在 Java 中创建对象很简单，一个简单的 new 关键字就可以。但在虚拟机中，对象的创建过程是怎样的呢？我们来一起了解一下。</p>\n<p>在 JVM 中，创建对象的字节码指令是 new，当 JVM 执行引擎遇到 new 指令后会进行如下五步操作：</p>\n<p>一、检查这个指令的参数能否在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已经加载、解析和初始化。</p>\n<p>下面我们看一下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用 javap 对这段代码生成的 class 文件进行反汇编处理，结果如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Classfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class</span><br><span class=\"line\">  Last modified 2017-11-29; size 446 bytes</span><br><span class=\"line\">  MD5 checksum bcc0b2d9129748ef0caa00e95cf95a47</span><br><span class=\"line\">  Compiled from &quot;HelloJVM.java&quot;</span><br><span class=\"line\">public class com.zqlite.jvm.HelloJVM</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #2.#19         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Class              #20            // java/lang/Object</span><br><span class=\"line\">   #3 = Class              #21            // com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">   #4 = Utf8               &lt;init&gt;</span><br><span class=\"line\">   #5 = Utf8               ()V</span><br><span class=\"line\">   #6 = Utf8               Code</span><br><span class=\"line\">   #7 = Utf8               LineNumberTable</span><br><span class=\"line\">   #8 = Utf8               LocalVariableTable</span><br><span class=\"line\">   #9 = Utf8               this</span><br><span class=\"line\">  #10 = Utf8               Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\">  #11 = Utf8               main</span><br><span class=\"line\">  #12 = Utf8               ([Ljava/lang/String;)V</span><br><span class=\"line\">  #13 = Utf8               args</span><br><span class=\"line\">  #14 = Utf8               [Ljava/lang/String;</span><br><span class=\"line\">  #15 = Utf8               obj</span><br><span class=\"line\">  #16 = Utf8               Ljava/lang/Object;</span><br><span class=\"line\">  #17 = Utf8               SourceFile</span><br><span class=\"line\">  #18 = Utf8               HelloJVM.java</span><br><span class=\"line\">  #19 = NameAndType        #4:#5          // &quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">  #20 = Utf8               java/lang/Object</span><br><span class=\"line\">  #21 = Utf8               com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.zqlite.jvm.HelloJVM();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 6: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String...);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=2, args_size=1</span><br><span class=\"line\">         0: new           #2                  // class java/lang/Object</span><br><span class=\"line\">         3: dup</span><br><span class=\"line\">         4: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         7: astore_1</span><br><span class=\"line\">         8: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 9: 0</span><br><span class=\"line\">        line 10: 8</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       9     0  args   [Ljava/lang/String;</span><br><span class=\"line\">            8       1     1   obj   Ljava/lang/Object;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;HelloJVM.java&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>暂时无需理解上面的所有内容，我们只关注 new 字节码部分。</p>\n<p>找到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0: new           #2</span><br></pre></td></tr></table></figure>\n\n<p>可以看到 new 指令码的参数是 #2，接着通过参数 #2 在常量池（Constant pool）中找到 #2 对应的内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#2 = Class              #20            // java/lang/Object</span><br></pre></td></tr></table></figure>\n\n<p>这里说明了 #2 对应的是一个类，类符号引用需要到 #20 中找，在看 #20 ：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#20 = Utf8               java/lang/Object</span><br></pre></td></tr></table></figure>\n\n<p>这里的 #20 是一个字符串类型，其内容是 ava/lang/Object，表示 Object 类的符号引用即全限定名。接着 JVM 就会去寻找并加载、解析和初始化这个类。</p>\n<p>二、当在第一步确定了目标类以后，JVM 就会为这个类的新生对象在堆上面分配内存。对象所需要的内存大小在第一步的类加载后已经确定了，所以为对象分配内存也就等同于把一块确定大小的内存从 Java 堆中划分出来。</p>\n<p>三、分配完内存后，JVM 需要将分配到的内存空间都初始化为零值（不包括对象头）。</p>\n<blockquote>\n<p>这里需要注意，由于 JVM 会对对象的内存空间做初始化操作，所以在类中类似的定义一个 int i ，其默认值就是整型的零值 0 。Java 类变量也正因如此允许不赋初始值。但在类方法中，如果这样定义一个 i，在接下来的代码中如果使用 i 的话，会有报错提示 i 没有初始化值，</p>\n</blockquote>\n<p>四、当初始化完以后，JVM 就要对对象做必要的处理，比如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码、对象的 GC 分代年龄表的信息。这些信息都会放在对象头中。</p>\n<p>五、上面的工作都完成之后，从 JVM 的角度来看，一个新的对象已经产生了，但从 Java 程序的角度来看，对象创建才刚开始。<init> 方法还没有执行，所有的字段还都为零。所以一般在 new 指令码后都会跟 invokespecial 指令来调用 <init> 方法。此处的 <init> 即我们通常说的构造方法。</p>\n<h3 id=\"对象的内存布局\"><a href=\"#对象的内存布局\" class=\"headerlink\" title=\"对象的内存布局\"></a>对象的内存布局</h3><p>在上小节介绍了对象在 JVM 中的创建过程，这节简单介绍下对象的内存布局。</p>\n<p>对象的内存布局可以分三个区域：对象头、实例数据和对齐填充。</p>\n<p>其中对象头包括两部分信息，第一部分用于存储对象自身的运行时数据，如哈希码、GC 分代年龄、锁状态标志、线程持有的锁等。另外一部分则是类型指针，用于指向它的类元数据。JVM 可以通过这个指针来确定对象是属于哪个类的。另外需要注意的是如果对象是数组，那么对象头中还需要记录数组的长度。</p>\n<p>实例数据部分是对象真正存储的有效信息，也是在程序代码中所定义的各种类型字段的内容，包括从父类继承下来的和自己定义的。</p>\n<p>最后一部分并不是必须的，它仅仅起到了占位符的作用。有些虚拟机要求对象的起始地址必须是 8 字节的整数倍，换句话说就是对象大小必须是 8 字节的整数倍。所以当不足整数倍的时候，就需要进行对齐填充处理。</p>\n<p>下面这张图简单表示了对象在内存中的布局：</p>\n<p> <img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/2.webp\" alt=\"image\"></p>\n<h2 id=\"Class-文件\"><a href=\"#Class-文件\" class=\"headerlink\" title=\"Class 文件\"></a>Class 文件</h2><p>计算机只认识 0 和 1 ，这是常识。所以我们编写的程序都需要经过编译器翻译成有 0 和 1 构成的二进制格式才能被计算机执行。但在近十几年内，虚拟机以及大量建立在虚拟机上的程序语言如雨后春笋般出现并蓬勃发展，由此二进制本地机器码已不再是唯一的选择，越来越多的程序语言选择了与操作系统和机器指令集无关的、平台中立的格式作为程序编译后的存储格式。我们这里的 Class 文件就是其中一种。</p>\n<p>我们通常都把 Java 和 JVM 有意识无意识的联系在一起，但 JVM 其实并不关心 Java。什么意思呢？JVM 面向的是 Class 格式的文件，它并不关系 Class 的来源是何种语言。如 Clojure、Groovy、Jruby、Jython、Scala 等都可以被编译成 Class 文件，从而在 JVM 上运行。</p>\n<h3 id=\"Class-内部结构\"><a href=\"#Class-内部结构\" class=\"headerlink\" title=\"Class 内部结构\"></a>Class 内部结构</h3><p>Class 文件是一组以 8 位字节为基础单位的二进制流，各个数据项目严格按照顺序紧凑地排列在 Class 文件中，其中没有任何分隔符，这使得整个 Class 文件中存储的内容几乎全部都是程序运行必须的数据，没有空隙存在。</p>\n<p>Class 文件的完整格式见下表：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/3.webp\" alt=\"image\"></p>\n<p>其中类型中的 u4，u2以及没有这上图出现的 u1，u8都表示无符号数。其中 u1 表示 1 个字节，u2 表示 2 个字节，以此类推。名称则说明该位置数据的作用，如 constant_pool 表示常量池。数量则说明 Class 文件中，不同名称的数据块的个数。如 constant_pool 的个数取决于 constant_pool_count，而 constant_pool_count 则是占用两个字节的无符号数。</p>\n<p>不管是多复杂的 Class 文件，其内部数据结构必然是按照上表来排列的，由于其内部各类型的数据比较复杂，这里也不展开讲。这一节大家只要知道 Class 文件内部有这些数据就可以了，如果需要查看 Class 文件，可以使用反编译工具 javap 。具体命令如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javap -v ClassFile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字节码指令介绍\"><a href=\"#字节码指令介绍\" class=\"headerlink\" title=\"字节码指令介绍\"></a>字节码指令介绍</h3><p>JVM 中的指令由一个字节长度的、代表着某种特定操作含义的数字（操作码，字节码）以及跟随其后的零至多个代表此操作所需参数（操作数）构成。由于 JVM 采用面向操作数栈而不是寄存器的结构，所以大多数的指令都不包含操作数，只有一个操作码。由于指令长度是 8 位的无符号数，所以 JVM 指令最多 256 条。</p>\n<p>大部分指令从其助记符就能知道它所操作的数据类型，比如 iload 指令用于从局部变量表加载 int 型的数据到操作数栈，而 fload 指令加载的则是 float 类型的数据。</p>\n<p>大部分与数据相关的字节码指令，其助记符都有特殊的字符来表示其服务的数据类型：i 代表对 int 型数据的操作，l 代表 long，s 代表 short，b 代表 byte，c 代表 char，f 代表 float，d 代表 double，a 代表 reference。</p>\n<p>如需查看所有 JVM 指令，点击此链接：<a href=\"http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A\">http://17b84ff5.wiz03.com/share/s/0nK4_R1FrArb2bpd-P3HNDCf0YLy5c0dYAqj2-_XjE3Jsh_A</a></p>\n<h2 id=\"JVM-与-Class-文件\"><a href=\"#JVM-与-Class-文件\" class=\"headerlink\" title=\"JVM 与 Class 文件\"></a>JVM 与 Class 文件</h2><p>前面分开讲了 JVM 与 Class 文件，相信大家对它们有了一定的了解。Java 程序之所以可以运行起来，离不开这两位的紧密配合，下面我要给大家介绍的就是关于它俩的一些相关知识。</p>\n<h3 id=\"类加载\"><a href=\"#类加载\" class=\"headerlink\" title=\"类加载\"></a>类加载</h3><p>Class 文件从被 JVM 加载到内存，到卸载出内存为止，它的整个生命周期包括：加载、验证、准备、解析、初始化、使用和卸载。其中验证、准备、解析三个部分统称为连接，这七个阶段发生顺序如下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/4.webp\" alt=\"image\"></p>\n<p>接下来我们简单了解一下这几个过程</p>\n<ul>\n<li>加载：在类的加载阶段 JVM 主要做了下面三件事：</li>\n</ul>\n<ol>\n<li>通过类的全限定名来获取定义此类的二进制字节流。</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的 java.lang.Class 对象，作为方法区这个类的各种数据的访问入口。</li>\n</ol>\n<p>这里需要注意第一点，它只说明了通过全限定名获取定义此类的二进制字节流，但是没有具体说从哪获取，怎么获取。正是有了这么一个开放的入口，才有了现在 Java 的各种有趣的玩法。</p>\n<ul>\n<li><p>验证：这一阶段的目的是为了确保 Class 文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。</p>\n</li>\n<li><p>准备：为类变量（static 变量）分配内存并设置变量的初始值。</p>\n</li>\n<li><p>解析：JVM 将常量池内的符号引用替换为直接引用。</p>\n</li>\n<li><p>初始化：前面几个阶段都是 JVM 主导和控制的，到了这一步开始，才真正开始执行 Java 程序代码。在准备阶段 JVM 为类变量设置了初始值，而在初始化阶段，JVM 会调用类构造器 <clinit>() 方法，即我们平时写的 static{ … } 这部分代码和静态变量赋值操作的集合。</p>\n</li>\n<li><p>使用：这部分是我们开发者最熟悉的，即我们所写的程序运行的过程。</p>\n</li>\n<li><p>卸载：当 JVM 确定某个类永久不需要的时候，就会执行类卸载，将其在内存中占用的空间全部释放。</p>\n</li>\n</ul>\n<h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><p>前面介绍 JVM 加载类的时候说到，JVM 对于从哪加载二进制字节流是对外开放的，即这部分是在 JVM 外部实现的。而用于实现类加载的代码模块称为“类加载器”。类加载器可以说是 Java 语言的一项创新，也是 Java 语言流行的重要原因之一，它起初是为 Java Applet 而开发出开的。虽然目前 Java Applet 技术基本已经“死了”，但类加载器却在类层次划分、OSGi、热部署、代码加密等领域大放异彩，成为了 Java 体系中一块重要的基石。</p>\n<p>下面我用代码展示如何自定义一个类加载器，从网络上加载一个类，然后调用其 toString 方法。其实现很简单，如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.InputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.HttpURLConnection;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.URL;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"type\">MyNetClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyNetClassLoader</span>();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Class&lt;?&gt; clazz = classLoader.findClass(<span class=\"string\">&quot;http://7xprgn.com1.z0.glb.clouddn.com/RemoteClass.class&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> clazz.newInstance();</span><br><span class=\"line\">            System.out.print(o.toString());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException |IllegalAccessException | InstantiationException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyNetClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">ClassLoader</span>&#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"type\">URL</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">URL</span>(name);</span><br><span class=\"line\">                <span class=\"type\">HttpURLConnection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> (HttpURLConnection) url.openConnection();</span><br><span class=\"line\">                <span class=\"type\">InputStream</span> <span class=\"variable\">inputStream</span> <span class=\"operator\">=</span>  connection.getInputStream();</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] b = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[inputStream.available()];</span><br><span class=\"line\">                inputStream.read(b);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> defineClass(<span class=\"string\">&quot;com.zqlite.jvm.RemoteClass&quot;</span>,b,<span class=\"number\">0</span>,b.length);</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.findClass(name);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>首先我们自定义一个 MyNetClassLoader 类来继承 ClassLoader ，然后重写它的 findClass 方法，此方法会在系统找不到指定类的时候调用。在 findClass 中我们做的事情很简单，从网络上获取类的二进制字节流，然后读入数组，最后通过 defineClass 方法，将其转为 class 对象并返回。</p>\n<p>然后通过 class 对象的 newInstance 方法获得一个对应的实例对象，即 RemoteClass 的对象，然后输入其 toString 返回的内容。具体输出什么大家可以在本地跑了试试。</p>\n<h3 id=\"基于栈的解释器执行过程\"><a href=\"#基于栈的解释器执行过程\" class=\"headerlink\" title=\"基于栈的解释器执行过程\"></a>基于栈的解释器执行过程</h3><p>在 JVM 的内存区域划分的时候讲到过虚拟机栈这个区域，它是线程私有区域，用于描述 Java 方法的执行模型。每个方法在执行同时会创建一个栈帧用于存储局部变量表、操作数、动态链接、方法出口等信息。接下来我就用一个实际的例子来介绍在 JVM 中，一个方法是如何被解释执行的。借此机会也可以更进一步了解虚拟机栈相关知识。</p>\n<h4 id=\"运行时栈帧结构\"><a href=\"#运行时栈帧结构\" class=\"headerlink\" title=\"运行时栈帧结构\"></a>运行时栈帧结构</h4><p>栈帧是用于支持 JVM 进行方法调用和方法执行的数据结构，它是虚拟机栈的栈元素。每一个方法从调用到完成，都对应着一个栈帧在虚拟机栈中的入栈和出栈操作。</p>\n<p>每个栈帧都包括局部变量表、操作数、动态连接、方法返回地址和一些额外的附加信信息。并且在程序进行编译的时候，栈帧需要多大的局部变量表，多深的操作数栈都是已经确定的，因此一个栈帧需要分配多少内存也是确定不变的。JVM 中线程、虚拟机栈、栈帧的典型结构图如下：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/5.webp\" alt=\"image\"></p>\n<h4 id=\"解释器执行过程实例\"><a href=\"#解释器执行过程实例\" class=\"headerlink\" title=\"解释器执行过程实例\"></a>解释器执行过程实例</h4><p>本节中，我准备了如下一段代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.zqlite.jvm;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloJVM</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String ...args)</span>&#123;</span><br><span class=\"line\">        calc();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">calc</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> <span class=\"number\">300</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (a + b) * c;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>从 Java 的语言角度来讲，这段代码没有任何解释的必要，我们接下来用 javap 来看看他的字节码指令，如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Classfile /Users/scott/workspace/jvm/out/production/jvm/com/zqlite/jvm/HelloJVM.class</span><br><span class=\"line\">  Last modified 2017-11-30; size 549 bytes</span><br><span class=\"line\">  MD5 checksum 1bf313c415146d6070a30e8addc83a8c</span><br><span class=\"line\">  Compiled from &quot;HelloJVM.java&quot;</span><br><span class=\"line\">public class com.zqlite.jvm.HelloJVM</span><br><span class=\"line\">  minor version: 0</span><br><span class=\"line\">  major version: 52</span><br><span class=\"line\">  flags: ACC_PUBLIC, ACC_SUPER</span><br><span class=\"line\">Constant pool:</span><br><span class=\"line\">   #1 = Methodref          #4.#24         // java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">   #2 = Methodref          #3.#25         // com/zqlite/jvm/HelloJVM.calc:()I</span><br><span class=\"line\">   #3 = Class              #26            // com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">   #4 = Class              #27            // java/lang/Object</span><br><span class=\"line\">   #5 = Utf8               &lt;init&gt;</span><br><span class=\"line\">   #6 = Utf8               ()V</span><br><span class=\"line\">   #7 = Utf8               Code</span><br><span class=\"line\">   #8 = Utf8               LineNumberTable</span><br><span class=\"line\">   #9 = Utf8               LocalVariableTable</span><br><span class=\"line\">  #10 = Utf8               this</span><br><span class=\"line\">  #11 = Utf8               Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\">  #12 = Utf8               main</span><br><span class=\"line\">  #13 = Utf8               ([Ljava/lang/String;)V</span><br><span class=\"line\">  #14 = Utf8               args</span><br><span class=\"line\">  #15 = Utf8               [Ljava/lang/String;</span><br><span class=\"line\">  #16 = Utf8               calc</span><br><span class=\"line\">  #17 = Utf8               ()I</span><br><span class=\"line\">  #18 = Utf8               a</span><br><span class=\"line\">  #19 = Utf8               I</span><br><span class=\"line\">  #20 = Utf8               b</span><br><span class=\"line\">  #21 = Utf8               c</span><br><span class=\"line\">  #22 = Utf8               SourceFile</span><br><span class=\"line\">  #23 = Utf8               HelloJVM.java</span><br><span class=\"line\">  #24 = NameAndType        #5:#6          // &quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">  #25 = NameAndType        #16:#17        // calc:()I</span><br><span class=\"line\">  #26 = Utf8               com/zqlite/jvm/HelloJVM</span><br><span class=\"line\">  #27 = Utf8               java/lang/Object</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  public com.zqlite.jvm.HelloJVM();</span><br><span class=\"line\">    descriptor: ()V</span><br><span class=\"line\">    flags: ACC_PUBLIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: aload_0</span><br><span class=\"line\">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 3: 0</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  this   Lcom/zqlite/jvm/HelloJVM;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static void main(java.lang.String...);</span><br><span class=\"line\">    descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC, ACC_VARARGS</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=1, locals=1, args_size=1</span><br><span class=\"line\">         0: invokestatic  #2                  // Method calc:()I</span><br><span class=\"line\">         3: pop</span><br><span class=\"line\">         4: return</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 6: 0</span><br><span class=\"line\">        line 7: 4</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            0       5     0  args   [Ljava/lang/String;</span><br><span class=\"line\"></span><br><span class=\"line\">  public static int calc();</span><br><span class=\"line\">    descriptor: ()I</span><br><span class=\"line\">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\">    Code:</span><br><span class=\"line\">      stack=2, locals=3, args_size=0</span><br><span class=\"line\">         0: bipush        100</span><br><span class=\"line\">         2: istore_0</span><br><span class=\"line\">         3: sipush        200</span><br><span class=\"line\">         6: istore_1</span><br><span class=\"line\">         7: sipush        300</span><br><span class=\"line\">        10: istore_2</span><br><span class=\"line\">        11: iload_0</span><br><span class=\"line\">        12: iload_1</span><br><span class=\"line\">        13: iadd</span><br><span class=\"line\">        14: iload_2</span><br><span class=\"line\">        15: imul</span><br><span class=\"line\">        16: ireturn</span><br><span class=\"line\">      LineNumberTable:</span><br><span class=\"line\">        line 10: 0</span><br><span class=\"line\">        line 11: 3</span><br><span class=\"line\">        line 12: 7</span><br><span class=\"line\">        line 13: 11</span><br><span class=\"line\">      LocalVariableTable:</span><br><span class=\"line\">        Start  Length  Slot  Name   Signature</span><br><span class=\"line\">            3      14     0     a   I</span><br><span class=\"line\">            7      10     1     b   I</span><br><span class=\"line\">           11       6     2     c   I</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">SourceFile: &quot;HelloJVM.java&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>我们把注意点放在 calc 方法上，其中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">descriptor: ()I</span><br></pre></td></tr></table></figure>\n<p>表示这个方法的方法描述符是 ()I。了解 JNI 的小伙伴对方法描述符应该不会陌生，这里我不多介绍，想了解更多可以参考<a href=\"https://docs.oracle.com/javase/8/docs/technotes/guides/jni/spec/types.html\">此处</a>。</p>\n<p>接着的</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flags: ACC_PUBLIC, ACC_STATIC</span><br></pre></td></tr></table></figure>\n\n<p>表示这个是一个 public static 修饰的方法。</p>\n<p>然后 Code 部分是重点，其中 stack = 2 说明操作数栈的深度为 2 ，locals = 3 说明本地变量表有三个变量，args_size = 0 说明此方法没有参数。</p>\n<p>接下来先跳过下面的字节码，来看到 LocalVariableTable，这就是所谓的本地变量表了，表中有三行数据，分别是 a，b，c 和代码中定义的变量名一致。且他们的签名都是 I ，表示是 Int 型整数。</p>\n<p>接下来，我通过下面 7 幅图来讲解下解释执行这个方法的过程和此过程中局部变量表和操作数栈的变化情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/6.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 0 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/7.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 2 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/8.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 11 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/9.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 12 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/10.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 13 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/11.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 14 的指令的情况。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/jvm/12.webp\" alt=\"image\"></p>\n<p>上图是执行偏移地址为 16 的指令的情况。</p>\n<p>方法的执行模型到这就结束了，请大家记住这仅仅是一种概念模型，虚拟机最终会对执行过程做一些优化来提升性能，实际的执行过程与概念模型差距可能会很大。之所以会有这种差距是因为虚拟机的执行引擎和即时编译器都会对输入的字节码进行优化。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>这篇文章我主要带着大家简单了解了一下 JVM 的内层划分、对象的创建、字节码结构、字节码指令和类加载与解释执行这几部分的相关内容。由于篇幅有限，如 GC，编译优化和 JVM内部实现并发等内容没有介绍，如果大家感兴趣可以阅读《深入理解 Java 虚拟机-JVM 高级特性与最佳实践》。本文也是参考此书总结而来。</p>"},{"title":"Last Dance","date":"2020-03-23T13:52:08.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancedafengmian.jpg","_content":"\n最近老婆一直在听这首歌，感觉我已经被洗脑了。\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancedafengmian.jpg)\n<!-- more -->\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"Last Dance\",\n            \"author\": \"伍佰\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\n            \"lrc\": \"lastdance.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}","source":"_posts/last-dance.md","raw":"---\ntitle: Last Dance\ndate: 2020-03-23 21:52:08\ntags: 音乐分享\ncover: \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancedafengmian.jpg\"\n---\n\n最近老婆一直在听这首歌，感觉我已经被洗脑了。\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancedafengmian.jpg)\n<!-- more -->\n{% aplayerlist %}\n{\n    \"narrow\": false,\n    \"autoplay\": false,\n    \"mode\": \"random\",       \n    \"showlrc\": 3, \n    \"mutex\": true,   \n    \"theme\": \"#e6d0b2\",\n    \"preload\": \"metadata\",\n    \"listmaxheight\": \"513px\",\n    \"music\": [\n        {\n            \"title\": \"Last Dance\",\n            \"author\": \"伍佰\",\n            \"url\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\n            \"pic\": \"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\n            \"lrc\": \"lastdance.lrc\"\n        }\n    ]\n}\n{% endaplayerlist %}","slug":"last-dance","published":1,"updated":"2024-08-21T03:16:19.785Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vv001h5p6t67m38bhu","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>最近老婆一直在听这首歌，感觉我已经被洗脑了。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancedafengmian.jpg\" alt=\"\"></p>\n<span id=\"more\"></span>\n\n        <div id=\"aplayer-pseuYtkj\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"Last Dance\",\"author\":\"伍佰\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\"lrc\":\"lastdance.lrc\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-pseuYtkj\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>","excerpt":"<p>最近老婆一直在听这首歌，感觉我已经被洗脑了。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancedafengmian.jpg\" alt=\"\"></p>","more":"<div id=\"aplayer-pseuYtkj\" class=\"aplayer aplayer-tag-marker\" style=\"margin-bottom: 20px;\"></div>\n\t\t\t  <script>\n\t\t\t\t  var options = {\"narrow\":false,\"autoplay\":false,\"showlrc\":3,\"mode\":\"random\",\"mutex\":true,\"theme\":\"#e6d0b2\",\"preload\":\"metadata\",\"listmaxheight\":\"513px\",\"music\":[{\"title\":\"Last Dance\",\"author\":\"伍佰\",\"url\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdance.mp3\",\"pic\":\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/%E9%9F%B3%E4%B9%90/lastdancefengmian.jpg\",\"lrc\":\"lastdance.lrc\"}]};\n\t\t\t\t  options.element = document.getElementById(\"aplayer-pseuYtkj\");\n\t\t\t\t  var ap = new APlayer(options);\n\t\t\t    window.aplayers || (window.aplayers = []);\n\t\t\t\t  window.aplayers.push(ap);\n\t\t\t  </script>"},{"title":"聊聊直播移动端播放体验优化","date":"2020-07-13T13:10:12.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/ce34b1843142b188ac6930f5dc5e7289.jpg","sticky":1,"top":10,"_content":"\n# “直播”\n\n2020年的一场疫情将直播行业及音视频技术带到了大家的视野中，原本只在娱乐行业被人熟知的直播，在数月中就充斥了人们的整个日常生活。`直播卖货`、`远程会议系统`、`直播教育`原本小众的场景被强行拉上舞台，接受本不该承受的QPS。\n\n部分数据可参考下图：\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/100012a173b932cbb31596c11bbb41e6066cc911bf2be7099082800f3657bfa139015.jpg)\n\n如果你是一名开发者，你有没有想过，从主播开始推流到用户看到画面，这里面都发生了些什么？一次次的卡顿缓冲时怎么引起的？观众看到的画面和主播实时画面差了几秒，最短能缩减到多少？不同观众看到的画面是否一致？\n\n为了大家可以直观理解本文剩余部分，这里笔者先把直播整体的流程图放出来。\n\n![直播整体流程](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/%E7%9B%B4%E6%92%AD%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.png)\n\n上图只是将主要的流程列出来，真正的流程比这个当然要更复杂。\n\n本文的主题是`直播移动端播放体验优化`，结合上图，笔者会从`推流端`、`cdn`和`拉流端`给大家介绍如何在这三个环节进行播放体验优化。\n\n本文会尽量写的通俗易懂，不会涉及到具体代码实现，即使你不是直播行业的开发者，读完这篇文章，也能对直播优化有个比较全面的了解。\n<!-- more -->\n# “推流端”\n推流端是离我们观众最远的节点，也是整个直播内容的生产源头。我们熟知的推流工具有 OBS、B 站直播姬和各个直播平台的手机推流 app。另外针对一些复杂场景的话，有更专业的导播台硬件。虽然工具众多，但推流端的整个工作流程还是比较固定的：\n1. 摄像头采集\n2. 麦克风采集\n3. 视频编码\n4. 音频编码\n5. 音视频封装合流\n6. 推流\n\n那么回到文章主题，在推流端我们可以做哪些针对用户播放体验的优化呢？用户体验的话无非三块`画面首帧`、`卡顿率`和`延迟`。\n\n那么想想推流端的哪些行为会导致上面的这些问题？\n\n想象下，如果主播拿了一部四年前的低端手机一边玩和平精英一边直播会怎样？是不是手机本身就已经卡得不得了了？那这里就得出了第一个优化点`硬件`\n\n> 硬件的规格参数是会直接影响推流质量，把推流比作一个武林高手的话，硬件就是这位武林高手强健的体魄，没有强健的体魄很难练出绝世的武功。\n\n除了硬件，`网络`也是一个很关键的因素，如果主播上行网络`带宽低`、`不稳定`那么用户端看到的画面质量肯定是非常糟糕的。\n\n其中带宽低我们可以采用`低分辨率`、`低码率`或高性能的编码如`h265`、`AAC`等手段降低流的码率。\n\n网络不稳定是一个比较头疼因素，因为你不知道什么时候网络会突然抖一下，或者用户是户外直播，那么移动网络的稳定性肯定是得不到保证的。大家知道推流的常用协议 `RTMP` 是基于 `TCP` 的，TCP 提供了面向连接的可靠的字节流服务。同时 TCP 又是一个老好人，不仅会帮你校验数据有没有无差错、不重复和不丢失的传输到对方，还会帮你做流量控制和拥塞控制（可参考[https://blog.csdn.net/dangzhangjing97/article/details/81008836](https://blog.csdn.net/dangzhangjing97/article/details/81008836)）。这就导致在一条数据链路上 TCP 的传输可能会抢不过基于 `UDP` 服务的传输协议。\n所以面对不稳定的网络，我们可以采用基于 UDP 且相对比较极端自私的协议，如`SRT`、`QUIC`等。这里不展开讲，感兴趣的可以去了解和学习下这两种协议。\n\n总结下推流端的优化手段：\n1. 提高推流硬件设备规格参数。\n2. 保证推流码率小于网络上行带宽。\n3. 针对不稳定网络，可以采用 SRT、QUIC 等协议进行优化。\n\n# “CDN”\n\n作为中间商的 CDN，在整个直播链路中也是扮演者非常重要的角色，往往直播的成本大头都在 CDN 带宽上。市面上一个比较靠前的直播平台，在 CDN 成本上每年的花费是超过 1 亿的。扯远了，扯远了。言归正传，CDN 与推流端连接，用于接收主播推上来的流数据，上一节讲了，推流协议可以采用 RTMP，也可以采用 SRT 或 QUIC，那么 CDN 就必须提供同样协议的推流地址，否则推流端一厢情愿使用 SRT 也是不可行的。\n\nCDN 除了要提供多样的推流协议外，另一个比较重要的因素就是边缘节点的覆盖，一般 CDN 在中国的各大城市都有分布，分布的越多，其节点对应推流端的数据链路就越通畅。很多 CDN 厂商都会配置多级边缘节点，其目的就是保证数据能更顺畅的到达流程图中的`源站`。\n\n在 CDN 保证数据链路通畅的情况下，还有哪些事可以做呢？\n\n可以看下直播流程图中的源站，他的职责中有一项是`转码`。那为什么要转码呢？主播推上来的流就不能直接给下游去用吗？当然可以不转码，直接给下游消费。但想象下，如果一个主播硬件配置极高，上行网络极好，他推了一个 20M 的流上来，源站不处理直接给观众看的话会发生什么？20M 的流用户需要稳定播放的话，需要其网速可以稳定满足 2.5M/s，这个对于目前很多用户来说是不太现实的。\n\n所以源站这里需要对源流进行转码，将高码率的流转为更低码率的流，如`蓝光（8M）`、`高清（4M）`、`清晰（1.5M）`等。这样用户可以针对自己的网络有更多的选择。\n\n另外源站在转码的时候还能根据流内容做合理的编码控制：CBR 和 VBR。\n\n总结下 CDN 在优化播放体验上可以做哪些事：\n1. 提供完善的推流协议 RTMP、SRT 和 QUIC 等。\n2. 提高 CDN 节点覆盖量。\n3. 通过转码提供多码率的流供用户选择。\n4. 采用合理的编码控制：CBR 和 VBR。\n\n\n# “拉流端”\n\n拉流端作为整个直播链路的末端消费侧，对流质量的好坏是最直观的。从流程图上可以看到拉流端做的事情是推流端的逆向，那么对推流端适用的优化手段对拉流端也是适用的。\n\n1. 提高拉流硬件设备规格参数。\n2. 保证拉流码率小于网络上行带宽。\n3. 保证拉流网络的稳定性。\n\n其中 1 提高硬件规格参数是为了提高软硬解性能效率。2 可以适用较低适用于自己网络的清晰度观看直播。3 则是保证自己网络的稳定性。\n满足以上三点大概率用户侧的流畅观看就能得到保证了。\n\n\n# “进阶”\n\n## 延迟\n\n作为直播，其`实时性`也是非常重要的，不能说用户观看很流畅，但用户与主播端有几十秒的延迟，那是完全无法接受的。那如何才能做到用户和主播间的延迟尽量缩小呢？引起延迟主要的原因在哪里？下面列举下产生网络延迟的几个原因：\n1. 数据链路延迟\n数据从主播端传递到观看端，中间是会经过很多个网络节点的。假设我们所在位置的地球的另一侧有一位主播开始推流，一路都是光纤传输，那么不考虑 CDN 节点内部转发或转码好时的话，我们 2s（TCP 的三次握手导致） 后就能看到画面。但实际情况下，主播离我们及时很近，在数据链路传播上我们可优化空间很少。\n\n2. 网络抖动\n这里的抖动是指 `ip 数据包`到达的顺序、间隔和出发时不一样，这就导致了接收端需要等待完整数据重组，就不可避免造成了延迟。\n\n3. 网络丢包\n和网络抖动类似，基于 TCP 的推流协议，虽然可靠性得到了保证，到这可靠性是靠牺牲时间保证的，TCP `的三次握手`，相当于 1.5 个 `RTT`。另外 TCP 的自动重传机制在丢包的情况下回不断重发，这种高容错的机制也导致了一定的网络耗时。\n\n4. CDN 缓冲策略\n播放器在向 CDN 拉取数据时，CDN 并不会把最新的数据吐给播放器，而是会选择将缓冲区中的数据给到播放器（这么做是为了减少网络抖动引起客户端的卡顿），此时，缓冲区中有多少数据，那么就有多少的延迟增加了。\n\n5. 播放器缓冲\n播放器在拉到 CDN 数据时，也不是会立马就播放（为了减少网络抖动带来的卡顿），那么此时播放器的缓冲也增加了延迟。\n\n综合上诉，\n`直播延迟 = RTT * 1.5 + CDN 缓冲 + 播放器起播缓冲`\n\n各家直播平台都有自己针对延迟的优化措施，这里不一一列举。\n\n## 首帧\n首帧即用户点击直播间，到看到直播首帧画面的耗时，这个时间也是用于衡量用户体验的一个重要指标。目前市面上优秀的直播平台，首帧时间已经优化到一秒内，做到了真正的秒开。\n\n首帧耗时长也是有许多原因在里面：`主线程阻塞`，其他业务`抢占播放器资源`，`频流码率高`，`播放器起播缓存`，`流格式探测`等。\n\n首帧优化当然就是针对上面这些问题的优化，具体不细说，各家有各家自己的策略，一切还是要放到实际业务场景考虑。\n\n## 卡顿\n卡顿即缓冲，这是最最影响用户体验的点。造成卡顿的原因也是多种多样，整个直播链路中任何一个点出现问题都有可能造成卡顿，卡顿也是比较难优化的一个直播指标。\n这里笔者主要给出几个优化卡顿的建议：\n1. 推流端合理选择推流码率\n2. 推流端合理选择推流协议\n3. CDN 提供多路清晰度供用户选择\n4. 拉流端应选择码率合适的流去播\n\n## 音画不同步\n音画不同步即听到的声音与画面不一致，导致音画不同步的原因也有很多：\n1. 音频源于采集设备距离较远\n2. 音视频 pts 非单调递增\n3. 播放器性能问题（音频帧解码快于视频帧解码）\n\n\n# 总结\n差不多就是这么多了，过多的实现细节不赘述，感兴趣的同学可以自行学习或找我交流。","source":"_posts/living-optimize.md","raw":"---\ntitle: 聊聊直播移动端播放体验优化\ndate: 2020-07-13 21:10:12\ntags: 直播技术\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/ce34b1843142b188ac6930f5dc5e7289.jpg\nsticky: 1\ntop: 10\n---\n\n# “直播”\n\n2020年的一场疫情将直播行业及音视频技术带到了大家的视野中，原本只在娱乐行业被人熟知的直播，在数月中就充斥了人们的整个日常生活。`直播卖货`、`远程会议系统`、`直播教育`原本小众的场景被强行拉上舞台，接受本不该承受的QPS。\n\n部分数据可参考下图：\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/100012a173b932cbb31596c11bbb41e6066cc911bf2be7099082800f3657bfa139015.jpg)\n\n如果你是一名开发者，你有没有想过，从主播开始推流到用户看到画面，这里面都发生了些什么？一次次的卡顿缓冲时怎么引起的？观众看到的画面和主播实时画面差了几秒，最短能缩减到多少？不同观众看到的画面是否一致？\n\n为了大家可以直观理解本文剩余部分，这里笔者先把直播整体的流程图放出来。\n\n![直播整体流程](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/%E7%9B%B4%E6%92%AD%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.png)\n\n上图只是将主要的流程列出来，真正的流程比这个当然要更复杂。\n\n本文的主题是`直播移动端播放体验优化`，结合上图，笔者会从`推流端`、`cdn`和`拉流端`给大家介绍如何在这三个环节进行播放体验优化。\n\n本文会尽量写的通俗易懂，不会涉及到具体代码实现，即使你不是直播行业的开发者，读完这篇文章，也能对直播优化有个比较全面的了解。\n<!-- more -->\n# “推流端”\n推流端是离我们观众最远的节点，也是整个直播内容的生产源头。我们熟知的推流工具有 OBS、B 站直播姬和各个直播平台的手机推流 app。另外针对一些复杂场景的话，有更专业的导播台硬件。虽然工具众多，但推流端的整个工作流程还是比较固定的：\n1. 摄像头采集\n2. 麦克风采集\n3. 视频编码\n4. 音频编码\n5. 音视频封装合流\n6. 推流\n\n那么回到文章主题，在推流端我们可以做哪些针对用户播放体验的优化呢？用户体验的话无非三块`画面首帧`、`卡顿率`和`延迟`。\n\n那么想想推流端的哪些行为会导致上面的这些问题？\n\n想象下，如果主播拿了一部四年前的低端手机一边玩和平精英一边直播会怎样？是不是手机本身就已经卡得不得了了？那这里就得出了第一个优化点`硬件`\n\n> 硬件的规格参数是会直接影响推流质量，把推流比作一个武林高手的话，硬件就是这位武林高手强健的体魄，没有强健的体魄很难练出绝世的武功。\n\n除了硬件，`网络`也是一个很关键的因素，如果主播上行网络`带宽低`、`不稳定`那么用户端看到的画面质量肯定是非常糟糕的。\n\n其中带宽低我们可以采用`低分辨率`、`低码率`或高性能的编码如`h265`、`AAC`等手段降低流的码率。\n\n网络不稳定是一个比较头疼因素，因为你不知道什么时候网络会突然抖一下，或者用户是户外直播，那么移动网络的稳定性肯定是得不到保证的。大家知道推流的常用协议 `RTMP` 是基于 `TCP` 的，TCP 提供了面向连接的可靠的字节流服务。同时 TCP 又是一个老好人，不仅会帮你校验数据有没有无差错、不重复和不丢失的传输到对方，还会帮你做流量控制和拥塞控制（可参考[https://blog.csdn.net/dangzhangjing97/article/details/81008836](https://blog.csdn.net/dangzhangjing97/article/details/81008836)）。这就导致在一条数据链路上 TCP 的传输可能会抢不过基于 `UDP` 服务的传输协议。\n所以面对不稳定的网络，我们可以采用基于 UDP 且相对比较极端自私的协议，如`SRT`、`QUIC`等。这里不展开讲，感兴趣的可以去了解和学习下这两种协议。\n\n总结下推流端的优化手段：\n1. 提高推流硬件设备规格参数。\n2. 保证推流码率小于网络上行带宽。\n3. 针对不稳定网络，可以采用 SRT、QUIC 等协议进行优化。\n\n# “CDN”\n\n作为中间商的 CDN，在整个直播链路中也是扮演者非常重要的角色，往往直播的成本大头都在 CDN 带宽上。市面上一个比较靠前的直播平台，在 CDN 成本上每年的花费是超过 1 亿的。扯远了，扯远了。言归正传，CDN 与推流端连接，用于接收主播推上来的流数据，上一节讲了，推流协议可以采用 RTMP，也可以采用 SRT 或 QUIC，那么 CDN 就必须提供同样协议的推流地址，否则推流端一厢情愿使用 SRT 也是不可行的。\n\nCDN 除了要提供多样的推流协议外，另一个比较重要的因素就是边缘节点的覆盖，一般 CDN 在中国的各大城市都有分布，分布的越多，其节点对应推流端的数据链路就越通畅。很多 CDN 厂商都会配置多级边缘节点，其目的就是保证数据能更顺畅的到达流程图中的`源站`。\n\n在 CDN 保证数据链路通畅的情况下，还有哪些事可以做呢？\n\n可以看下直播流程图中的源站，他的职责中有一项是`转码`。那为什么要转码呢？主播推上来的流就不能直接给下游去用吗？当然可以不转码，直接给下游消费。但想象下，如果一个主播硬件配置极高，上行网络极好，他推了一个 20M 的流上来，源站不处理直接给观众看的话会发生什么？20M 的流用户需要稳定播放的话，需要其网速可以稳定满足 2.5M/s，这个对于目前很多用户来说是不太现实的。\n\n所以源站这里需要对源流进行转码，将高码率的流转为更低码率的流，如`蓝光（8M）`、`高清（4M）`、`清晰（1.5M）`等。这样用户可以针对自己的网络有更多的选择。\n\n另外源站在转码的时候还能根据流内容做合理的编码控制：CBR 和 VBR。\n\n总结下 CDN 在优化播放体验上可以做哪些事：\n1. 提供完善的推流协议 RTMP、SRT 和 QUIC 等。\n2. 提高 CDN 节点覆盖量。\n3. 通过转码提供多码率的流供用户选择。\n4. 采用合理的编码控制：CBR 和 VBR。\n\n\n# “拉流端”\n\n拉流端作为整个直播链路的末端消费侧，对流质量的好坏是最直观的。从流程图上可以看到拉流端做的事情是推流端的逆向，那么对推流端适用的优化手段对拉流端也是适用的。\n\n1. 提高拉流硬件设备规格参数。\n2. 保证拉流码率小于网络上行带宽。\n3. 保证拉流网络的稳定性。\n\n其中 1 提高硬件规格参数是为了提高软硬解性能效率。2 可以适用较低适用于自己网络的清晰度观看直播。3 则是保证自己网络的稳定性。\n满足以上三点大概率用户侧的流畅观看就能得到保证了。\n\n\n# “进阶”\n\n## 延迟\n\n作为直播，其`实时性`也是非常重要的，不能说用户观看很流畅，但用户与主播端有几十秒的延迟，那是完全无法接受的。那如何才能做到用户和主播间的延迟尽量缩小呢？引起延迟主要的原因在哪里？下面列举下产生网络延迟的几个原因：\n1. 数据链路延迟\n数据从主播端传递到观看端，中间是会经过很多个网络节点的。假设我们所在位置的地球的另一侧有一位主播开始推流，一路都是光纤传输，那么不考虑 CDN 节点内部转发或转码好时的话，我们 2s（TCP 的三次握手导致） 后就能看到画面。但实际情况下，主播离我们及时很近，在数据链路传播上我们可优化空间很少。\n\n2. 网络抖动\n这里的抖动是指 `ip 数据包`到达的顺序、间隔和出发时不一样，这就导致了接收端需要等待完整数据重组，就不可避免造成了延迟。\n\n3. 网络丢包\n和网络抖动类似，基于 TCP 的推流协议，虽然可靠性得到了保证，到这可靠性是靠牺牲时间保证的，TCP `的三次握手`，相当于 1.5 个 `RTT`。另外 TCP 的自动重传机制在丢包的情况下回不断重发，这种高容错的机制也导致了一定的网络耗时。\n\n4. CDN 缓冲策略\n播放器在向 CDN 拉取数据时，CDN 并不会把最新的数据吐给播放器，而是会选择将缓冲区中的数据给到播放器（这么做是为了减少网络抖动引起客户端的卡顿），此时，缓冲区中有多少数据，那么就有多少的延迟增加了。\n\n5. 播放器缓冲\n播放器在拉到 CDN 数据时，也不是会立马就播放（为了减少网络抖动带来的卡顿），那么此时播放器的缓冲也增加了延迟。\n\n综合上诉，\n`直播延迟 = RTT * 1.5 + CDN 缓冲 + 播放器起播缓冲`\n\n各家直播平台都有自己针对延迟的优化措施，这里不一一列举。\n\n## 首帧\n首帧即用户点击直播间，到看到直播首帧画面的耗时，这个时间也是用于衡量用户体验的一个重要指标。目前市面上优秀的直播平台，首帧时间已经优化到一秒内，做到了真正的秒开。\n\n首帧耗时长也是有许多原因在里面：`主线程阻塞`，其他业务`抢占播放器资源`，`频流码率高`，`播放器起播缓存`，`流格式探测`等。\n\n首帧优化当然就是针对上面这些问题的优化，具体不细说，各家有各家自己的策略，一切还是要放到实际业务场景考虑。\n\n## 卡顿\n卡顿即缓冲，这是最最影响用户体验的点。造成卡顿的原因也是多种多样，整个直播链路中任何一个点出现问题都有可能造成卡顿，卡顿也是比较难优化的一个直播指标。\n这里笔者主要给出几个优化卡顿的建议：\n1. 推流端合理选择推流码率\n2. 推流端合理选择推流协议\n3. CDN 提供多路清晰度供用户选择\n4. 拉流端应选择码率合适的流去播\n\n## 音画不同步\n音画不同步即听到的声音与画面不一致，导致音画不同步的原因也有很多：\n1. 音频源于采集设备距离较远\n2. 音视频 pts 非单调递增\n3. 播放器性能问题（音频帧解码快于视频帧解码）\n\n\n# 总结\n差不多就是这么多了，过多的实现细节不赘述，感兴趣的同学可以自行学习或找我交流。","slug":"living-optimize","published":1,"updated":"2024-08-21T03:16:19.786Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vy002h5p6t1fbghn9x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"“直播”\"><a href=\"#“直播”\" class=\"headerlink\" title=\"“直播”\"></a>“直播”</h1><p>2020年的一场疫情将直播行业及音视频技术带到了大家的视野中，原本只在娱乐行业被人熟知的直播，在数月中就充斥了人们的整个日常生活。<code>直播卖货</code>、<code>远程会议系统</code>、<code>直播教育</code>原本小众的场景被强行拉上舞台，接受本不该承受的QPS。</p>\n<p>部分数据可参考下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/100012a173b932cbb31596c11bbb41e6066cc911bf2be7099082800f3657bfa139015.jpg\" alt=\"\"></p>\n<p>如果你是一名开发者，你有没有想过，从主播开始推流到用户看到画面，这里面都发生了些什么？一次次的卡顿缓冲时怎么引起的？观众看到的画面和主播实时画面差了几秒，最短能缩减到多少？不同观众看到的画面是否一致？</p>\n<p>为了大家可以直观理解本文剩余部分，这里笔者先把直播整体的流程图放出来。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/%E7%9B%B4%E6%92%AD%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.png\" alt=\"直播整体流程\"></p>\n<p>上图只是将主要的流程列出来，真正的流程比这个当然要更复杂。</p>\n<p>本文的主题是<code>直播移动端播放体验优化</code>，结合上图，笔者会从<code>推流端</code>、<code>cdn</code>和<code>拉流端</code>给大家介绍如何在这三个环节进行播放体验优化。</p>\n<p>本文会尽量写的通俗易懂，不会涉及到具体代码实现，即使你不是直播行业的开发者，读完这篇文章，也能对直播优化有个比较全面的了解。</p>\n<span id=\"more\"></span>\n<h1 id=\"“推流端”\"><a href=\"#“推流端”\" class=\"headerlink\" title=\"“推流端”\"></a>“推流端”</h1><p>推流端是离我们观众最远的节点，也是整个直播内容的生产源头。我们熟知的推流工具有 OBS、B 站直播姬和各个直播平台的手机推流 app。另外针对一些复杂场景的话，有更专业的导播台硬件。虽然工具众多，但推流端的整个工作流程还是比较固定的：</p>\n<ol>\n<li>摄像头采集</li>\n<li>麦克风采集</li>\n<li>视频编码</li>\n<li>音频编码</li>\n<li>音视频封装合流</li>\n<li>推流</li>\n</ol>\n<p>那么回到文章主题，在推流端我们可以做哪些针对用户播放体验的优化呢？用户体验的话无非三块<code>画面首帧</code>、<code>卡顿率</code>和<code>延迟</code>。</p>\n<p>那么想想推流端的哪些行为会导致上面的这些问题？</p>\n<p>想象下，如果主播拿了一部四年前的低端手机一边玩和平精英一边直播会怎样？是不是手机本身就已经卡得不得了了？那这里就得出了第一个优化点<code>硬件</code></p>\n<blockquote>\n<p>硬件的规格参数是会直接影响推流质量，把推流比作一个武林高手的话，硬件就是这位武林高手强健的体魄，没有强健的体魄很难练出绝世的武功。</p>\n</blockquote>\n<p>除了硬件，<code>网络</code>也是一个很关键的因素，如果主播上行网络<code>带宽低</code>、<code>不稳定</code>那么用户端看到的画面质量肯定是非常糟糕的。</p>\n<p>其中带宽低我们可以采用<code>低分辨率</code>、<code>低码率</code>或高性能的编码如<code>h265</code>、<code>AAC</code>等手段降低流的码率。</p>\n<p>网络不稳定是一个比较头疼因素，因为你不知道什么时候网络会突然抖一下，或者用户是户外直播，那么移动网络的稳定性肯定是得不到保证的。大家知道推流的常用协议 <code>RTMP</code> 是基于 <code>TCP</code> 的，TCP 提供了面向连接的可靠的字节流服务。同时 TCP 又是一个老好人，不仅会帮你校验数据有没有无差错、不重复和不丢失的传输到对方，还会帮你做流量控制和拥塞控制（可参考<a href=\"https://blog.csdn.net/dangzhangjing97/article/details/81008836\">https://blog.csdn.net/dangzhangjing97/article/details/81008836</a>）。这就导致在一条数据链路上 TCP 的传输可能会抢不过基于 <code>UDP</code> 服务的传输协议。<br>所以面对不稳定的网络，我们可以采用基于 UDP 且相对比较极端自私的协议，如<code>SRT</code>、<code>QUIC</code>等。这里不展开讲，感兴趣的可以去了解和学习下这两种协议。</p>\n<p>总结下推流端的优化手段：</p>\n<ol>\n<li>提高推流硬件设备规格参数。</li>\n<li>保证推流码率小于网络上行带宽。</li>\n<li>针对不稳定网络，可以采用 SRT、QUIC 等协议进行优化。</li>\n</ol>\n<h1 id=\"“CDN”\"><a href=\"#“CDN”\" class=\"headerlink\" title=\"“CDN”\"></a>“CDN”</h1><p>作为中间商的 CDN，在整个直播链路中也是扮演者非常重要的角色，往往直播的成本大头都在 CDN 带宽上。市面上一个比较靠前的直播平台，在 CDN 成本上每年的花费是超过 1 亿的。扯远了，扯远了。言归正传，CDN 与推流端连接，用于接收主播推上来的流数据，上一节讲了，推流协议可以采用 RTMP，也可以采用 SRT 或 QUIC，那么 CDN 就必须提供同样协议的推流地址，否则推流端一厢情愿使用 SRT 也是不可行的。</p>\n<p>CDN 除了要提供多样的推流协议外，另一个比较重要的因素就是边缘节点的覆盖，一般 CDN 在中国的各大城市都有分布，分布的越多，其节点对应推流端的数据链路就越通畅。很多 CDN 厂商都会配置多级边缘节点，其目的就是保证数据能更顺畅的到达流程图中的<code>源站</code>。</p>\n<p>在 CDN 保证数据链路通畅的情况下，还有哪些事可以做呢？</p>\n<p>可以看下直播流程图中的源站，他的职责中有一项是<code>转码</code>。那为什么要转码呢？主播推上来的流就不能直接给下游去用吗？当然可以不转码，直接给下游消费。但想象下，如果一个主播硬件配置极高，上行网络极好，他推了一个 20M 的流上来，源站不处理直接给观众看的话会发生什么？20M 的流用户需要稳定播放的话，需要其网速可以稳定满足 2.5M/s，这个对于目前很多用户来说是不太现实的。</p>\n<p>所以源站这里需要对源流进行转码，将高码率的流转为更低码率的流，如<code>蓝光（8M）</code>、<code>高清（4M）</code>、<code>清晰（1.5M）</code>等。这样用户可以针对自己的网络有更多的选择。</p>\n<p>另外源站在转码的时候还能根据流内容做合理的编码控制：CBR 和 VBR。</p>\n<p>总结下 CDN 在优化播放体验上可以做哪些事：</p>\n<ol>\n<li>提供完善的推流协议 RTMP、SRT 和 QUIC 等。</li>\n<li>提高 CDN 节点覆盖量。</li>\n<li>通过转码提供多码率的流供用户选择。</li>\n<li>采用合理的编码控制：CBR 和 VBR。</li>\n</ol>\n<h1 id=\"“拉流端”\"><a href=\"#“拉流端”\" class=\"headerlink\" title=\"“拉流端”\"></a>“拉流端”</h1><p>拉流端作为整个直播链路的末端消费侧，对流质量的好坏是最直观的。从流程图上可以看到拉流端做的事情是推流端的逆向，那么对推流端适用的优化手段对拉流端也是适用的。</p>\n<ol>\n<li>提高拉流硬件设备规格参数。</li>\n<li>保证拉流码率小于网络上行带宽。</li>\n<li>保证拉流网络的稳定性。</li>\n</ol>\n<p>其中 1 提高硬件规格参数是为了提高软硬解性能效率。2 可以适用较低适用于自己网络的清晰度观看直播。3 则是保证自己网络的稳定性。<br>满足以上三点大概率用户侧的流畅观看就能得到保证了。</p>\n<h1 id=\"“进阶”\"><a href=\"#“进阶”\" class=\"headerlink\" title=\"“进阶”\"></a>“进阶”</h1><h2 id=\"延迟\"><a href=\"#延迟\" class=\"headerlink\" title=\"延迟\"></a>延迟</h2><p>作为直播，其<code>实时性</code>也是非常重要的，不能说用户观看很流畅，但用户与主播端有几十秒的延迟，那是完全无法接受的。那如何才能做到用户和主播间的延迟尽量缩小呢？引起延迟主要的原因在哪里？下面列举下产生网络延迟的几个原因：</p>\n<ol>\n<li><p>数据链路延迟<br>数据从主播端传递到观看端，中间是会经过很多个网络节点的。假设我们所在位置的地球的另一侧有一位主播开始推流，一路都是光纤传输，那么不考虑 CDN 节点内部转发或转码好时的话，我们 2s（TCP 的三次握手导致） 后就能看到画面。但实际情况下，主播离我们及时很近，在数据链路传播上我们可优化空间很少。</p>\n</li>\n<li><p>网络抖动<br>这里的抖动是指 <code>ip 数据包</code>到达的顺序、间隔和出发时不一样，这就导致了接收端需要等待完整数据重组，就不可避免造成了延迟。</p>\n</li>\n<li><p>网络丢包<br>和网络抖动类似，基于 TCP 的推流协议，虽然可靠性得到了保证，到这可靠性是靠牺牲时间保证的，TCP <code>的三次握手</code>，相当于 1.5 个 <code>RTT</code>。另外 TCP 的自动重传机制在丢包的情况下回不断重发，这种高容错的机制也导致了一定的网络耗时。</p>\n</li>\n<li><p>CDN 缓冲策略<br>播放器在向 CDN 拉取数据时，CDN 并不会把最新的数据吐给播放器，而是会选择将缓冲区中的数据给到播放器（这么做是为了减少网络抖动引起客户端的卡顿），此时，缓冲区中有多少数据，那么就有多少的延迟增加了。</p>\n</li>\n<li><p>播放器缓冲<br>播放器在拉到 CDN 数据时，也不是会立马就播放（为了减少网络抖动带来的卡顿），那么此时播放器的缓冲也增加了延迟。</p>\n</li>\n</ol>\n<p>综合上诉，<br><code>直播延迟 = RTT * 1.5 + CDN 缓冲 + 播放器起播缓冲</code></p>\n<p>各家直播平台都有自己针对延迟的优化措施，这里不一一列举。</p>\n<h2 id=\"首帧\"><a href=\"#首帧\" class=\"headerlink\" title=\"首帧\"></a>首帧</h2><p>首帧即用户点击直播间，到看到直播首帧画面的耗时，这个时间也是用于衡量用户体验的一个重要指标。目前市面上优秀的直播平台，首帧时间已经优化到一秒内，做到了真正的秒开。</p>\n<p>首帧耗时长也是有许多原因在里面：<code>主线程阻塞</code>，其他业务<code>抢占播放器资源</code>，<code>频流码率高</code>，<code>播放器起播缓存</code>，<code>流格式探测</code>等。</p>\n<p>首帧优化当然就是针对上面这些问题的优化，具体不细说，各家有各家自己的策略，一切还是要放到实际业务场景考虑。</p>\n<h2 id=\"卡顿\"><a href=\"#卡顿\" class=\"headerlink\" title=\"卡顿\"></a>卡顿</h2><p>卡顿即缓冲，这是最最影响用户体验的点。造成卡顿的原因也是多种多样，整个直播链路中任何一个点出现问题都有可能造成卡顿，卡顿也是比较难优化的一个直播指标。<br>这里笔者主要给出几个优化卡顿的建议：</p>\n<ol>\n<li>推流端合理选择推流码率</li>\n<li>推流端合理选择推流协议</li>\n<li>CDN 提供多路清晰度供用户选择</li>\n<li>拉流端应选择码率合适的流去播</li>\n</ol>\n<h2 id=\"音画不同步\"><a href=\"#音画不同步\" class=\"headerlink\" title=\"音画不同步\"></a>音画不同步</h2><p>音画不同步即听到的声音与画面不一致，导致音画不同步的原因也有很多：</p>\n<ol>\n<li>音频源于采集设备距离较远</li>\n<li>音视频 pts 非单调递增</li>\n<li>播放器性能问题（音频帧解码快于视频帧解码）</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>差不多就是这么多了，过多的实现细节不赘述，感兴趣的同学可以自行学习或找我交流。</p>\n","excerpt":"<h1 id=\"“直播”\"><a href=\"#“直播”\" class=\"headerlink\" title=\"“直播”\"></a>“直播”</h1><p>2020年的一场疫情将直播行业及音视频技术带到了大家的视野中，原本只在娱乐行业被人熟知的直播，在数月中就充斥了人们的整个日常生活。<code>直播卖货</code>、<code>远程会议系统</code>、<code>直播教育</code>原本小众的场景被强行拉上舞台，接受本不该承受的QPS。</p>\n<p>部分数据可参考下图：</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/100012a173b932cbb31596c11bbb41e6066cc911bf2be7099082800f3657bfa139015.jpg\" alt=\"\"></p>\n<p>如果你是一名开发者，你有没有想过，从主播开始推流到用户看到画面，这里面都发生了些什么？一次次的卡顿缓冲时怎么引起的？观众看到的画面和主播实时画面差了几秒，最短能缩减到多少？不同观众看到的画面是否一致？</p>\n<p>为了大家可以直观理解本文剩余部分，这里笔者先把直播整体的流程图放出来。</p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/%E7%9B%B4%E6%92%AD%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B.png\" alt=\"直播整体流程\"></p>\n<p>上图只是将主要的流程列出来，真正的流程比这个当然要更复杂。</p>\n<p>本文的主题是<code>直播移动端播放体验优化</code>，结合上图，笔者会从<code>推流端</code>、<code>cdn</code>和<code>拉流端</code>给大家介绍如何在这三个环节进行播放体验优化。</p>\n<p>本文会尽量写的通俗易懂，不会涉及到具体代码实现，即使你不是直播行业的开发者，读完这篇文章，也能对直播优化有个比较全面的了解。</p>","more":"<h1 id=\"“推流端”\"><a href=\"#“推流端”\" class=\"headerlink\" title=\"“推流端”\"></a>“推流端”</h1><p>推流端是离我们观众最远的节点，也是整个直播内容的生产源头。我们熟知的推流工具有 OBS、B 站直播姬和各个直播平台的手机推流 app。另外针对一些复杂场景的话，有更专业的导播台硬件。虽然工具众多，但推流端的整个工作流程还是比较固定的：</p>\n<ol>\n<li>摄像头采集</li>\n<li>麦克风采集</li>\n<li>视频编码</li>\n<li>音频编码</li>\n<li>音视频封装合流</li>\n<li>推流</li>\n</ol>\n<p>那么回到文章主题，在推流端我们可以做哪些针对用户播放体验的优化呢？用户体验的话无非三块<code>画面首帧</code>、<code>卡顿率</code>和<code>延迟</code>。</p>\n<p>那么想想推流端的哪些行为会导致上面的这些问题？</p>\n<p>想象下，如果主播拿了一部四年前的低端手机一边玩和平精英一边直播会怎样？是不是手机本身就已经卡得不得了了？那这里就得出了第一个优化点<code>硬件</code></p>\n<blockquote>\n<p>硬件的规格参数是会直接影响推流质量，把推流比作一个武林高手的话，硬件就是这位武林高手强健的体魄，没有强健的体魄很难练出绝世的武功。</p>\n</blockquote>\n<p>除了硬件，<code>网络</code>也是一个很关键的因素，如果主播上行网络<code>带宽低</code>、<code>不稳定</code>那么用户端看到的画面质量肯定是非常糟糕的。</p>\n<p>其中带宽低我们可以采用<code>低分辨率</code>、<code>低码率</code>或高性能的编码如<code>h265</code>、<code>AAC</code>等手段降低流的码率。</p>\n<p>网络不稳定是一个比较头疼因素，因为你不知道什么时候网络会突然抖一下，或者用户是户外直播，那么移动网络的稳定性肯定是得不到保证的。大家知道推流的常用协议 <code>RTMP</code> 是基于 <code>TCP</code> 的，TCP 提供了面向连接的可靠的字节流服务。同时 TCP 又是一个老好人，不仅会帮你校验数据有没有无差错、不重复和不丢失的传输到对方，还会帮你做流量控制和拥塞控制（可参考<a href=\"https://blog.csdn.net/dangzhangjing97/article/details/81008836\">https://blog.csdn.net/dangzhangjing97/article/details/81008836</a>）。这就导致在一条数据链路上 TCP 的传输可能会抢不过基于 <code>UDP</code> 服务的传输协议。<br>所以面对不稳定的网络，我们可以采用基于 UDP 且相对比较极端自私的协议，如<code>SRT</code>、<code>QUIC</code>等。这里不展开讲，感兴趣的可以去了解和学习下这两种协议。</p>\n<p>总结下推流端的优化手段：</p>\n<ol>\n<li>提高推流硬件设备规格参数。</li>\n<li>保证推流码率小于网络上行带宽。</li>\n<li>针对不稳定网络，可以采用 SRT、QUIC 等协议进行优化。</li>\n</ol>\n<h1 id=\"“CDN”\"><a href=\"#“CDN”\" class=\"headerlink\" title=\"“CDN”\"></a>“CDN”</h1><p>作为中间商的 CDN，在整个直播链路中也是扮演者非常重要的角色，往往直播的成本大头都在 CDN 带宽上。市面上一个比较靠前的直播平台，在 CDN 成本上每年的花费是超过 1 亿的。扯远了，扯远了。言归正传，CDN 与推流端连接，用于接收主播推上来的流数据，上一节讲了，推流协议可以采用 RTMP，也可以采用 SRT 或 QUIC，那么 CDN 就必须提供同样协议的推流地址，否则推流端一厢情愿使用 SRT 也是不可行的。</p>\n<p>CDN 除了要提供多样的推流协议外，另一个比较重要的因素就是边缘节点的覆盖，一般 CDN 在中国的各大城市都有分布，分布的越多，其节点对应推流端的数据链路就越通畅。很多 CDN 厂商都会配置多级边缘节点，其目的就是保证数据能更顺畅的到达流程图中的<code>源站</code>。</p>\n<p>在 CDN 保证数据链路通畅的情况下，还有哪些事可以做呢？</p>\n<p>可以看下直播流程图中的源站，他的职责中有一项是<code>转码</code>。那为什么要转码呢？主播推上来的流就不能直接给下游去用吗？当然可以不转码，直接给下游消费。但想象下，如果一个主播硬件配置极高，上行网络极好，他推了一个 20M 的流上来，源站不处理直接给观众看的话会发生什么？20M 的流用户需要稳定播放的话，需要其网速可以稳定满足 2.5M/s，这个对于目前很多用户来说是不太现实的。</p>\n<p>所以源站这里需要对源流进行转码，将高码率的流转为更低码率的流，如<code>蓝光（8M）</code>、<code>高清（4M）</code>、<code>清晰（1.5M）</code>等。这样用户可以针对自己的网络有更多的选择。</p>\n<p>另外源站在转码的时候还能根据流内容做合理的编码控制：CBR 和 VBR。</p>\n<p>总结下 CDN 在优化播放体验上可以做哪些事：</p>\n<ol>\n<li>提供完善的推流协议 RTMP、SRT 和 QUIC 等。</li>\n<li>提高 CDN 节点覆盖量。</li>\n<li>通过转码提供多码率的流供用户选择。</li>\n<li>采用合理的编码控制：CBR 和 VBR。</li>\n</ol>\n<h1 id=\"“拉流端”\"><a href=\"#“拉流端”\" class=\"headerlink\" title=\"“拉流端”\"></a>“拉流端”</h1><p>拉流端作为整个直播链路的末端消费侧，对流质量的好坏是最直观的。从流程图上可以看到拉流端做的事情是推流端的逆向，那么对推流端适用的优化手段对拉流端也是适用的。</p>\n<ol>\n<li>提高拉流硬件设备规格参数。</li>\n<li>保证拉流码率小于网络上行带宽。</li>\n<li>保证拉流网络的稳定性。</li>\n</ol>\n<p>其中 1 提高硬件规格参数是为了提高软硬解性能效率。2 可以适用较低适用于自己网络的清晰度观看直播。3 则是保证自己网络的稳定性。<br>满足以上三点大概率用户侧的流畅观看就能得到保证了。</p>\n<h1 id=\"“进阶”\"><a href=\"#“进阶”\" class=\"headerlink\" title=\"“进阶”\"></a>“进阶”</h1><h2 id=\"延迟\"><a href=\"#延迟\" class=\"headerlink\" title=\"延迟\"></a>延迟</h2><p>作为直播，其<code>实时性</code>也是非常重要的，不能说用户观看很流畅，但用户与主播端有几十秒的延迟，那是完全无法接受的。那如何才能做到用户和主播间的延迟尽量缩小呢？引起延迟主要的原因在哪里？下面列举下产生网络延迟的几个原因：</p>\n<ol>\n<li><p>数据链路延迟<br>数据从主播端传递到观看端，中间是会经过很多个网络节点的。假设我们所在位置的地球的另一侧有一位主播开始推流，一路都是光纤传输，那么不考虑 CDN 节点内部转发或转码好时的话，我们 2s（TCP 的三次握手导致） 后就能看到画面。但实际情况下，主播离我们及时很近，在数据链路传播上我们可优化空间很少。</p>\n</li>\n<li><p>网络抖动<br>这里的抖动是指 <code>ip 数据包</code>到达的顺序、间隔和出发时不一样，这就导致了接收端需要等待完整数据重组，就不可避免造成了延迟。</p>\n</li>\n<li><p>网络丢包<br>和网络抖动类似，基于 TCP 的推流协议，虽然可靠性得到了保证，到这可靠性是靠牺牲时间保证的，TCP <code>的三次握手</code>，相当于 1.5 个 <code>RTT</code>。另外 TCP 的自动重传机制在丢包的情况下回不断重发，这种高容错的机制也导致了一定的网络耗时。</p>\n</li>\n<li><p>CDN 缓冲策略<br>播放器在向 CDN 拉取数据时，CDN 并不会把最新的数据吐给播放器，而是会选择将缓冲区中的数据给到播放器（这么做是为了减少网络抖动引起客户端的卡顿），此时，缓冲区中有多少数据，那么就有多少的延迟增加了。</p>\n</li>\n<li><p>播放器缓冲<br>播放器在拉到 CDN 数据时，也不是会立马就播放（为了减少网络抖动带来的卡顿），那么此时播放器的缓冲也增加了延迟。</p>\n</li>\n</ol>\n<p>综合上诉，<br><code>直播延迟 = RTT * 1.5 + CDN 缓冲 + 播放器起播缓冲</code></p>\n<p>各家直播平台都有自己针对延迟的优化措施，这里不一一列举。</p>\n<h2 id=\"首帧\"><a href=\"#首帧\" class=\"headerlink\" title=\"首帧\"></a>首帧</h2><p>首帧即用户点击直播间，到看到直播首帧画面的耗时，这个时间也是用于衡量用户体验的一个重要指标。目前市面上优秀的直播平台，首帧时间已经优化到一秒内，做到了真正的秒开。</p>\n<p>首帧耗时长也是有许多原因在里面：<code>主线程阻塞</code>，其他业务<code>抢占播放器资源</code>，<code>频流码率高</code>，<code>播放器起播缓存</code>，<code>流格式探测</code>等。</p>\n<p>首帧优化当然就是针对上面这些问题的优化，具体不细说，各家有各家自己的策略，一切还是要放到实际业务场景考虑。</p>\n<h2 id=\"卡顿\"><a href=\"#卡顿\" class=\"headerlink\" title=\"卡顿\"></a>卡顿</h2><p>卡顿即缓冲，这是最最影响用户体验的点。造成卡顿的原因也是多种多样，整个直播链路中任何一个点出现问题都有可能造成卡顿，卡顿也是比较难优化的一个直播指标。<br>这里笔者主要给出几个优化卡顿的建议：</p>\n<ol>\n<li>推流端合理选择推流码率</li>\n<li>推流端合理选择推流协议</li>\n<li>CDN 提供多路清晰度供用户选择</li>\n<li>拉流端应选择码率合适的流去播</li>\n</ol>\n<h2 id=\"音画不同步\"><a href=\"#音画不同步\" class=\"headerlink\" title=\"音画不同步\"></a>音画不同步</h2><p>音画不同步即听到的声音与画面不一致，导致音画不同步的原因也有很多：</p>\n<ol>\n<li>音频源于采集设备距离较远</li>\n<li>音视频 pts 非单调递增</li>\n<li>播放器性能问题（音频帧解码快于视频帧解码）</li>\n</ol>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>差不多就是这么多了，过多的实现细节不赘述，感兴趣的同学可以自行学习或找我交流。</p>"},{"title":"mac使用技巧","date":"2016-02-25T08:19:25.000Z","_content":"\n# 显示和隐藏隐藏文件\n```sh\ndefaults write com.apple.Finder AppleShowAllFiles YES && killall Finder\ndefaults write com.apple.Finder AppleShowAllFiles FALSE && killall Finder\n```\n<!-- more -->","source":"_posts/mac-practices.md","raw":"---\ntitle: mac使用技巧\ndate: 2016-02-25 16:19:25\n---\n\n# 显示和隐藏隐藏文件\n```sh\ndefaults write com.apple.Finder AppleShowAllFiles YES && killall Finder\ndefaults write com.apple.Finder AppleShowAllFiles FALSE && killall Finder\n```\n<!-- more -->","slug":"mac-practices","published":1,"updated":"2024-08-21T03:16:19.786Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vy002i5p6t6y6kc97x","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"显示和隐藏隐藏文件\"><a href=\"#显示和隐藏隐藏文件\" class=\"headerlink\" title=\"显示和隐藏隐藏文件\"></a>显示和隐藏隐藏文件</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles YES &amp;&amp; killall Finder</span><br><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles FALSE &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>\n<span id=\"more\"></span>","excerpt":"<h1 id=\"显示和隐藏隐藏文件\"><a href=\"#显示和隐藏隐藏文件\" class=\"headerlink\" title=\"显示和隐藏隐藏文件\"></a>显示和隐藏隐藏文件</h1><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles YES &amp;&amp; killall Finder</span><br><span class=\"line\">defaults write com.apple.Finder AppleShowAllFiles FALSE &amp;&amp; killall Finder</span><br></pre></td></tr></table></figure>","more":""},{"title":"TCP/IP 协议族图示","date":"2020-09-23T06:33:32.000Z","_content":"\n转载至：[http://www.52im.net/thread-180-1-1.html](http://www.52im.net/thread-180-1-1.html)\n\n![仅TCP-IP协议图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E4%BB%85TCP-IP%E5%8D%8F%E8%AE%AE%E5%9B%BE(A3%E7%BA%B8%E5%BC%A0%E8%A7%84%E6%A0%BC)_2020.png)\n![史上最全中文版网络通讯协议关系图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E4%B8%AD%E6%96%87%E7%89%88%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%E5%9B%BE(52im.net)-2.2MB.png)","source":"_posts/tcpip-overview.md","raw":"---\ntitle: TCP/IP 协议族图示\ndate: 2020-09-23 14:33:32\ntags: 网络编程\n---\n\n转载至：[http://www.52im.net/thread-180-1-1.html](http://www.52im.net/thread-180-1-1.html)\n\n![仅TCP-IP协议图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E4%BB%85TCP-IP%E5%8D%8F%E8%AE%AE%E5%9B%BE(A3%E7%BA%B8%E5%BC%A0%E8%A7%84%E6%A0%BC)_2020.png)\n![史上最全中文版网络通讯协议关系图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E4%B8%AD%E6%96%87%E7%89%88%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%E5%9B%BE(52im.net)-2.2MB.png)","slug":"tcpip-overview","published":1,"updated":"2024-08-21T03:16:19.786Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vz002k5p6t6ko27qst","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>转载至：<a href=\"http://www.52im.net/thread-180-1-1.html\">http://www.52im.net/thread-180-1-1.html</a></p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E4%BB%85TCP-IP%E5%8D%8F%E8%AE%AE%E5%9B%BE(A3%E7%BA%B8%E5%BC%A0%E8%A7%84%E6%A0%BC)_2020.png\" alt=\"仅TCP-IP协议图\"><br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E4%B8%AD%E6%96%87%E7%89%88%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%E5%9B%BE(52im.net)-2.2MB.png\" alt=\"史上最全中文版网络通讯协议关系图\"></p>\n","excerpt":"","more":"<p>转载至：<a href=\"http://www.52im.net/thread-180-1-1.html\">http://www.52im.net/thread-180-1-1.html</a></p>\n<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E4%BB%85TCP-IP%E5%8D%8F%E8%AE%AE%E5%9B%BE(A3%E7%BA%B8%E5%BC%A0%E8%A7%84%E6%A0%BC)_2020.png\" alt=\"仅TCP-IP协议图\"><br><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/tcpip/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E4%B8%AD%E6%96%87%E7%89%88%E7%BD%91%E7%BB%9C%E9%80%9A%E8%AE%AF%E5%8D%8F%E8%AE%AE%E5%85%B3%E7%B3%BB%E5%9B%BE(52im.net)-2.2MB.png\" alt=\"史上最全中文版网络通讯协议关系图\"></p>\n"},{"title":"两年前仿抖音app","date":"2020-09-12T13:51:41.000Z","cover":"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/fanqieshasithumb.jpeg","top":10,"_content":"\n![截图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/fanqieshasithumb.jpeg)\n\n上图是在 2018 年初写的，当时是想尝试下实现抖音这种无限上画的流畅播放体验。花了几个下午完成的。\n\n最近在整理 github 上的仓库，就又拿出来修复了下其中短视频的 cdn 数据连接，一下子又可以播了~\n\n> github:[https://github.com/ZhangQinglian/MockAweme](https://github.com/ZhangQinglian/MockAweme)\n> apk 下载地址:http://cdn.zqlxtt.cn/%E7%95%AA%E8%8C%84%E7%9F%AD%E8%A7%86%E9%A2%91.apk\n\n<iframe src=\"//player.bilibili.com/player.html?aid=712051644&bvid=BV1gD4y1o7M6&cid=234720558&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>\n\n\n","source":"_posts/tiktok-app.md","raw":"---\ntitle: 两年前仿抖音app\ndate: 2020-09-12 21:51:41\ntags: android\ncover: https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/fanqieshasithumb.jpeg\ntop: 10\n---\n\n![截图](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/fanqieshasithumb.jpeg)\n\n上图是在 2018 年初写的，当时是想尝试下实现抖音这种无限上画的流畅播放体验。花了几个下午完成的。\n\n最近在整理 github 上的仓库，就又拿出来修复了下其中短视频的 cdn 数据连接，一下子又可以播了~\n\n> github:[https://github.com/ZhangQinglian/MockAweme](https://github.com/ZhangQinglian/MockAweme)\n> apk 下载地址:http://cdn.zqlxtt.cn/%E7%95%AA%E8%8C%84%E7%9F%AD%E8%A7%86%E9%A2%91.apk\n\n<iframe src=\"//player.bilibili.com/player.html?aid=712051644&bvid=BV1gD4y1o7M6&cid=234720558&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>\n\n\n","slug":"tiktok-app","published":1,"updated":"2024-08-21T03:16:19.786Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vz002l5p6t84urbtp2","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/fanqieshasithumb.jpeg\" alt=\"截图\"></p>\n<p>上图是在 2018 年初写的，当时是想尝试下实现抖音这种无限上画的流畅播放体验。花了几个下午完成的。</p>\n<p>最近在整理 github 上的仓库，就又拿出来修复了下其中短视频的 cdn 数据连接，一下子又可以播了~</p>\n<blockquote>\n<p>github:<a href=\"https://github.com/ZhangQinglian/MockAweme\">https://github.com/ZhangQinglian/MockAweme</a><br>apk 下载地址:<a href=\"http://cdn.zqlxtt.cn/%E7%95%AA%E8%8C%84%E7%9F%AD%E8%A7%86%E9%A2%91.apk\">http://cdn.zqlxtt.cn/%E7%95%AA%E8%8C%84%E7%9F%AD%E8%A7%86%E9%A2%91.apk</a></p>\n</blockquote>\n<iframe src=\"//player.bilibili.com/player.html?aid=712051644&bvid=BV1gD4y1o7M6&cid=234720558&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>\n\n\n","excerpt":"","more":"<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/normal/fanqieshasithumb.jpeg\" alt=\"截图\"></p>\n<p>上图是在 2018 年初写的，当时是想尝试下实现抖音这种无限上画的流畅播放体验。花了几个下午完成的。</p>\n<p>最近在整理 github 上的仓库，就又拿出来修复了下其中短视频的 cdn 数据连接，一下子又可以播了~</p>\n<blockquote>\n<p>github:<a href=\"https://github.com/ZhangQinglian/MockAweme\">https://github.com/ZhangQinglian/MockAweme</a><br>apk 下载地址:<a href=\"http://cdn.zqlxtt.cn/%E7%95%AA%E8%8C%84%E7%9F%AD%E8%A7%86%E9%A2%91.apk\">http://cdn.zqlxtt.cn/%E7%95%AA%E8%8C%84%E7%9F%AD%E8%A7%86%E9%A2%91.apk</a></p>\n</blockquote>\n<iframe src=\"//player.bilibili.com/player.html?aid=712051644&bvid=BV1gD4y1o7M6&cid=234720558&page=1\" scrolling=\"no\" border=\"0\" frameborder=\"no\" framespacing=\"0\" allowfullscreen=\"true\" width=\"800\" height=\"600\"> </iframe>\n\n\n"},{"title":"Android Studio发布library到Jcenter","date":"2016-08-12T01:38:17.000Z","cover":"http://upload-images.jianshu.io/upload_images/2702499-b829cacc3324bdc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240","_content":"\n# 前言  \n各位码友不知道有没有发现，不知道从何时，Android Studio的Gradle构建系统就已经把Jcenter作为默认的远程仓库了，如下：  \n\n```gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.1.2'\n    }\n}\n```\n\n而这样做的好处就是我们只需要在dependencies脚本块中加入对应lib即可使用远程仓库，而不需要再像eclipse那样苦苦寻找jar包。\n<!-- more -->\n```gradle\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:23.+'\n}\n```\n\n你应该在github上也看到过要使用别人的开源库只需要往dependencies脚本块中添加一行代码即可：  \n\n![github](http://upload-images.jianshu.io/upload_images/2702499-42abe9c7fae76121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n想象一下，别人往他们的build.gradle中添加了一行代码就可以使用你的开源库了，这是一件多么令人兴奋的事情。那么接下来我们就把想象变为现实，学习一下怎么将自己的Android Studio Library提交到Jcenter供他人使用。\n\n-----\n\n# Bintray\n首先我们要了解一个叫做[bintray](https://bintray.com/)的网站，它和github类似也是用来管理文件的，只不过它管理的是二进制文件，Jcenter就是它众多仓库中的一员。\n\n首先需要注册成为这个网站的用户，接着进入profile界面：\n![profile](http://upload-images.jianshu.io/upload_images/2702499-8edca1463c8d4c4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击Edit\n\n\n![Edit](http://upload-images.jianshu.io/upload_images/2702499-0a52b0f26a391f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n选择API Key\n![API Key](http://upload-images.jianshu.io/upload_images/2702499-435ac7a15ac873a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里的API Key和你之前注册的用户名在后面会用到。\n\n-----\n# 配置\n接着我们新建一个叫做CommitToJcenter的Android工程，并且添加一个叫做jad的android library模块,这个jad就是我们后面要提交到Jcenter的模块。\n\n\n![project](http://upload-images.jianshu.io/upload_images/2702499-1b9486f540a998d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后在工程目录下local.properties中添加如下内容：\n\n```properties\nbintray.user=***\nbintray.apikey=***\n```\n上面的usert填你注册时候的用户名，apikey就是上面拿到的那个。\n\n接着在工程目录下的**build.gradle**中添加如下内容：\n\n```gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.1.2'\n\n        //添加一下两个classpath\n        // for jcenter\n        // version: https://bintray.com/jfrog/jfrog-jars/gradle-bintray-plugin\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'\n        // version: https://bintray.com/dcendents/gradle-plugins/com.github.dcendents%3Aandroid-maven-gradle-plugin\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'\n    }\n}\n\n...\n```\n\n接着进入**jad**目录，在**build.gradle**中添加如下内容：\n\n```gradle\n...\n\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\n\nversion = \"1.0\" //版本号，每次提交到Jcenter都要修改\ndef siteUrl = *** // project homepage\ndef gitUrl = ***  // project git\ngroup = \"com.zql.android\"\n\ninstall {\n    repositories.mavenInstaller {\n        // This generates POM.xml with proper parameters\n        pom {\n            project {\n                packaging 'aar'\n                name 'Just a demo for jcenter'\n                url siteUrl\n                licenses {\n                    license {\n                        name 'The Apache Software License, Version 2.0'\n                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n                developers {\n                    developer {\n                        id *** //Jcenter id\n                        name *** //Jcenter name\n                        email *** //e-mail\n                    }\n                }\n                scm {\n                    connection gitUrl\n                    developerConnection gitUrl\n                    url siteUrl\n                }\n            }\n        }\n    }\n}\n\n\ntask sourcesJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier = 'sources'\n}\n\n\ntask javadoc(type: Javadoc) {\n    source = android.sourceSets.main.java.srcDirs\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n}\n\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    classifier = 'javadoc'\n    from javadoc.destinationDir\n}\n\nartifacts {\n    archives javadocJar\n    archives sourcesJar\n}\n\nProperties properties = new Properties()\nproperties.load(project.rootProject.file('local.properties').newDataInputStream())\nbintray {\n    user = properties.getProperty(\"bintray.user\")\n    key = properties.getProperty(\"bintray.apikey\")\n    configurations = ['archives']\n    pkg {\n        repo = \"maven\"\n        name = \"jad\" // project name in jcenter\n        websiteUrl = siteUrl\n        vcsUrl = gitUrl\n        licenses = [\"Apache-2.0\"]\n        publish = true\n    }\n}\n```\n\n当做完以上几步后所有的配置工作就完成了，这时候选择sync一下你的工程，建议在翻墙的情况下sync，成功率会高一点。\n\n-----------\n\n# 提交\n接着在Gradle窗口找到如下几个task，并执行：\n- javadocJar\n- sourcesJar\n- install\n- bintrayUpload\n\n\n![gradle](http://upload-images.jianshu.io/upload_images/2702499-533046f6c436da02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![gradle](http://upload-images.jianshu.io/upload_images/2702499-31c2fe030fd96b4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n提交结束后我们再次打开[bintray](https://bintray.com/)，在profile的last activity中可以看到这样的信息：\n\n\n![last activity](http://upload-images.jianshu.io/upload_images/2702499-4fdebda66957ce39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击jad进入模块界面,点击add to Jcenter：\n\n\n![add to jcenter](http://upload-images.jianshu.io/upload_images/2702499-373dbbe4e6c717de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接着填写一些相关申请信息即可，记得得是英文。我目前的通过率是100%。\n\n![request](http://upload-images.jianshu.io/upload_images/2702499-13f6fdab4fb08960.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接着就是等待了，差不多一天时间就能得到答复。\n\n\n![response](http://upload-images.jianshu.io/upload_images/2702499-f9ffbca647f83632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nOK,进去了，这时候我们已经可以在其他项目中使用我们提交的模块了。\n\n-----\n\n# 使用\n\n上面我们新建了jad模块就直接提交了，并没有写代码，所以也不好在其他工程测试。接下来我们添加一个类JAD.java\n\n```java\npackage android.zql.com.jad;\n\nimport android.content.Context;\nimport android.widget.Toast;\n\n/**\n * Created by scott on 8/11/16.\n */\npublic final class JAD {\n\n    public static final void sayHello(Context context){\n        Toast.makeText(context,\"hello man\",Toast.LENGTH_LONG).show();\n    }\n}\n```\n很简单，使用Toast弹出Hello man这句话。\n由于第一次已经被允许加入Jcenter了，所以以后的提交都会默认加入Jcenter。接着我们修改一下这次我们需要提交的版本号为1.0.1：\n\n```gradle\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\nversion = \"1.0.1\"\n```\n然后执行以下四步：\n- javadocJar\n- sourcesJar\n- install\n- bintrayUpload\n\n执行完成后我们看下[bintray](https://bintray.com/)中的jad:\n\n我们刚提交的1.0.1已经出现在这里了，\n![1.0.0](http://upload-images.jianshu.io/upload_images/2702499-2b0ea00c02876595.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这边给出了jad在gradle中的使用方法，是不是很熟悉？\n![gradle usage](http://upload-images.jianshu.io/upload_images/2702499-94200416061d1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下面我们就在项目中使用jad吧，在项目的build.gradle中添加如下代码：\n```gradle\ndependencies {\n    ...\n    compile 'com.zql.android:jad:1.0.1'\n}\n```\n在Activity中使用：\n```java\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        JAD.sayHello(this);\n    }\n```\n运行结果如下：\n\n![运行结果](http://upload-images.jianshu.io/upload_images/2702499-cece63e6f12e99e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 小结\n这个技能大神们普遍都会，写得不到位之处多多提点。还希望这篇总结对大家有所帮助。\n最后献上这个CommitToJcenter的[github地址](https://github.com/ZhangQinglian/CommitToJcenter)。\n最后的最后放上我最敬佩的产品经理，哈哈。\n\n![Steven Paul Jobs](http://upload-images.jianshu.io/upload_images/2702499-0f57daa362c8a84e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","source":"_posts/upload-jcenter.md","raw":"---\ntitle: Android Studio发布library到Jcenter\ndate: 2016-08-12 09:38:17\ntags: android\ncover: http://upload-images.jianshu.io/upload_images/2702499-b829cacc3324bdc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\n---\n\n# 前言  \n各位码友不知道有没有发现，不知道从何时，Android Studio的Gradle构建系统就已经把Jcenter作为默认的远程仓库了，如下：  \n\n```gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.1.2'\n    }\n}\n```\n\n而这样做的好处就是我们只需要在dependencies脚本块中加入对应lib即可使用远程仓库，而不需要再像eclipse那样苦苦寻找jar包。\n<!-- more -->\n```gradle\ndependencies {\n    compile fileTree(include: ['*.jar'], dir: 'libs')\n    testCompile 'junit:junit:4.12'\n    compile 'com.android.support:appcompat-v7:23.+'\n}\n```\n\n你应该在github上也看到过要使用别人的开源库只需要往dependencies脚本块中添加一行代码即可：  \n\n![github](http://upload-images.jianshu.io/upload_images/2702499-42abe9c7fae76121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n想象一下，别人往他们的build.gradle中添加了一行代码就可以使用你的开源库了，这是一件多么令人兴奋的事情。那么接下来我们就把想象变为现实，学习一下怎么将自己的Android Studio Library提交到Jcenter供他人使用。\n\n-----\n\n# Bintray\n首先我们要了解一个叫做[bintray](https://bintray.com/)的网站，它和github类似也是用来管理文件的，只不过它管理的是二进制文件，Jcenter就是它众多仓库中的一员。\n\n首先需要注册成为这个网站的用户，接着进入profile界面：\n![profile](http://upload-images.jianshu.io/upload_images/2702499-8edca1463c8d4c4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击Edit\n\n\n![Edit](http://upload-images.jianshu.io/upload_images/2702499-0a52b0f26a391f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n选择API Key\n![API Key](http://upload-images.jianshu.io/upload_images/2702499-435ac7a15ac873a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这里的API Key和你之前注册的用户名在后面会用到。\n\n-----\n# 配置\n接着我们新建一个叫做CommitToJcenter的Android工程，并且添加一个叫做jad的android library模块,这个jad就是我们后面要提交到Jcenter的模块。\n\n\n![project](http://upload-images.jianshu.io/upload_images/2702499-1b9486f540a998d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n然后在工程目录下local.properties中添加如下内容：\n\n```properties\nbintray.user=***\nbintray.apikey=***\n```\n上面的usert填你注册时候的用户名，apikey就是上面拿到的那个。\n\n接着在工程目录下的**build.gradle**中添加如下内容：\n\n```gradle\nbuildscript {\n    repositories {\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:2.1.2'\n\n        //添加一下两个classpath\n        // for jcenter\n        // version: https://bintray.com/jfrog/jfrog-jars/gradle-bintray-plugin\n        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'\n        // version: https://bintray.com/dcendents/gradle-plugins/com.github.dcendents%3Aandroid-maven-gradle-plugin\n        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.3'\n    }\n}\n\n...\n```\n\n接着进入**jad**目录，在**build.gradle**中添加如下内容：\n\n```gradle\n...\n\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\n\nversion = \"1.0\" //版本号，每次提交到Jcenter都要修改\ndef siteUrl = *** // project homepage\ndef gitUrl = ***  // project git\ngroup = \"com.zql.android\"\n\ninstall {\n    repositories.mavenInstaller {\n        // This generates POM.xml with proper parameters\n        pom {\n            project {\n                packaging 'aar'\n                name 'Just a demo for jcenter'\n                url siteUrl\n                licenses {\n                    license {\n                        name 'The Apache Software License, Version 2.0'\n                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'\n                    }\n                }\n                developers {\n                    developer {\n                        id *** //Jcenter id\n                        name *** //Jcenter name\n                        email *** //e-mail\n                    }\n                }\n                scm {\n                    connection gitUrl\n                    developerConnection gitUrl\n                    url siteUrl\n                }\n            }\n        }\n    }\n}\n\n\ntask sourcesJar(type: Jar) {\n    from android.sourceSets.main.java.srcDirs\n    classifier = 'sources'\n}\n\n\ntask javadoc(type: Javadoc) {\n    source = android.sourceSets.main.java.srcDirs\n    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))\n}\n\n\ntask javadocJar(type: Jar, dependsOn: javadoc) {\n    classifier = 'javadoc'\n    from javadoc.destinationDir\n}\n\nartifacts {\n    archives javadocJar\n    archives sourcesJar\n}\n\nProperties properties = new Properties()\nproperties.load(project.rootProject.file('local.properties').newDataInputStream())\nbintray {\n    user = properties.getProperty(\"bintray.user\")\n    key = properties.getProperty(\"bintray.apikey\")\n    configurations = ['archives']\n    pkg {\n        repo = \"maven\"\n        name = \"jad\" // project name in jcenter\n        websiteUrl = siteUrl\n        vcsUrl = gitUrl\n        licenses = [\"Apache-2.0\"]\n        publish = true\n    }\n}\n```\n\n当做完以上几步后所有的配置工作就完成了，这时候选择sync一下你的工程，建议在翻墙的情况下sync，成功率会高一点。\n\n-----------\n\n# 提交\n接着在Gradle窗口找到如下几个task，并执行：\n- javadocJar\n- sourcesJar\n- install\n- bintrayUpload\n\n\n![gradle](http://upload-images.jianshu.io/upload_images/2702499-533046f6c436da02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n![gradle](http://upload-images.jianshu.io/upload_images/2702499-31c2fe030fd96b4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n提交结束后我们再次打开[bintray](https://bintray.com/)，在profile的last activity中可以看到这样的信息：\n\n\n![last activity](http://upload-images.jianshu.io/upload_images/2702499-4fdebda66957ce39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n点击jad进入模块界面,点击add to Jcenter：\n\n\n![add to jcenter](http://upload-images.jianshu.io/upload_images/2702499-373dbbe4e6c717de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接着填写一些相关申请信息即可，记得得是英文。我目前的通过率是100%。\n\n![request](http://upload-images.jianshu.io/upload_images/2702499-13f6fdab4fb08960.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n接着就是等待了，差不多一天时间就能得到答复。\n\n\n![response](http://upload-images.jianshu.io/upload_images/2702499-f9ffbca647f83632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\nOK,进去了，这时候我们已经可以在其他项目中使用我们提交的模块了。\n\n-----\n\n# 使用\n\n上面我们新建了jad模块就直接提交了，并没有写代码，所以也不好在其他工程测试。接下来我们添加一个类JAD.java\n\n```java\npackage android.zql.com.jad;\n\nimport android.content.Context;\nimport android.widget.Toast;\n\n/**\n * Created by scott on 8/11/16.\n */\npublic final class JAD {\n\n    public static final void sayHello(Context context){\n        Toast.makeText(context,\"hello man\",Toast.LENGTH_LONG).show();\n    }\n}\n```\n很简单，使用Toast弹出Hello man这句话。\n由于第一次已经被允许加入Jcenter了，所以以后的提交都会默认加入Jcenter。接着我们修改一下这次我们需要提交的版本号为1.0.1：\n\n```gradle\napply plugin: 'com.github.dcendents.android-maven'\napply plugin: 'com.jfrog.bintray'\nversion = \"1.0.1\"\n```\n然后执行以下四步：\n- javadocJar\n- sourcesJar\n- install\n- bintrayUpload\n\n执行完成后我们看下[bintray](https://bintray.com/)中的jad:\n\n我们刚提交的1.0.1已经出现在这里了，\n![1.0.0](http://upload-images.jianshu.io/upload_images/2702499-2b0ea00c02876595.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n这边给出了jad在gradle中的使用方法，是不是很熟悉？\n![gradle usage](http://upload-images.jianshu.io/upload_images/2702499-94200416061d1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下面我们就在项目中使用jad吧，在项目的build.gradle中添加如下代码：\n```gradle\ndependencies {\n    ...\n    compile 'com.zql.android:jad:1.0.1'\n}\n```\n在Activity中使用：\n```java\n  @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        JAD.sayHello(this);\n    }\n```\n运行结果如下：\n\n![运行结果](http://upload-images.jianshu.io/upload_images/2702499-cece63e6f12e99e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 小结\n这个技能大神们普遍都会，写得不到位之处多多提点。还希望这篇总结对大家有所帮助。\n最后献上这个CommitToJcenter的[github地址](https://github.com/ZhangQinglian/CommitToJcenter)。\n最后的最后放上我最敬佩的产品经理，哈哈。\n\n![Steven Paul Jobs](http://upload-images.jianshu.io/upload_images/2702499-0f57daa362c8a84e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n","slug":"upload-jcenter","published":1,"updated":"2024-08-21T03:16:19.787Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vz002m5p6t5gyvhhe9","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>各位码友不知道有没有发现，不知道从何时，Android Studio的Gradle构建系统就已经把Jcenter作为默认的远程仓库了，如下：  </p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.android.tools.build:gradle:2.1.2&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而这样做的好处就是我们只需要在dependencies脚本块中加入对应lib即可使用远程仓库，而不需要再像eclipse那样苦苦寻找jar包。</p>\n<span id=\"more\"></span>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(<span class=\"keyword\">include</span>: [<span class=\"string\">&#x27;*.jar&#x27;</span>], dir: <span class=\"string\">&#x27;libs&#x27;</span>)</span><br><span class=\"line\">    testCompile <span class=\"string\">&#x27;junit:junit:4.12&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&#x27;com.android.support:appcompat-v7:23.+&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你应该在github上也看到过要使用别人的开源库只需要往dependencies脚本块中添加一行代码即可：  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-42abe9c7fae76121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"github\"></p>\n<p>想象一下，别人往他们的build.gradle中添加了一行代码就可以使用你的开源库了，这是一件多么令人兴奋的事情。那么接下来我们就把想象变为现实，学习一下怎么将自己的Android Studio Library提交到Jcenter供他人使用。</p>\n<hr>\n<h1 id=\"Bintray\"><a href=\"#Bintray\" class=\"headerlink\" title=\"Bintray\"></a>Bintray</h1><p>首先我们要了解一个叫做<a href=\"https://bintray.com/\">bintray</a>的网站，它和github类似也是用来管理文件的，只不过它管理的是二进制文件，Jcenter就是它众多仓库中的一员。</p>\n<p>首先需要注册成为这个网站的用户，接着进入profile界面：<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-8edca1463c8d4c4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"profile\"></p>\n<p>点击Edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-0a52b0f26a391f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Edit\"></p>\n<p>选择API Key<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-435ac7a15ac873a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"API Key\"></p>\n<p>这里的API Key和你之前注册的用户名在后面会用到。</p>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>接着我们新建一个叫做CommitToJcenter的Android工程，并且添加一个叫做jad的android library模块,这个jad就是我们后面要提交到Jcenter的模块。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-1b9486f540a998d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"project\"></p>\n<p>然后在工程目录下local.properties中添加如下内容：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bintray.user</span>=<span class=\"string\">***</span></span><br><span class=\"line\"><span class=\"attr\">bintray.apikey</span>=<span class=\"string\">***</span></span><br></pre></td></tr></table></figure>\n<p>上面的usert填你注册时候的用户名，apikey就是上面拿到的那个。</p>\n<p>接着在工程目录下的<strong>build.gradle</strong>中添加如下内容：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.android.tools.build:gradle:2.1.2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加一下两个classpath</span></span><br><span class=\"line\">        <span class=\"comment\">// for jcenter</span></span><br><span class=\"line\">        <span class=\"comment\">// version: https://bintray.com/jfrog/jfrog-jars/gradle-bintray-plugin</span></span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// version: https://bintray.com/dcendents/gradle-plugins/com.github.dcendents%3Aandroid-maven-gradle-plugin</span></span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.github.dcendents:android-maven-gradle-plugin:1.3&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>接着进入<strong>jad</strong>目录，在<strong>build.gradle</strong>中添加如下内容：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.github.dcendents.android-maven&#x27;</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.jfrog.bintray&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">version = <span class=\"string\">&quot;1.0&quot;</span> <span class=\"comment\">//版本号，每次提交到Jcenter都要修改</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> siteUrl = *** <span class=\"comment\">// project homepage</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> gitUrl = ***  <span class=\"comment\">// project git</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> = <span class=\"string\">&quot;com.zql.android&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">install &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span>.mavenInstaller &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This generates POM.xml with proper parameters</span></span><br><span class=\"line\">        pom &#123;</span><br><span class=\"line\">            <span class=\"keyword\">project</span> &#123;</span><br><span class=\"line\">                packaging <span class=\"string\">&#x27;aar&#x27;</span></span><br><span class=\"line\">                name <span class=\"string\">&#x27;Just a demo for jcenter&#x27;</span></span><br><span class=\"line\">                url siteUrl</span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        name <span class=\"string\">&#x27;The Apache Software License, Version 2.0&#x27;</span></span><br><span class=\"line\">                        url <span class=\"string\">&#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id *** <span class=\"comment\">//Jcenter id</span></span><br><span class=\"line\">                        name *** <span class=\"comment\">//Jcenter name</span></span><br><span class=\"line\">                        email *** <span class=\"comment\">//e-mail</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection gitUrl</span><br><span class=\"line\">                    developerConnection gitUrl</span><br><span class=\"line\">                    url siteUrl</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> sourcesJar(type: Jar) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span> android.<span class=\"keyword\">sourceSets</span>.main.java.srcDirs</span><br><span class=\"line\">    classifier = <span class=\"string\">&#x27;sources&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> javadoc(type: Javadoc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">source</span> = android.<span class=\"keyword\">sourceSets</span>.main.java.srcDirs</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> += <span class=\"keyword\">project</span>.files(android.getBootClasspath().<span class=\"keyword\">join</span>(<span class=\"keyword\">File</span>.pathSeparator))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">&#x27;javadoc&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> javadoc.<span class=\"keyword\">destinationDir</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">artifacts</span> &#123;</span><br><span class=\"line\">    archives javadocJar</span><br><span class=\"line\">    archives sourcesJar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Properties properties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">properties.load(<span class=\"keyword\">project</span>.rootProject.<span class=\"keyword\">file</span>(<span class=\"string\">&#x27;local.properties&#x27;</span>).newDataInputStream())</span><br><span class=\"line\">bintray &#123;</span><br><span class=\"line\">    user = properties.getProperty(<span class=\"string\">&quot;bintray.user&quot;</span>)</span><br><span class=\"line\">    key = properties.getProperty(<span class=\"string\">&quot;bintray.apikey&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">configurations</span> = [<span class=\"string\">&#x27;archives&#x27;</span>]</span><br><span class=\"line\">    pkg &#123;</span><br><span class=\"line\">        repo = <span class=\"string\">&quot;maven&quot;</span></span><br><span class=\"line\">        name = <span class=\"string\">&quot;jad&quot;</span> <span class=\"comment\">// project name in jcenter</span></span><br><span class=\"line\">        websiteUrl = siteUrl</span><br><span class=\"line\">        vcsUrl = gitUrl</span><br><span class=\"line\">        licenses = [<span class=\"string\">&quot;Apache-2.0&quot;</span>]</span><br><span class=\"line\">        publish = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当做完以上几步后所有的配置工作就完成了，这时候选择sync一下你的工程，建议在翻墙的情况下sync，成功率会高一点。</p>\n<hr>\n<h1 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h1><p>接着在Gradle窗口找到如下几个task，并执行：</p>\n<ul>\n<li>javadocJar</li>\n<li>sourcesJar</li>\n<li>install</li>\n<li>bintrayUpload</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-533046f6c436da02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-31c2fe030fd96b4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle\"></p>\n<p>提交结束后我们再次打开<a href=\"https://bintray.com/\">bintray</a>，在profile的last activity中可以看到这样的信息：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-4fdebda66957ce39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"last activity\"></p>\n<p>点击jad进入模块界面,点击add to Jcenter：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-373dbbe4e6c717de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"add to jcenter\"></p>\n<p>接着填写一些相关申请信息即可，记得得是英文。我目前的通过率是100%。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-13f6fdab4fb08960.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"request\"></p>\n<p>接着就是等待了，差不多一天时间就能得到答复。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-f9ffbca647f83632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"response\"></p>\n<p>OK,进去了，这时候我们已经可以在其他项目中使用我们提交的模块了。</p>\n<hr>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>上面我们新建了jad模块就直接提交了，并没有写代码，所以也不好在其他工程测试。接下来我们添加一个类JAD.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> android.zql.com.jad;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by scott on 8/11/16.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JAD</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(Context context)</span>&#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;hello man&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，使用Toast弹出Hello man这句话。<br>由于第一次已经被允许加入Jcenter了，所以以后的提交都会默认加入Jcenter。接着我们修改一下这次我们需要提交的版本号为1.0.1：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.github.dcendents.android-maven&#x27;</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.jfrog.bintray&#x27;</span></span><br><span class=\"line\">version = <span class=\"string\">&quot;1.0.1&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后执行以下四步：</p>\n<ul>\n<li>javadocJar</li>\n<li>sourcesJar</li>\n<li>install</li>\n<li>bintrayUpload</li>\n</ul>\n<p>执行完成后我们看下<a href=\"https://bintray.com/\">bintray</a>中的jad:</p>\n<p>我们刚提交的1.0.1已经出现在这里了，<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-2b0ea00c02876595.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.0.0\"></p>\n<p>这边给出了jad在gradle中的使用方法，是不是很熟悉？<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-94200416061d1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle usage\"></p>\n<p>下面我们就在项目中使用jad吧，在项目的build.gradle中添加如下代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&#x27;com.zql.android:jad:1.0.1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Activity中使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">      setContentView(R.layout.activity_main);</span><br><span class=\"line\">      JAD.sayHello(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-cece63e6f12e99e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"运行结果\"></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>这个技能大神们普遍都会，写得不到位之处多多提点。还希望这篇总结对大家有所帮助。<br>最后献上这个CommitToJcenter的<a href=\"https://github.com/ZhangQinglian/CommitToJcenter\">github地址</a>。<br>最后的最后放上我最敬佩的产品经理，哈哈。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-0f57daa362c8a84e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Steven Paul Jobs\"></p>\n","excerpt":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>各位码友不知道有没有发现，不知道从何时，Android Studio的Gradle构建系统就已经把Jcenter作为默认的远程仓库了，如下：  </p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.android.tools.build:gradle:2.1.2&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而这样做的好处就是我们只需要在dependencies脚本块中加入对应lib即可使用远程仓库，而不需要再像eclipse那样苦苦寻找jar包。</p>","more":"<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"keyword\">fileTree</span>(<span class=\"keyword\">include</span>: [<span class=\"string\">&#x27;*.jar&#x27;</span>], dir: <span class=\"string\">&#x27;libs&#x27;</span>)</span><br><span class=\"line\">    testCompile <span class=\"string\">&#x27;junit:junit:4.12&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&#x27;com.android.support:appcompat-v7:23.+&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你应该在github上也看到过要使用别人的开源库只需要往dependencies脚本块中添加一行代码即可：  </p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-42abe9c7fae76121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"github\"></p>\n<p>想象一下，别人往他们的build.gradle中添加了一行代码就可以使用你的开源库了，这是一件多么令人兴奋的事情。那么接下来我们就把想象变为现实，学习一下怎么将自己的Android Studio Library提交到Jcenter供他人使用。</p>\n<hr>\n<h1 id=\"Bintray\"><a href=\"#Bintray\" class=\"headerlink\" title=\"Bintray\"></a>Bintray</h1><p>首先我们要了解一个叫做<a href=\"https://bintray.com/\">bintray</a>的网站，它和github类似也是用来管理文件的，只不过它管理的是二进制文件，Jcenter就是它众多仓库中的一员。</p>\n<p>首先需要注册成为这个网站的用户，接着进入profile界面：<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-8edca1463c8d4c4d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"profile\"></p>\n<p>点击Edit</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-0a52b0f26a391f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Edit\"></p>\n<p>选择API Key<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-435ac7a15ac873a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"API Key\"></p>\n<p>这里的API Key和你之前注册的用户名在后面会用到。</p>\n<hr>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><p>接着我们新建一个叫做CommitToJcenter的Android工程，并且添加一个叫做jad的android library模块,这个jad就是我们后面要提交到Jcenter的模块。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-1b9486f540a998d0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"project\"></p>\n<p>然后在工程目录下local.properties中添加如下内容：</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">bintray.user</span>=<span class=\"string\">***</span></span><br><span class=\"line\"><span class=\"attr\">bintray.apikey</span>=<span class=\"string\">***</span></span><br></pre></td></tr></table></figure>\n<p>上面的usert填你注册时候的用户名，apikey就是上面拿到的那个。</p>\n<p>接着在工程目录下的<strong>build.gradle</strong>中添加如下内容：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">buildscript</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span> &#123;</span><br><span class=\"line\">        jcenter()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.android.tools.build:gradle:2.1.2&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加一下两个classpath</span></span><br><span class=\"line\">        <span class=\"comment\">// for jcenter</span></span><br><span class=\"line\">        <span class=\"comment\">// version: https://bintray.com/jfrog/jfrog-jars/gradle-bintray-plugin</span></span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// version: https://bintray.com/dcendents/gradle-plugins/com.github.dcendents%3Aandroid-maven-gradle-plugin</span></span><br><span class=\"line\">        <span class=\"keyword\">classpath</span> <span class=\"string\">&#x27;com.github.dcendents:android-maven-gradle-plugin:1.3&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>接着进入<strong>jad</strong>目录，在<strong>build.gradle</strong>中添加如下内容：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.github.dcendents.android-maven&#x27;</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.jfrog.bintray&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">version = <span class=\"string\">&quot;1.0&quot;</span> <span class=\"comment\">//版本号，每次提交到Jcenter都要修改</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> siteUrl = *** <span class=\"comment\">// project homepage</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> gitUrl = ***  <span class=\"comment\">// project git</span></span><br><span class=\"line\"><span class=\"keyword\">group</span> = <span class=\"string\">&quot;com.zql.android&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">install &#123;</span><br><span class=\"line\">    <span class=\"keyword\">repositories</span>.mavenInstaller &#123;</span><br><span class=\"line\">        <span class=\"comment\">// This generates POM.xml with proper parameters</span></span><br><span class=\"line\">        pom &#123;</span><br><span class=\"line\">            <span class=\"keyword\">project</span> &#123;</span><br><span class=\"line\">                packaging <span class=\"string\">&#x27;aar&#x27;</span></span><br><span class=\"line\">                name <span class=\"string\">&#x27;Just a demo for jcenter&#x27;</span></span><br><span class=\"line\">                url siteUrl</span><br><span class=\"line\">                licenses &#123;</span><br><span class=\"line\">                    license &#123;</span><br><span class=\"line\">                        name <span class=\"string\">&#x27;The Apache Software License, Version 2.0&#x27;</span></span><br><span class=\"line\">                        url <span class=\"string\">&#x27;http://www.apache.org/licenses/LICENSE-2.0.txt&#x27;</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                developers &#123;</span><br><span class=\"line\">                    developer &#123;</span><br><span class=\"line\">                        id *** <span class=\"comment\">//Jcenter id</span></span><br><span class=\"line\">                        name *** <span class=\"comment\">//Jcenter name</span></span><br><span class=\"line\">                        email *** <span class=\"comment\">//e-mail</span></span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                scm &#123;</span><br><span class=\"line\">                    connection gitUrl</span><br><span class=\"line\">                    developerConnection gitUrl</span><br><span class=\"line\">                    url siteUrl</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> sourcesJar(type: Jar) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">from</span> android.<span class=\"keyword\">sourceSets</span>.main.java.srcDirs</span><br><span class=\"line\">    classifier = <span class=\"string\">&#x27;sources&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> javadoc(type: Javadoc) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">source</span> = android.<span class=\"keyword\">sourceSets</span>.main.java.srcDirs</span><br><span class=\"line\">    <span class=\"keyword\">classpath</span> += <span class=\"keyword\">project</span>.files(android.getBootClasspath().<span class=\"keyword\">join</span>(<span class=\"keyword\">File</span>.pathSeparator))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">task</span> javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class=\"line\">    classifier = <span class=\"string\">&#x27;javadoc&#x27;</span></span><br><span class=\"line\">    <span class=\"keyword\">from</span> javadoc.<span class=\"keyword\">destinationDir</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">artifacts</span> &#123;</span><br><span class=\"line\">    archives javadocJar</span><br><span class=\"line\">    archives sourcesJar</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Properties properties = <span class=\"keyword\">new</span> Properties()</span><br><span class=\"line\">properties.load(<span class=\"keyword\">project</span>.rootProject.<span class=\"keyword\">file</span>(<span class=\"string\">&#x27;local.properties&#x27;</span>).newDataInputStream())</span><br><span class=\"line\">bintray &#123;</span><br><span class=\"line\">    user = properties.getProperty(<span class=\"string\">&quot;bintray.user&quot;</span>)</span><br><span class=\"line\">    key = properties.getProperty(<span class=\"string\">&quot;bintray.apikey&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">configurations</span> = [<span class=\"string\">&#x27;archives&#x27;</span>]</span><br><span class=\"line\">    pkg &#123;</span><br><span class=\"line\">        repo = <span class=\"string\">&quot;maven&quot;</span></span><br><span class=\"line\">        name = <span class=\"string\">&quot;jad&quot;</span> <span class=\"comment\">// project name in jcenter</span></span><br><span class=\"line\">        websiteUrl = siteUrl</span><br><span class=\"line\">        vcsUrl = gitUrl</span><br><span class=\"line\">        licenses = [<span class=\"string\">&quot;Apache-2.0&quot;</span>]</span><br><span class=\"line\">        publish = <span class=\"keyword\">true</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当做完以上几步后所有的配置工作就完成了，这时候选择sync一下你的工程，建议在翻墙的情况下sync，成功率会高一点。</p>\n<hr>\n<h1 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h1><p>接着在Gradle窗口找到如下几个task，并执行：</p>\n<ul>\n<li>javadocJar</li>\n<li>sourcesJar</li>\n<li>install</li>\n<li>bintrayUpload</li>\n</ul>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-533046f6c436da02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle\"></p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-31c2fe030fd96b4f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle\"></p>\n<p>提交结束后我们再次打开<a href=\"https://bintray.com/\">bintray</a>，在profile的last activity中可以看到这样的信息：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-4fdebda66957ce39.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"last activity\"></p>\n<p>点击jad进入模块界面,点击add to Jcenter：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-373dbbe4e6c717de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"add to jcenter\"></p>\n<p>接着填写一些相关申请信息即可，记得得是英文。我目前的通过率是100%。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-13f6fdab4fb08960.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"request\"></p>\n<p>接着就是等待了，差不多一天时间就能得到答复。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-f9ffbca647f83632.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"response\"></p>\n<p>OK,进去了，这时候我们已经可以在其他项目中使用我们提交的模块了。</p>\n<hr>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>上面我们新建了jad模块就直接提交了，并没有写代码，所以也不好在其他工程测试。接下来我们添加一个类JAD.java</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> android.zql.com.jad;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Toast;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Created by scott on 8/11/16.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JAD</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sayHello</span><span class=\"params\">(Context context)</span>&#123;</span><br><span class=\"line\">        Toast.makeText(context,<span class=\"string\">&quot;hello man&quot;</span>,Toast.LENGTH_LONG).show();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>很简单，使用Toast弹出Hello man这句话。<br>由于第一次已经被允许加入Jcenter了，所以以后的提交都会默认加入Jcenter。接着我们修改一下这次我们需要提交的版本号为1.0.1：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.github.dcendents.android-maven&#x27;</span></span><br><span class=\"line\">apply plugin: <span class=\"string\">&#x27;com.jfrog.bintray&#x27;</span></span><br><span class=\"line\">version = <span class=\"string\">&quot;1.0.1&quot;</span></span><br></pre></td></tr></table></figure>\n<p>然后执行以下四步：</p>\n<ul>\n<li>javadocJar</li>\n<li>sourcesJar</li>\n<li>install</li>\n<li>bintrayUpload</li>\n</ul>\n<p>执行完成后我们看下<a href=\"https://bintray.com/\">bintray</a>中的jad:</p>\n<p>我们刚提交的1.0.1已经出现在这里了，<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-2b0ea00c02876595.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"1.0.0\"></p>\n<p>这边给出了jad在gradle中的使用方法，是不是很熟悉？<br><img src=\"http://upload-images.jianshu.io/upload_images/2702499-94200416061d1072.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"gradle usage\"></p>\n<p>下面我们就在项目中使用jad吧，在项目的build.gradle中添加如下代码：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">dependencies</span> &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">compile</span> <span class=\"string\">&#x27;com.zql.android:jad:1.0.1&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在Activity中使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">      setContentView(R.layout.activity_main);</span><br><span class=\"line\">      JAD.sayHello(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>运行结果如下：</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-cece63e6f12e99e1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"运行结果\"></p>\n<h1 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h1><p>这个技能大神们普遍都会，写得不到位之处多多提点。还希望这篇总结对大家有所帮助。<br>最后献上这个CommitToJcenter的<a href=\"https://github.com/ZhangQinglian/CommitToJcenter\">github地址</a>。<br>最后的最后放上我最敬佩的产品经理，哈哈。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/2702499-0f57daa362c8a84e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"Steven Paul Jobs\"></p>"},{"title":"欢迎来到本小站","date":"2016-01-03T14:57:24.000Z","_content":"\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/375ebcdfea8842d5c023e569ca999d9c.jpg)","source":"_posts/welcome.md","raw":"---\ntitle: 欢迎来到本小站\ndate: 2016-01-03 22:57:24\ntags:\n---\n\n![](https://blog-1256162814.cos.ap-nanjing.myqcloud.com/375ebcdfea8842d5c023e569ca999d9c.jpg)","slug":"welcome","published":1,"updated":"2024-08-21T03:16:19.787Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vz002p5p6tfgohalrf","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/375ebcdfea8842d5c023e569ca999d9c.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p><img src=\"https://blog-1256162814.cos.ap-nanjing.myqcloud.com/375ebcdfea8842d5c023e569ca999d9c.jpg\" alt=\"\"></p>\n"},{"title":"像素风","date":"2016-08-06T13:02:26.000Z","cover":"http://cdn.zqlxtt.cn/xiangsu1.gif","_content":"\n这是Tumblr上一个名为1041uuu的插画师绘制的像素画。这些作品经过像素处理后，好像一下回到“任天堂”“红白机”的年代，在“魂斗罗”里过关斩将，在“超级玛丽”中狂吃蘑菇。\n\n![](http://cdn.zqlxtt.cn/xiangsu1.gif)\n![](http://cdn.zqlxtt.cn/xiangsu2.gif)\n![](http://cdn.zqlxtt.cn.cn/xiangsu3.gif)\n![](http://cdn.zqlxtt.cn/xiangsu4.gif)\n![](http://cdn.zqlxtt.cn/xiangsu5.gif)\n![](http://cdn.zqlxtt.cn/xiangsu6.gif)\n![](http://cdn.zqlxtt.cn/xiangsu7.gif)\n![](http://cdn.zqlxtt.cn/xiangsu8.gif)\n![](http://cdn.zqlxtt.cn/xiangsu9.gif)\n","source":"_posts/xiangsuhua20160806.md","raw":"---\ntitle: 像素风\ndate: 2016-08-06 21:02:26\ntags: 插画\ncover: http://cdn.zqlxtt.cn/xiangsu1.gif\n---\n\n这是Tumblr上一个名为1041uuu的插画师绘制的像素画。这些作品经过像素处理后，好像一下回到“任天堂”“红白机”的年代，在“魂斗罗”里过关斩将，在“超级玛丽”中狂吃蘑菇。\n\n![](http://cdn.zqlxtt.cn/xiangsu1.gif)\n![](http://cdn.zqlxtt.cn/xiangsu2.gif)\n![](http://cdn.zqlxtt.cn.cn/xiangsu3.gif)\n![](http://cdn.zqlxtt.cn/xiangsu4.gif)\n![](http://cdn.zqlxtt.cn/xiangsu5.gif)\n![](http://cdn.zqlxtt.cn/xiangsu6.gif)\n![](http://cdn.zqlxtt.cn/xiangsu7.gif)\n![](http://cdn.zqlxtt.cn/xiangsu8.gif)\n![](http://cdn.zqlxtt.cn/xiangsu9.gif)\n","slug":"xiangsuhua20160806","published":1,"updated":"2024-08-21T03:16:19.787Z","comments":1,"layout":"post","photos":[],"_id":"cm03be2vz002r5p6tg8nz5rni","content":"<link rel=\"stylesheet\" class=\"aplayer-secondary-style-marker\" href=\"/assets/css/APlayer.min.css\"><script src=\"/assets/js/APlayer.min.js\" class=\"aplayer-secondary-script-marker\"></script><p>这是Tumblr上一个名为1041uuu的插画师绘制的像素画。这些作品经过像素处理后，好像一下回到“任天堂”“红白机”的年代，在“魂斗罗”里过关斩将，在“超级玛丽”中狂吃蘑菇。</p>\n<p><img src=\"http://cdn.zqlxtt.cn/xiangsu1.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu2.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn.cn/xiangsu3.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu4.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu5.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu6.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu7.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu8.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu9.gif\" alt=\"\"></p>\n","excerpt":"","more":"<p>这是Tumblr上一个名为1041uuu的插画师绘制的像素画。这些作品经过像素处理后，好像一下回到“任天堂”“红白机”的年代，在“魂斗罗”里过关斩将，在“超级玛丽”中狂吃蘑菇。</p>\n<p><img src=\"http://cdn.zqlxtt.cn/xiangsu1.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu2.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn.cn/xiangsu3.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu4.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu5.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu6.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu7.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu8.gif\" alt=\"\"><br><img src=\"http://cdn.zqlxtt.cn/xiangsu9.gif\" alt=\"\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/last-dance/lastdance.lrc","slug":"lastdance.lrc","post":"cm03be2vv001h5p6t67m38bhu","modified":0,"renderable":0}],"PostCategory":[],"PostTag":[{"post_id":"cm03be2vk00015p6t1gax1sfi","tag_id":"cm03be2vn00045p6tfgjj9utq","_id":"cm03be2vp000c5p6t0av2fmkb"},{"post_id":"cm03be2vm00035p6t3cnm8bc6","tag_id":"cm03be2vp000b5p6t2zvo30xf","_id":"cm03be2vq000h5p6t9wyh1yay"},{"post_id":"cm03be2vo00065p6t41ok1m8h","tag_id":"cm03be2vp000f5p6t7lydejag","_id":"cm03be2vq000l5p6t2l3nbqad"},{"post_id":"cm03be2vo00085p6tcea01j2b","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vr000p5p6tahl504pg"},{"post_id":"cm03be2vp000a5p6t9jn177u6","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vs000t5p6t1pxj83zn"},{"post_id":"cm03be2vp000d5p6tcfb63h5x","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vs000x5p6t36n2a4pb"},{"post_id":"cm03be2vp000e5p6t4ss151rw","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vt00115p6t3o1p4ufm"},{"post_id":"cm03be2vt00105p6td87k4i7a","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vt00135p6tg4rx9x7y"},{"post_id":"cm03be2vq000g5p6t46pa5jq6","tag_id":"cm03be2vs000z5p6t6l6oc7qs","_id":"cm03be2vu00195p6tc4jwezw5"},{"post_id":"cm03be2vq000g5p6t46pa5jq6","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vu001b5p6t0f2y7gpy"},{"post_id":"cm03be2vt00175p6t6zskfsfx","tag_id":"cm03be2vp000f5p6t7lydejag","_id":"cm03be2vu001e5p6tdaqdbqv7"},{"post_id":"cm03be2vu001a5p6tfxsu8hac","tag_id":"cm03be2vp000f5p6t7lydejag","_id":"cm03be2vv001g5p6t8n5qfn0c"},{"post_id":"cm03be2vq000i5p6t21qo2uiq","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vv001j5p6te1aq75ck"},{"post_id":"cm03be2vq000k5p6t7gy91ff4","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vv001k5p6tfsy613nz"},{"post_id":"cm03be2vq000k5p6t7gy91ff4","tag_id":"cm03be2vs000z5p6t6l6oc7qs","_id":"cm03be2vv001m5p6t3is740qj"},{"post_id":"cm03be2vq000m5p6t0dgcfd9f","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vv001o5p6tb9310z6y"},{"post_id":"cm03be2vq000m5p6t0dgcfd9f","tag_id":"cm03be2vv001i5p6t5g7tfm31","_id":"cm03be2vv001p5p6t3fhsa39f"},{"post_id":"cm03be2vq000m5p6t0dgcfd9f","tag_id":"cm03be2vv001l5p6t6r4z8c4p","_id":"cm03be2vv001r5p6tgfrm8j28"},{"post_id":"cm03be2vr000o5p6te6j87r4c","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vv001s5p6tagykeoyr"},{"post_id":"cm03be2vr000o5p6te6j87r4c","tag_id":"cm03be2vs000z5p6t6l6oc7qs","_id":"cm03be2vv001u5p6t0xcc9ebk"},{"post_id":"cm03be2vr000q5p6tgcre352i","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vv001v5p6t7a0jg2b6"},{"post_id":"cm03be2vr000q5p6tgcre352i","tag_id":"cm03be2vs000z5p6t6l6oc7qs","_id":"cm03be2vv001x5p6t09ohg4z7"},{"post_id":"cm03be2vs000s5p6tapel2y81","tag_id":"cm03be2vv001t5p6t93lege3e","_id":"cm03be2vv001y5p6teczs1yqs"},{"post_id":"cm03be2vs000s5p6tapel2y81","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vv00205p6t281ohskf"},{"post_id":"cm03be2vs000u5p6tdyukg30q","tag_id":"cm03be2vv001w5p6t59vm5n6s","_id":"cm03be2vv00215p6tgsh9d6tl"},{"post_id":"cm03be2vs000w5p6ta4a7270n","tag_id":"cm03be2vv001z5p6t4pnr0buk","_id":"cm03be2vw00235p6tc2uu59us"},{"post_id":"cm03be2vs000y5p6tgnci8img","tag_id":"cm03be2vw00225p6tfa3qcx46","_id":"cm03be2vw00255p6t3ls69dm5"},{"post_id":"cm03be2vt00125p6tajzd4i0t","tag_id":"cm03be2vv001l5p6t6r4z8c4p","_id":"cm03be2vw00275p6t89gtd630"},{"post_id":"cm03be2vt00145p6tenfj3xvl","tag_id":"cm03be2vw00265p6t45klcwy3","_id":"cm03be2vw00295p6t1s6f4nw9"},{"post_id":"cm03be2vt00165p6ta3v9607c","tag_id":"cm03be2vw00265p6t45klcwy3","_id":"cm03be2vw002b5p6tbhkzacfz"},{"post_id":"cm03be2vu001c5p6t738l3jw7","tag_id":"cm03be2vw002a5p6teyegar4w","_id":"cm03be2vw002d5p6t7f3p1yhf"},{"post_id":"cm03be2vu001f5p6t3f87e7l1","tag_id":"cm03be2vw002c5p6t1sz0cnct","_id":"cm03be2vw002f5p6thgzsf0zn"},{"post_id":"cm03be2vv001h5p6t67m38bhu","tag_id":"cm03be2vw002e5p6tdgen1h31","_id":"cm03be2vw002g5p6tabydg558"},{"post_id":"cm03be2vz002l5p6t84urbtp2","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2vz002o5p6t97mp1qud"},{"post_id":"cm03be2vy002h5p6t1fbghn9x","tag_id":"cm03be2vz002j5p6t4ftq7aks","_id":"cm03be2vz002q5p6tgwkn51h2"},{"post_id":"cm03be2vz002m5p6t5gyvhhe9","tag_id":"cm03be2vq000j5p6t5vbh9kkv","_id":"cm03be2w0002s5p6t99dr447r"},{"post_id":"cm03be2vz002k5p6t6ko27qst","tag_id":"cm03be2vz002n5p6t3li1fp3r","_id":"cm03be2w0002u5p6t7s8e1kun"},{"post_id":"cm03be2vz002r5p6tg8nz5rni","tag_id":"cm03be2w0002t5p6tfrci7hql","_id":"cm03be2w0002v5p6tdzb0fxji"}],"Tag":[{"name":"教育","_id":"cm03be2vn00045p6tfgjj9utq"},{"name":"‘教育’","_id":"cm03be2vp000b5p6t2zvo30xf"},{"name":"多媒体","_id":"cm03be2vp000f5p6t7lydejag"},{"name":"android","_id":"cm03be2vq000j5p6t5vbh9kkv"},{"name":"opengl","_id":"cm03be2vs000z5p6t6l6oc7qs"},{"name":"OpenGL ES","_id":"cm03be2vv001i5p6t5g7tfm31"},{"name":"EGL","_id":"cm03be2vv001l5p6t6r4z8c4p"},{"name":"player","_id":"cm03be2vv001t5p6t93lege3e"},{"name":"C","_id":"cm03be2vv001w5p6t59vm5n6s"},{"name":"Dart","_id":"cm03be2vv001z5p6t4pnr0buk"},{"name":"dart","_id":"cm03be2vw00225p6tfa3qcx46"},{"name":"flutter","_id":"cm03be2vw00265p6t45klcwy3"},{"name":"日常","_id":"cm03be2vw002a5p6teyegar4w"},{"name":"java","_id":"cm03be2vw002c5p6t1sz0cnct"},{"name":"音乐分享","_id":"cm03be2vw002e5p6tdgen1h31"},{"name":"直播技术","_id":"cm03be2vz002j5p6t4ftq7aks"},{"name":"网络编程","_id":"cm03be2vz002n5p6t3li1fp3r"},{"name":"插画","_id":"cm03be2w0002t5p6tfrci7hql"}]}}